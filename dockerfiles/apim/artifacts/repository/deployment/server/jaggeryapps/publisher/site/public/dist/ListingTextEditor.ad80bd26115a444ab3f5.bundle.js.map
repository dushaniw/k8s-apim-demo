{"version":3,"sources":["webpack:///./source/src/app/components/Apis/Details/Documents/TextEditor.jsx"],"names":["styles","appBar","position","flex","popupHeader","display","flexDirection","alignItems","splitWrapper","padding","docName","button","height","marginLeft","Transition","props","direction","TextEditor","intl","showAtOnce","apiType","history","docId","useContext","APIContext","api","isAPIProduct","useState","open","setOpen","EditorState","createEmpty","editorState","setEditorState","isUpdating","setIsUpdating","toggleOpen","updateDoc","listingPath","id","push","APIProduct","Api","getInlineContentOfDocument","then","doc","blocksFromHTML","convertFromHTML","text","state","ContentState","createFromBlockArray","contentBlocks","entityMap","createWithContent","catch","error","status","setState","apiNotFound","classes","onClick","disabled","isRestricted","isRevision","defaultMessage","fullScreen","onClose","TransitionComponent","square","className","color","aria-label","variant","restAPI","contentToSave","draftToHtml","convertToRaw","getCurrentContent","addInlineContentToDocument","response","Alert","info","obj","name","formatMessage","size","wrapperClassName","editorClassName","onEditorStateChange","newEditorState","propTypes","PropTypes","shape","isRequired","string","oneOf","CONSTS","API","bool","injectIntl","withRouter","withStyles"],"mappings":"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","file":"ListingTextEditor.ad80bd26115a444ab3f5.bundle.js","sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useContext } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Slide from '@material-ui/core/Slide';\nimport Icon from '@material-ui/core/Icon';\nimport Paper from '@material-ui/core/Paper';\nimport { EditorState, convertToRaw, ContentState, convertFromHTML } from 'draft-js';\nimport { Editor } from 'react-draft-wysiwyg';\nimport draftToHtml from 'draftjs-to-html';\nimport Api from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport Alert from 'AppComponents/Shared/Alert';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport { isRestricted } from 'AppData/AuthManager';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst styles = {\n    appBar: {\n        position: 'relative',\n    },\n    flex: {\n        flex: 1,\n    },\n    popupHeader: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    splitWrapper: {\n        padding: 0,\n    },\n    docName: {\n        alignItems: 'center',\n        display: 'flex',\n    },\n    button: {\n        height: 30,\n        marginLeft: 30,\n    },\n};\n\nfunction Transition(props) {\n    return <Slide direction='up' {...props} />;\n}\n\nfunction TextEditor(props) {\n    const {\n        intl, apiType, showAtOnce, history, docId,\n    } = props;\n    const { api, isAPIProduct } = useContext(APIContext);\n\n    const [open, setOpen] = useState(showAtOnce);\n\n    const [editorState, setEditorState] = useState(EditorState.createEmpty());\n    const [isUpdating, setIsUpdating] = useState(false);\n\n    const onEditorStateChange = (newEditorState) => {\n        setEditorState(newEditorState);\n    };\n    const toggleOpen = () => {\n        if (!open) updateDoc();\n\n        if (open && showAtOnce) {\n            const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n            const listingPath = `/${urlPrefix}/${api.id}/documents`;\n            history.push(listingPath);\n        }\n        setOpen(!open);\n    };\n    const addContentToDoc = () => {\n        const restAPI = isAPIProduct ? new APIProduct() : new Api();\n        setIsUpdating(true);\n        const contentToSave = draftToHtml(convertToRaw(editorState.getCurrentContent()));\n        const docPromise = restAPI.addInlineContentToDocument(api.id, docId, 'INLINE', contentToSave);\n        docPromise\n            .then((response) => {\n                Alert.info(`${response.obj.name} ${intl.formatMessage({\n                    id: 'Apis.Details.Documents.TextEditor.update.success.message',\n                    defaultMessage: 'updated successfully.',\n                })}`);\n                toggleOpen();\n                setIsUpdating(false);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                Alert.error(`${error} ${intl.formatMessage({\n                    id: 'Apis.Details.Documents.TextEditor.update.error.message',\n                    defaultMessage: 'update failed.',\n                })}`);\n                setIsUpdating(false);\n            });\n    };\n    const updateDoc = () => {\n        const restAPI = isAPIProduct ? new APIProduct() : new Api();\n\n        const docPromise = restAPI.getInlineContentOfDocument(api.id, docId);\n        docPromise\n            .then((doc) => {\n                const blocksFromHTML = convertFromHTML(doc.text);\n                const state = ContentState.createFromBlockArray(blocksFromHTML.contentBlocks, blocksFromHTML.entityMap);\n\n                setEditorState(EditorState.createWithContent(state));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ apiNotFound: true });\n                }\n            });\n    };\n\n    const { classes } = props;\n    return (\n        <div>\n            <Button onClick={toggleOpen} disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api) || api.isRevision}>\n                <Icon>description</Icon>\n                <FormattedMessage id='Apis.Details.Documents.TextEditor.edit.content' defaultMessage='Edit Content' />\n            </Button>\n            <Dialog fullScreen open={open} onClose={toggleOpen} TransitionComponent={Transition}>\n                <Paper square className={classes.popupHeader}>\n                    <IconButton color='inherit' onClick={toggleOpen} aria-label='Close'>\n                        <Icon>close</Icon>\n                    </IconButton>\n                    <Typography variant='h4' className={classes.docName}>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.TextEditor.edit.content.of'\n                            defaultMessage='Edit Content of'\n                        />{' '}\n                        \"{props.docName}\"\n                    </Typography>\n                    <Button className={classes.button} variant='contained' disabled={isUpdating} color='primary' onClick={addContentToDoc}>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.TextEditor.update.content.button'\n                            defaultMessage='Update Content'\n                        />\n                        {isUpdating && <CircularProgress size={24} />}\n                    </Button>\n                    <Button className={classes.button} onClick={toggleOpen}>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.TextEditor.cancel.button'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                </Paper>\n                <div className={classes.splitWrapper}>\n                    <Editor\n                        editorState={editorState}\n                        wrapperClassName='draftjs-wrapper'\n                        editorClassName='draftjs-editor'\n                        onEditorStateChange={onEditorStateChange}\n                    />\n                </div>\n            </Dialog>\n        </div>\n    );\n}\n\nTextEditor.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    docId: PropTypes.string.isRequired,\n    apiType: PropTypes.oneOf([Api.CONSTS.API, Api.CONSTS.APIProduct]).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    showAtOnce: PropTypes.bool.isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n        apiType: PropTypes.oneOf([Api.CONSTS.API, Api.CONSTS.APIProduct]),\n    }).isRequired,\n};\n\nexport default injectIntl(withRouter(withStyles(styles)(TextEditor)));\n"],"sourceRoot":""}