{"version":3,"sources":["webpack:///./source/src/app/components/Shared/RevisionContext.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/endpointUtils.js","webpack:///./source/src/app/components/Apis/Details/Resources/components/APIRateLimiting.jsx","webpack:///./source/src/app/data/Comments.js","webpack:///./source/src/app/components/Shared/LeftMenuItem.jsx","webpack:///./source/src/app/components/Apis/Listing/components/ImageGenerator/ThumbnailView.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/Endpoints.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/KeyManager.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GeneralConfiguration/Certificates.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/AddOperation.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/SaveOperations.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/Create.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/CreateEditForm.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/MarkdownEditor.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/Edit.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/Resources.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/parameterUtils.js","webpack:///./source/src/app/components/Apis/Details/Endpoints/GenericEndpoint.jsx","webpack:///./source/src/app/components/Apis/Details/Comments/CommentAdd.jsx","webpack:///./source/src/app/components/Apis/Details/APIDefinition/ImportDefinition.jsx","webpack:///./source/src/app/components/Apis/Details/index.jsx","webpack:///./source/src/app/components/Base/Errors/AuthorizedError.jsx","webpack:///./source/src/app/components/Apis/Details/components/LastUpdatedTime.jsx","webpack:///./source/src/app/components/Apis/Details/components/leftMenu/DevelopSectionMenu.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Overview.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Resources.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Operations.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/ProductResources.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Configuration.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Policies.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/CustomizedStepper.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/MetaData.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/BusinessInformation.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Endpoints.jsx","webpack:///./source/src/app/components/Apis/Details/NewOverview/Topics.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/DesignConfigurations.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/DefaultVersion.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/DescriptionEditor.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/AccessControl.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/StoreVisibility.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/Tags.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/Social.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/APICategories.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/RuntimeConfiguration.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/ResponseCaching.jsx","webpack:///./source/src/app/data/UserStateUtils.js","webpack:///./source/src/app/components/Apis/Details/Configuration/components/CORSConfiguration.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/SchemaValidation.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/MaxBackendTps.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/Flow.jsx","webpack:///./source/src/app/components/Apis/Details/MediationPolicies/EditMediationPolicy.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/APISecurity/APISecurity.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/APISecurity/components/ApplicationLevel.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/AuthorizationHeader.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/APISecurity/components/TransportLevel.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GeneralConfiguration/UploadCertificate.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GeneralConfiguration/SelectEndpoint.jsx","webpack:///./source/src/app/components/Apis/Create/Components/SelectPolicies.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/Transports.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/QueryAnalysis.jsx","webpack:///./source/src/app/components/Apis/Details/QueryAnalysis/UpdateComplexity.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/Topics.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/AsyncOperation.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/DescriptionAndSummary.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/OperationGovernance.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/Parameters.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/ListParameters.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/EditParameter.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/PayloadProperties.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/AddPayloadProperty.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/ListPayloadProperties.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/EditPayloadProperty.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/Runtime.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/GroupOfOperations.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/asyncapi/SubscriptionConfig.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/RuntimeConfigurationWebSocket.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/APILevelRateLimitingPolicies.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/LifeCycle.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/LifeCycleUpdate.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/LifeCycleImage.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/CheckboxLabels.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/LifecyclePending.jsx","webpack:///./source/src/app/components/Apis/Details/LifeCycle/LifeCycleHistory.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/index.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/Listing.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/GoToEdit.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/Delete.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/DeleteMultiple.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/Download.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/View.jsx","webpack:///./source/src/app/components/Apis/Details/Documents/EditContent.jsx","webpack:///./source/src/app/components/Apis/Details/Operations/Operations.jsx","webpack:///./source/src/app/components/Apis/Details/Operations/Operation.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/APIOperations.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/Operation.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/DescriptionAndSummary.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/OperationGovernance.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/AWSLambdaSettings.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/Parameters.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/AddParameter.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/ListParameters.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/RequestBody.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/EditParameter.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/SOAPToREST/SOAPToRESTListing.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/SOAPToREST/PolicyEditor.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/operationComponents/SOAPToREST/CloseConfirmation.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/GroupOfOperations.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/SpecErrors.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/GoToDefinitionLink.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/components/OperationsSelector.jsx","webpack:///./source/src/app/components/Apis/Details/ProductResources/APIProductOperations.jsx","webpack:///./source/src/app/components/Apis/Details/ProductResources/ProductResourcesEdit.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/Endpoints.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/NewEndpointCreate.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/EndpointOverview.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/Prototype/InlineEndpoints.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/Prototype/GenericResource.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GeneralConfiguration.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/LoadbalanceFailoverConfig.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/EndpointListing.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GenericEndpointAdd.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/LoadBalanceConfig.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/AdvancedConfig/AdvanceEndpointConfig.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GeneralConfiguration/EndpointSecurity.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/GeneralConfiguration/EditableParameterRow.jsx","webpack:///./source/src/app/components/Apis/Details/Endpoints/AWSLambda/Credentials.jsx","webpack:///./source/src/app/components/Apis/Details/Environments/Environments.jsx","webpack:///./source/src/app/components/Apis/Details/Environments/DisplayDevportal.jsx","webpack:///./source/src/app/components/Apis/Details/Environments/DeploymentOnbording.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/Subscriptions.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/SubscriptionsTable.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/Invoice.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/SubscriptionPoliciesManage.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/SubscriptionAvailability.jsx","webpack:///./source/src/app/components/Apis/Details/Subscriptions/TenantAutocomplete.jsx","webpack:///./source/src/app/components/Apis/Details/Comments/Comments.jsx","webpack:///./source/src/app/components/Apis/Details/Comments/Comment.jsx","webpack:///./source/src/app/components/Apis/Details/Comments/CommentEdit.jsx","webpack:///./source/src/app/components/Apis/Details/Comments/CommentOptions.jsx","webpack:///./source/src/app/components/Apis/Details/Scopes/index.jsx","webpack:///./source/src/app/components/Apis/Details/Scopes/CreateScope.jsx","webpack:///./source/src/app/components/Apis/Details/Scopes/EditScope.jsx","webpack:///./source/src/app/components/Apis/Details/Scopes/Scopes.jsx","webpack:///./source/src/app/components/Apis/Details/Scopes/Delete.jsx","webpack:///./source/src/app/components/Apis/Details/Security/index.jsx","webpack:///./source/src/app/components/Apis/Details/Security/SecurityOverview.jsx","webpack:///./source/src/app/components/Apis/Details/Security/AddPolicy.jsx","webpack:///./source/src/app/components/Apis/Details/APIDefinition/APIDefinition.jsx","webpack:///./source/src/app/components/Apis/Details/APIDefinition/APISecurityAudit.jsx","webpack:///./source/src/app/components/Apis/Details/APIDefinition/DefinitionOutdated.jsx","webpack:///./source/src/app/components/Apis/Details/APIDefinition/WSDL.jsx","webpack:///./source/src/app/components/Apis/Details/components/APIDetailsTopMenu.jsx","webpack:///./source/src/app/components/Apis/Details/GoTo/GoTo.jsx","webpack:///./source/src/app/components/Apis/Details/GoTo/RouteMappings.jsx","webpack:///./source/src/app/components/Apis/Details/components/CreateNewVersionButton.jsx","webpack:///./source/src/app/components/Apis/Details/BusinessInformation/BusinessInformation.jsx","webpack:///./source/src/app/components/Apis/Details/Properties/Properties.jsx","webpack:///./source/src/app/components/Apis/Details/Properties/EditableRow.jsx","webpack:///./source/src/app/components/Apis/Details/Monetization/index.jsx","webpack:///./source/src/app/components/Apis/Details/Monetization/BusinessPlans.jsx","webpack:///./source/src/app/components/Apis/Details/ExternalStores/ExternalStores.jsx","webpack:///./source/src/app/components/Apis/Details/NewVersion/NewVersion.jsx","webpack:///./source/src/app/components/Apis/Details/TryOut/TryOutConsole.jsx","webpack:///./source/src/app/components/Apis/Details/TryOut/SwaggerUI.jsx","webpack:///./source/src/app/components/Apis/Details/TryOut/swagger-ui-overrides.css?d85a","webpack:///./source/src/app/components/Apis/Details/TryOut/swagger-ui-overrides.css","webpack:///./source/src/app/components/Shared/InlineMessage.jsx","webpack:///./source/src/app/components/Shared/CustomSplitButton.jsx","webpack:///./source/src/app/components/Apis/Details/Resources/operationUtils.js","webpack:///./source/src/app/components/Shared/WrappedExpansionPanel.jsx","webpack:///./source/src/app/components/Apis/Details/Configuration/components/APISecurity/components/apiSecurityConstants.js"],"names":["RevisionContext","React","createContext","useRevisionContext","useContext","RevisionContextProvider","Provider","getEndpointTypeProperty","type","category","mergeEndpoints","endpointConfig","endpoint_type","production","production_endpoints","sandbox","sandbox_endpoints","concat","production_failovers","sandbox_failovers","getEndpointTemplateByType","endpointType","isAddressEndpoint","currentEndpointConfig","tmpEndpointConfig","Array","isArray","failOver","algoClassName","algoCombo","sessionManagement","sessionTimeOut","endpointsToList","config","cloneDeep","endpoints","push","getEndpointConfigByImpl","implementationType","implementation_status","url","createEndpointConfig","access_method","amznAccessKey","amznSecretKey","amznRegion","getEndpointTemplate","template_not_supported","RateLimitingLevels","API","RESOURCE","useStyles","makeStyles","theme","focusLabel","boxShadow","paddingRight","spacing","APIRateLimiting","props","updateAPI","operationRateLimits","onChange","currentApiThrottlingPolicy","value","isAPIProduct","setFocusOperationLevel","focusOperationLevel","classes","useState","apiThrottlingPolicy","setApiThrottlingPolicy","isSaving","setIsSaving","isResourceLevel","rateLimitingLevel","apiFromContext","useAPI","useEffect","operationRateLimitMessage","variant","gutterBottom","display","container","direction","justify","alignItems","item","md","xs","ml","fontSize","title","aria-label","placement","interactive","light","component","event","userSelection","target","row","control","color","disabled","isRestricted","label","labelPlacement","className","minHeight","borderLeft","pl","id","select","helperText","margin","map","rateLimit","key","name","displayName","onClick","finally","size","defaultProps","propTypes","PropTypes","func","isRequired","oneOf","arrayOf","shape","disabledAction","string","bool","memo","Comments","parentId","content","kwargs","properties","Object","Utils","deepFreeze","_data","prototype","hasOwnProperty","call","replies","Resource","_requestMetaData","apiId","commentId","callback","promise","this","client","then","apis","deleteComment","catch","error","console","commentInfo","put_apis__apiId__comments__commentId_","body","comment","replyTo","APIClientFactory","getAPIClient","getCurrentEnvironment","CONST","API_CLIENT","addCommentToAPI","requestBody","limit","offset","getAllCommentsOfAPI","CONSTS","freeze","leftLInkText","palette","getContrastText","background","leftMenu","textTransform","custom","leftMenuTextStyle","width","textAlign","overflow","textOverflow","typography","body1","fontWeight","whiteSpace","leftLInkTextHead","leftLInkText_IconLeft","paddingLeft","LeftMenu","backgroundColor","leftMenuWidth","fontFamily","position","bottom","left","top","leftLInk","paddingTop","paddingBottom","height","caption","cursor","textDecoration","leftLInkOverview","leftLink_Icon","leftMenuIconSize","leftLink_IconLeft","noIcon","leftLInkText_NoText","diplay","selectedMenu","appBarSelected","LeftMenuItem","Icon","to","text","route","head","useTheme","strokeColor","iconSize","pathname","useLocation","menuPathPattern","RegExp","isSelected","match","classNames","cloneElement","icon","iconText","divider","number","appBar","element","history","listen","location","windowURL","window","URL","webkitURL","dropzoneStyles","border","borderRadius","padding","styles","acceptDrop","green","dropzone","primary","main","dropZoneWrapper","justifyContent","preview","rejectDrop","red","group","flexDirection","popupHeader","iconView","subtitle","marginRight","subtitleWrapper","marginTop","marginBottom","imageGenWrapper","backgroundSelection","actionBox","imageContainer","FindCategoryKeys","i","MaterialIcons","categories","length","icons","Transition","ThumbnailView","selectedIconUpdate","setState","backgroundIndexUpdate","action","intl","open","fileObj","api","state","selectedTab","colorUpdate","file","Alert","formatMessage","File","newIconJson","backgroundIndex","blob","Blob","JSON","stringify","uploadThumbnail","hex","thumbnail","selectedIcon","uploading","handleClick","bind","handleClose","revokeObjectURL","acceptedFile","cState","apiType","setImageUpdate","Api","APIProduct","addAPIProductThumbnail","addAPIThumbnail","info","createObjectURL","isEditable","imageUpdate","colorPairs","backgrounds","TransitionComponent","aria-labelledby","disableBackdropClick","onClose","fullWidth","maxWidth","fullScreen","square","handleChange","defaultMessage","src","Configurations","app","context","alt","multiple","accept","maxSize","activeClassName","rejectClassName","onDrop","dropFile","getRootProps","getInputProps","rejectedFiles","isFileTooLarge","style","dropIcon","fixedIcon","native","handleSelectionChange","cat","maxHeight","selectIcon","onChangeComplete","handleChangeComplete","thumbnailTemplates","active","colorPair","index","selectBackground","onKeyDown","saveDisableEnable","Component","injectIntl","withAPI","withStyles","withTheme","showEndpoint","getProductionEndpoint","getSandboxEndpoint","expansionPanel","expansionPanelDetails","notConfigured","subHeading","lineHeight","textTrim","Endpoints","isPrototypedAvailable","defaultExpanded","expandIcon","pb","m","marginLeft","iconSpace","actionSpace","keyManagerSelect","minWidth","KeyManager","keyManagersConfigured","setKeyManagersConfigured","configDispatcher","keyManagers","securityScheme","newKeyManagers","checked","indexOf","splice","response","list","includes","required","formControl","enabled","mb","fileinput","uploadedFile","certificatesHeader","addCertificateBtn","borderColor","borderStyle","borderWidth","certificateList","certDetailsHeader","uploadCertDialogHeader","alertWrapper","warningIcon","warningColor","deleteIcon","dark","deleteIconDisable","Certificates","certificates","uploadCertificate","deleteCertificate","isMutualSSLEnabled","aliasList","setCertificateList","anchor","details","openCertificateDetails","setOpenCertificateDetails","alias","certificateToDelete","setCertificateToDelete","isDeleting","setDeleting","uploadCertificateOpen","setUploadCertificateOpen","button","cert","secondary","tier","endpoint","edge","certAlias","getClientCertificateStatus","currentTarget","getCertificateStatus","err","showCertificateDetails","certificateAlias","autoFocus","status","subject","paper","VerbElement","verb","isButton","resourceChipColors","toLowerCase","customMenu","customButton","useMenuStyles","disableFocusRipple","inputProps","SUPPORTED_VERBS","REST","WEBSUB","SSE","WS","AddOperation","operationsDispatcher","isAsyncAPI","inputLabel","useRef","labelWidth","setLabelWidth","useIntl","isWebSub","getSupportedVerbs","useReducer","verbs","newOperations","newOperationsDispatcher","current","offsetWidth","clearInputs","addOperation","APIValidation","operationTarget","validate","operationVerbs","warning","websubOperationTarget","data","ref","htmlFor","renderValue","remaining","verbElements","toUpperCase","allSelected","join","MenuProps","getContentAnchorEl","anchorOrigin","vertical","horizontal","Boolean","startsWith","placeholder","InputLabelProps","shrink","onKeyPress","preventDefault","SaveOperations","updateOpenAPI","updateAsyncAPI","isUpdating","useHistory","isOpen","setIsOpen","isRevision","handleSave","handleSaveAndDeploy","aria-describedby","onBackdropClick","undefined","root","flexGrow","titleWrapper","titleLink","contentWrapper","contentAreaWidth","addNewWrapper","grey","addNewHeader","h6","addNewOther","Create","APIContext","newDoc","setNewDoc","saveDisabled","setSaveDisabled","listingPath","restAPI","createEditForm","Fragment","sm","lg","align","mainTitle","elevation","innerRef","node","promiseWrapper","addDocument","docPromise","doc","documentId","addFileToDocument","withRouter","radioGroup","formControlFirst","formControlLabel","typeTextWrapper","FormControlOdd","CreateEditForm","e","sourceType","summary","sourceUrl","otherTypeName","visibility","test","inlineContent","docId","updateDocument","disableName","nameNotDuplicate","nameMaxLengthExceeds","invalidUrl","nameEmpty","summeryEmpty","urlEmpty","invalidDocName","getDocument","apiNotFound","field","nameValidity","documentName","abortEarly","apiDocument","isDocumentPresent","settingsContext","settings","InputProps","onBlur","showNameHelper","multiline","onKeyUp","docVisibilityEnabled","changeType","changeSource","setDisable","getUrlHelperText","contextType","AppContext","MonacoEditor","lazy","ReactMarkdown","flex","splitWrapper","docName","markdownViewWrapper","overflowY","MarkdownEditor","showAtOnce","setIsUpdating","setOpen","code","setCode","toggleOpen","updateDoc","getInlineContentOfDocument","addInlineContentToDocument","obj","fallback","language","options","selectOnLineNumbers","newCode","editorDidMount","editor","monaco","focus","escapeHtml","source","editMetaButton","Edit","getDocumentsList","process","Resources","operationProps","disableRateLimiting","hideAPIDefinitionLink","disableMultiSelect","disableUpdate","disableAddOperation","pageError","setPageError","setOperationRateLimits","markedOperations","setSelectedOperation","sharedScopes","setSharedScopes","sharedScopesByName","setSharedScopesByName","openAPISpec","setOpenAPISpec","securityDefScopes","setSecurityDefScopes","arns","setArns","spec","errors","resolvedSpec","setResolvedSpec","currentPolicies","policyAction","nextResourcePolicies","resourcePath","httpVerb","resourcePolicies","resourcePoliciesDispatcher","currentOperations","operationAction","updatedOperation","addedOperations","paths","parameters","findIndex","in","bodyIndex","parameter","filter","security","find","default","defValue","selectedScope","scopeDescription","scope","description","extractPathParameters","alreadyExistCount","currentVerb","message","warn","responses","200","operations","onMarkAsDelete","useCallback","operation","currentSelections","nextSelectedOperations","isEmpty","localAPI","useMemo","scopes","mapAPIOperations","resolveAndUpdateSpec","rawSpec","specCopy","SwaggerParser","result","openAPIVersion","getVersion","VERSIONS","V3","components","securitySchemes","flows","implicit","V2","securityDefinitions","setSecurityDefScopesFromSpec","updateSwagger","getAmznResourceNames","apitype","getAllScopes","sharedScopesList","sharedScopesByNameList","modifiedScope","shared","getSwagger","isSOAPToREST","promisedInPolicies","getResourcePolicies","promisedOutPolicies","Promise","all","inPolicies","outPolicies","mappedPolicies","policy","out","policies","disableShrink","disableActions","specErrors","selectedOperations","entries","verbObject","openAPI","tag","HTTP_METHODS","highlight","resourcePolicy","slice","markAsDelete","apiOperations","copyOfOperations","isSelectAll","reject","Error","keys","verbInfo","forEach","isScopeExistsInOperation","secDef","disableDelete","supportedDataTypes","formData","query","path","header","cookie","iff","condition","matched","otherwise","getSupportedDataTypes","specVersion","paramType","getDataFormats","dataType","getParameter","schema","getParameterTypes","endpointInputWrapper","textField","input","iconButton","iconButtonValid","endpointValidChip","endpointInvalidChip","endpointErrorChip","GenericEndpoint","endpointURL","editEndpoint","setAdvancedConfigOpen","esCategory","setESConfigOpen","deleteEndpoint","readOnly","serviceUrl","setServiceUrl","isEndpointValid","setIsEndpointValid","statusCode","setStatusCode","setUpdating","isErrorCode","setIsErrorCode","endAdornment","isWebSocket","apiID","testEndpoint","statusMessage","commentIcon","commentAddWrapper","flexFlow","commentAddButton","CommentAdd","currentLength","inputChange","handleClickAddComment","handleClickCancel","filterCommentToAddReply","handleShowReply","commentToFilter","addComment","addReply","trim","replace","CommentsAPI","add","newComment","cancelButton","zeroMinWidth","maxLength","maxCommentLength","instanceOf","importDefinitionDialogHeader","buttonIcon","ImportDefinition","setSchemaDefinition","openAPIDefinitionImport","setOpenAPIDefinitionImport","isImporting","setIsImporting","isGraphQL","isGraphql","isSOAP","asyncAPIDefinitionImport","setAsyncAPIDefinitionImport","currentState","inputAction","inputType","inputValue","formValidity","mode","apiInputs","inputsDispatcher","updateGraphQLSchema","validateGraphQLFile","graphQLSchema","isValid","graphQLInfo","schemaDefinition","updateGraphQLAPIDefinition","success","log","handleOnValidate","isFormValid","dialogTitle","dialogContent","onValidate","btnText","isFileInput","updateWSDLByFileOrArchive","updateWSDLByUrl","reader","FileReader","contentType","onloadend","readAsText","newAPI","updateAsyncAPIDefinitionByFile","updateAsyncAPIDefinitionByUrl","updateAsyncAPIDefinition","updateAPIDefinitionByFile","updateAPIDefinitionByUrl","updateOASDefinition","footer","leftLInkMain","leftMenuActive","topMenu","contentInside","footeremaillink","heading","pxToRem","fontWeightRegular","expanded","expandIconColor","headingText","customIcon","leftMenuIconMainSize","Details","allRevisions","allEnvRevision","authorizedAPI","setAPI","setAPIProduct","getRevision","getDeployedEnv","handleAccordionState","getLeftMenuItemForResourcesByType","getLeftMenuItemForDefinitionByType","isValidURL","getTenantsByState","tenantList","apiUUID","params","apiProdUUID","previousState","get","doRedirectToLogin","pathPrefix","api_uuid","apiDefinitionMenuItem","promisedUpdate","restApi","restApiProduct","revisionedApiProductId","getProductRevisions","revisionedApiId","getRevisions","getProductRevisionsWithEnv","getRevisionsWithEnv","isExpanded","user","setProperty","UserProperties","PORTAL_CONFIG_OPEN","API_CONFIG_OPEN","_updatedProperties","updatedProperties","toJson","update","updatedAPI","pageLocation","redirectUrl","resourceNotFoundMessageText","defineMessages","titleMessage","bodyMessage","resourceNotFountMessage","environmentLabel","per","advertiseInfo","advertised","externalStoresEnabled","lastUpdatedTime","exact","from","subPaths","BASE","OVERVIEW_PRODUCT","OVERVIEW","API_DEFINITION","WSDL","API_DEFINITION_PRODUCT","SCHEMA_DEFINITION","ASYNCAPI_DEFINITION","LIFE_CYCLE","CONFIGURATION","RUNTIME_CONFIGURATION","RUNTIME_CONFIGURATION_WEBSOCKET","TOPICS","CONFIGURATION_PRODUCT","RUNTIME_CONFIGURATION_PRODUCT","ENDPOINTS","ENVIRONMENTS","ENVIRONMENTS_PRODUCT","OPERATIONS","RESOURCES_PRODUCT","APIProductOperations","RESOURCES_PRODUCT_EDIT","ProductResourcesEdit","RESOURCES","APIOperations","SCOPES","DOCUMENTS","DOCUMENTS_PRODUCT","SUBSCRIPTIONS","SUBSCRIPTIONS_PRODUCT","SECURITY","COMMENTS","BUSINESS_INFO","BUSINESS_INFO_PRODUCT","PROPERTIES","PROPERTIES_PRODUCT","NEW_VERSION","MONETIZATION","MONETIZATION_PRODUCT","TRYOUT","apiObj","EXTERNAL_STORES","ExternalStores","subPathKey","subPath","matchPath","BASE_PRODUCT","QUERYANALYSIS","AuthorizedError","statusText","more","py","fill","oneOfType","FormattedMessage","LastUpdatedTime","float","moment","calendar","fromNow","AccordianSummary","borderBottom","MuiAccordionSummary","AccordionDetails","MuiAccordionDetails","DevelopSectionMenu","useUser","getProperty","portalConfigsExpanded","setPortalConfigsExpanded","apiConfigsExpanded","setApiConfigsExpanded","section","mixins","gutters","buttonSuccess","checkItem","chip","imageWrapper","specialGap","resourceTitle","ListRoot","helpButton","helpIcon","htmlTooltip","fontWeightMedium","lifecycleWrapper","lifecycleIcon","leftSideWrapper","Overview","loadEndpoints","newApi","ApiContext","getResourcesClassForAPIs","parentClasses","s","RenderMethodBase","method","chipColor","chipTextColor","RenderMethod","notFound","p","innerKey","methodLower","operationChipColor","Operations","Consumer","resourceRow","ProductResources","apiResources","resource","version","PureComponent","HUMAN_READABLE_SCHEMES","oauth2","basic_auth","mutualssl","api_key","Configuration","tabIndex","tooltip","transport","upperCaseString","filteredItem","accessControl","capitalizeFirstLetter","lowerCaseString","accessControlRoles","workflowStatus","visibleRoles","tags","Policies","ColorlibConnector","completedColor","overview","stepper","completed","activeColor","alternativeLabel","backgroundImage","line","StepConnector","useColorlibStepIconStyles","zIndex","ColorlibStepIcon","forceComplete","step","clsx","instructions","iconTrue","iconFalse","pageLinks","disabledLink","pointerEvents","textLink","CustomizedStepper","deploymentsAvailable","setDeploymentsAvailable","isEndpointAvailable","isTierAvailable","isPublished","lifeCycleStatus","useAppContext","userNameSplit","split","tenantDomain","devportalUrl","steps","activeStep","updateLCStateOfAPI","updateLcState","errorResponse","count","isTestLinkDisabled","isDeployLinkDisabled","connector","StepIconComponent","underline","RouterLink","mt","rel","href","AuthManager","isNotPublisher","finalLifecycleState","MetaData","provider","createdTime","BusinessInformation","businessInformation","businessOwner","technicalOwner","endpointSecurity","Topics","topics","getAsyncAPIDefinition","channels","topic","subscribe","publish","substr","paperCenter","itemPadding","arrowForwardIcon","right","arrowBackIcon","btnSpacing","copyAPIConfig","authorizationHeader","responseCachingEnabled","cacheTimeout","isDefaultVersion","enableSchemaValidation","maxTps","wsdlUrl","corsConfiguration","corsConfigurationEnabled","accessControlAllowCredentials","accessControlAllowOrigins","accessControlAllowHeaders","accessControlAllowMethods","additionalProperties","configReducer","configAction","nextState","targetProperty","property","updatedProperty","DesignConfigurations","apiConfig","descriptionType","setDescriptionType","setOverview","overviewDocument","setOverviewDocument","prop","slackURLProperty","githubURLProperty","invalidTagsExist","DESCRIPTION_TYPES","addDocumentContent","document","deleteOverviewDocument","deleteDocument","DESCRIPTION","getDocuments","overviewDoc","fieldName","regex","isDisabled","px","updateContent","slackURL","githubURL","pt","DefaultVersion","editorHeader","DescriptionEditor","setContent","mx","rows","newContent","AccessControl","roleValidity","setRoleValidity","userRoleValidity","setUserRoleValidity","isNone","invalidRoles","setInvalidRoles","otherValidSystemRoles","setOtherValidSystemRoles","every","val","SelectProps","menu","alwaysShowPlaceholder","blurBehavior","onAdd","role","systemRolePromise","base64url","encode","userRolePromise","userRole","chipRenderer","onDelete","existingRole","StoreVisibility","roleExists","setRoleExists","isRestrictedByRoles","tenants","setTenants","TENANT_STATE_ACTIVE","Tags","isTagValid","setIsTagValid","invalidTags","setInvalidTags","regexPattern","substring","currentInvalidTags","existingTag","oldTag","Social","listItemText","APICategories","setCategories","apiCategories","dense","disableGutters","selected","keepMounted","PaperProps","RuntimeConfiguration","saveButtonDisabled","setSaveButtonDisabled","isNonWebSubAsyncAPI","updateComplexityList","setUpdateComplexityList","API_SECURITY_MUTUAL_SSL_MANDATORY","API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY","newState","DEFAULT_API_SECURITY_OAUTH2","API_SECURITY_BASIC_AUTH","API_SECURITY_API_KEY","noMandatoryOAuthBasicAuth","API_SECURITY_MUTUAL_SSL","noMandatoryMutualSSL","mediationPolicies","seq","inPolicy","setInPolicy","outPolicy","setOutPolicy","faultPolicy","setFaultPolicy","kmNameList","km","getMediationPoliciesToSave","newMediationPolicies","updateInMediationPolicy","updateComplexity","updateGraphqlPoliciesComplexity","updateMediationPolicy","selectedMediationPolicy","ResponseCaching","isEnabled","isResponseCachingEnabled","environmentName","userStorageKey","User","LOCAL_STORAGE_USER","updateUserLocalStorage","newValue","userData","parse","localStorage","getItem","setItem","getUserLocalStorage","CORSConfiguration","isCorsEnabled","isAllowAllOrigins","accessControlAllowOrigin","oldOrigin","accessControlAllowHeader","oldHeader","accessControlAllowMethod","oldMethod","SchemaValidation","prevProps","MaxBackendTps","itemWrapper","FormControl","subTitle","subTitleDescription","flowWrapper","wordBreak","InFlow","editing","setEditing","radioWrapper","EditMediationPolicy","globalMediationPolicies","setGlobalMediationPolicies","seqCustom","setSeqCustom","provideBy","setProvideBy","localSelectedPolicyFile","setLocalSelectedPolicyFile","updatePoliciesFromBE","globalPromise","getGlobalMediationPolicies","customPromise","getMediationPolicies","values","setActivePolicy","assign","newPolicy","policyFile","addMediationPolicy","policyType","getAttribute","handleDownload","policyToDownload","getGlobalMediationPolicyContent","forceDownload","downloadGlobalMediationPolicyContent","getMediationPolicyContent","done","downloadCustomMediationPolicyContent","handleDelete","policyToDelete","deleteMediationPolicy","deleteCustomMediationPolicy","disableEscapeKeyDown","dividers","seq_id","seq_name","seq_type","mr","bottomSpace","APISecurity","isPrototyped","apiContext","haveMultiLevelSecurity","Validate","resourcesWithSecurity","apiList","apiInProduct","op","authType","ApplicationLevel","hasResourceWithSecurity","mandatoryValue","AuthorizationHeader","isHeaderNameValid","setIsHeaderNameValid","validateHeader","TransportLevel","clientCertificates","setClientCertificates","getAllClientCertificates","resp","certificate","addClientCertificate","tmpCertificates","deleteClientCertificate","UploadCertificate","setAlias","setPolicy","setEndpoint","setSaving","setCertificate","isEndpointEmpty","setIsEndpointEmpty","isPoliciesEmpty","setPoliciesEmpty","aliasValidity","setAliasValidity","isRejected","setIsRejected","closeCertificateUpload","aliasValidation","certificateFile","extension","SelectEndpoint","ep","mandatoryStar","SelectPolicies","selectedPolicies","setPolicies","Transports","editIcon","dialogPaper","GraphQLQueryAnalysis","setList","typelist","setTypeList","findSummation","List","Set","respond","array","ob","summation","complexityValue","getGraphqlPoliciesComplexity","res","getGraphqlPoliciesComplexityTypes","typeList","fieldList","setInitialComplexity","fixed","saveButton","searchWrapper","UpdateComplexity","filterKeyWord","setFilter","stickyHeader","typename","aria-controls","newArr","verbMap","sub","pub","asyncAPISpec","setAsyncAPISpec","initialWebsubSubscriptionConfig","websubSubscriptionConfiguration","enable","signingAlgorithm","signatureHeader","secret","websubSubscriptionConfigDispatcher","extractAsyncAPIPathParameters","payload","verifySecurityScheme","resolvedChannels","resolveSpec","o","k","v","resolvedRef","arr","j","getRefTarget","AsyncOperation","trimmedVerb","setIsExpanded","toggleDelete","stopPropagation","paperStyles","customDivider","linearProgress","highlightSelected","hexToRGBA","contentNoMargin","overlayUnmarkDelete","operationDeleteUndo","disableRipple","disableTouchRipple","invisible","DescriptionAndSummary","OperationGovernance","operationScopes","getAsyncAPIOperationScopes","filteredApiScopes","sharedScope","apiScope","Parameters","haveParameters","overflowX","table","ListParameters","editingParameter","setEditingParameter","form","EditParameter","currentParameter","paramAction","nextParameter","parameterActionDispatcher","isEditing","disableTypography","PayloadProperties","parameterContainer","checkBox","AddPayloadProperty","newPropertyDispatcher","addNewProperty","ListPayloadProperties","editingProperty","setEditingProperty","EditPayloadProperty","currentProperty","nextProperty","propertyActionDispatcher","Runtime","allEnvDeployments","getAllEnvironmentDeployments","environment","buildCallbackURL","protocol","host","port","getUriMappingHelperText","fqPath","seperator","uriMappingHelperText","setUriMappingHelperText","env","vhost","websubHttpPort","websubHttpsPort","GroupOfOperations","children","SubscriptionConfig","setEnabled","c","r","Math","random","toString","boxFlex","flexWrap","pr","APILevelRateLimitingPolicies","apiRateLimits","setApiRateLimits","historyHead","LifeCycle","checkList","lcHistory","certList","updateData","handleChangeCheckList","promisedClientCerts","clientCerts","promisedAPI","promisedLcState","getLcState","promisedLcHistory","getLcHistory","lcState","checkItems","handleUpdate","buttonsWrapper","stateButton","LifeCycleUpdate","updateLifeCycleState","WORKFLOW_STATUS","CREATED","APPROVED","lifecycleChecklist","lifecycleState","lifecycleStates","availableTransitions","isWorkflowPending","lcMap","Map","set","isPrototype","isAppLayerSecurityMandatory","isCertAvailable","isBusinessPlanAvailable","lifecycleButtons","lifeCycleImage","API_CHANGE_LC","resourceMethod","POST","transitionState","data-value","paperProps","LifeCycleImage","opacity","xmlns","viewBox","transform","d","isolation","mixBlendMode","strokeWidth","strokeLinejoin","highLightMe","y","x","letterSpacing","wordSpacing","clipRule","fillRule","stroke","strokeLinecap","iconWarn","yellow","grid","labelsGrid","CheckboxLabels","endpointImplementationType","lifecyclePending","transition","Slide","cleanupPendingTask","firstCol","personIcon","avatar","LifeCycleHistory","reverse","entry","postState","previous","post","updatedTime","Documents","urlPrefix","Listing","View","EditContent","DocCreate","ResourceNotFound","TextEditor","actionTable","messageBox","actions","LinkGenerator","docs","showAddDocs","docsToDelete","toggleAddDocs","getSortOrder","a","b","documentList","sort","errorData","messageTxt","oldState","showActionsColumn","print","download","viewColumns","customToolbar","search","onRowsDelete","rowData","rowMeta","that","columns","customBodyRender","tableMeta","GoToEdit","displayAddContent","docContentEditPath","Delete","runAction","deleteDoc","apiName","DeleteMultiple","deleteDocs","docPromises","docIndexObj","Download","isFileAvailable","setIsFileAvailable","isSuccessful","setIsSuccessful","getFileForDocument","docTitle","docBadge","displayURL","displayURLLink","leftCell","summaryView","setDoc","loadContentForDoc","html","buttonMain","addResource","operationCopy","apiPolicies","apiScopesByName","handleUpdateList","handleApiThrottlePolicy","updateOperations","apiScopesByNameList","scopeObject","getAllSharedScopes","newOperation","updatedList","updateApiScopes","resourceNotFoundMessage","setFilterByKeyWord","isOperationRateLimiting","dropDown","chipActive","link","listItem","resourceRoot","deleteButton","pathDisplay","descriptionWrapper","scopeSelect","descriptionWrapperUp","addParamRow","propsForm","deleteLink","verticalAlign","Operation","isSecurity","handleScopeChange","handlePolicyChange","newoperation","throttlingPolicy","dropdownScopes","auth","hideParameters","apiOperation","isUsedInAPIProduct","usedProductIds","getOperationScopes","autoWidth","IconComponent","ArrowDropDownIcon","querySelector","scrollTop","renderInput","other","inputRef","inputRoot","inputInput","renderSuggestion","suggestionProps","suggestion","itemProps","isHighlighted","highlightedIndex","selectedItem","getSuggestions","showEmpty","deburr","inputLength","keep","IntegrationDownshift","timeout","setTimeout","onSelect","changes","clearSelection","getItemProps","getLabelProps","getMenuProps","openMenu","onFocus","min","max","floor","milliSeconds","parseInt","newTimeout","handleTimeoutMin","handleTimeoutSec","AddParameter","initParameter","newParameter","newParameterDispatcher","isParameterExist","isParameterExistValue","paramIn","addNewParameter","hideParameterEdit","isRefParam","isRef","paramCopy","RequestBody","subtleText","format","SOAPToRESTListing","resourcePolicyIn","setResourcePolicyIn","resourcePolicyOut","setResourcePolicyOut","prefersDarkMode","useMediaQuery","openEditor","setOpenEditor","setTabIndex","selectedPolicy","editorProps","smoothScrolling","wordWrap","indicatorColor","textColor","tab","setPolicyContent","originalResourcePolicy","forwardRef","PolicyEditor","openConfirmation","setOpenConfirmation","saving","editorOptions","updateResourcePolicy","closeEditor","CloseConfirmation","currentTagInfo","tagInfo","SpecErrors","primaryTypographyProps","inset","GoToDefinitionLink","OperationsSelector","isIndeterminate","buttonWrapper","apiCopy","setApiResources","endpointTypesWrapper","buttonSection","endpointValidityMessage","errorMessageContainer","implSelectRadio","defaultSwagger","swagger","setSwagger","endpointValidity","setAPIEndpointsValid","initState","generateMockScripts","tmpSecurityInfo","endpoint_security","username","toJSON","apiObject","apiDispatcher","isRedirect","grantType","tokenUrl","apiKey","apiSecret","password","isValidEndpoint","generateEndpointConfig","endpointsContainer","swaggerDef","swaggerObj","onChangeAPI","endpointsDispatcher","saveAndRedirect","inlineMessageContainer","endpointTypeCard","cardContent","cardActions","borderTop","NewEndpointCreate","endpointImplType","setImplType","eligibleTypes","types","option","listing","endpointContainer","endpointName","sandboxHeading","endpointsWrapperLeft","borderRight","borderRightStyle","borderRightWidth","endpointsWrapperRight","endpointsTypeSelectWrapper","endpointTypesSelectWrapper","defaultEndpointWrapper","configDialogHeader","addLabel","endpointTypes","EndpointOverview","setEndpointType","supportedEnpointTypes","setSupportedEndpointType","epConfig","setEpConfig","endpointSecurityInfo","setEndpointSecurityInfo","advanceConfigOptions","setAdvancedConfigOptions","endpointSecurityConfig","setEndpointSecurityConfig","prod","endpointCategory","setEndpointCategory","openDialog","typeChangeConfirmation","setTypeChangeConfirmation","supportedTypeLists","epType","availableEndpoints","getEndpointType","getEndpoints","handleOnChangeEndpointCategoryChange","endpointConfigCopy","endpointProp","modifiedEndpoint","endpointTypeProperty","changeEndpointType","selectedKey","tmpConfig","generatedEndpointConfig","handleEndpointTypeSelect","toggleAdvanceConfig","advanceEPConfig","advanceConfig","endpointInfo","getAdvanceConfig","toggleEndpointSecurityConfig","clientId","clientSecret","customParameters","handleEndpointSecurityChange","saveEndpointSecurityConfig","endpointSecurityObj","enType","closeEndpointSecurityConfig","updatePaths","overviewWrapper","handleEndpointCategorySelect","toggleESConfig","globalEpType","isSOAPEndpoint","onSaveAdvanceConfig","endpointConfigProperty","selectedEndpoints","onCancel","securityInfo","onChangeEndpointAuth","isProduction","defaultScript","InlineEndpoints","mockValueDetails","setMockValueDetails","onScriptChange","tmpPaths","mockScripts","setMockScripts","getGeneratedMockScriptsOfAPI","mediationScript","script","originalScript","getGeneratedMockScriptOfAPI","scriptContent","GenericResource","showReset","setShowReset","resourcePathContainer","prototypeResourceHeader","chipExpansionPanel","scriptResetButton","genericResourceContent","configHeaderContainer","generalConfigContent","secondaryHeading","flexBasis","flexShrink","endpointConfigSection","generalConfigPanel","securityHeading","sandboxEndpointSwitch","GeneralConfiguration","isConfigExpanded","setConfigExpand","endpointCertificates","setEndpointCertificates","setAliasList","endpointCertificatesList","aliases","filteredEndpoints","epLookup","getEndpointCertificates","hidden","addCertificate","deleteEndpointCertificate","endpointTypeSelect","lbConfigBtn","wrapper","LoadbalanceFailoverConfig","isLBConfigOpen","setLBConfigOpen","addEndpoint","newURL","endpointTemplate","epConfigProperty","endpointList","removeEndpoint","indexToRemove","tmpEndpoints","getEndpointTypeHeading","lpConfigWrapper","apiEndpoints","failOvers","addNewEndpoint","handleLBConfigChange","lbConfig","closeLBConfigDialog","epInput","epTypeWrapper","epTypeName","leftArrow","leftArrowLight","dialogHeader","listItemOdd","EndpointListing","setEndpoints","selectedRef","listingWrapper","GenericEndpointAdd","algorithms","sessionManagementOps","defaultTemplateObj","configButtonContainer","LoadBalanceConfig","setLbConfigObject","algoClassNameError","setAlgoClassNameError","tmpLBConfig","handleFieldChange","algo","handleFailoverFieldChange","itemHeight","configContainer","configSubContainer","advanceDialogActions","AdvanceEndpointConfig","optimize","actionDuration","actionSelect","factor","retryDelay","retryErroCode","retryTimeOut","suspendDuration","suspendErrorCode","suspendMaxDuration","advanceConfigObj","setAdvanceConfig","errorCodes","actionItems","messageTypes","optimizeOptions","handleConfigFieldChange","di","messageType","addParameter","eye","EndpointSecurity","securityValidity","setSecurityValidity","showAddParameter","setShowAddParameter","clientSecretIsMasked","setClientSecretIsMasked","parameterName","setParameterName","parameterValue","setParameterValue","authTypes","grantTypes","tmpSecurity","validateAndUpdateSecurityInfo","validity","toggleAddParameter","handleParameterChange","validateEmpty","itemValue","handleAddToList","customParametersCopy","oldRow","newRow","oldName","oldValue","newName","handleKeyDown","autoComplete","items","renderCustomParameters","EditableParameterRow","setName","setValue","editMode","setEditMode","saveRow","addProperty","selectField","banner","Credentials","regions","aws","newEndpointConfig","labelId","shapeRec","alignSelf","shapeCircaleBack","shapeInnerComplete","placeSelf","shapeInnerInactive","shapeDottedEnd","shapeDottedStart","plusIconStyle","shapeDottedStart1","textShape","textShape2","textPadding","textDelete","textShape3","textShape7","primaryEndpoint","secondaryEndpoint","textShape4","textShape8","textShape5","textShape6","button1","button2","shapeRecBack","shapeCircle","shapeCircleBlack","changeCard","noChangeCard","cardHeight","cardContentHeight","cardActionHeight","textOverlay","gridOverflow","createRevisionDialogStyle","sectionTitle","deployNewRevButtonStyle","popover","timePaddingStyle","labelSpace","labelSpacingDown","warningText","tableCellVhostSelect","vhostSelect","textCount","containerInline","containerOverflow","gridGap","gridTemplateColumns","gridAutoFlow","gridAutoColumns","Environments","revisionCount","restProductApi","selectedRevision","setRevision","defaultVhosts","vhosts","selectedVhosts","setVhosts","selectedVhostDeploy","setVhostsDeploy","extraRevisionToDelete","setExtraRevisionToDelete","setDescription","SelectedEnvironment","setSelectedEnvironment","confirmDeleteOpen","setConfirmDeleteOpen","revisionToDelete","setRevisionToDelete","confirmRestoreOpen","setConfirmRestoreOpen","revisionToRestore","setRevisionToRestore","setCurrentLength","openDeployPopup","setOpenDeployPopup","toggleOpenConfirmDelete","revisionName","revisionId","toggleOpenConfirmRestore","handleCloseDeployPopup","handleClickOpen","handleDeleteSelect","handleSelect","revisions","oldRevision","displayOnDevPortal","revision","handleVhostSelect","handleVhostDeploySelect","deleteRevision","deleteProductRevision","createRevision","createProductRevision","runActionRestore","confirm","restoreRevision","restoreProductRevision","createDeployRevision","envList","vhostList","displayOnDevportal","deployRevision","deployProductRevision","item1","confirmDeleteDialog","labelCancel","labelOk","confirmRestoreDialog","ReturnItem1","revDescription","revName","revCreatedTime","anchorEl","setAnchorEl","handlePopoverClose","openPopover","onMouseEnter","onMouseLeave","transformOrigin","disableRestoreFocus","item6","item2","item3","item4","item5","ReturnItem6","anchorEl1","setAnchorEl1","startIcon","o1","unassignRevision","getGatewayAccessUrl","combined","wsPort","wssPort","httpContext","httpPort","httpsPort","getVhostHelperText","selectionList","shorten","maxTextLen","maxtLen","gatewayUrls","deploymentInfo","rowsMax","defaultValue","checkedIcon","subheader","o2","o3","Paper","envName","undeployRevision","undeployProductRevision","some","EnvDeployments","DisplayDevportal","restAPIProduct","disPlayDevportal","check","setCheck","revisionUuid","displayInDevportalProduct","displayInDevportalAPI","textOptional","textRevision","textDeploy","textDescription","descriptionWidth","DeploymentOnboarding","classes1","environments","hasOnlyOneEnvironment","descriptionOpen","setDescriptionOpen","selectedEnvironment","emptyBox","Subscriptions","setPolices","subscriptionAvailability","availability","setAvailability","subscriptionAvailableTenants","setTenantList","subscriptions","setSubscriptions","updateInProgress","setUpdateInProgress","crossTenantSubscriptionEnabled","saveAPI","headline","popupHeadline","searchDiv","searchRoot","searchInput","searchIconButton","noDataMessage","tableColumnSize","tableColumnSize2","dialogColumnSize","dialog","invoiceTable","uniqueCell","InfoToolTip","disableColor","subscriberHeader","subscriptionStatus","BLOCKED","PROD_BLOCKED","SubscriptionTablePagination","page","rowsPerPage","onChangePage","ceil","SubscriptionsTable","totalSubscription","searchQuery","rowsPerPageOptions","emptyColumnHeight","subscriberClaims","formatSubscriptionStateString","blockSubscription","blockProductionOnly","unblockSubscription","handleChangePage","handleChangeRowsPerPage","filterSubscriptions","isMonetizedPolicy","renderClaims","isNotCreator","fetchSubscriptionData","subscriptionId","blockSubscriptions","messages","errorMessage","unblockSubscriptions","applicationInfo","getSubscriberInfo","prevState","pagination","total","getMonetization","monetizationStatus","getSubscriptionPolicies","filteredPolicies","tierPlan","policyName","monetizationAttributes","pricePerRequest","claimsObject","claims","claim","hover","BLOCK_SUBSCRIPTION","getSubscriptionBlockingButtons","isNotAuthorized","isMonetizedUsagePolicy","selectableRows","customFooter","colSpan","onChangeRowsPerPage","ActionsComponent","subMails","emails","email","uri","reduce","names","Tip","Tooltip","filterType","selectableRowsHeader","Invoice","showPopup","setShowPopup","showErrorPopup","setShowErrorPopup","invoice","setInvoice","handleAlertClose","getMonetizationInvoice","invoiceData","invoiceItem","insideArray","subscriptionPoliciesPaper","gridLabel","SubscriptionPoliciesManage","subscriptionPolicies","asyncAPIPolicies","newSelectedPolicies","textControl","selectEmpty","subscriptionAvailabilityPaper","tenantsList","SimpleSelect","currentAvailability","setValues","isSpecificTenants","isUIElementDisabled","onSubmit","availabilityValue","displayEmpty","suggestions","DownshiftMultiple","setInputValue","newSelectedItem","inputValue2","tenantList2","startAdornment","handleInputChange","setsuggestions","newSuggestions","tenant","domain","contentWrapperOverview","titleSub","verticalSpace","loadMoreLink","genericMessageWrapper","paperProgress","dialogContainer","allComments","comments","totalComments","loading","handleExpandClick","handleLoadMoreComments","updateComment","onDeleteComment","commentsLimit","commentList","commentIdOfCommentToDelete","remainingComments","newTotal","newComments","acc","cur","temp","newAllCommentList","commentsUpdate","dayjs","extend","relativeTime","commentText","overflowWrap","cleanBack","Comment","replyId","editIndex","handleClickDeleteComment","handleShowEdit","showAddComment","showEditComment","handleConfirmDialog","filterRemainingComments","filterCommentToDelete","handleLoadMoreReplies","handleAddReply","handleDeleteReply","keyCount","parentCommentId","getAllCommentReplies","replyList","replyCount","existingComment","newRepliesList","newCount","newLimit","updatedComment","apiClient","parentCommentIdOfCommentToDelete","replyCommentId","updatedRepliesList","reply","isOverview","noWrap","commenterInfo","firstName","lastName","createdBy","commentIndex","fullName","toggleShowEdit","zvariant","CommentEdit","handleCategoryChange","handleClickUpdateComment","filterCommentToUpdate","filterCommentToUpdateReply","commentToEdit","replyIndex","time","disable","unig","CommentOptions","timestamp","localDate","Date","toLocaleDateString","day","month","year","toLocaleTimeString","hour","minute","getUser","getUserNameWithoutDomain","canDelete","isAdmin","Scope","Scopes","FormControlLabel","helpText","hint","extraPadding","titleGrid","descriptionForm","progress","CreateScope","validRoles","invalidRolesArray","valid","invalid","apiScopes","scopeAddDisabled","addScope","validateScopeName","handleScopeNameInput","validateScopeDescription","validateScopeDisplayName","handleRoleAddition","handleRoleDeletion","exist","bindings","aScope","promisedApiUpdate","redirectURL","EditScope","thisScope","scopeName","updateScope","handleInputs","originalScope","scopeObj","buttonProgress","api_data","editUrl","scopesList","resources","ops","setOpenLocal","deleteScope","Security","SecurityOverview","tableLayout","addJsonContent","showAddPolicy","formattedPolicy","toggleShowAddPolicy","updatePolicyData","policyIds","threatProtectionPolicies","policyId","getThreatProtectionPolicy","updatedPolicies","associatedApi","deleteThreatProtectionPolicyFromApi","n","uuid","formatPolicy","deletePolicy","AddPolicy","getThreatProtectionPolicies","currentApi","addThreatProtectionPolicyToApi","handlePolicyAdd","EditorDialog","AsyncAPIEditor","swaggerEditorWrapper","buttonWarningColor","topBar","converterWrapper","downloadLink","progressLoader","updateApiWarning","serviceCatalog","onboarding","buttonText","warningIconStyle","APIDefinition","schemaContent","graphQL","asyncAPI","asyncAPIModified","convertTo","getConvertToFormat","swaggerModified","isAuditApiClicked","securityAuditProperties","isSwaggerValid","isAsyncAPIValid","handleNo","hasJsonStructure","onAuditApiClick","onChangeFormatClick","openUpdateConfirmation","updateSwaggerDefinition","updateAsyncAPIDefinitionAndDeploy","updateSwaggerDefinitionAndDeploy","onChangeSwaggerContent","onChangeAsyncAPIContent","promisedApi","getSchema","YAML","safeDump","safeLoad","modifiedContent","load","formattedString","definition","swaggerContent","specFormat","toFormat","parsedContent","asyncAPIContent","fileName","encodeURIComponent","serviceInfo","outdated","apiToken","collectionId","onEditContent","rootPaper","inlineDecoration","contentLine","htmlToolTip","tableRow","referenceErrorTypography","referenceTypography","subheadingTypography","paperDiv","sectionHeadingTypography","auditSummaryDiv","auditSummarySubDiv","circularProgressBarScore","circularProgressBarScoreFooter","auditSummaryDivRight","columnOne","columnTwo","linkText","APISecurityAudit","createMuiTheme","useNextVariants","overrides","MUIDataTableBodyCell","MUIDataTableSelectCell","MUIDataTableToolbarSelect","searchTerm","lastTerms","termObject","regexPatterns","appendedString","getModel","findNextMatch","lineNumber","range","endLineNumber","column","finalMatchIndex","revealLineInCenter","startLineNumber","deltaDecorations","Range","startColumn","endColumn","isWholeLine","glyphMarginClassName","report","overallScore","numErrors","externalApiId","apiDefinition","criticalityObject","1","2","3","4","5","getSecurityAuditReport","grade","issues","rowType","dataObject","rowObject","specificDescription","pointer","criticality","roundScore","score","tooManyImpacted","pointersAffected","tooManyError","baseUrl","round","reportObject","linkToDetailedReport","errorColumns","glyphMargin","responsive","expandableRows","expandableRowsOnClick","renderExpandableRow","getMoreDetailUrl","linkToDetailedReportText","afterLinkText","overallScoreText","totalNumOfErrorsText","totalNumOfErrors","overallCriticalityText","overallCriticality","securitySummary","percent","dataValidationSummary","getMuiTheme","getRowData","semanticErrors","getErrorMuiTheme","validationErrors","warnings","securityNumOfIssuesText","securityNumOfIssues","issueCounter","securityScoreText","securityScore","securityCriticalityText","securityCriticality","dataNumOfIssuesText","dataNumOfIssues","dataScoreText","dataScore","dataCriticalityText","dataCriticality","DefinitionOutdated","openImport","setOpenImport","showDiff","setShowDiff","newDefinition","setNewDefinition","oldDefinition","setOldDefinition","isRendering","setIsRendering","splitView","disableWordDiff","leftTitle","rightTitle","promisedNewServiceDef","ServiceCatalog","searchServiceByKey","promisedOldServiceDef","newServiceDef","oldServiceDef","getServiceDefinition","reimportService","isArchive","wsdl","loadWSDLInEditor","handleDownloadWSDLZip","getWSDLInfo","getWSDL","downloadWidget","downloadButtonContent","cursorStyle","A200","backLink","backIcon","backText","viewInStoreLauncher","dateWrapper","lastUpdatedTypography","downloadApi","downloadApiFlex","revisionWrapper","topRevisionStyle","readOnlyStyle","activeRevision","APIDetailsTopMenu","lastIndex","setRevisionId","isVisibleInStore","isDownloadable","getDeployments","revisionKey","infoItem","severity","Link","buttonClass","export","zipFile","goToSearch","linkButton","goToWrapper","downshiftWrapper","handleClickAway","aria-haspopup","common","productOnly","graphqlOnly","apiOnly","GoTo","showSearch","setShowSearch","onClickAway","createNewVersionWrapper","createNewVersion","createNewVersionButtonColor","CreateNewVersionButton","API_COPY","paperRoot","emailStatus","isValidBusinessOwnerEmail","isValidTechnicalOwnerEmail","isFormUpdated","businessOwnerEmail","technicalOwnerEmail","noValidate","handleSubmit","checkBoxStyles","tableHead","Properties","additionalPropertiesTemp","github_repo","slack_url","setAdditionalProperties","showAddProperty","setShowAddProperty","propertyKey","setPropertyKey","propertyValue","setPropertyValue","isAdditionalPropertiesStale","setIsAdditionalPropertiesStale","setIsVisibleInStore","keywords","toggleAddProperty","isKeyword","oldKey","additionalPropertiesCopy","validateBeforeAdd","fieldKey","fieldValue","isDisplayInStore","newKey","newProperty","newPropertiesList","apiAdditionalProperties","colorPrimary","EditableRow","setKey","resetText","updateEditMode","Monetization","monStatus","getMonetizationData","apiProduct","getSettings","configureMonetizationToApiProduct","configureMonetizationToApi","monetizationAttribute","rightDataColumn","box","tableCel","tableHeadCell","stateWrapper","tableHeadTitle","BusinessPlans","monetizedPolices","monetizationQuery","policiesList","viewInExStoreLink","black","allExternalStores","setAllExternalStores","publishedExternalStores","setPublishedExternalStores","getPublishedExternalStores","publishedStoreIds","store","reason","getAllExternalStores","publishAPIToExternalStores","successfulStores","FormLabel","CreateNewVersion","serviceVersion","newVersion","empty","alreadyExists","hasSpecialChars","MaxLengthExceeds","isMaxLengthExceeds","versionList","getServiceByName","isDefaultVersionBool","createNewAPIVersion","redirectToReferrer","handleVersionChange","handleServiceVersionChange","handleDefaultVersionChange","tasksReducer","TryOutConsole","setAPIKey","deployments","setDeployments","selectedDeployment","setSelectedDeployment","oasDefinition","setOasDefinition","publisherSettings","usePublisherSettings","generateKey","inProgress","getOAS","tasksStatus","tasksStatusDispatcher","generateInternalKey","keyResponse","apikey","getDeployedRevisions","deploymentsResponse","currentDeploymentsWithDisplayName","deploy","gwEnvironment","initialDeploymentSelection","swaggerResponse","updatedOasDefinition","oasCopy","selectedDeploymentVhost","DEFAULT_VHOST","pathSeparator","openapi","servers","transportPort","baseURL","basePath","schemes","decodedJWT","decodeJWT","isAPIRetired","unix","exp","my","artifactType","selectedGWEnvironment","currentSelection","deployment","accessTokenProvider","userNotificationPaper","disableAuthorizeAndInfoPlugin","wrapComponents","authorizeBtn","SwaggerUI","componentProps","validatorUrl","defaultModelsExpandDepth","docExpansion","requestInterceptor","req","patternToCheck","accessToken","headers","endsWith","splitTokens","defaultModelExpandDepth","plugins","locals","___CSS_LOADER_EXPORT___","module","amber","InlineMessage","iconItem","CustomSplitButton","anchorRef","selectedIndex","setSelectedIndex","contains","aria-expanded","prevOpen","disablePortal","TransitionProps","getAPIProductTaggedOperations","taggedOperations","Default","openAPIOperation","operationInfo","getTaggedOperations","para","paraObj","param","rest","isReference","WrappedExpansionPanel","setExpanded","expandedState","muiName"],"mappings":"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","file":"DeferredDetails.3a1ccd2b33a012180c6d.bundle.js","sourcesContent":["import React, { useContext } from 'react';\n\nconst RevisionContext = React.createContext({ });\nexport const useRevisionContext = () => useContext(RevisionContext);\nexport const RevisionContextProvider = RevisionContext.Provider;\nexport default RevisionContext;\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport cloneDeep from 'lodash.clonedeep';\n\n/**\n * Utility method to get the endpoint property name based on the given endpoint type and category.\n *\n * @param {string} type The type of the endpoint (load_balance/ failover)\n * @param {string} category The endpoint category (production/ sandbox)\n * @return {string} The property name of the endpoints.\n */\nfunction getEndpointTypeProperty(type, category) {\n    if (type !== 'failover') {\n        return category;\n    } else {\n        return category === 'sandbox_endpoints' ? 'sandbox_failovers' : 'production_failovers';\n    }\n}\n\n/**\n * Merge the loadbalance/ failover endpoints to single object.\n *\n * @param {object} endpointConfig The endpoint config object\n * @return {object} {production: [], sandbox: []}\n * */\nfunction mergeEndpoints(endpointConfig) {\n    const type = endpointConfig.endpoint_type;\n    if (type === 'load_balance') {\n        return { production: endpointConfig.production_endpoints, sandbox: endpointConfig.sandbox_endpoints };\n    } else if (type === 'failover') {\n        const prodEps = [endpointConfig.production_endpoints].concat(endpointConfig.production_failovers);\n        const sandboxEps = [endpointConfig.sandbox_endpoints].concat(endpointConfig.sandbox_failovers);\n        return { production: prodEps, sandbox: sandboxEps };\n    }\n    return { production: [endpointConfig.production_endpoints], sandbox: [endpointConfig.sandbox_endpoints] };\n}\n\n/**\n * Method to get the endpoints templates based on the selected endpoint type (loadbalance/ failover) and whether is\n * http or address endpoint.\n *\n * @param {string} endpointType The endpoint type\n * @param {bool} isAddressEndpoint Whether the endpoint is soap or not.\n * @param {object} currentEndpointConfig The existing endpoint information.\n * @return {object} A endpoint template object.\n * */\nfunction getEndpointTemplateByType(endpointType, isAddressEndpoint, currentEndpointConfig) {\n    const tmpEndpointConfig = {};\n    if (endpointType === 'failover') {\n        tmpEndpointConfig.endpoint_type = endpointType;\n        tmpEndpointConfig.production_failovers = currentEndpointConfig.production_failovers\n            ? currentEndpointConfig.production_failovers : [];\n        tmpEndpointConfig.sandbox_failovers = currentEndpointConfig.sandbox_failovers\n            ? currentEndpointConfig.sandbox_failovers : [];\n        tmpEndpointConfig.production_endpoints = Array.isArray(currentEndpointConfig.production_endpoints)\n            ? currentEndpointConfig.production_endpoints[0] : currentEndpointConfig.production_endpoints;\n        tmpEndpointConfig.sandbox_endpoints = Array.isArray(currentEndpointConfig.sandbox_endpoints)\n            ? currentEndpointConfig.sandbox_endpoints[0] : currentEndpointConfig.sandbox_endpoints;\n        tmpEndpointConfig.failOver = true;\n    } else if (endpointType === 'load_balance') {\n        tmpEndpointConfig.endpoint_type = endpointType;\n        tmpEndpointConfig.algoClassName = 'org.apache.synapse.endpoints.algorithms.RoundRobin';\n        tmpEndpointConfig.algoCombo = 'org.apache.synapse.endpoints.algorithms.RoundRobin';\n        tmpEndpointConfig.sessionManagement = '';\n        tmpEndpointConfig.sessionTimeOut = '';\n        if (currentEndpointConfig.production_endpoints) {\n            tmpEndpointConfig.production_endpoints = Array.isArray(currentEndpointConfig.production_endpoints)\n                ? currentEndpointConfig.production_endpoints : [currentEndpointConfig.production_endpoints];\n        }\n        if (currentEndpointConfig.sandbox_endpoints) {\n            tmpEndpointConfig.sandbox_endpoints = Array.isArray(currentEndpointConfig.sandbox_endpoints)\n                ? currentEndpointConfig.sandbox_endpoints : [currentEndpointConfig.sandbox_endpoints];\n        }\n        tmpEndpointConfig.failOver = false;\n    } else {\n        tmpEndpointConfig.endpoint_type = isAddressEndpoint === true ? 'address' : 'http';\n        tmpEndpointConfig.production_endpoints = Array.isArray(currentEndpointConfig.production_endpoints)\n            ? currentEndpointConfig.production_endpoints[0] : currentEndpointConfig.production_endpoints;\n        tmpEndpointConfig.sandbox_endpoints = Array.isArray(currentEndpointConfig.sandbox_endpoints)\n            ? currentEndpointConfig.sandbox_endpoints[0] : currentEndpointConfig.sandbox_endpoints;\n        tmpEndpointConfig.failOver = false;\n    }\n    return tmpEndpointConfig;\n}\n\n/**\n * Returns all the endpoints as a list.\n *\n * @param {object} endpointConfig The endpoint config object from the api.\n * @return {array} The list of endpoints.\n * */\nfunction endpointsToList(endpointConfig) {\n    const config = cloneDeep(endpointConfig);\n    const endpoints = [];\n    if (Array.isArray(config.production_endpoints)) {\n        endpoints.push(...config.production_endpoints);\n    } else {\n        endpoints.push(config.production_endpoints);\n    }\n\n    if (Array.isArray(config.sandbox_endpoints)) {\n        endpoints.push(...config.sandbox_endpoints);\n    } else {\n        endpoints.push(config.sandbox_endpoints);\n    }\n\n    if (config.endpoint_type === 'failover') {\n        if (config.sandbox_failovers) {\n            endpoints.push(...config.sandbox_failovers);\n        }\n        if (config.production_failovers) {\n            endpoints.push(...config.production_failovers);\n        }\n    }\n    return endpoints;\n}\n\n/**\n * Returns an endpoint config object template based on the implementation method.\n * Eg: Managed, Prototyped.\n *\n * @param {string} implementationType The endpoint implementation type.\n * @return {object} The endpoint template.\n * */\nfunction getEndpointConfigByImpl(implementationType) {\n    const tmpEndpointConfig = {};\n    if (implementationType === 'PROTOTYPED') {\n        tmpEndpointConfig.endpoint_type = 'http';\n        tmpEndpointConfig.implementation_status = 'prototyped';\n        tmpEndpointConfig.production_endpoints = { config: null, url: 'http://localhost' };\n        tmpEndpointConfig.sandbox_endpoints = { config: null, url: 'http://localhost' };\n    } else {\n        tmpEndpointConfig.endpoint_type = 'http';\n        tmpEndpointConfig.production_endpoints = { url: '' };\n        tmpEndpointConfig.sandbox_endpoints = { url: '' };\n        tmpEndpointConfig.failOver = false;\n    }\n    return tmpEndpointConfig;\n}\n\n/**\n * Get the endpoint config based on the selected endpoint type.\n * Supported endpoint types:\n * 1. http\n * 2. address\n * 3. prototyped\n * 4. awslambda\n * 5. default (Dynamic)\n *\n * @param {string} endpointType The selected endpoint type.\n * @return {endpointConfig} Endpoint config object.\n * */\nfunction createEndpointConfig(endpointType) {\n    const tmpEndpointConfig = {};\n    switch (endpointType) {\n        case 'http':\n            tmpEndpointConfig.endpoint_type = 'http';\n            tmpEndpointConfig.failOver = false;\n            break;\n        case 'address':\n            tmpEndpointConfig.endpoint_type = 'address';\n            tmpEndpointConfig.failOver = false;\n            break;\n        case 'prototyped':\n            tmpEndpointConfig.implementation_status = 'prototyped';\n            tmpEndpointConfig.endpoint_type = 'http';\n            tmpEndpointConfig.production_endpoints = { config: null, url: 'http://localhost' };\n            tmpEndpointConfig.sandbox_endpoints = { config: null, url: 'http://localhost' };\n            break;\n        case 'awslambda':\n            tmpEndpointConfig.endpoint_type = 'awslambda';\n            tmpEndpointConfig.access_method = 'role-supplied';\n            tmpEndpointConfig.amznAccessKey = '';\n            tmpEndpointConfig.amznSecretKey = '';\n            tmpEndpointConfig.amznRegion = '';\n            break;\n        default:\n            tmpEndpointConfig.endpoint_type = 'default';\n            tmpEndpointConfig.production_endpoints = { url: 'default' };\n            tmpEndpointConfig.sandbox_endpoints = { url: 'default' };\n            tmpEndpointConfig.failOver = false;\n            break;\n    }\n    return tmpEndpointConfig;\n}\n\n/**\n * Get the endpoint template based on endpoint type.\n *\n * @param {string} type: Endpoint type (HTTP/ Address)\n * @return {object} Endpoint Template\n * */\nfunction getEndpointTemplate(type) {\n    if (type === 'address') {\n        return { url: '', endpoint_type: 'address', template_not_supported: false };\n    }\n    return { url: '', template_not_supported: false };\n}\n\nexport {\n    getEndpointTypeProperty,\n    mergeEndpoints,\n    getEndpointTemplateByType,\n    endpointsToList,\n    getEndpointConfigByImpl,\n    createEndpointConfig,\n    getEndpointTemplate,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Radio from '@material-ui/core/Radio';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Divider from '@material-ui/core/Divider';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst RateLimitingLevels = {\n    API: 'api',\n    RESOURCE: 'resource',\n};\n\nconst useStyles = makeStyles((theme) => ({\n    focusLabel: {\n        boxShadow: '1px 1px 1px 1px #efefef',\n        paddingRight: theme.spacing(1),\n    },\n}));\n\n/**\n *\n * Handles the resource level and API level throttling UI switch\n * @export\n * @param {*} props\n * @returns\n */\nfunction APIRateLimiting(props) {\n    const {\n        updateAPI, operationRateLimits, onChange, value: currentApiThrottlingPolicy, isAPIProduct,\n        setFocusOperationLevel, focusOperationLevel,\n    } = props;\n    const classes = useStyles();\n    const [apiThrottlingPolicy, setApiThrottlingPolicy] = useState(currentApiThrottlingPolicy);\n    const [isSaving, setIsSaving] = useState(false);\n\n    const isResourceLevel = apiThrottlingPolicy === null;\n    const rateLimitingLevel = isResourceLevel ? RateLimitingLevels.RESOURCE : RateLimitingLevels.API;\n    const [apiFromContext] = useAPI();\n\n    // Following effect is used to handle the controlled component case, If user provide onChange handler to\n    // control this component, Then we accept the props as the valid input and update the current state value from props\n    useEffect(() => {\n        if (onChange) {\n            if (currentApiThrottlingPolicy === '' && apiFromContext.apiThrottlingPolicy) {\n                setApiThrottlingPolicy(apiFromContext.apiThrottlingPolicy);\n            } else {\n                setApiThrottlingPolicy(currentApiThrottlingPolicy);\n            }\n        }\n    }, [onChange, currentApiThrottlingPolicy]); // Do not expect to change the onChange during the runtime\n\n    /**\n     *\n     *\n     * @param {*} event\n     */\n    function updateRateLimitingPolicy(event) {\n        // If the selected option is resource, we set the api level rate limiting to null\n        const userSelection = event.target.value === RateLimitingLevels.RESOURCE\n            ? null : '';\n        if (onChange) {\n            // Assumed controlled component\n            onChange(userSelection);\n        } else {\n            setApiThrottlingPolicy(userSelection);\n        }\n        if (event.target.value === RateLimitingLevels.RESOURCE) {\n            setFocusOperationLevel(false);\n        }\n    }\n    /**\n     *\n     *\n     */\n    function saveChanges() {\n        setIsSaving(true);\n        updateAPI({ apiThrottlingPolicy }).finally(() => setIsSaving(false));\n    }\n\n    /**\n     *\n     *\n     */\n    function resetChanges() {\n        setApiThrottlingPolicy(currentApiThrottlingPolicy);\n    }\n\n    let operationRateLimitMessage = (\n        <Typography variant='body1' gutterBottom>\n            You may change the rate limiting policies per operation\n            <Typography variant='caption' display='block' gutterBottom>\n                Expand an operation below to select a rate limiting policy for an operation\n            </Typography>\n        </Typography>\n    );\n    if (isAPIProduct) {\n        operationRateLimitMessage = (\n            <Typography variant='body1' gutterBottom>\n                Rate limiting polices of the source operation will be applied\n                <Typography variant='caption' display='block' gutterBottom>\n                    Rate limiting policy of an individual operation will be govern by the policy specified in the source\n                    operation\n                </Typography>\n            </Typography>\n        );\n    }\n    return (\n        <Paper>\n            <Grid container direction='row' spacing={3} justify='flex-start' alignItems='flex-start'>\n                <Grid item md={12} xs={12}>\n                    <Box ml={1}>\n                        <Typography variant='subtitle1' gutterBottom>\n                            Operations Configuration\n                            <Tooltip\n                                fontSize='small'\n                                title='Configurations that affects on all the resources'\n                                aria-label='common configurations'\n                                placement='right-end'\n                                interactive\n                            >\n                                <HelpOutline />\n                            </Tooltip>\n                        </Typography>\n                    </Box>\n                    <Divider light variant='middle' />\n                </Grid>\n                <Grid item md={1} xs={1} />\n                <Grid item md={5} xs={11}>\n                    <FormControl component='fieldset'>\n                        <FormLabel component='legend'>Rate limiting level</FormLabel>\n                        <RadioGroup\n                            aria-label='Apply rate limiting in'\n                            value={rateLimitingLevel}\n                            onChange={updateRateLimitingPolicy}\n                            row\n                        >\n                            <FormControlLabel\n                                value={RateLimitingLevels.API}\n                                control={(\n                                    <Radio\n                                        color='primary'\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    />\n                                )}\n                                label='API Level'\n                                labelPlacement='end'\n                            />\n                            <FormControlLabel\n                                value={RateLimitingLevels.RESOURCE}\n                                control={(\n                                    <Radio\n                                        color='primary'\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    />\n                                )}\n                                className={focusOperationLevel && classes.focusLabel}\n                                label='Operation Level'\n                                labelPlacement='end'\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Grid>\n                <Grid item md={6} xs={12}>\n                    <Box minHeight={70} borderLeft={1} pl={10}>\n                        {isResourceLevel ? (\n                            operationRateLimitMessage\n                        ) : (\n                            <TextField\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                id='operation_throttling_policy'\n                                select\n                                label='Rate limiting policies'\n                                value={apiThrottlingPolicy}\n                                onChange={({ target: { value } }) => (\n                                    onChange ? onChange(value) : setApiThrottlingPolicy(value))}\n                                helperText='Selected rate limiting policy will be applied to whole API'\n                                margin='dense'\n                                variant='outlined'\n                            >\n                                {operationRateLimits.map((rateLimit) => (\n                                    <MenuItem key={rateLimit.name} value={rateLimit.name}>\n                                        {rateLimit.displayName}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        )}\n                    </Box>\n                </Grid>\n                {/* If onChange handler is provided we assume that component is getting controlled by its parent\n                so that, hide the save cancel action */}\n                {!onChange && (\n                    <>\n                        <Grid item md={12}>\n                            <Divider />\n                        </Grid>\n                        <Grid item>\n                            <Box ml={1}>\n                                <Button\n                                    onClick={saveChanges}\n                                    disabled={false}\n                                    variant='outlined'\n                                    size='small'\n                                    color='primary'\n                                >\n                                    Save\n                                    {isSaving && <CircularProgress size={24} />}\n                                </Button>\n                                <Box display='inline' ml={1}>\n                                    <Button size='small' onClick={resetChanges}>\n                                        Reset\n                                    </Button>\n                                </Box>\n                            </Box>\n                        </Grid>\n                    </>\n                )}\n            </Grid>\n        </Paper>\n    );\n}\nAPIRateLimiting.defaultProps = {\n    onChange: null,\n    isAPIProduct: false,\n};\nAPIRateLimiting.propTypes = {\n    updateAPI: PropTypes.func.isRequired,\n    onChange: PropTypes.oneOf([null, PropTypes.func]),\n    operationRateLimits: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    disabledAction: PropTypes.shape({}).isRequired,\n    value: PropTypes.string.isRequired,\n    isAPIProduct: PropTypes.bool,\n};\n\nexport default React.memo(APIRateLimiting);\n","/**\n * Copyright (c) 2018, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable */\nimport APIClientFactory from './APIClientFactory';\nimport Utils from './Utils';\nimport Resource from './Resource';\nimport cloneDeep from 'lodash.clonedeep';\n\n/**\n * An abstract representation of an Comments\n */\nclass Comments extends Resource {\n    constructor(parentId, content, category, kwargs) {\n        super();\n        let properties = kwargs;\n        if (parentId instanceof Object) {\n            properties = parentId;\n            Utils.deepFreeze(properties);\n            this._data = properties;\n            for (const key in properties) {\n                if (Object.prototype.hasOwnProperty.call(properties, key)) {\n                    this[key] = properties[key];\n                }\n            }\n        } else {\n            this.parentId = parentId;\n            this.content = content;\n            this.category = category;\n            this.id = null;\n            this.replies = [];\n        }\n\n    }\n\n    /**\n     *\n     * @param data\n     * @returns {object} Metadata for API request\n     * @private\n     */\n    _requestMetaData() {\n        Resource._requestMetaData();\n    }\n\n    /**\n     * Add new comment to an existing API\n     * @param apiId apiId of the api to which the comment is added\n     * @param commentInfo comment text\n     * * TODO: remove\n     */\n    static add(apiId, comment, replyTo) {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(),\n            Utils.CONST.API_CLIENT).client;\n        return apiClient.then(client => {\n            return client.apis.Comments.addCommentToAPI(\n                { apiId, replyTo },\n                { requestBody: comment }, Resource._requestMetaData()\n            );\n        })\n    }\n\n    /**\n     * Get all comments for a particular API\n     * @param apiId api id of the api to which the comment is added\n     * * TODO: remove\n     */\n     static all(apiId, limit, offset) {\n        const apiClient = new APIClientFactory().getAPIClient(Utils.getCurrentEnvironment(),\n            Utils.CONST.API_CLIENT).client;\n        return apiClient.then(client => {\n            return client.apis.Comments.getAllCommentsOfAPI({ apiId , limit, offset });\n        })\n    }\n\n    /**\n     * Delete a comment belongs to a particular API\n     * @param apiId api id of the api to which the comment belongs to\n     * @param commentId comment id of the comment which has to be deleted\n     * * TODO: remove\n     */\n    deleteComment(apiId, commentId, callback = null) {\n        let promise = this.client\n            .then(client => {\n                return client.apis.Comments.deleteComment(\n                    { apiId: apiId, commentId: commentId },\n                    this._requestMetaData(),\n                );\n            })\n            .catch(error => {\n                console.error(error);\n            });\n        if (callback) {\n            return promise.then(callback);\n        } else {\n            return promise;\n        }\n    }\n\n    /**\n     * Update a comment belongs to a particular API\n     * @param apiId apiId of the api to which the comment is added\n     * @param commentId comment id of the comment which has to be updated\n     * @param commentInfo comment text\n     * TODO: remove\n     */\n    updateComment(apiId, commentId, commentInfo, callback = null) {\n        let promise = this.client\n            .then(client => {\n                return client.apis['Comment (Individual)'].put_apis__apiId__comments__commentId_(\n                    { apiId: apiId, commentId: commentId, body: commentInfo },\n                    this._requestMetaData(),\n                );\n            })\n            .catch(error => {\n                console.error(error);\n            });\n        if (callback) {\n            return promise.then(callback);\n        } else {\n            return promise;\n        }\n    }\n\n}\n\n\nComments.CONSTS = {\n\n};\n\nObject.freeze(Comments.CONSTS);\n\nexport default Comments;\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTheme } from '@material-ui/styles';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\n\nconst useStyles = makeStyles((theme) => ({\n    leftLInkText: {\n        color: theme.palette.getContrastText(theme.palette.background.leftMenu),\n        textTransform: theme.custom.leftMenuTextStyle,\n        width: '100%',\n        textAlign: 'left',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontSize: theme.typography.body1.fontSize,\n        fontWeight: 250,\n        whiteSpace: 'nowrap',\n    },\n    leftLInkTextHead: {\n        color: theme.palette.getContrastText(theme.palette.background.leftMenu),\n        textTransform: theme.custom.leftMenuTextStyle,\n        width: '100%',\n        textAlign: 'left',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontWeight: 800,\n        whiteSpace: 'nowrap',\n    },\n    leftLInkText_IconLeft: {\n        paddingLeft: 10,\n    },\n    LeftMenu: {\n        backgroundColor: theme.palette.background.leftMenu,\n        width: theme.custom.leftMenuWidth,\n        textAlign: 'center',\n        fontFamily: theme.typography.fontFamily,\n        position: 'absolute',\n        bottom: 0,\n        left: 0,\n        top: 0,\n    },\n    leftLInk: {\n        paddingTop: theme.spacing(1),\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        height: '18px',\n        fontSize: theme.typography.caption.fontSize,\n        cursor: 'pointer',\n        textDecoration: 'none',\n    },\n    leftLInkOverview: {\n        paddingTop: theme.spacing(1),\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        height: '18px',\n        fontSize: theme.typography.caption.fontSize,\n        cursor: 'pointer',\n        textDecoration: 'none',\n    },\n    leftLink_Icon: {\n        color: theme.palette.getContrastText(theme.palette.background.leftMenu),\n        fontSize: theme.custom.leftMenuIconSize + 'px',\n    },\n    leftLink_IconLeft: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    noIcon: {\n        display: 'none',\n    },\n    leftLInkText_NoText: {\n        diplay: 'none',\n    },\n    selectedMenu: {\n        backgroundColor: theme.palette.background.appBarSelected,\n    },\n\n}));\n\n/**\n * NOTE: Incase displaying menu text is not equal to associated path segment should use `route` prop\n *\n * @param {*} props\n * @returns\n */\nfunction LeftMenuItem(props) {\n    const {\n        Icon, to, text, route, head,\n    } = props;\n    const classes = useStyles();\n    const theme = useTheme();\n    const { leftMenu } = theme.custom;\n    const strokeColor = theme.palette.getContrastText(theme.palette.background.leftMenu);\n    const iconSize = theme.custom.leftMenuIconSize;\n    const { pathname } = useLocation();\n    // Incase displaying menu text is not equal to associated path segment should use `route` prop\n    const routeToCheck = route || text;\n    const menuPathPattern = new RegExp('/' + routeToCheck + '($|/)', 'g');\n    const isSelected = pathname.match(menuPathPattern);\n    return (\n        <Link\n            className={classNames(\n                head !== 'valueOnly' ? (\n                    classes.leftLInk) : (classes.leftLInkOverview),\n                {\n                    [classes.leftLink_IconLeft]: leftMenu === 'icon left',\n                },\n                'leftLInk',\n                isSelected && classes.selectedMenu,\n            )}\n            to={to}\n        >\n            {// If the icon pro ( which is coming from the React Material library )\n                // is coming we add css class and render.\n                // If leftMenu='no icon' at the theme object we hide the icon. Also we add static classes to\n                // allow customers theme\n                // the product without compiling.\n                Icon ? (\n                    React.cloneElement(Icon, {\n                        className: classNames(\n                            classes.leftLink_Icon,\n                            {\n                                [classes.noIcon]: leftMenu === 'no icon',\n                            },\n                            'leftLink_Icon',\n                        ),\n                    })\n                ) : (\n                // We can also add custom icons\n                    <CustomIcon\n                        strokeColor={strokeColor}\n                        width={iconSize}\n                        height={iconSize}\n                        icon={props.iconText}\n                        className={classNames(\n                            classes.leftLInk,\n                            {\n                                [classes.noIcon]: leftMenu === 'no icon',\n                            },\n                            'leftLink_Icon',\n                        )}\n                    />\n                )\n            }\n            {head === 'valueOnly' ? (\n                <Typography\n                    className={classNames(\n                        classes.leftLInkTextHead,\n                    )}\n                >\n                    {text}\n                </Typography>\n            )\n                : (\n                    <Typography\n                        className={classNames(\n                            classes.leftLInkText,\n                            {\n                                [classes.leftLInkText_IconLeft]: leftMenu === 'icon left',\n                                [classes.leftLInkText_NoText]: leftMenu === 'no text',\n                            },\n                            'leftLInkText',\n                        )}\n                    >\n                        {text}\n                    </Typography>\n                )}\n        </Link>\n    );\n}\nLeftMenuItem.defaultProps = {\n    route: null,\n    iconText: null,\n};\nLeftMenuItem.propTypes = {\n    classes: PropTypes.shape({\n        divider: PropTypes.string,\n        leftLInk: PropTypes.string,\n        leftLink_IconLeft: PropTypes.string,\n        noIcon: PropTypes.string,\n        leftLink_Icon: PropTypes.string,\n        leftLInkText: PropTypes.string,\n        leftLInkTextHead: PropTypes.string,\n        leftLInkText_IconLeft: PropTypes.string,\n        leftLInkText_NoText: PropTypes.string,\n    }).isRequired,\n    theme: PropTypes.shape({\n        custom: PropTypes.shape({\n            leftMenu: PropTypes.string,\n            leftMenuIconSize: PropTypes.number,\n        }),\n        palette: PropTypes.shape({\n            getContrastText: PropTypes.func,\n            background: PropTypes.shape({\n                leftMenu: PropTypes.string,\n                appBar: PropTypes.string,\n            }),\n            leftMenu: PropTypes.string,\n        }),\n    }).isRequired,\n    Icon: PropTypes.element.isRequired,\n    text: PropTypes.string.isRequired,\n    to: PropTypes.string.isRequired,\n    head: PropTypes.string.isRequired,\n    route: PropTypes.string,\n    history: PropTypes.shape({\n        listen: PropTypes.func.isRequired,\n        location: PropTypes.string.isRequired,\n    }).isRequired,\n    iconText: PropTypes.string,\n};\nexport default LeftMenuItem;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport { withStyles } from '@material-ui/core/styles';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport green from '@material-ui/core/colors/green';\nimport red from '@material-ui/core/colors/red';\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Paper from '@material-ui/core/Paper';\nimport Slide from '@material-ui/core/Slide';\nimport Select from '@material-ui/core/Select';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@material-ui/core/Icon';\nimport IconButton from '@material-ui/core/IconButton';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\nimport Dropzone from 'react-dropzone';\nimport { SketchPicker } from 'react-color';\nimport Api from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport MaterialIcons from 'MaterialIcons';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport Configurations from 'Config';\n\nimport ImageGenerator from './ImageGenerator';\nimport Background from './Background';\nimport BaseThumbnail from './BaseThumbnail';\n\nconst windowURL = window.URL || window.webkitURL;\nconst dropzoneStyles = {\n    border: '1px dashed ',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    height: 75,\n    padding: '8px 0px',\n    position: 'relative',\n    textAlign: 'center',\n    width: '100%',\n    margin: '10px 0',\n};\nconst styles = (theme) => ({\n    acceptDrop: {\n        backgroundColor: green[50],\n    },\n    dropzone: {\n        border: '1px dashed ' + theme.palette.primary.main,\n        borderRadius: '5px',\n        cursor: 'pointer',\n        height: 'calc(100vh - 10em)',\n        padding: `${theme.spacing(2)}px 0px`,\n        position: 'relative',\n        textAlign: 'center',\n        width: '100%',\n        margin: '10px 0',\n    },\n    dropZoneWrapper: {\n        height: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '& span': {\n            fontSize: 100,\n            color: theme.palette.primary.main,\n        },\n    },\n    preview: {\n        height: theme.spacing(25),\n    },\n    rejectDrop: {\n        backgroundColor: red[50],\n    },\n    group: {\n        display: 'flex',\n        flexDirection: 'row',\n        padding: '0 0 0 20px',\n    },\n    popupHeader: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    iconView: {\n        width: 30,\n        margin: 10,\n        cursor: 'pointer',\n    },\n    subtitle: {\n        marginRight: 20,\n    },\n    subtitleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginTop: 20,\n        marginBottom: 10,\n    },\n    body: {\n        marginBottom: 10,\n    },\n    imageGenWrapper: {\n        '& > div': {\n            position: 'fixed',\n            marginTop: 20,\n        },\n    },\n    backgroundSelection: {\n        cursor: 'pointer',\n        marginRight: 10,\n        display: 'inline-block',\n        border: 'solid 1px #ccc',\n    },\n    actionBox: {\n        boxShadow:\n            '0px 1px 5px 0px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.14), 0px 3px 1px -2px rgba(0,0,0,0.12)',\n        justifyContent: 'flex-start',\n        padding: '10px 0 10px 10px',\n    },\n    imageContainer: {\n        paddingTop: 10,\n    },\n});\n\n/**\n * Give the icons array from category name\n *\n * @param {*} category\n * @param {*} allKeys\n * @returns\n */\nfunction FindCategoryKeys(category) {\n    for (let i = 0; i < MaterialIcons.categories.length; i++) {\n        if (MaterialIcons.categories[i].name === category) {\n            return MaterialIcons.categories[i].icons;\n        }\n    }\n}\n/**\n * Slide up transition for modal\n *\n * @param {any} props Properties\n * @returns {Slide} Slide up transition\n */\nfunction Transition(props) {\n    return <Slide direction='up' {...props} />;\n}\n/**\n * Provides a view for the API Thumbnail image.\n * This can be either user defined image uploaded earlier or a generated Image.\n */\nclass ThumbnailView extends Component {\n    /**\n     * Initializes the ThumbnailView Component\n     *\n     * @param {any} props Component properties\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            file: null,\n            thumbnail: null,\n            selectedTab: 'upload',\n            category: MaterialIcons.categories[0].name,\n            selectedIcon: null,\n            selectedIconUpdate: null,\n            color: null,\n            colorUpdate: null,\n            backgroundIndex: null,\n            backgroundIndexUpdate: null,\n            uploading: false,\n        };\n        this.handleClick = this.handleClick.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n    }\n\n    /**\n     * Clean up resource\n     */\n    componentWillUnmount() {\n        if (this.state.thumbnail) {\n            windowURL.revokeObjectURL(this.state.thumbnail);\n        }\n    }\n\n    /**\n     * Event listener for file drop on the dropzone\n     *\n     * @param {File} acceptedFile dropped file\n     */\n    onDrop(acceptedFile) {\n        this.setState({ file: acceptedFile });\n    }\n\n    selectIcon = (selectedIconUpdate) => {\n        this.setState({ selectedIconUpdate });\n    };\n\n    selectBackground = (backgroundIndexUpdate) => {\n        this.setState({ backgroundIndexUpdate });\n    };\n\n    /**\n     * @param {SyntheticEvent} e React event object\n     */\n    handleClick = (action, intl) => () => {\n        if (action === 'btnEditAPIThumb') {\n            this.setState({ open: true });\n        } else if (action === 'btnUploadAPIThumb') {\n            const { api } = this.props;\n            const {\n                selectedTab, selectedIconUpdate, category, colorUpdate, backgroundIndexUpdate, file,\n            } = this.state;\n            let fileObj;\n            if (selectedTab === 'upload') {\n                if (!api.id && !file) {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Listing.components.ImageGenerator.ThumbnailView.thumbnail.validation.error',\n                        defaultMessage: 'Invalid file or API information is not set correctly.',\n                    }));\n                    return;\n                }\n                /* eslint prefer-destructuring: [\"error\", {VariableDeclarator: {object: true}}] */\n                fileObj = file[0];\n            } else if (selectedTab === 'remove') {\n                fileObj = new File([], 'FileName.jpg', { type: 'application/json' });\n            } else {\n                if (!selectedIconUpdate && !colorUpdate && !backgroundIndexUpdate) {\n                    Alert.error(intl.formatMessage({\n                        id: 'the.icon.is.not.modified',\n                        defaultMessage: 'The icon is not modified',\n                    }));\n                    return;\n                }\n                const newIconJson = {\n                    key: selectedIconUpdate,\n                    category,\n                    color: colorUpdate,\n                    backgroundIndex: backgroundIndexUpdate,\n                };\n                const blob = new Blob([JSON.stringify(newIconJson)], { type: 'application/json' });\n                fileObj = new File([blob], 'FileName.json', { type: 'application/json' });\n            }\n\n            this.uploadThumbnail(selectedTab, api.id, fileObj, intl);\n        }\n    };\n\n    handleChange = (event, selectedTab) => {\n        this.setState({ selectedTab });\n    };\n\n    handleSelectionChange = (name) => (event) => {\n        this.setState({ [name]: event.target.value });\n    };\n\n    handleChangeComplete = (colorUpdate) => {\n        this.setState({ colorUpdate: colorUpdate.hex });\n    };\n\n    /**\n     * Handle modal close event\n     */\n    handleClose() {\n        const { file, preview } = this.state;\n        if (file) {\n            windowURL.revokeObjectURL(preview);\n        }\n        this.setState((cState) => ({\n            open: false,\n            file: null,\n            colorUpdate: cState.color,\n            backgroundIndexUpdate: cState.background,\n            selectedIconUpdate: cState.selectedIcon,\n        }));\n    }\n\n    /**\n     * Add new thumbnail image to an API\n     *\n     * @param {String} apiId ID of the API to be updated\n     * @param {File} file new thumbnail image file\n     */\n    uploadThumbnail(selectedTab, apiId, file, intl) {\n        this.setState({ uploading: true });\n        const {\n            api: { apiType, id },\n            setImageUpdate,\n        } = this.props;\n        const promisedThumbnail = apiType === Api.CONSTS.APIProduct\n            ? new APIProduct().addAPIProductThumbnail(id, file)\n            : new Api().addAPIThumbnail(id, file);\n\n        promisedThumbnail\n            .then(() => {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Listing.components.ImageGenerator.ThumbnailView.thumbnail.upload.success',\n                    defaultMessage: 'Thumbnail uploaded successfully',\n                }));\n                if (selectedTab === 'upload') {\n                    this.setState({ open: false, thumbnail: windowURL.createObjectURL(file) });\n                } else {\n                    this.setState((cState) => ({\n                        open: false,\n                        thumbnail: file.preview,\n                        selectedIcon: cState.selectedIconUpdate,\n                        color: cState.colorUpdate,\n                        backgroundIndex: cState.backgroundIndexUpdate,\n                    }));\n                }\n                setImageUpdate();\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Listing.components.ImageGenerator.ThumbnailView.thumbnail.upload.error',\n                    defaultMessage: 'Error occurred while uploading new thumbnail. Please try again.',\n                }));\n            })\n            .finally(() => {\n                this.setState({ uploading: false });\n            });\n    }\n\n    saveDisableEnable() {\n        const {\n            file, selectedTab, selectedIconUpdate, colorUpdate, backgroundIndexUpdate, uploading,\n        } = this.state;\n        if (selectedTab === 'upload') {\n            return !(file && file[0]) || uploading; // If no files is uploaded retrun true\n        } else if (selectedTab === 'remove') {\n            return false;\n        } else {\n            // If one of them is selected we return false\n            return !(selectedIconUpdate || backgroundIndexUpdate || colorUpdate) || uploading;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            api, classes, width, height, isEditable, theme, intl, imageUpdate,\n        } = this.props;\n        const colorPairs = theme.custom.thumbnail.backgrounds;\n        const maxSize = 1000000;\n        const {\n            file,\n            thumbnail,\n            selectedTab,\n            selectedIcon,\n            selectedIconUpdate,\n            color,\n            colorUpdate,\n            backgroundIndex,\n            backgroundIndexUpdate,\n            uploading,\n        } = this.state;\n        let { category } = this.state;\n        if (!category) category = MaterialIcons.categories[0].name;\n\n        return (\n            <>\n                <BaseThumbnail\n                    isEditable={isEditable}\n                    onClick={this.handleClick('btnEditAPIThumb', intl)}\n                    thumbnail={thumbnail}\n                    selectedIcon={selectedIcon}\n                    color={color}\n                    backgroundIndex={backgroundIndex}\n                    category={category}\n                    api={api}\n                    width={width}\n                    height={height}\n                    imageUpdate={imageUpdate}\n                />\n\n                <Dialog\n                    TransitionComponent={Transition}\n                    aria-labelledby='thumb-dialog-title'\n                    disableBackdropClick\n                    open={this.state.open}\n                    onClose={this.handleClose}\n                    fullWidth='true'\n                    maxWidth='lg'\n                    fullScreen\n                >\n                    <Paper square className={classes.popupHeader}>\n                        <IconButton color='inherit' onClick={this.handleClose} aria-label='Close'>\n                            <Icon>close</Icon>\n                        </IconButton>\n                        <RadioGroup\n                            aria-label='APIThumbnail'\n                            name='apiThumbnail'\n                            className={classes.group}\n                            value={this.state.selectedTab}\n                            onChange={this.handleChange}\n                        >\n                            <FormControlLabel\n                                value='upload'\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Listing.components.ImageGenerator.ThumbnailView.upload'\n                                        defaultMessage='Upload'\n                                    />\n                                )}\n                            />\n                            <FormControlLabel\n                                value='remove'\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Listing.components.ImageGenerator.ThumbnailView.remove'\n                                        defaultMessage='Remove'\n                                    />\n                                )}\n                            />\n                        </RadioGroup>\n                    </Paper>\n\n                    <DialogContent>\n                        {selectedTab === 'upload' && (\n                            <Grid container spacing={4}>\n                                <Grid item xs={3}>\n                                    <div className={classes.imageContainer}>\n                                        <img\n                                            className={classes.preview}\n                                            src={\n                                                file && file.length > 0\n                                                    ? windowURL.createObjectURL(file[0])\n                                                    : Configurations.app.context\n                                                      + '/site/public/images/api/api-default.png'\n                                            }\n                                            alt='Thumbnail Preview'\n                                        />\n                                    </div>\n                                </Grid>\n                                <Grid item xs={9}>\n                                    <Dropzone\n                                        multiple={false}\n                                        accept='image/*'\n                                        maxSize={maxSize}\n                                        className={classes.dropzone}\n                                        activeClassName={classes.acceptDrop}\n                                        rejectClassName={classes.rejectDrop}\n                                        onDrop={(dropFile) => {\n                                            this.onDrop(dropFile);\n                                        }}\n                                    >\n                                        {({ getRootProps, getInputProps, rejectedFiles }) => {\n                                            const isFileTooLarge = rejectedFiles.length > 0\n                                                && rejectedFiles[0].size > maxSize;\n                                            return (\n                                                <div {...getRootProps({ style: dropzoneStyles })}>\n                                                    <input {...getInputProps()} />\n                                                    {isFileTooLarge && (\n                                                        <Typography color='error'>\n                                                            <FormattedMessage\n                                                                id='upload.image.size.error'\n                                                                defaultMessage='Uploaded File is too large.\n                                                                Maximum file size limit to 1MB'\n                                                            />\n                                                        </Typography>\n                                                    )}\n                                                    <div className={classes.dropZoneWrapper}>\n                                                        <Icon className={classes.dropIcon}>cloud_upload</Icon>\n                                                        <Typography>\n                                                            <FormattedMessage\n                                                                id='upload.image'\n                                                                defaultMessage='Click or drag the image to upload.'\n                                                            />\n                                                        </Typography>\n                                                    </div>\n                                                </div>\n                                            );\n                                        }}\n                                    </Dropzone>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='upload.image.size.info'\n                                            defaultMessage='Maximum file size limit to 1MB'\n                                        />\n                                    </Typography>\n                                </Grid>\n                            </Grid>\n                        )}\n                        {selectedTab === 'design' && (\n                            <Grid container spacing={4}>\n                                <Grid item xs={3} className={classes.imageGenWrapper}>\n                                    <ImageGenerator\n                                        width={width}\n                                        height={height}\n                                        api={api}\n                                        fixedIcon={{\n                                            key: selectedIconUpdate,\n                                            color: colorUpdate,\n                                            backgroundIndex: backgroundIndexUpdate,\n                                            category,\n                                            api,\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item xs={9}>\n                                    <div className={classes.subtitleWrapper}>\n                                        <Typography component='p' variant='subtitle2' className={classes.subtitle}>\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Listing.components'\n                                                    + '.ImageGenerator.ThumbnailView.select.category'\n                                                }\n                                                defaultMessage='Select Category'\n                                            />\n                                        </Typography>\n                                        <Select\n                                            native\n                                            value={this.state.category}\n                                            onChange={this.handleSelectionChange('category')}\n                                        >\n                                            {MaterialIcons.categories.map((cat) => (\n                                                <option value={cat.name}>{cat.name}</option>\n                                            ))}\n                                        </Select>\n                                    </div>\n                                    <Typography component='p' variant='body1' className={classes.body}>\n                                        <FormattedMessage\n                                            id='Apis.Listing.components.ImageGenerator.ThumbnailView.select.an.icon'\n                                            defaultMessage='Select an icon from the Material Icons for your API.'\n                                        />\n                                    </Typography>\n                                    <div style={{ background: '#efefef', maxHeight: 180, overflow: 'scroll' }}>\n                                        {FindCategoryKeys(category).map((icon) => (\n                                            <Icon className={classes.iconView} onClick={() => this.selectIcon(icon.id)}>\n                                                {icon.id}\n                                            </Icon>\n                                        ))}\n                                    </div>\n                                    <div className={classes.subtitleWrapper}>\n                                        <Typography component='p' variant='subtitle2' className={classes.subtitle}>\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Listing.components.ImageGenerator.ThumbnailView.select.'\n                                                    + 'color.for.the.icon'\n                                                }\n                                                defaultMessage='Select a color for the icon'\n                                            />\n                                        </Typography>\n                                    </div>\n                                    <SketchPicker\n                                        color={this.state.color || '#ffffff'}\n                                        onChangeComplete={this.handleChangeComplete}\n                                    />\n                                    {(!theme.custom.thumbnailTemplates || !theme.custom.thumbnailTemplates.active) && (\n                                        <>\n                                            <div className={classes.subtitleWrapper}>\n                                                <Typography\n                                                    component='p'\n                                                    variant='subtitle2'\n                                                    className={classes.subtitle}\n                                                >\n                                                    <FormattedMessage\n                                                        id={\n                                                            'Apis.Listing.components.ImageGenerator.'\n                                                        + 'ThumbnailView.select.background'\n                                                        }\n                                                        defaultMessage='Select a Background'\n                                                    />\n                                                </Typography>\n                                            </div>\n                                            {colorPairs.map((colorPair, index) => (\n                                                <div\n                                                    className={classes.backgroundSelection}\n                                                    onClick={() => this.selectBackground(index)}\n                                                    onKeyDown={() => { }}\n                                                >\n                                                    <Background width={100} height={100} colorPair={colorPair} />\n                                                </div>\n                                            ))}\n                                        </>\n                                    )}\n                                </Grid>\n                            </Grid>\n                        )}\n                    </DialogContent>\n                    <DialogActions className={classes.actionBox}>\n                        <Button\n                            disabled={this.saveDisableEnable()}\n                            variant='contained'\n                            color='primary'\n                            size='small'\n                            onClick={this.handleClick('btnUploadAPIThumb', intl)}\n                        >\n                            {selectedTab === 'design' && uploading && (\n                                <>\n                                    <FormattedMessage\n                                        id='Apis.Listing.components.ImageGenerator.ThumbnailView.saving.btn'\n                                        defaultMessage='Saving'\n                                    />\n                                    <CircularProgress size={16} />\n                                </>\n                            )}\n                            {selectedTab === 'design' && !uploading && (\n                                <FormattedMessage\n                                    id='Apis.Listing.components.ImageGenerator.ThumbnailView.save.btn'\n                                    defaultMessage='Save'\n                                />\n                            )}\n\n                            {selectedTab !== 'design' && uploading && (\n                                <>\n                                    <FormattedMessage\n                                        id='Apis.Listing.components.ImageGenerator.ThumbnailView.uploading.btn'\n                                        defaultMessage='Uploading'\n                                    />\n                                    <CircularProgress size={16} />\n                                </>\n                            )}\n                            {selectedTab === 'upload' && !uploading && (\n                                <FormattedMessage\n                                    id='Apis.Listing.components.ImageGenerator.ThumbnailView.upload.btn'\n                                    defaultMessage='Upload'\n                                />\n                            )}\n                            {selectedTab === 'remove' && !uploading && (\n                                <FormattedMessage\n                                    id='Apis.Listing.components.ImageGenerator.ThumbnailView.remove.btn'\n                                    defaultMessage='Remove'\n                                />\n                            )}\n                        </Button>\n\n                        <Button variant='contained' size='small' onClick={this.handleClose}>\n                            <FormattedMessage\n                                id='Apis.Listing.components.ImageGenerator.ThumbnailView.cancel.btn'\n                                defaultMessage='CANCEL'\n                            />\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nThumbnailView.defaultProps = {\n    height: 190,\n    width: 250,\n    isEditable: false,\n    setImageUpdate: () => {},\n};\n\nThumbnailView.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    setImageUpdate: PropTypes.shape({}),\n    imageUpdate: PropTypes.number.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    height: PropTypes.number,\n    width: PropTypes.number,\n    isEditable: PropTypes.bool,\n    intl: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withAPI(withStyles(styles, { withTheme: true })(ThumbnailView)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport WrappedExpansionPanel from 'AppComponents/Shared/WrappedExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { Link } from 'react-router-dom';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Box from '@material-ui/core/Box';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst showEndpoint = function (api, type) {\n    if (api.endpointConfig) {\n        if (type === 'prod') {\n            return api.getProductionEndpoint();\n        }\n        if (type === 'sand') {\n            return api.getSandboxEndpoint();\n        }\n    }\n    return null;\n};\n\nconst useStyles = makeStyles((theme) => ({\n    subtitle: {\n        marginTop: theme.spacing(0),\n    },\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    notConfigured: {\n        color: 'rgba(0, 0, 0, 0.40)',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n    textTrim: {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n    },\n}));\n\n/**\n *\n *X\n * @param {*} props\n * @returns\n */\nfunction Endpoints(props) {\n    const { api } = props;\n    const classes = useStyles();\n    const isPrototypedAvailable = api.endpointConfig !== null\n        && api.endpointConfig.implementation_status === 'prototyped';\n\n    /**\n     * Check whether the endpoint configuration is dynamic\n     *\n     * @param {object} endpointConfig The endpoint configuration of the api.\n     * @return {boolean} True if the endpoint config is dynamic.\n     * */\n    const isDynamicEndpoints = (endpointConfig) => {\n        if (!endpointConfig) {\n            return false;\n        }\n        if (endpointConfig.production_endpoints && !Array.isArray(endpointConfig.production_endpoints)) {\n            return endpointConfig.production_endpoints.url === 'default';\n        }\n        return false;\n    };\n\n    return (\n        <>\n            <WrappedExpansionPanel className={classes.expansionPanel} defaultExpanded id='endpoints'>\n                <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                    <Typography className={classes.subHeading} variant='h6'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.Endpoints.endpoints'\n                            defaultMessage='Endpoints'\n                        />\n                    </Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                    {isDynamicEndpoints(api.endpointConfig)\n                        ? (\n                            <Box pb={2}>\n                                <Typography component='p' variant='body1' className={classes.subtitle}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.Endpoints.dynamic'\n                                        defaultMessage='Dynamic'\n                                    />\n                                </Typography>\n                            </Box>\n                        )\n                        : (\n                            <>\n                                <Box pb={2}>\n                                    {/* Production Endpoint (TODO) fix the endpoint\n                                                    info when it's available with the api object */}\n\n                                    { !isPrototypedAvailable ? (\n                                        <Typography component='p' variant='subtitle2' className={classes.subtitle}>\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.components.Endpoints.production'\n                                                defaultMessage='Production'\n                                            />\n                                        </Typography>\n                                    ) : (\n                                        <Typography component='p' variant='subtitle2' className={classes.subtitle}>\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.components.Endpoints.prototype'\n                                                defaultMessage='Prototype'\n                                            />\n                                        </Typography>\n                                    )}\n                                    {showEndpoint(api, 'prod')\n                                && (\n                                    <Tooltip\n                                        title={showEndpoint(api, 'prod')}\n                                        interactive\n                                    >\n                                        <Typography component='p' variant='body1' className={classes.textTrim}>\n                                            <>\n                                                {showEndpoint(api, 'prod')}\n                                            </>\n                                        </Typography>\n                                    </Tooltip>\n                                )}\n                                    <Typography component='p' variant='body1' className={classes.notConfigured}>\n                                        {!showEndpoint(api, 'prod') && (\n                                            <>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Configuration.'\n                                                    + 'components.Endpoints.not.set'}\n                                                    defaultMessage='-'\n                                                />\n                                            </>\n                                        )}\n                                    </Typography>\n                                </Box>\n                                {!isPrototypedAvailable && (\n                                    <Box pb={2}>\n                                        {/* Sandbox Endpoint (TODO) fix the endpoint info when\n                                                it's available with the api object */}\n                                        <Typography component='p' variant='subtitle2' className={classes.subtitle}>\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.components.Endpoints.sandbox'\n                                                defaultMessage='Sandbox'\n                                            />\n                                        </Typography>\n                                        {showEndpoint(api, 'sand')\n                                    && (\n                                        <Tooltip\n                                            title={showEndpoint(api, 'sand')}\n                                            interactive\n                                        >\n                                            <Typography component='p' variant='body1' className={classes.textTrim}>\n                                                <>\n                                                    {showEndpoint(api, 'sand')}\n                                                </>\n                                            </Typography>\n                                        </Tooltip>\n                                    )}\n                                        <Typography component='p' variant='body1' className={classes.notConfigured}>\n                                            {!showEndpoint(api, 'sand') && (\n                                                <>\n                                                    <FormattedMessage\n                                                        id={'Apis.Details.Configuration.components.Endpoints.sandbox.'\n                                                        + 'not.set'}\n                                                        defaultMessage='-'\n                                                    />\n                                                </>\n                                            )}\n                                        </Typography>\n                                    </Box>\n                                )}\n                            </>\n                        )}\n                    <Box width='100%' textAlign='right' m={1}>\n                        <Link to={'/apis/' + api.id + '/endpoints'}>\n                            <Typography style={{ marginLeft: '10px' }} color='primary' variant='caption'>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.Configuration.Endpoints.edit.api.endpoints'\n                                    defaultMessage='Edit API Endpoints'\n                                />\n                                <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                            </Typography>\n                        </Link>\n                    </Box>\n                </ExpansionPanelDetails>\n            </WrappedExpansionPanel>\n        </>\n    );\n}\n\nEndpoints.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default withAPI(Endpoints);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport API from 'AppData/api';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(3),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    actionSpace: {\n        margin: '-7px auto',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n    keyManagerSelect: {\n        minWidth: 180,\n    },\n}));\n\n/**\n *\n * KeyManager configuration\n * @param {*} props\n * @returns\n */\nexport default function KeyManager(props) {\n    const [keyManagersConfigured, setKeyManagersConfigured] = useState([]);\n    const {\n        configDispatcher,\n        api: { keyManagers, securityScheme },\n    } = props;\n    const classes = useStyles();\n    const handleChange = (event) => {\n        const newKeyManagers = [...keyManagers];\n        const { target: { checked, name } } = event;\n        if (newKeyManagers.indexOf(name) === -1 && checked) {\n            newKeyManagers.push(name);\n        } else if (newKeyManagers.indexOf(name) !== -1 && !checked) {\n            newKeyManagers.splice(newKeyManagers.indexOf(name), 1);\n        }\n        configDispatcher({\n            action: 'keymanagers',\n            value: newKeyManagers,\n        });\n    };\n    useEffect(() => {\n        API.keyManagers().then((response) => setKeyManagersConfigured(response.body.list));\n    }, []);\n    if (!securityScheme.includes('oauth2')) {\n        return (\n            <>\n                <Typography className={classes.subHeading} variant='subtitle2'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.KeyManager.configuration'\n                        defaultMessage='Key Manager Configuration'\n                    />\n                </Typography>\n                <Box ml={1} mb={2}>\n                    <Typography variant='caption'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.oauth.disabled'\n                            defaultMessage='Key Manager configuration only valid when OAuth2 security is enabled.'\n                        />\n                    </Typography>\n                </Box>\n            </>\n        );\n    }\n    return (\n        <>\n            <Typography className={classes.subHeading} variant='subtitle2'>\n                <FormattedMessage\n                    id='Apis.Details.Configuration.components.KeyManager.configuration'\n                    defaultMessage='Key Manager Configuration'\n                />\n            </Typography>\n            <Box ml={1}>\n                <RadioGroup\n                    value={keyManagers.includes('all') ? 'all' : 'selected'}\n                    onChange={({ target: { value } }) => configDispatcher({\n                        action: 'allKeyManagersEnabled',\n                        value: value === 'all',\n                    })}\n                    style={{ flexDirection: 'row' }}\n                >\n                    <FormControlLabel\n                        value='all'\n                        control={<Radio />}\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.KeyManager.allow.all'\n                                defaultMessage='Allow all'\n                            />\n                        )}\n                    />\n                    <FormControlLabel\n                        value='selected'\n                        control={<Radio />}\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.KeyManager.allow.selected'\n                                defaultMessage='Allow selected'\n                            />\n                        )}\n                    />\n                </RadioGroup>\n                {!keyManagers.includes('all') && (\n                    <Box display='flex' flexDirection='column' m={2}>\n                        <FormControl\n                            required\n                            error={!keyManagers || (keyManagers && keyManagers.length === 0)}\n                            component='fieldset'\n                            className={classes.formControl}\n                        >\n                            <FormLabel component='legend'>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.KeyManager.more.than.one.info'\n                                    defaultMessage='Select one or more Key Managers'\n                                />\n                            </FormLabel>\n                            <FormGroup\n                                style={{ flexDirection: 'row' }}\n\n                            >\n                                {keyManagersConfigured.map((key) => (\n                                    <FormControlLabel\n                                        control={(\n                                            <Checkbox\n                                                color='primary'\n                                                checked={keyManagers.includes(key.name)}\n                                                disabled={!key.enabled}\n                                                onChange={handleChange}\n                                                name={key.name}\n                                            />\n                                        )}\n                                        label={key.displayName || key.name}\n                                    />\n                                ))}\n                            </FormGroup>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.KeyManager.more.than.one.error'\n                                    defaultMessage='Select at least one Key Manager'\n                                />\n                            </FormHelperText>\n\n                        </FormControl>\n                    </Box>\n                )}\n            </Box>\n        </>\n    );\n}\n\nKeyManager.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Grid,\n    Icon,\n    IconButton,\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemSecondaryAction,\n    ListItemText,\n    Typography,\n} from '@material-ui/core';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport UploadCertificate from 'AppComponents/Apis/Details/Endpoints/GeneralConfiguration/UploadCertificate';\nimport API from '../../../../../data/api';\n\nconst useStyles = makeStyles((theme) => ({\n    fileinput: {\n        display: 'none',\n    },\n    dropZoneWrapper: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '& span.material-icons': {\n            color: theme.palette.primary.main,\n        },\n    },\n    uploadedFile: {\n        fontSize: 11,\n    },\n    certificatesHeader: {\n        fontWeight: 600,\n        marginTop: theme.spacing(1),\n    },\n    addCertificateBtn: {\n        borderColor: '#c4c4c4',\n        borderRadius: '8px',\n        borderStyle: 'dashed',\n        borderWidth: 'thin',\n    },\n    certificateList: {\n        maxHeight: '250px',\n        overflow: 'auto',\n    },\n    certDetailsHeader: {\n        fontWeight: '600',\n    },\n    uploadCertDialogHeader: {\n        fontWeight: '600',\n    },\n    alertWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    warningIcon: {\n        marginRight: 13,\n        color: theme.custom.warningColor,\n        '& .material-icons': {\n            fontSize: 30,\n        },\n    },\n    deleteIcon: {\n        color: theme.palette.error.dark,\n        cursor: 'pointer',\n    },\n    deleteIconDisable: {\n        color: theme.palette.disabled,\n    },\n}));\n/**\n * TODO: Generalize this component to work in Configuration page , upload mutual SSL certificates action\n * in source/src/app/components/Apis/Details/Configuration/components/APISecurity/components/TransportLevel.jsx ~tmkb\n * The base component for advanced endpoint configurations.\n * @param {any} props The input props.\n * @returns {any} The HTML representation of the Certificates.\n */\nfunction Certificates(props) {\n    const {\n        certificates, uploadCertificate, deleteCertificate, isMutualSSLEnabled, apiId, endpoints, aliasList,\n    } = props;\n    const [certificateList, setCertificateList] = useState([]);\n    const [openCertificateDetails, setOpenCertificateDetails] = useState({ open: false, anchor: null, details: {} });\n    const [certificateToDelete, setCertificateToDelete] = useState({ open: false, alias: '' });\n    const [isDeleting, setDeleting] = useState(false);\n    const [uploadCertificateOpen, setUploadCertificateOpen] = useState(false);\n    const classes = useStyles();\n    const [apiFromContext] = useAPI();\n\n    /**\n     * Show the selected certificate details in a popover.\n     *\n     * @param {any} event The button click event.\n     * @param {string} certAlias  The alias of the certificate which information is required.\n     * */\n    const showCertificateDetails = (event, certAlias) => {\n        if (!isMutualSSLEnabled) {\n            API.getCertificateStatus(certAlias)\n                .then((response) => {\n                    setOpenCertificateDetails({\n                        details: response.body,\n                        open: true,\n                        alias: certAlias,\n                        anchor: event.currentTarget,\n                    });\n                })\n                .catch((err) => {\n                    console.error(err);\n                });\n        } else {\n            API.getClientCertificateStatus(certAlias, apiId)\n                .then((response) => {\n                    setOpenCertificateDetails({\n                        details: response.body,\n                        open: true,\n                        alias: certAlias,\n                        anchor: event.currentTarget,\n                    });\n                })\n                .catch((error) => {\n                    console.error(error);\n                });\n        }\n    };\n\n    /**\n     * Delete certificate represented by the alias.\n     *\n     * @param {string} certificateAlias The alias of the certificate that is needed to be deleted.\n     * */\n    const deleteCertificateByAlias = (certificateAlias) => {\n        setDeleting(true);\n        deleteCertificate(certificateAlias)\n            .then(() => setCertificateToDelete({ open: false, alias: '' }))\n            .finally(() => setDeleting(false));\n    };\n\n    useEffect(() => {\n        setCertificateList(certificates);\n    }, [certificates]);\n\n    return (\n        <Grid container direction='column'>\n            {/* TODO: Add list of existing certificates */}\n            <Grid>\n                <Typography className={classes.certificatesHeader}>\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificates'\n                        defaultMessage='Certificates'\n                    />\n                </Typography>\n            </Grid>\n            <Grid item>\n                <List>\n                    <ListItem\n                        button\n                        disabled={(isRestricted(['apim:api_create'], apiFromContext))}\n                        className={classes.addCertificateBtn}\n                        onClick={() => setUploadCertificateOpen(true)}\n                    >\n                        <ListItemAvatar>\n                            <IconButton>\n                                <Icon>add</Icon>\n                            </IconButton>\n                        </ListItemAvatar>\n                        <ListItemText primary='Add Certificate' />\n                    </ListItem>\n                </List>\n                <List className={classes.certificateList}>\n                    {certificateList.length > 0 ? (\n                        certificateList.map((cert) => {\n                            return (\n                                <ListItem>\n                                    <ListItemAvatar>\n                                        <Icon>lock</Icon>\n                                    </ListItemAvatar>\n                                    {isMutualSSLEnabled\n                                        ? (<ListItemText primary={cert.alias} secondary={cert.tier} />)\n                                        : <ListItemText primary={cert.alias} secondary={cert.endpoint} />}\n\n                                    <ListItemSecondaryAction>\n                                        <IconButton\n                                            edge='end'\n                                            onClick={(event) => showCertificateDetails(event, cert.alias)}\n                                        >\n                                            <Icon>info</Icon>\n                                        </IconButton>\n                                        <IconButton\n                                            disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                            onClick={() => setCertificateToDelete({ open: true, alias: cert.alias })}\n                                        >\n                                            <Icon className={isRestricted(['apim:api_create'], apiFromContext)\n                                                ? classes.deleteIconDisable : classes.deleteIcon}\n                                            >\n                                                {' '}\n                                                delete\n                                            </Icon>\n                                        </IconButton>\n                                    </ListItemSecondaryAction>\n                                </ListItem>\n                            );\n                        })\n                    ) : (\n                        <ListItem>\n                            <ListItemAvatar>\n                                <Icon color='primary'>info</Icon>\n                            </ListItemAvatar>\n                            <ListItemText>You do not have any certificates uploaded</ListItemText>\n                        </ListItem>\n                    )}\n                </List>\n            </Grid>\n            <Dialog open={certificateToDelete.open}>\n                <DialogTitle>\n                    <Typography className={classes.uploadCertDialogHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.deleteCertificate'\n                            defaultMessage='Delete Certificate'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent className={classes.alertWrapper}>\n                    <Typography>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.confirm.certificate.delete'\n                            defaultMessage='Do you want to delete '\n                        />\n                        {' '}\n                        { certificateToDelete.alias + '?'}\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        onClick={() => deleteCertificateByAlias(certificateToDelete.alias)}\n                        variant='contained'\n                        color='primary'\n                        disabled={isDeleting}\n                        autoFocus\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.delete.ok.button'\n                            defaultMessage='OK'\n                        />\n                        {isDeleting && <CircularProgress size={24} />}\n\n                    </Button>\n                    <Button onClick={() => setCertificateToDelete({ open: false, alias: '' })}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.delete.cancel.button'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <Dialog open={openCertificateDetails.open}>\n                <DialogTitle>\n                    <Typography className={classes.certDetailsHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificate.details.of'\n                            defaultMessage='Details of'\n                        />\n                        {' ' + openCertificateDetails.alias}\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <Typography>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.status'\n                            defaultMessage='Status'\n                        />\n                        {' : ' + openCertificateDetails.details.status}\n                    </Typography>\n                    <Typography>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.subject'\n                            defaultMessage='Subject'\n                        />\n                        {' : ' + openCertificateDetails.details.subject}\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        onClick={() => setOpenCertificateDetails({ open: false, anchor: null, details: {} })}\n                        color='primary'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.Certificates.details.close.button'\n                            defaultMessage='Close'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <UploadCertificate\n                endpoints={endpoints}\n                certificates={certificates}\n                uploadCertificate={uploadCertificate}\n                isMutualSSLEnabled={isMutualSSLEnabled}\n                setUploadCertificateOpen={setUploadCertificateOpen}\n                uploadCertificateOpen={uploadCertificateOpen}\n                aliasList={aliasList}\n            />\n        </Grid>\n    );\n}\n\nCertificates.defaultProps = {\n    isMutualSSLEnabled: false,\n    apiId: '',\n};\n\nCertificates.propTypes = {\n    classes: PropTypes.shape({\n        fileinput: PropTypes.shape({}),\n        button: PropTypes.shape({}),\n    }).isRequired,\n    certificates: PropTypes.shape({}).isRequired,\n    uploadCertificate: PropTypes.func.isRequired,\n    deleteCertificate: PropTypes.func.isRequired,\n    apiId: PropTypes.string,\n    isMutualSSLEnabled: PropTypes.bool,\n    endpoints: PropTypes.shape([]).isRequired,\n    aliasList: PropTypes.shape([]).isRequired,\n};\nexport default injectIntl((Certificates));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, {\n    useState, useRef, useReducer,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport AddIcon from '@material-ui/icons/Add';\nimport { FormattedMessage, useIntl } from 'react-intl';\n\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport Chip from '@material-ui/core/Chip';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Fab from '@material-ui/core/Fab';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Badge from '@material-ui/core/Badge';\nimport APIValidation from 'AppData/APIValidation';\nimport Alert from 'AppComponents/Shared/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        minWidth: 120,\n    },\n    paper: {\n        paddingLeft: theme.spacing(4),\n        paddingTop: theme.spacing(1.5),\n        paddingBottom: theme.spacing(0.5),\n        marginTop: '12px',\n    },\n}));\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction VerbElement(props) {\n    const {\n        verb, onClick, isButton, checked,\n    } = props;\n\n    const useMenuStyles = makeStyles((theme) => {\n        const backgroundColor = theme.custom.resourceChipColors[verb.toLowerCase()];\n        return {\n            customMenu: {\n                '&:hover': { backgroundColor },\n                backgroundColor,\n                color: theme.palette.getContrastText(backgroundColor),\n                minWidth: theme.spacing(9),\n            },\n            customButton: {\n                '&:hover': { backgroundColor },\n                backgroundColor,\n                width: theme.spacing(12),\n                marginLeft: theme.spacing(1),\n                color: theme.palette.getContrastText(backgroundColor),\n            },\n        };\n    });\n    const classes = useMenuStyles();\n    if (isButton) {\n        return (\n            <Button disableFocusRipple variant='contained' className={classes.customButton} size='small'>\n                {verb}\n            </Button>\n        );\n    } else {\n        return (\n            <ListItem onClick={onClick} key={verb} button>\n                <Chip className={classes.customMenu} size='small' label={verb} />\n                <ListItemSecondaryAction>\n                    <Checkbox\n                        onClick={onClick}\n                        edge='end'\n                        checked={checked}\n                        inputProps={{ 'aria-labelledby': verb }}\n                    />\n                </ListItemSecondaryAction>\n            </ListItem>\n        );\n    }\n}\n\nconst SUPPORTED_VERBS = {\n    REST: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'HEAD', 'OPTIONS'],\n    WEBSUB: ['SUB'],\n    SSE: ['SUB'],\n    WS: ['PUB', 'SUB'],\n};\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nfunction AddOperation(props) {\n    const { operationsDispatcher, isAsyncAPI, api } = props;\n    const inputLabel = useRef(null);\n    const [labelWidth, setLabelWidth] = useState(0);\n    const intl = useIntl();\n    const isWebSub = api && api.type === 'WEBSUB';\n\n    function getSupportedVerbs() {\n        return isAsyncAPI ? SUPPORTED_VERBS[api.type] : SUPPORTED_VERBS.REST;\n    }\n\n    /**\n     *\n     *\n     * @param {*} state\n     * @param {*} action\n     * @returns\n     */\n    function newOperationsReducer(state, action) {\n        const { type, value } = action;\n        switch (type) {\n            case 'target':\n            case 'verbs':\n                return { ...state, [type]: value };\n            case 'clear':\n                return { verbs: [], target: '' };\n            case 'error':\n                return { ...state, error: value };\n            default:\n                return state;\n        }\n    }\n    const [newOperations, newOperationsDispatcher] = useReducer(newOperationsReducer, { verbs: [] });\n    React.useEffect(() => {\n        setLabelWidth(inputLabel.current.offsetWidth);\n    }, []);\n    const classes = useStyles();\n\n    /**\n     *\n     *\n     */\n    function clearInputs() {\n        newOperationsDispatcher({ type: 'clear' });\n    }\n    /**\n     *\n     *\n     */\n    function addOperation() {\n        if (\n            APIValidation.operationTarget.validate(newOperations.target).error !== null\n            || APIValidation.operationVerbs.validate(newOperations.verbs).error !== null\n        ) {\n            if (isAsyncAPI) {\n                Alert.warning(intl.formatMessage({\n                    id: 'Apis.Details.Topics.components.AddOperation.operation.topic.or.type.cannot.be.empty.warning',\n                    defaultMessage: \"Topic name or topic type(s) can't be empty\",\n                }));\n                return;\n            }\n            Alert.warning(intl.formatMessage({\n                id: 'Apis.Details.Resources.components.AddOperation.operation.target.or.verb.cannot.be.empty.warning',\n                defaultMessage: \"Operation target or operation verb(s) can't be empty\",\n            }));\n            return;\n        }\n        if (api && api.type && api.type.toLowerCase() === 'websub'\n            && APIValidation.websubOperationTarget.validate(newOperations.target).error !== null) {\n            Alert.warning(intl.formatMessage({\n                id: 'Apis.Details.Resources.components.AddOperation.operation.topic.cannot.have.path.params.warning',\n                defaultMessage: \"WebSub topic can't have path parameters\",\n            }));\n            return;\n        }\n        operationsDispatcher({ action: 'add', data: newOperations });\n        clearInputs();\n    }\n    return (\n        <Paper className={classes.paper}>\n            <Grid container direction='row' spacing={0} justify='center' alignItems='center'>\n                <Grid item md={5} xs={12}>\n                    <FormControl margin='dense' variant='outlined' className={classes.formControl}>\n                        <InputLabel ref={inputLabel} htmlFor='outlined-age-simple'>\n                            {isAsyncAPI && (\n                                <FormattedMessage\n                                    id='Apis.Details.Topics.components.AddOperation.op.type'\n                                    defaultMessage='Type'\n                                />\n                            )}\n                            {!isAsyncAPI && (\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.AddOperation.http.verb'\n                                    defaultMessage='HTTP Verb'\n                                />\n                            )}\n                        </InputLabel>\n\n                        <Select\n                            multiple\n                            renderValue={(verbs) => {\n                                const remaining = [];\n                                const verbElements = verbs.map((verb, index) => {\n                                    if (index < 2) {\n                                        return <VerbElement isButton verb={verb} />;\n                                    }\n                                    remaining.push(verb.toUpperCase());\n                                    return null;\n                                });\n                                const allSelected = getSupportedVerbs().length === newOperations.verbs.length;\n                                return (\n                                    <>\n                                        {verbElements}\n                                        {remaining.length > 0 && (\n                                            <Tooltip title={remaining.join(', ')} placement='top'>\n                                                <Box display='inline' color='text.hint' m={1} fontSize='subtitle1'>\n                                                    {allSelected ? 'All selected' : `${verbs.length - 2} more`}\n                                                </Box>\n                                            </Tooltip>\n                                        )}\n                                    </>\n                                );\n                            }}\n                            value={newOperations.verbs}\n                            onChange={({ target: { name, value } }) => newOperationsDispatcher({ type: name, value })}\n                            labelWidth={labelWidth}\n                            inputProps={{\n                                name: 'verbs',\n                                id: 'operation-verb',\n                            }}\n                            MenuProps={{\n                                getContentAnchorEl: null,\n                                anchorOrigin: {\n                                    vertical: 'bottom',\n                                    horizontal: 'left',\n                                },\n                            }}\n                        >\n                            {getSupportedVerbs().map((verb) => (\n                                <VerbElement\n                                    checked={newOperations.verbs.includes(verb.toLowerCase())}\n                                    value={verb.toLowerCase()}\n                                    verb={verb}\n                                />\n                            ))}\n                        </Select>\n\n                        <FormHelperText id='my-helper-text'>\n                            {newOperations.verbs.includes('options') && (\n                                // TODO: Add i18n to tooltip text ~tmkb\n                                <Tooltip\n                                    title={\n                                        'Select the OPTIONS method to send OPTIONS calls to the backend.'\n                                        + ' If the OPTIONS method is not selected, OPTIONS calls will be returned '\n                                        + 'from the Gateway with allowed methods.'\n                                    }\n                                    placement='bottom'\n                                >\n                                    <Badge color='error' variant='dot'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Resources.components.AddOperation.option'\n                                            defaultMessage='OPTIONS'\n                                        />\n                                    </Badge>\n                                </Tooltip>\n                            )}\n                        </FormHelperText>\n                    </FormControl>\n                </Grid>\n                <Grid item md={5} xs={8}>\n                    <TextField\n                        id='operation-target'\n                        label={isAsyncAPI ? 'Topic Name' : 'URI Pattern'}\n                        error={Boolean(newOperations.error)}\n                        autoFocus\n                        name='target'\n                        value={newOperations.target}\n                        onChange={({ target: { name, value } }) => newOperationsDispatcher({\n                            type: name,\n                            value: !isWebSub && !value.startsWith('/') ? `/${value}` : value,\n                        })}\n                        placeholder={isAsyncAPI ? 'Enter topic name' : 'Enter URI pattern'}\n                        helperText={newOperations.error || (isAsyncAPI ? 'Enter topic name' : 'Enter URI pattern')}\n                        fullWidth\n                        margin='dense'\n                        variant='outlined'\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        onKeyPress={(event) => {\n                            if (event.key === 'Enter') {\n                                // key code 13 is for `Enter` key\n                                event.preventDefault(); // To prevent form submissions\n                                addOperation();\n                            }\n                        }}\n                    />\n                </Grid>\n                <Grid item md={2} xs={4}>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.AddOperation.add.tooltip'\n                                defaultMessage='Add new operation'\n                            />\n                        )}\n                        aria-label='AddOperation'\n                        placement='bottom'\n                        interactive\n                    >\n                        <span>\n                            <Fab\n                                style={{ marginLeft: '20px', marginBottom: '15px', marginRight: '20px' }}\n                                size='small'\n                                color='primary'\n                                aria-label='add'\n                                onClick={addOperation}\n                            >\n                                <AddIcon />\n                            </Fab>\n                        </span>\n                    </Tooltip>\n                    <sup>\n                        <Tooltip\n                            title={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.AddOperation.clear.inputs.tooltip'\n                                    defaultMessage='Clear inputs'\n                                />\n                            )}\n                            aria-label='clear-inputs'\n                            placement='bottom'\n                            interactive\n                        >\n                            <span>\n                                <IconButton onClick={clearInputs} size='small'>\n                                    <ClearIcon />\n                                </IconButton>\n                            </span>\n                        </Tooltip>\n                    </sup>\n                </Grid>\n            </Grid>\n        </Paper>\n    );\n}\n\nAddOperation.propTypes = {\n    operationsDispatcher: PropTypes.func.isRequired,\n};\n\nexport default React.memo(AddOperation);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { useHistory } from 'react-router-dom';\nimport Box from '@material-ui/core/Box';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function SaveOperations(props) {\n    const {\n        updateOpenAPI, updateAsyncAPI, operationsDispatcher, api,\n    } = props;\n    const [isUpdating, setIsSaving] = useState(false);\n    const history = useHistory();\n    const [isOpen, setIsOpen] = useState(false);\n    function handleSaveAndDeploy() {\n        setIsSaving(true);\n        if (updateAsyncAPI) {\n            updateAsyncAPI('save')\n                .finally(() => history.push({\n                    pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                        : `/apis/${api.id}/deployments`,\n                    state: 'deploy',\n                }));\n        } else {\n            updateOpenAPI('save')\n                .finally(() => history.push({\n                    pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                        : `/apis/${api.id}/deployments`,\n                    state: 'deploy',\n                }));\n        }\n    }\n\n    /**\n     * Handle the Save button event,\n     *\n     */\n    function handleSave() {\n        setIsSaving(true);\n        if (updateAsyncAPI) {\n            updateAsyncAPI('save').finally(() => setIsSaving(false));\n        } else {\n            updateOpenAPI('save').finally(() => setIsSaving(false));\n        }\n    }\n\n    return (\n        <>\n            <Grid container direction='row' spacing={1} style={{ marginTop: 20 }}>\n                <Grid item>\n                    {api.isRevision\n                        || isRestricted(['apim:api_create'], api) ? (\n                            <Button\n                                disabled\n                                type='submit'\n                                variant='contained'\n                                color='primary'\n                            >\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.Resources.save'\n                                    defaultMessage='Save'\n                                />\n                            </Button>\n                        ) : (\n                            <CustomSplitButton\n                                handleSave={handleSave}\n                                handleSaveAndDeploy={handleSaveAndDeploy}\n                                isUpdating={isUpdating}\n                            />\n                        )}\n                </Grid>\n                <Grid item>\n                    <Button onClick={() => setIsOpen(true)}>Reset</Button>\n                </Grid>\n            </Grid>\n            <Dialog\n                open={isOpen}\n                aria-labelledby='bulk-delete-dialog-title'\n                aria-describedby='bulk-delete-dialog-description'\n                onBackdropClick={() => setIsOpen(false)}\n            >\n                <DialogTitle id='bulk-delete-dialog-title'>Discard changes</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id='bulk-delete-dialog-description'>\n                        Please confirm the discard all changes action\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setIsOpen(false)}>CLOSE</Button>\n                    <Box ml={1}>\n                        <Button\n                            onClick={() => {\n                                operationsDispatcher({ action: 'init' });\n                                setIsOpen(false);\n                            }}\n                            color='error'\n                        >\n                            RESET\n                        </Button>\n                    </Box>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\nSaveOperations.propTypes = {\n    updateOpenAPI: PropTypes.func,\n    updateAsyncAPI: PropTypes.func,\n    operationsDispatcher: PropTypes.func.isRequired,\n};\n\nSaveOperations.defaultProps = {\n    updateOpenAPI: undefined,\n    updateAsyncAPI: undefined,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useRef, useContext, useState } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Api from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport CreateEditForm from './CreateEditForm';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport GoToEdit from './GoToEdit';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    titleLink: {\n        color: theme.palette.primary.main,\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    addNewWrapper: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px ' + theme.palette.grey['300'],\n        borderRadius: theme.shape.borderRadius,\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(3),\n    },\n    addNewHeader: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.grey['300'],\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n    addNewOther: {\n        padding: theme.spacing(2),\n    },\n    button: {\n        marginLeft: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n});\n\nfunction Create(props) {\n    const { api, isAPIProduct } = useContext(APIContext);\n    const [newDoc, setNewDoc] = useState(null);\n    const [saveDisabled, setSaveDisabled] = useState(true);\n    const { classes, intl, history } = props;\n    const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n    const listingPath = `/${urlPrefix}/${api.id}/documents`;\n    const restAPI = api.apiType === Api.CONSTS.APIProduct ? new APIProduct() : new Api();\n    let createEditForm = useRef(null);\n\n    const addDocument = (apiId) => {\n        const promiseWrapper = createEditForm.addDocument(apiId);\n        promiseWrapper.docPromise\n            .then((doc) => {\n                const { documentId, name } = doc.body;\n                if (promiseWrapper.file && documentId) {\n                    const filePromise = restAPI.addFileToDocument(apiId, documentId, promiseWrapper.file[0]);\n                    filePromise\n                        .then((doc) => {\n                            Alert.info(`${name} ${intl.formatMessage({\n                                id: 'Apis.Details.Documents.Create.successful.file.upload.message',\n                                defaultMessage: 'File uploaded successfully.',\n                            })}`);\n                            history.push(listingPath);\n                        })\n                        .catch((error) => {\n                            if (process.env.NODE_ENV !== 'production') {\n                                console.log(error);\n                                Alert.error(intl.formatMessage({\n                                    id: 'Apis.Details.Documents.Create.markdown.editor.upload.error',\n                                    defaultMessage: 'Error uploading the file',\n                                }));\n                            }\n                        });\n                } else {\n                    Alert.info(`${doc.body.name} ${intl.formatMessage({\n                        id: 'Apis.Details.Documents.Create.markdown.editor.success',\n                        defaultMessage: ' added successfully.',\n                    })}`);\n                    setNewDoc(doc);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Documents.Create.markdown.editor.add.error',\n                        defaultMessage: 'Error adding the document',\n                    }));\n                }\n            });\n    };\n    return (\n        <React.Fragment>\n            <Grid container spacing={3}>\n                <Grid item sm={12} md={12} />\n                {/*\n            Following two grids control the placement of whole create page\n            For centering the content better use `container` props, but instead used an empty grid item for flexibility\n             */}\n                <Grid item sm={0} md={0} lg={2} />\n                <Grid item sm={12} md={12} lg={8}>\n                    <Grid container spacing={5}>\n                        <Grid item md={12}>\n                            <div className={classes.titleWrapper}>\n                                <Link to={listingPath} className={classes.titleLink}>\n                                    <Typography variant='h5' align='left' className={classes.mainTitle}>\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.Create.heading'\n                                            defaultMessage='Documents'\n                                        />\n                                    </Typography>\n                                </Link>\n                                <Icon>keyboard_arrow_right</Icon>\n                                <Typography variant='h5'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Documents.Create.title'\n                                        defaultMessage='Add New Document'\n                                    />\n                                </Typography>\n                            </div>\n                        </Grid>\n                        <Grid item md={12}>\n                            <Paper elevation={0}>\n                                <CreateEditForm\n                                    innerRef={(node) => {\n                                        createEditForm = node;\n                                    }}\n                                    apiType={api.apiType}\n                                    apiId={api.id}\n                                    saveDisabled={saveDisabled}\n                                    setSaveDisabled={setSaveDisabled}\n                                />\n                                <Divider />\n\n                                <div className={classes.addNewOther}>\n                                    <Button\n                                        variant='contained'\n                                        color='primary'\n                                        onClick={() => addDocument(api.id)}\n                                        disabled={saveDisabled}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.Create.markdown.editor.add.document.button'\n                                            defaultMessage='Add Document'\n                                        />\n                                    </Button>\n                                    <Button className={classes.button} onClick={() => history.push(listingPath)}>\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.Create.markdown.editor.add.document.cancel.button'\n                                            defaultMessage='Cancel'\n                                        />\n                                    </Button>\n                                </div>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n            {newDoc && <GoToEdit doc={newDoc} />}\n        </React.Fragment>\n    );\n}\n\nCreate.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.func.isRequired,\n    apiType: PropTypes.oneOf([Api.CONSTS.API, Api.CONSTS.APIProduct]).isRequired,\n};\n\nexport default injectIntl(withRouter(withStyles(styles)(Create)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport green from '@material-ui/core/colors/green';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Icon from '@material-ui/core/Icon';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Dropzone from 'react-dropzone';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport Api from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport APIValidation from 'AppData/APIValidation';\nimport AppContext from 'AppComponents/Shared/AppContext';\nimport Alert from 'AppComponents/Shared/Alert';\n\nconst styles = theme => ({\n    button: {\n        marginLeft: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    addNewOther: {\n        padding: theme.spacing(2),\n    },\n    radioGroup: {\n        display: 'flex',\n        flexDirection: 'row',\n        width: 300,\n    },\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    group: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    formControlFirst: {\n        display: 'block',\n    },\n    formControl: {\n        display: 'block',\n        marginTop: 20,\n    },\n    formControlLabel: {\n        background: '#efefef',\n        borderRadius: 5,\n        paddingRight: 10,\n        marginLeft: 0,\n        marginTop: 10,\n    },\n    typeTextWrapper: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n    },\n    FormControlOdd: {\n        padding: 0,\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n        marginTop: 0,\n    },\n    acceptDrop: {\n        backgroundColor: green[50],\n    },\n    dropzone: {\n        border: '1px dashed ' + theme.palette.primary.main,\n        borderRadius: '5px',\n        cursor: 'pointer',\n        height: 75,\n        padding: `${theme.spacing(2)}px 0px`,\n        position: 'relative',\n        textAlign: 'center',\n        width: '100%',\n        margin: '10px 0',\n    },\n    dropZoneWrapper: {\n        height: '100%',\n        display: 'flex',\n        cursor: 'pointer',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '& span.material-icons': {\n            color: theme.palette.primary.main,\n        },\n    },\n    uploadedFile: {\n        fontSize: 11,\n    },\n});\n\nclass CreateEditForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            type: 'HOWTO',\n            sourceType: 'INLINE',\n            name: '',\n            summary: '',\n            sourceUrl: '',\n            file: null,\n            disableName: false,\n            otherTypeName: null,\n            nameNotDuplicate: true,\n            nameMaxLengthExceeds: false,\n            invalidUrl: false,\n            nameEmpty: false,\n            summeryEmpty: false,\n            urlEmpty: false,\n            invalidDocName: false,\n            visibility: 'API_LEVEL'\n        };\n    }\n\n    changeType = (e) => {\n        const { value } = e.target;\n        if (value === 'PUBLIC_FORUM' || value === 'SUPPORT_FORUM') {\n            this.setState({ sourceType: 'URL' });\n        }\n        this.setState({ type: value });\n    };\n    changeSource = (e) => {\n        const { value } = e.target;\n        this.validate();\n        this.setState({ sourceType: value });\n    };\n    setDisable = (item) => {\n        const { type } = this.state;\n        if (item === 'INLINE' || item === 'MARKDOWN' || item === 'FILE') {\n            if (type === 'PUBLIC_FORUM' || type === 'SUPPORT_FORUM') {\n                return true;\n            }\n        }\n    };\n    handleChange = name => (e) => {\n        const { value } = e.target;\n        if (name === 'name') {\n            this.setState({ name: value });\n        } else if (name === 'summary') {\n            this.setState({ summary: value });\n        } else if (name === 'sourceUrl') {\n            this.setState({ sourceUrl: value });\n        } else if (name === 'otherTypeName') {\n            this.setState({ otherTypeName: value });\n        }else if (name === 'visibility') {\n            this.setState({ visibility: value });\n        }\n    };\n\n    onDrop = (acceptedFile) => {\n        const { intl } = this.props;\n        var specialChars = /[`!@#%^*()+\\={};'\"\\\\|,<>\\/~]/;\n        if (specialChars.test(acceptedFile[0].name)) {\n            this.setState({ file: null });\n            Alert.error(intl.formatMessage({\n                id: 'Apis.Details.Documents.CreateEditForm.source.file.name.error.invalid',\n                defaultMessage: 'Document source file name cannot contain spaces or special characters',\n            }));\n        } else {\n            this.setState({ file: acceptedFile });\n        }\n    };\n\n    addDocument = (apiId) => {\n        const { apiType } = this.props;\n        const restAPI = apiType === Api.CONSTS.APIProduct ? new APIProduct() : new Api();\n        const {\n            name, type, summary, sourceType, sourceUrl, file, otherTypeName, visibility,\n        } = this.state;\n        const docPromise = restAPI.addDocument(apiId, {\n            name,\n            type,\n            summary,\n            sourceType,\n            visibility,\n            sourceUrl,\n            otherTypeName,\n            inlineContent: '',\n        });\n        return { docPromise, file };\n    };\n    updateDocument = (apiId) => {\n        const { apiType } = this.props;\n        const restAPI = apiType === Api.CONSTS.APIProduct ? new APIProduct() : new Api();\n        const {\n            name, type, summary, sourceType, sourceUrl, file, otherTypeName, visibility,\n        } = this.state;\n        const { docId } = this.props;\n        const docPromise = restAPI.updateDocument(apiId, docId, {\n            name,\n            type,\n            summary,\n            sourceType,\n            visibility,\n            sourceUrl,\n            otherTypeName,\n            inlineContent: '',\n        });\n        return { docPromise, file };\n    };\n    getDocument() {\n        const { apiId, docId, apiType } = this.props;\n        const restAPI = apiType === Api.CONSTS.APIProduct ? new APIProduct() : new Api();\n        if (docId && apiId) {\n            const docPromise = restAPI.getDocument(apiId, docId);\n            docPromise\n                .then((doc) => {\n                    const {\n                        name, type, summary, sourceType, sourceUrl, otherTypeName, visibility,\n                    } = doc.body;\n                    this.setState({\n                        name,\n                        type,\n                        summary,\n                        sourceType,\n                        sourceUrl,\n                        otherTypeName,\n                        visibility,\n                    });\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                    const { status } = error;\n                    if (status === 404) {\n                        this.setState({ apiNotFound: true });\n                    }\n                });\n        }\n    }\n    validate(field=null, value=null) {\n        let invalidUrl = false;\n        if (field === 'url') {\n            invalidUrl = value ? APIValidation.url.validate(value).error : false;\n            this.setState({ invalidUrl });\n            if (value === '') {\n                this.setState({ urlEmpty: true });\n            } else {\n                this.setState({ urlEmpty: false });\n            }\n        } else if (field === 'name') {\n            if (value) {\n                const nameValidity = APIValidation.documentName.required().validate(value, { abortEarly: false }).error;\n                if (nameValidity === null) {\n                    this.setState({ invalidDocName: false });\n                    const promise = APIValidation.apiDocument.validate({ id: this.props.apiId, name: value });\n                        promise\n                            .then((isDocumentPresent) => {\n                                this.setState({ nameNotDuplicate: !isDocumentPresent });\n                            })\n                            .catch((error) => {\n                                if (error.status === 404) {\n                                    this.setState({ nameNotDuplicate: true });\n                                } else {\n                                    Alert.error('Error when validating document name');\n                                }\n                            });\n                } else {\n                    this.setState({ invalidDocName: true });\n                }\n            } else {\n                this.setState({ nameNotDuplicate: true });\n            }\n\n            if (value === '') {\n                this.setState({ nameEmpty: true, nameMaxLengthExceeds: false });\n            } else if (value && value.length > 60) {\n                this.setState({ nameEmpty: false, nameMaxLengthExceeds: true });\n            } else {\n                this.setState({ nameEmpty: false, nameMaxLengthExceeds: false });\n            }\n        } else if (field === 'summary') {\n            if (value === '') {\n                this.setState({ summeryEmpty: true });\n            } else {\n                this.setState({ summeryEmpty: false });\n            }\n        }\n    }\n    componentDidMount() {\n        this.getDocument();\n        const { apiId, docId } = this.props;\n        if (apiId && docId) {\n            this.setState({ disableName: true });\n        }\n    }\n    showNameHelper() {\n        const { nameEmpty, nameNotDuplicate, nameMaxLengthExceeds, invalidDocName } = this.state;\n        if (nameMaxLengthExceeds) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.exceeds.document.name.length.helper.text'\n                    defaultMessage='Document name exceeds the maximum length of 60 characters'\n                />\n            );\n        } else if (nameNotDuplicate && !nameEmpty && !invalidDocName) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.document.name.helper.text'\n                    defaultMessage='Provide the name for the document'\n                />\n            );\n        } else if (nameEmpty) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.empty.document.name.helper.text'\n                    defaultMessage='Document name cannot be empty'\n                />\n            );\n        } else if (invalidDocName) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.invalid.document.name.helper.text'\n                    defaultMessage='Document name cannot contain spaces or special characters'\n                />\n            );\n        } else {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.duplicate.document.name.helper.text'\n                    defaultMessage='Duplicate document name'\n                />\n            );\n        }\n    }\n    getUrlHelperText() {\n        const { invalidUrl, urlEmpty} = this.state;\n\n        if (invalidUrl) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.source.url.helper.text.error.invalid'\n                    defaultMessage='Enter a valid URL to the source'\n                />\n            );\n        } else if (urlEmpty) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.source.url.helper.text.error.empty'\n                    defaultMessage='URL Field cannot be empty'\n                />\n            );\n        } else {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Documents.CreateEditForm.source.url.helper.text'\n                    defaultMessage='Provide the URL to the source'\n                />\n            );\n        }\n    }\n    render() {\n        const {\n            name,\n            type,\n            summary,\n            sourceType,\n            sourceUrl,\n            file,\n            disableName,\n            otherTypeName,\n            invalidUrl,\n            nameNotDuplicate,\n            nameMaxLengthExceeds,\n            nameEmpty,\n            invalidDocName,\n            summeryEmpty,\n            urlEmpty,\n            visibility\n        } = this.state;\n        const { classes, setSaveDisabled } = this.props;\n        const { settings: settingsContext } = this.context;\n        if (\n            name !== '' &&\n            summary !== '' &&\n            nameNotDuplicate &&\n            !nameMaxLengthExceeds &&\n            !invalidDocName &&\n            ((!invalidUrl && sourceUrl !== '') || sourceType !== 'URL')\n        ) {\n            setSaveDisabled(false);\n        } else {\n            setSaveDisabled(true);\n        }\n        return (\n            <div className={classes.addNewOther}>\n                <FormControl margin='normal' className={classes.FormControlOdd}>\n                    <TextField\n                        fullWidth\n                        InputProps={{\n                            onBlur: ({ target: { value } }) => {\n                                this.validate('name', value);\n                            },\n                        }}\n                        label={\n                            <FormattedMessage\n                                id='Apis.Details.Documents.CreateEditForm.document.name'\n                                defaultMessage='Name *'\n                            />\n                        }\n                        helperText={this.showNameHelper()}\n                        type='text'\n                        variant='outlined'\n                        name='name'\n                        margin='normal'\n                        value={name}\n                        onChange={this.handleChange('name')}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        autoFocus\n                        disabled={disableName}\n                        error={!nameNotDuplicate || nameEmpty || nameMaxLengthExceeds || invalidDocName}\n                    />\n                </FormControl>\n                <FormControl margin='normal' className={classes.FormControlOdd}>\n                    <TextField\n                        fullWidth\n                        multiline\n                        InputProps={{\n                            onBlur: ({ target: { value } }) => {\n                                this.validate('summary', value);\n                            },\n                            onKeyUp: ({ target: { value } }) => {\n                                this.validate('summary', value);\n                            },\n                        }}\n                        margin='normal'\n                        variant='outlined'\n                        label={\n                            <FormattedMessage\n                                id='Apis.Details.Documents.CreateEditForm.document.summary'\n                                defaultMessage='Summary *'\n                            />\n                        }\n                        helperText={\n                            summeryEmpty ? (\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.document.summary.error.empty'\n                                    defaultMessage='Document summary can not be empty'\n                                />\n                            ) : (\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.document.summary.helper.text'\n                                    defaultMessage='Provide a brief description for the document'\n                                />\n                            )\n                        }\n                        type='text'\n                        name='summary'\n                        margin='normal'\n                        value={summary}\n                        onChange={this.handleChange('summary')}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        error={summeryEmpty}\n                    />\n                </FormControl>\n                {settingsContext.docVisibilityEnabled && \n                <FormControl margin='normal' className={classes.FormControlOdd}>\n                <TextField\n                    fullWidth\n                    id='docVisibility-selector'\n                    select\n                    variant='outlined'\n                    label={\n                        <FormattedMessage\n                            id='Apis.Details.Documents.CreateEditForm.document.docVisibility'\n                            defaultMessage='Document Visibility'\n                        />\n                    }\n                    helperText={\n                        summeryEmpty ? (\n                            <FormattedMessage\n                                id='Apis.Details.Documents.CreateEditForm.document.summary.error.empty'\n                                defaultMessage='Document summary can not be empty'\n                            />\n                        ) : (\n                            <FormattedMessage\n                                id='Apis.Details.Documents.CreateEditForm.document.summary.helper.text'\n                                defaultMessage='Provide a brief description for the document'\n                            />\n                        )\n                    }\n                    type='text'\n                    name='visibility'\n                    margin='normal'\n                    value={visibility}\n                    onChange={this.handleChange('visibility')}\n                    error={summeryEmpty}\n                >\n                    <MenuItem value='API_LEVEL'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.CreateEditForm.document.docVisibility.dropdown.public'\n                            defaultMessage='Same as API Visibility'\n                        />\n                    </MenuItem>\n                    <MenuItem value='PRIVATE'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.CreateEditForm.document.docVisibility.dropdown.private'\n                            defaultMessage='Private'\n                        />\n                    </MenuItem>\n                    <MenuItem value='OWNER_ONLY'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.CreateEditForm.document.docVisibility.dropdown.ownerOnly'\n                            defaultMessage='Owner Only'\n                        />\n                    </MenuItem>\n                </TextField>\n            </FormControl>}\n                <FormControl component='fieldset' className={classes.formControlFirst}>\n                    <FormLabel component='legend'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.CreateEditForm.document.create.type'\n                            defaultMessage='Type'\n                        />\n                    </FormLabel>\n                    <RadioGroup\n                        aria-label='Type'\n                        name='type'\n                        className={classes.group}\n                        value={type}\n                        onChange={this.changeType}\n                    >\n                        <FormControlLabel\n                            className={classes.formControlLabel}\n                            value='HOWTO'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <div className={classes.typeTextWrapper}>\n                                    <Icon>help_outline</Icon>\n                                    <div>\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.CreateEditForm.document.create.type.how.to'\n                                            defaultMessage='How To'\n                                        />\n                                    </div>\n                                </div>\n                            }\n                        />\n                        <FormControlLabel\n                            className={classes.formControlLabel}\n                            value='SAMPLES'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <div className={classes.typeTextWrapper}>\n                                    <Icon>code</Icon>\n                                    <div>\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.CreateEditForm.document.create.type.sample'\n                                            defaultMessage='Sample and SDK'\n                                        />\n                                    </div>\n                                </div>\n                            }\n                        />\n                        <FormControlLabel\n                            className={classes.formControlLabel}\n                            value='PUBLIC_FORUM'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <div className={classes.typeTextWrapper}>\n                                    <Icon>forum</Icon>\n                                    <div>\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.CreateEditForm.document.create.type.public.forum'\n                                            defaultMessage='Public Forum'\n                                        />\n                                    </div>\n                                </div>\n                            }\n                        />\n                        <FormControlLabel\n                            className={classes.formControlLabel}\n                            value='SUPPORT_FORUM'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <div className={classes.typeTextWrapper}>\n                                    <Icon>forum</Icon>\n                                    <div>\n                                        <FormattedMessage\n                                            id={\n                                                'Apis.Details.Documents.CreateEditForm.document.create.type.support.' +\n                                                'forum'\n                                            }\n                                            defaultMessage='Support Forum'\n                                        />\n                                    </div>\n                                </div>\n                            }\n                        />\n                        <FormControlLabel\n                            className={classes.formControlLabel}\n                            value='OTHER'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <div className={classes.typeTextWrapper}>\n                                    <Icon>video_label</Icon>\n                                    <div>\n                                        <FormattedMessage\n                                            id='Apis.Details.Documents.CreateEditForm.document.create.type.other'\n                                            defaultMessage='Other'\n                                        />\n                                    </div>\n                                </div>\n                            }\n                        />\n                    </RadioGroup>\n                </FormControl>\n                {type === 'OTHER' && (\n                    <FormControl margin='normal' className={classes.FormControlOdd}>\n                        <TextField\n                            fullWidth\n                            label={\n                                <FormattedMessage\n                                    id={\n                                        'Apis.Details.Documents.CreateEditForm.document.create.type.other.document.' +\n                                        'category'\n                                    }\n                                    defaultMessage='Other Document Type *'\n                                />\n                            }\n                            helperText={\n                                <FormattedMessage\n                                    id={\n                                        'Apis.Details.Documents.CreateEditForm.document.create.type.other.document.' +\n                                        'category.helper.text'\n                                    }\n                                    defaultMessage='Provide the document type'\n                                />\n                            }\n                            type='text'\n                            name='otherTypeName'\n                            margin='normal'\n                            value={otherTypeName}\n                            variant='outlined'\n                            onChange={this.handleChange('otherTypeName')}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </FormControl>\n                )}\n                <FormControl component='fieldset' className={classes.formControl}>\n                    <FormLabel component='legend'>\n                        <FormattedMessage id='Apis.Details.Documents.CreateEditForm.source' defaultMessage='Source' />\n                    </FormLabel>\n                    <RadioGroup\n                        aria-label='Source'\n                        name='sourceType'\n                        className={classes.group}\n                        value={sourceType}\n                        onChange={this.changeSource}\n                    >\n                        <FormControlLabel\n                            disabled={this.setDisable('INLINE')}\n                            value='INLINE'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.source.inline'\n                                    defaultMessage='Inline'\n                                />\n                            }\n                        />\n                        <FormControlLabel\n                            disabled={this.setDisable('MARKDOWN')}\n                            value='MARKDOWN'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.source.markdown'\n                                    defaultMessage='Markdown'\n                                />\n                            }\n                        />\n                        <FormControlLabel\n                            disabled={this.setDisable('URL')}\n                            value='URL'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.source.url'\n                                    defaultMessage='URL'\n                                />\n                            }\n                        />\n                        <FormControlLabel\n                            disabled={this.setDisable('FILE')}\n                            value='FILE'\n                            control={<Radio color='primary'/>}\n                            label={\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.source.file'\n                                    defaultMessage='File'\n                                />\n                            }\n                        />\n                    </RadioGroup>\n                </FormControl>\n                {sourceType === 'URL' && (\n                    <FormControl margin='normal' className={classes.FormControlOdd}>\n                        <TextField\n                            fullWidth\n                            InputProps={{\n                                onBlur: ({ target: { value } }) => {\n                                    this.validate('url', value);\n                                },\n                                onKeyUp: ({ target: { value } }) => {\n                                    this.validate('url', value);\n                                },\n                            }}\n                            margin='normal'\n                            label={\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.source.url.url'\n                                    defaultMessage='URL'\n                                />\n                            }\n                            helperText={this.getUrlHelperText()}\n                            type='text'\n                            name='sourceUrl'\n                            margin='normal'\n                            value={sourceUrl}\n                            onChange={this.handleChange('sourceUrl')}\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                            error={invalidUrl || urlEmpty}\n                            variant='outlined'\n                        />\n                    </FormControl>\n                )}\n                {sourceType === 'FILE' && (\n                    <Dropzone\n                        multiple={false}\n                        accept='application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/pdf, text/plain'\n                        className={classes.dropzone}\n                        activeClassName={classes.acceptDrop}\n                        rejectClassName={classes.rejectDrop}\n                        onDrop={(dropFile) => {\n                            this.onDrop(dropFile);\n                        }}\n                    >\n                        {({ getRootProps, getInputProps }) => (\n                            <div {...getRootProps()}>\n                                <input {...getInputProps()} />\n                                <div className={classes.dropZoneWrapper}>\n                                    <Icon className={classes.dropIcon} style={{ fontSize: 56 }}>\n                                        cloud_upload\n                                    </Icon>\n                                    {file && file.length > 0 && (\n                                        <div className={classes.uploadedFile}>\n                                            <Icon>file</Icon> {file[0].name}\n                                        </div>\n                                    )}\n                                </div>\n                            </div>\n                        )}\n                    </Dropzone>\n                )}\n                {(sourceType === 'INLINE' || sourceType === 'MARKDOWN') && (\n                    <InlineMessage type='info' height={60}>\n                        <div className={classes.contentWrapper}>\n                            <Typography component='p' className={classes.content}>\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.CreateEditForm.document.content.info'\n                                    defaultMessage={\n                                        'Please save the document. The content can be edited in the next ' + 'step.'\n                                    }\n                                />\n                            </Typography>\n                        </div>\n                    </InlineMessage>\n                )}\n            </div>\n        );\n    }\n}\nCreateEditForm.contextType = AppContext;\nCreateEditForm.defaultProps = {\n    apiId: null,\n    docId: null,\n};\nCreateEditForm.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    docId: PropTypes.shape({}),\n    apiId: PropTypes.shape({}),\n    saveDisabled: PropTypes.bool.isRequired,\n    setSaveDisabled: PropTypes.func.isRequired,\n    apiType: PropTypes.oneOf([Api.CONSTS.API, Api.CONSTS.APIProduct]).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(CreateEditForm));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useContext, Suspense, lazy } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Slide from '@material-ui/core/Slide';\nimport Icon from '@material-ui/core/Icon';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Api from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"MDMonacoEditor\" */));\nconst ReactMarkdown = lazy(() => import('react-markdown' /* webpackChunkName: \"MDReactMarkdown\" */));\n\nconst styles = {\n    appBar: {\n        position: 'relative',\n    },\n    flex: {\n        flex: 1,\n    },\n    popupHeader: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    splitWrapper: {\n        padding: 0,\n    },\n    docName: {\n        alignItems: 'center',\n        display: 'flex',\n    },\n    markdownViewWrapper: {\n        height: '100vh',\n        overflowY: 'auto',\n    },\n    button: {\n        height: 30,\n        marginLeft: 30,\n    },\n};\n\nfunction Transition(props) {\n    return <Slide direction=\"up\" {...props} />;\n}\n\nfunction MarkdownEditor(props) {\n    const { intl, showAtOnce, history } = props;\n    const { api, isAPIProduct } = useContext(APIContext);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [open, setOpen] = useState(showAtOnce);\n    const [code, setCode] = useState(\n        intl.formatMessage({\n            id: 'documents.markdown.editor.default',\n            defaultMessage: '#Enter your markdown content',\n        }),\n    );\n    const toggleOpen = () => {\n        if (!open) updateDoc();\n        if (open && showAtOnce) {\n            const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n            const listingPath = `/${urlPrefix}/${api.id}/documents`;\n            history.push(listingPath);\n        }\n        setOpen(!open);\n    };\n    const updateCode = newCode => {\n        setCode(newCode);\n    };\n    const editorDidMount = (editor, monaco) => {\n        editor.focus();\n    };\n    const addContentToDoc = () => {\n        const restAPI = new Api();\n        setIsUpdating(true);\n        const docPromise = restAPI.addInlineContentToDocument(api.id, props.docId, 'MARKDOWN', code);\n        docPromise\n            .then(doc => {\n                Alert.info(\n                    `${doc.obj.name} ${intl.formatMessage({\n                        id: 'Apis.Details.Documents.MarkdownEditor.update.success.message',\n                        defaultMessage: 'updated successfully.',\n                    })}`,\n                );\n                toggleOpen();\n                setIsUpdating(false);\n            })\n            .catch(error => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ apiNotFound: true });\n                }\n                setIsUpdating(false);\n            });\n    };\n    const updateDoc = () => {\n        const restAPI = new Api();\n\n        const docPromise = restAPI.getInlineContentOfDocument(api.id, props.docId);\n        docPromise\n            .then(doc => {\n                setCode(doc.text);\n            })\n            .catch(error => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ apiNotFound: true });\n                }\n            });\n    };\n\n    const { classes } = props;\n    return (\n        <div>\n            <Button onClick={toggleOpen} disabled={api.isRevision}>\n                <Icon>code</Icon>\n                <FormattedMessage\n                    id=\"Apis.Details.Documents.MarkdownEditor.edit.content\"\n                    defaultMessage=\"Edit Content\"\n                />\n            </Button>\n            <Dialog fullScreen open={open} onClose={toggleOpen} TransitionComponent={Transition}>\n                <Paper square className={classes.popupHeader}>\n                    <IconButton color=\"inherit\" onClick={toggleOpen} aria-label=\"Close\">\n                        <Icon>close</Icon>\n                    </IconButton>\n                    <Typography variant=\"h4\" className={classes.docName}>\n                        <FormattedMessage\n                            id=\"Apis.Details.Documents.MarkdownEditor.edit.content.of\"\n                            defaultMessage=\"Edit Content of\"\n                        />{' '}\n                        \"{props.docName}\"\n                    </Typography>\n                    <Button className={classes.button} variant=\"contained\" disabled={isUpdating} color=\"primary\" onClick={addContentToDoc}>\n                        <FormattedMessage\n                            id=\"Apis.Details.Documents.MarkdownEditor.update.content.button\"\n                            defaultMessage=\"Update Content\"\n                        />\n                        {isUpdating && <CircularProgress size={24} />}\n                    </Button>\n                    <Button className={classes.button} onClick={toggleOpen}>\n                        <FormattedMessage\n                            id=\"Apis.Details.Documents.MarkdownEditor.cancel.button\"\n                            defaultMessage=\"Cancel\"\n                        />\n                    </Button>\n                </Paper>\n                <div className={classes.splitWrapper}>\n                    <Grid container spacing={7}>\n                        <Grid item xs={6}>\n                            <Suspense fallback={<CircularProgress />}>\n                                <MonacoEditor\n                                    width=\"100%\"\n                                    height=\"100vh\"\n                                    language=\"markdown\"\n                                    theme=\"vs-dark\"\n                                    value={code}\n                                    options={{ selectOnLineNumbers: true }}\n                                    onChange={updateCode}\n                                    editorDidMount={editorDidMount}\n                                />\n                            </Suspense>\n                        </Grid>\n                        <Grid item xs={6}>\n                            <div className={classes.markdownViewWrapper}>\n                                <Suspense fallback={<CircularProgress />}>\n                                    <ReactMarkdown escapeHtml source={code} />\n                                </Suspense>\n                            </div>\n                        </Grid>\n                    </Grid>\n                </div>\n            </Dialog>\n        </div>\n    );\n}\n\nMarkdownEditor.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withRouter(withStyles(styles)(MarkdownEditor)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {useState, useRef, useContext} from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport Slide from '@material-ui/core/Slide';\nimport Icon from '@material-ui/core/Icon';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from 'AppComponents/Shared/Alert';\nimport CreateEditForm from './CreateEditForm';\nimport Api from 'AppData/api';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst styles = {\n    appBar: {\n        position: 'relative',\n    },\n    flex: {\n        flex: 1,\n    },\n    popupHeader: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    splitWrapper: {\n        padding: 0,\n    },\n    docName: {\n        alignItems: 'center',\n        display: 'flex',\n    },\n    button: {\n        height: 30,\n        marginLeft: 30,\n    },\n    editMetaButton: {\n        whiteSpace: 'nowrap',\n    },\n};\n\nfunction Transition(props) {\n    return <Slide direction='up' {...props} />;\n}\n\nfunction Edit(props) {\n    const restAPI = new Api();\n\n    const { intl, apiType } = props;\n    const [open, setOpen] = useState(false);\n    const [saveDisabled, setSaveDisabled] = useState(false);\n    let createEditForm = useRef(null);\n    const { api } = useContext(APIContext);\n\n    const toggleOpen = () => {\n        setOpen(!open);\n    };\n\n    const updateDoc = () => {\n        const { apiId } = props;\n        const promiseWrapper = createEditForm.updateDocument(apiId);\n        promiseWrapper.docPromise\n            .then((doc) => {\n                const { documentId, name } = doc.body;\n                if (promiseWrapper.file && documentId) {\n                    const filePromise = restAPI.addFileToDocument(apiId, documentId, promiseWrapper.file[0]);\n                    filePromise\n                        .then((doc) => {\n                            Alert.info(`${name} ${intl.formatMessage({\n                                id: 'Apis.Details.Documents.Edit.markdown.editor.upload.success.message',\n                                defaultMessage: 'File uploaded successfully.',\n                            })}`);\n                            props.getDocumentsList();\n                            toggleOpen();\n                        })\n                        .catch((error) => {\n                            if (process.env.NODE_ENV !== 'production') {\n                                console.log(error);\n                                Alert.error(intl.formatMessage({\n                                    id: 'Apis.Details.Documents.Edit.markdown.editor.upload.error.message',\n                                    defaultMessage: 'Error uploading the file.',\n                                }));\n                            }\n                        });\n                } else {\n                    Alert.info(`${name} ${intl.formatMessage({\n                        id: 'Apis.Details.Documents.Edit.markdown.editor.update.success.message',\n                        defaultMessage: 'Updated successfully.',\n                    })}`);\n                    props.getDocumentsList();\n                    toggleOpen();\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Documents.Edit.markdown.editor.update.error.message',\n                        defaultMessage: 'Error adding the document',\n                    }));\n                }\n            });\n    };\n\n    const { classes, docId, apiId } = props;\n    return (\n        <div>\n            <Button onClick={toggleOpen} disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api) || api.isRevision}\n                className={classes.editMetaButton}>\n                <Icon>edit</Icon>\n                <FormattedMessage\n                    id='Apis.Details.Documents.Edit.documents.text.editor.edit'\n                    defaultMessage='Edit Meta Data'\n                />\n            </Button>\n            <Dialog open={open} onClose={toggleOpen} TransitionComponent={Transition} fullScreen>\n                <Paper square className={classes.popupHeader}>\n                    <IconButton color='inherit' onClick={toggleOpen} aria-label='Close'>\n                        <Icon>close</Icon>\n                    </IconButton>\n                    <Typography variant='h4' className={classes.docName}>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Edit.documents.text.editor.edit.content'\n                            defaultMessage='Edit '\n                        />\n                        {` ${props.docName}`}\n                    </Typography>\n                    <Button className={classes.button} variant='contained' color='primary' onClick={updateDoc} disabled={saveDisabled}>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Edit.documents.text.editor.update.content'\n                            defaultMessage='Save'\n                        />\n                    </Button>\n                    <Button className={classes.button} onClick={toggleOpen}>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Edit.documents.text.editor.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                </Paper>\n                <div className={classes.splitWrapper}>\n                    <CreateEditForm\n                        innerRef={(node) => {\n                            createEditForm = node;\n                        }}\n                        docId={docId}\n                        apiId={apiId}\n                        apiType={apiType}\n                        saveDisabled={saveDisabled}\n                        setSaveDisabled={setSaveDisabled}\n                    />\n                </div>\n            </Dialog>\n        </div>\n    );\n}\nEdit.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    apiId: PropTypes.shape({}).isRequired,\n    docId: PropTypes.shape({}).isRequired,\n    getDocumentsList: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n        apiType: PropTypes.oneOf([Api.CONSTS.API, Api.CONSTS.APIProduct]),\n    }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(Edit));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useReducer, useEffect, useState, useCallback, useMemo,\n} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport cloneDeep from 'lodash.clonedeep';\nimport isEmpty from 'lodash/isEmpty';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Banner from 'AppComponents/Shared/Banner';\nimport API from 'AppData/api';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\nimport SwaggerParser from '@apidevtools/swagger-parser';\nimport { isRestricted } from 'AppData/AuthManager';\nimport CONSTS from 'AppData/Constants';\nimport Operation from './components/Operation';\nimport GroupOfOperations from './components/GroupOfOperations';\nimport SpecErrors from './components/SpecErrors';\nimport AddOperation from './components/AddOperation';\nimport GoToDefinitionLink from './components/GoToDefinitionLink';\nimport APIRateLimiting from './components/APIRateLimiting';\nimport {\n    extractPathParameters, isSelectAll, mapAPIOperations, getVersion, VERSIONS,\n} from './operationUtils';\nimport OperationsSelector from './components/OperationsSelector';\nimport SaveOperations from './components/SaveOperations';\n\n/**\n * This component handles the Resource page in API details though it's written in a sharable way\n * that anyone could use this to render resources in anywhere else if needed.\n *\n * @export\n * @returns {React.Component} @inheritdoc\n */\nexport default function Resources(props) {\n    const {\n        operationProps,\n        disableRateLimiting,\n        hideAPIDefinitionLink,\n        disableMultiSelect,\n        disableUpdate,\n        disableAddOperation,\n    } = props;\n\n    const [api, updateAPI] = useAPI();\n    const [pageError, setPageError] = useState(false);\n    const [operationRateLimits, setOperationRateLimits] = useState([]);\n    const [markedOperations, setSelectedOperation] = useState({});\n    const [sharedScopes, setSharedScopes] = useState();\n    const [sharedScopesByName, setSharedScopesByName] = useState();\n    const [openAPISpec, setOpenAPISpec] = useState({});\n    const [securityDefScopes, setSecurityDefScopes] = useState({});\n    const [apiThrottlingPolicy, setApiThrottlingPolicy] = useState(api.apiThrottlingPolicy);\n    const [arns, setArns] = useState([]);\n    const [resolvedSpec, setResolvedSpec] = useState({ spec: {}, errors: [] });\n    const [focusOperationLevel, setFocusOperationLevel] = useState(false);\n\n    /**\n     *\n     *\n     * @param {*} currentPolicies\n     * @param {*} policyAction\n     * @returns\n     */\n    function resourcePoliciesReducer(currentPolicies, policyAction) {\n        const { action, data } = policyAction;\n        const { value } = data || {}; // target, verb,\n        let nextResourcePolicies = { ...currentPolicies };\n        switch (action) {\n            case 'init':\n                nextResourcePolicies = value;\n                break;\n            case 'update':\n                nextResourcePolicies[value.resourcePath][value.httpVerb][data.direction] = value;\n                break;\n            default:\n                break;\n        }\n        return nextResourcePolicies;\n    }\n    const [resourcePolicies, resourcePoliciesDispatcher] = useReducer(resourcePoliciesReducer, null);\n\n    /**\n     *\n     * **** NOTE: This reducer function needs to be a pure JS function, Mean we cant refer to external states, or\n     * variables within the `operationsReducer` function. Please avoid making external references.\n     * We need to remove already used `openAPISpec`,`setSecurityDefScopes` etc.\n     * Source : https://github.com/facebook/react/issues/16295#issuecomment-610098654\n     * @param {Object} currentOperations Current state\n     * @param {Object} operationAction action and payload\n     * @return {Object} next next state\n     */\n    function operationsReducer(currentOperations, operationAction) {\n        // Please read the note above before updating the reducer\n        const { action, data } = operationAction;\n        const { target, verb, value } = data || {};\n        let updatedOperation;\n        let addedOperations;\n        if (target && verb) {\n            updatedOperation = cloneDeep(currentOperations[target][verb]);\n        } else {\n            addedOperations = cloneDeep(currentOperations);\n        }\n\n        switch (action) {\n            case 'init':\n                setSelectedOperation({});\n                return data || openAPISpec.paths;\n            case 'description':\n            case 'summary':\n                updatedOperation[action] = value;\n                break;\n            case 'authType':\n                updatedOperation['x-auth-type'] = value ? 'Any' : 'None';\n                break;\n            case 'parameter':\n                if (updatedOperation.parameters) {\n                    // Get the index to check whether the same parameter exists.\n                    const index = updatedOperation.parameters.findIndex(\n                        (e) => e.in === value.in && e.name === value.name,\n                    );\n                    if (index === -1) { // Parameter with name and in does not exists.\n                        if (value.in === 'body') {\n                            // Get the index of existing body param.\n                            // This replaces if a new body parameter is added when another one exists.\n                            const bodyIndex = updatedOperation.parameters.findIndex((parameter) => {\n                                return parameter.in === 'body';\n                            });\n                            if (bodyIndex !== -1) {\n                                updatedOperation.parameters[bodyIndex] = value;\n                            } else {\n                                updatedOperation.parameters.push(value);\n                            }\n                        } else {\n                            updatedOperation.parameters.push(value);\n                        }\n                    } else {\n                        updatedOperation.parameters[index] = value;\n                    }\n                } else {\n                    updatedOperation.parameters = [value];\n                }\n                break;\n            case 'requestBody':\n                updatedOperation[action] = value;\n                break;\n            case 'deleteParameter':\n                updatedOperation.parameters = updatedOperation.parameters.filter((parameter) => {\n                    return !(parameter.in === value.in && parameter.name === value.name);\n                });\n                break;\n            case 'throttlingPolicy':\n                updatedOperation['x-throttling-tier'] = value;\n                break;\n            case 'amznResourceName':\n                updatedOperation['x-amzn-resource-name'] = value;\n                break;\n            case 'amznResourceTimeout':\n                updatedOperation['x-amzn-resource-timeout'] = value;\n                break;\n            case 'scopes': {\n                if (!updatedOperation.security) {\n                    updatedOperation.security = [{ default: [] }];\n                } else if (!updatedOperation.security.find((item) => item.default)) {\n                    updatedOperation.security.push({ default: [] });\n                }\n                const defValue = value[0];\n                updatedOperation.security.find((item) => item.default).default = defValue;\n                for (const selectedScope of defValue) {\n                    if (selectedScope\n                        && !securityDefScopes[selectedScope]\n                        && securityDefScopes[selectedScope] !== '') {\n                        let scopeDescription = '';\n                        if (selectedScope in sharedScopesByName) {\n                            if (sharedScopesByName[selectedScope].scope.description !== null) {\n                                scopeDescription = sharedScopesByName[selectedScope].scope.description;\n                            }\n                            securityDefScopes[selectedScope] = scopeDescription;\n                        }\n                        setSecurityDefScopes(securityDefScopes);\n                    }\n                }\n                break;\n            }\n            case 'add': {\n                const parameters = extractPathParameters(data.target, openAPISpec);\n                if (!addedOperations[data.target]) {\n                    // If target is not there add an empty object\n                    addedOperations[data.target] = {};\n                }\n                let alreadyExistCount = 0;\n                for (const currentVerb of data.verbs) {\n                    if (addedOperations[data.target][currentVerb]) {\n                        const message = `Operation already exist with ${data.target} and ${currentVerb}`;\n                        Alert.warning(message);\n                        console.warn(message);\n                        alreadyExistCount++;\n                    } else {\n                        // use else condition because continue is not allowed by es-lint rules\n                        addedOperations[data.target][currentVerb] = {\n                            'x-wso2-new': true, // This is to identify unsaved newly added operations, Remove when PUT\n                            'x-auth-type': 'Application & Application User', // By default security is enabled\n                            responses: { 200: { description: 'ok' } },\n                            parameters,\n                        };\n                    }\n                }\n                if (alreadyExistCount === data.verbs.length) {\n                    Alert.error('Operation(s) already exist!');\n                    return currentOperations;\n                }\n                return addedOperations;\n            }\n            default:\n                return currentOperations;\n        }\n        return { ...currentOperations, [target]: { ...currentOperations[target], [verb]: updatedOperation } };\n    }\n    const [operations, operationsDispatcher] = useReducer(operationsReducer, {});\n    /**\n     *\n     *\n     * @param {*} operation\n     * @param {*} checked\n     */\n    function onOperationSelectM(operation, checked) {\n        const { target, verb } = operation;\n        setSelectedOperation((currentSelections) => {\n            const nextSelectedOperations = cloneDeep(currentSelections);\n            if (!nextSelectedOperations[target]) {\n                nextSelectedOperations[target] = {};\n            }\n            if (checked) {\n                nextSelectedOperations[target][verb] = checked;\n            } else {\n                delete nextSelectedOperations[target][verb];\n            }\n            if (isEmpty(nextSelectedOperations[target])) {\n                delete nextSelectedOperations[target];\n            }\n            return nextSelectedOperations;\n        });\n    }\n    const onMarkAsDelete = useCallback(onOperationSelectM, [setSelectedOperation]);\n\n    // can't depends on API id because we need to consider the changes in operations in api object\n    // memoized (https://reactjs.org/docs/hooks-reference.html#usememo) to improve pref,\n    // localized to inject local apiThrottlingPolicy data\n    const localAPI = useMemo(\n        () => ({\n            id: api.id,\n            apiThrottlingPolicy,\n            scopes: api.scopes,\n            operations: api.isAPIProduct() ? {} : mapAPIOperations(api.operations),\n            endpointConfig: api.endpointConfig,\n        }),\n        [api, apiThrottlingPolicy],\n    );\n\n    /**\n     * This method sets the securityDefinitionScopes from the spec\n     * @param {Object} spec The original swagger content.\n     */\n    function setSecurityDefScopesFromSpec(spec) {\n        const openAPIVersion = getVersion(spec);\n        if (VERSIONS.V3.includes(openAPIVersion)) {\n            if (spec.components && spec.components.securitySchemes && spec.components.securitySchemes.default) {\n                const { flows } = spec.components.securitySchemes.default;\n                if (flows.implicit.scopes) {\n                    setSecurityDefScopes(cloneDeep(flows.implicit.scopes));\n                }\n            }\n        } else if (VERSIONS.V2.includes(openAPIVersion)) {\n            if (spec.securityDefinitions && spec.securityDefinitions.default) {\n                if (spec.securityDefinitions.default.scopes) {\n                    setSecurityDefScopes(cloneDeep(spec.securityDefinitions.default.scopes));\n                }\n            }\n        }\n    }\n\n    /**\n     * This method sets the scopes of the spec from the securityDefinitionScopes\n     */\n    function setSpecScopesFromSecurityDefScopes() {\n        const openAPIVersion = getVersion(openAPISpec);\n        if (VERSIONS.V3.includes(openAPIVersion)) {\n            if (openAPISpec.components\n                && openAPISpec.components.securitySchemes\n                && openAPISpec.components.securitySchemes.default) {\n                openAPISpec.components.securitySchemes.default.flows.implicit.scopes = securityDefScopes;\n            }\n        } else if (VERSIONS.V2.includes(openAPIVersion)) {\n            if (openAPISpec.securityDefinitions && openAPISpec.securityDefinitions.default) {\n                openAPISpec.securityDefinitions.default.scopes = securityDefScopes;\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {*} rawSpec The original swagger content.\n     * @returns {null}\n     */\n    function resolveAndUpdateSpec(rawSpec) {\n        /*\n         * Deep copying the spec.\n         * Otherwise it will resolved to the original parameter passed (rawSpec) to the validate method.\n         * We will not alter the provided spec.\n         */\n        const specCopy = cloneDeep(rawSpec);\n        /*\n        * Used SwaggerParser.validate() because we can get the errors as well.\n        */\n        SwaggerParser.validate(specCopy, (err, result) => {\n            setResolvedSpec(() => {\n                const errors = err ? [err] : [];\n                return {\n                    spec: result,\n                    errors,\n                };\n            });\n        });\n        operationsDispatcher({ action: 'init', data: rawSpec.paths });\n        setOpenAPISpec(rawSpec);\n        setSecurityDefScopesFromSpec(rawSpec);\n    }\n\n    /**\n     *\n     * Update the swagger using /swagger PUT operation and then fetch the updated API Object doing a apis/{api-uuid} GET\n     * @param {JSON} spec Updated full OpenAPI spec ready to PUT\n     * @returns {Promise} Promise resolving to updated API object\n     */\n    function updateSwagger(spec) {\n        return api\n            .updateSwagger(spec)\n            .then((response) => resolveAndUpdateSpec(response.body))\n            .then(updateAPI)\n            .catch((error) => {\n                console.error(error);\n                if (error.response) {\n                    setPageError(error.response.body);\n                } else {\n                    Alert.error('Error while updating the definition');\n                }\n            });\n    }\n\n    /**\n     *\n     * This method modifies the security definition scopes by removing the scopes which are not present\n     * in operations and which are shared scopes\n     * @param {Array} apiOperations Operations list\n     */\n    function updateSecurityDefinition(apiOperations) {\n        Object.keys(securityDefScopes).forEach((key) => {\n            let isScopeExistsInOperation = false;\n            for (const [, verbs] of Object.entries(apiOperations)) {\n                for (const [, verbInfo] of Object.entries(verbs)) {\n                    // Checking if the scope resides in the operation\n                    for (const secDef of verbInfo.security || []) {\n                        if (secDef\n                            && secDef.default\n                            && secDef.default.includes(key)) {\n                            isScopeExistsInOperation = true;\n                            break;\n                        }\n                    }\n\n                    if (isScopeExistsInOperation) {\n                        break;\n                    }\n                }\n                if (isScopeExistsInOperation) {\n                    break;\n                }\n            }\n            // Checking if the scope exists in operation and is a shared scope\n            if (!isScopeExistsInOperation && (key in sharedScopesByName)) {\n                delete securityDefScopes[key];\n            }\n        });\n        setSecurityDefScopes(securityDefScopes);\n    }\n\n    /**\n     *\n     * Save the OpenAPI changes using REST API, type parameter is required to\n     * identify the locally created data structured, i:e type `operation` will assume that `data` contains the\n     * object structure of locally created operation object which is a combination of REST API\n     * response `operations` field and OpenAPI spec operation information\n     * @param {String} type Type of data object\n     * @param {Object} data Data object\n     * @returns {Promise|null} A promise object which resolve to Swagger PUT response body.\n     */\n    function updateOpenAPI(type) {\n        const copyOfOperations = cloneDeep(operations);\n        switch (type) {\n            case 'save':\n                if (isSelectAll(markedOperations, copyOfOperations)) {\n                    const message = 'At least one operation is required for the API';\n                    Alert.warning(message);\n                    return Promise.reject(new Error(message));\n                }\n                for (const [target, verbs] of Object.entries(markedOperations)) {\n                    for (const verb of Object.keys(verbs)) {\n                        delete copyOfOperations[target][verb];\n                        if (isEmpty(copyOfOperations[target])) {\n                            delete copyOfOperations[target];\n                        }\n                    }\n                }\n                // TODO: use better alternative (optimize performance) to identify newly added operations ~tmkb\n                for (const [, verbs] of Object.entries(copyOfOperations)) {\n                    for (const [, verbInfo] of Object.entries(verbs)) {\n                        if (verbInfo['x-wso2-new']) {\n                            delete verbInfo['x-wso2-new'];\n                        }\n                    }\n                }\n                break;\n            default:\n                return Promise.reject(new Error('Unsupported resource operation!'));\n        }\n        updateSecurityDefinition(copyOfOperations);\n        setSpecScopesFromSecurityDefScopes();\n        if (apiThrottlingPolicy !== api.apiThrottlingPolicy) {\n            return updateAPI({ apiThrottlingPolicy })\n                .catch((error) => {\n                    console.error(error);\n                    Alert.error('Error while updating the API');\n                })\n                .then(() => updateSwagger({ ...openAPISpec, paths: copyOfOperations }));\n        } else {\n            return updateSwagger({ ...openAPISpec, paths: copyOfOperations });\n        }\n    }\n\n    useEffect(() => {\n        API.getAmznResourceNames(api.id)\n            .then((response) => {\n                if (response.body && response.body.list) {\n                    setArns(response.body.list);\n                }\n            });\n    }, []);\n\n    useEffect(() => {\n        setApiThrottlingPolicy(api.apiThrottlingPolicy);\n    }, [api.apiThrottlingPolicy]);\n\n    useEffect(() => {\n        if (api.apitype !== 'APIProduct') {\n            API.getAllScopes()\n                .then((response) => {\n                    if (response.body && response.body.list) {\n                        const sharedScopesList = [];\n                        const sharedScopesByNameList = {};\n                        const shared = true;\n                        for (const scope of response.body.list) {\n                            const modifiedScope = {};\n                            modifiedScope.scope = scope;\n                            modifiedScope.shared = shared;\n                            sharedScopesList.push(modifiedScope);\n                            sharedScopesByNameList[scope.name] = modifiedScope;\n                        }\n                        setSharedScopes(sharedScopesList);\n                        setSharedScopesByName(sharedScopesByNameList);\n                    }\n                });\n        }\n    }, []);\n\n    useEffect(() => {\n        // Update the Swagger spec object when API object gets changed\n        api.getSwagger()\n            .then((response) => {\n                resolveAndUpdateSpec(response.body);\n            })\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                    setPageError(error.response.body);\n                }\n                console.error(error);\n            });\n        if (api.isSOAPToREST()) {\n            const promisedInPolicies = api.getResourcePolicies('in');\n            const promisedOutPolicies = api.getResourcePolicies('out');\n            Promise.all([promisedInPolicies, promisedOutPolicies])\n                .then(([inPolicies, outPolicies]) => {\n                    const mappedPolicies = {};\n                    for (const policy of inPolicies.body.list) {\n                        const { resourcePath, httpVerb } = policy;\n                        if (!mappedPolicies[resourcePath]) {\n                            mappedPolicies[resourcePath] = {\n                                [httpVerb]: { in: policy },\n                            };\n                        } else {\n                            mappedPolicies[resourcePath][httpVerb] = { in: policy };\n                        }\n                    }\n                    for (const policy of outPolicies.body.list) {\n                        const { resourcePath, httpVerb } = policy;\n                        if (!mappedPolicies[resourcePath]) {\n                            mappedPolicies[resourcePath] = {\n                                [httpVerb]: { out: policy },\n                            };\n                        } else {\n                            mappedPolicies[resourcePath][httpVerb].out = policy;\n                        }\n                    }\n                    resourcePoliciesDispatcher({ action: 'init', data: { value: mappedPolicies } });\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                        setPageError(error.response.body);\n                    }\n                    setPageError(error.message);\n                    console.error(error);\n                });\n        }\n        // Fetch API level throttling policies only when the page get mounted for the first time `componentDidMount`\n        API.policies('api').then((response) => {\n            setOperationRateLimits(response.body.list);\n        });\n        // TODO: need to handle the error cases through catch ~tmkb\n    }, [api.id]);\n\n    // Note: Make sure not to use any hooks after/within this condition , because it returns conditionally\n    // If you do so, You will probably get `Rendered more hooks than during the previous render.` exception\n    if ((!pageError && isEmpty(openAPISpec)) || (resolvedSpec.errors.length === 0 && isEmpty(resolvedSpec.spec))) {\n        return (\n            <Grid container direction='row' justify='center' alignItems='center'>\n                <Grid item>\n                    <CircularProgress disableShrink />\n                </Grid>\n            </Grid>\n        );\n    }\n    return (\n        <Grid container direction='row' justify='flex-start' spacing={2} alignItems='stretch'>\n            {pageError && (\n                <Grid item md={12}>\n                    <Banner onClose={() => setPageError(null)} disableActions type='error' message={pageError} />\n                </Grid>\n            )}\n            {!disableRateLimiting && (\n                <Grid item md={12}>\n                    <APIRateLimiting\n                        operationRateLimits={operationRateLimits}\n                        value={apiThrottlingPolicy}\n                        onChange={setApiThrottlingPolicy}\n                        isAPIProduct={api.isAPIProduct()}\n                        focusOperationLevel={focusOperationLevel}\n                        setFocusOperationLevel={setFocusOperationLevel}\n                    />\n                </Grid>\n            )}\n            {!isRestricted(['apim:api_create'], api) && !disableAddOperation && (\n                <Grid item md={12} xs={12}>\n                    <AddOperation operationsDispatcher={operationsDispatcher} />\n                </Grid>\n            )}\n            {resolvedSpec.errors.length > 0 && <SpecErrors specErrors={resolvedSpec.errors} />}\n            <Grid item md={12}>\n                <Paper>\n                    {!disableMultiSelect && (\n                        <OperationsSelector\n                            operations={operations}\n                            selectedOperations={markedOperations}\n                            setSelectedOperation={setSelectedOperation}\n                        />\n                    )}\n                    {Object.entries(operations).map(([target, verbObject]) => (\n                        <Grid key={target} item md={12}>\n                            <GroupOfOperations openAPI={openAPISpec} tag={target}>\n                                <Grid\n                                    container\n                                    direction='column'\n                                    justify='flex-start'\n                                    spacing={1}\n                                    alignItems='stretch'\n                                >\n                                    {Object.entries(verbObject).map(([verb, operation]) => {\n                                        return CONSTS.HTTP_METHODS.includes(verb) ? (\n                                            <Grid key={`${target}/${verb}`} item>\n                                                <Operation\n                                                    target={target}\n                                                    verb={verb}\n                                                    highlight\n                                                    resourcePoliciesDispatcher={resourcePoliciesDispatcher}\n                                                    resourcePolicy={\n                                                        resourcePolicies\n                                                        && resourcePolicies[target.slice(1)]\n                                                        && resourcePolicies[target.slice(1)][verb]\n                                                    }\n                                                    operationsDispatcher={operationsDispatcher}\n                                                    spec={openAPISpec}\n                                                    operation={operation}\n                                                    operationRateLimits={operationRateLimits}\n                                                    api={localAPI}\n                                                    markAsDelete={Boolean(markedOperations[target]\n                                                        && markedOperations[target][verb])}\n                                                    onMarkAsDelete={onMarkAsDelete}\n                                                    disableUpdate={\n                                                        disableUpdate || isRestricted(['apim:api_create'], api)\n                                                    }\n                                                    disableMultiSelect={disableMultiSelect}\n                                                    arns={arns}\n                                                    {...operationProps}\n                                                    resolvedSpec={resolvedSpec.spec}\n                                                    sharedScopes={sharedScopes}\n                                                    setFocusOperationLevel={setFocusOperationLevel}\n                                                />\n                                            </Grid>\n                                        ) : null;\n                                    })}\n                                </Grid>\n                            </GroupOfOperations>\n                        </Grid>\n                    ))}\n                </Paper>\n                <Grid\n                    style={{ marginTop: '25px' }}\n                    container\n                    direction='row'\n                    justify='space-between'\n                    alignItems='center'\n                >\n                    <Grid item>\n                        {!disableUpdate && (\n                            <SaveOperations\n                                operationsDispatcher={operationsDispatcher}\n                                updateOpenAPI={updateOpenAPI}\n                                api={api}\n                            />\n                        )}\n                    </Grid>\n                    <Grid item>\n                        {!hideAPIDefinitionLink && <GoToDefinitionLink api={api} />}\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}\n\nResources.defaultProps = {\n    operationProps: { disableDelete: false },\n    disableUpdate: false,\n    disableRateLimiting: false,\n    disableMultiSelect: false,\n    hideAPIDefinitionLink: false,\n    disableAddOperation: false,\n};\n\nResources.propTypes = {\n    disableRateLimiting: PropTypes.bool,\n    hideAPIDefinitionLink: PropTypes.bool,\n    disableMultiSelect: PropTypes.bool,\n    disableAddOperation: PropTypes.bool,\n    disableUpdate: PropTypes.bool,\n    operationProps: PropTypes.shape({\n        disableDelete: PropTypes.bool,\n    }),\n};\n","/*\n *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\n/**\n * Defining the supported data types by the OAS spec versions.\n *\n * 2.0 : https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#dataTypeFormat\n * 3.x :https://swagger.io/docs/specification/data-models/data-types/\n * */\nconst supportedDataTypes = {\n    '2.0': {\n        body: ['integer', 'number', 'string', 'boolean', 'object'],\n        formData: ['integer', 'number', 'string', 'boolean', 'file'],\n        query: ['integer', 'number', 'string', 'boolean'],\n        path: ['integer', 'number', 'string', 'boolean'],\n        header: ['integer', 'number', 'string', 'boolean'],\n    },\n    '3.x': {\n        body: ['integer', 'number', 'string', 'boolean', 'object'],\n        query: ['integer', 'number', 'string', 'boolean'],\n        path: ['integer', 'number', 'string', 'boolean'],\n        header: ['integer', 'number', 'string', 'boolean'],\n        cookie: ['integer', 'number', 'string', 'boolean'],\n    },\n};\n\n/**\n * Util method for checking conditions.\n *\n * @param {boolean} condition : The condition to be checked\n * @param {any} matched : The value to be returned if the condition is true\n * @param {any} otherwise : The value to be returned if the condition is false.\n * @return {object} If true -> matched, false -> otherwise\n * */\nexport function iff(condition, matched, otherwise) {\n    return condition ? matched : otherwise;\n}\n\n/**\n * Method to get the supported data types for the given parameter type.\n *\n * @param {string} specVersion : The OAS version\n * @param {string} paramType : The parameter type.\n * @return {array} The list of supported parameters.\n * */\nexport function getSupportedDataTypes(specVersion, paramType) {\n    return paramType ? supportedDataTypes[specVersion === '2.0' ? '2.0' : '3.x'][paramType] : [];\n}\n\n/**\n * Get the supported data formats by each data type.\n *\n * @param {string} dataType: THe data type.\n * @return {array} The list of supported data formats.\n * */\nexport function getDataFormats(dataType) {\n    switch (dataType) {\n        case 'integer':\n            return ['int64', 'int32'];\n        case 'number':\n            return ['float', 'double'];\n        case 'string':\n            return ['date', 'date-time', 'byte', 'binary', 'password'];\n        default:\n            return [];\n    }\n}\n\n/**\n * Method to get the parameter schema based on the spec version.\n * For more info about Data Models (Schemas) refer https://swagger.io/docs/specification/data-models/\n * @param {string} specVersion : The OAS version\n * @return {object} The default schema\n * */\nexport function getParameter(specVersion) {\n    return specVersion === '2.0'\n        ? {\n            in: '', name: '', type: '', required: '',\n        }\n        : {\n            in: '', name: '', schema: { type: '' }, required: '',\n        };\n}\n\n/**\n * Get parameter types supported by spec version.\n *\n * @param {string} specVersion : The OAS version\n * @return {array} The list of supported parameter types.\n * */\nexport function getParameterTypes(specVersion) {\n    return specVersion === '2.0' ? ['query', 'header', 'body', 'formData'] : ['query', 'header', 'cookie', 'body'];\n}\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport {\n    Divider,\n    Icon,\n    IconButton,\n    InputAdornment,\n    TextField,\n    withStyles,\n} from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport green from '@material-ui/core/colors/green';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Chip from '@material-ui/core/Chip';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\n\n\nconst styles = (theme) => ({\n    endpointInputWrapper: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    textField: {\n        width: '100%',\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: theme.spacing(1),\n    },\n    iconButtonValid: {\n        padding: theme.spacing(1),\n        color: green[500],\n    },\n    divider: {\n        width: 1,\n        height: 28,\n        margin: 4,\n    },\n    endpointValidChip: {\n        color: 'green',\n        border: '1px solid green',\n    },\n    endpointInvalidChip: {\n        color: '#ffd53a',\n        border: '1px solid #ffd53a',\n    },\n    endpointErrorChip: {\n        color: 'red',\n        border: '1px solid red',\n    },\n});\n/**\n * This component represents a single endpoint view of the endpoints listing. This component holds the actions that\n * affect the endpont. Eg: Delete, advance configuration.\n *\n * @param {any} props The input props\n * @returns {any} The HTML representation of the component.\n * */\nfunction GenericEndpoint(props) {\n    const {\n        category,\n        endpointURL,\n        editEndpoint,\n        classes,\n        type,\n        setAdvancedConfigOpen,\n        esCategory,\n        setESConfigOpen,\n        deleteEndpoint,\n        index,\n        readOnly,\n        autoFocus,\n        name,\n        apiId,\n    } = props;\n    const [serviceUrl, setServiceUrl] = useState(endpointURL);\n    const { api } = useContext(APIContext);\n    const [isEndpointValid, setIsEndpointValid] = useState();\n    const [statusCode, setStatusCode] = useState('');\n    const [isUpdating, setUpdating] = useState(false);\n    const [isErrorCode, setIsErrorCode] = useState(false);\n    const iff = (condition, then, otherwise) => (condition ? then : otherwise);\n\n    useEffect(() => {\n        setServiceUrl(endpointURL);\n    }, [endpointURL]);\n\n    function testEndpoint(endpoint, apiID) {\n        setUpdating(true);\n        const restApi = new API();\n        restApi.testEndpoint(endpoint, apiID)\n            .then((result) => {\n                if (result.body.error !== null) {\n                    setStatusCode(result.body.error);\n                    setIsErrorCode(true);\n                } else {\n                    setStatusCode(result.body.statusCode + ' ' + result.body.statusMessage);\n                    setIsErrorCode(false);\n                }\n                if (result.body.statusCode >= 200 && result.body.statusCode < 300) {\n                    setIsEndpointValid(true);\n                    setIsErrorCode(false);\n                } else {\n                    setIsEndpointValid(false);\n                }\n            }).finally(() => {\n                setUpdating(false);\n            });\n    }\n\n    return (\n        <div className={classes.endpointInputWrapper}>\n            <TextField\n                disabled={isRestricted(['apim:api_create'], api)}\n                label={name}\n                className={classes.textField}\n                value={serviceUrl}\n                placeholder={!serviceUrl ? 'http://appserver/resource' : ''}\n                onChange={(event) => setServiceUrl(event.target.value)}\n                onBlur={() => {\n                    editEndpoint(index, category, serviceUrl);\n                }}\n                error={!serviceUrl}\n                helperText={!serviceUrl\n                    ? (\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GenericEndpoint.no.ep.error'\n                            defaultMessage='Endpoint URL should not be empty'\n                        />\n                    ) : ''}\n                variant='outlined'\n                margin='normal'\n                required\n                InputProps={{\n                    readOnly,\n                    autoFocus,\n                    endAdornment: (\n                        <InputAdornment position='end'>\n                            {statusCode && (\n                                <Chip\n                                    label={statusCode}\n                                    className={isEndpointValid ? classes.endpointValidChip : iff(\n                                        isErrorCode,\n                                        classes.endpointErrorChip, classes.endpointInvalidChip,\n                                    )}\n                                    variant='outlined'\n                                />\n                            )}\n                            {!api.isWebSocket() && (\n                                <IconButton\n                                    className={isEndpointValid ? classes.iconButtonValid : classes.iconButton}\n                                    aria-label='TestEndpoint'\n                                    onClick={() => testEndpoint(serviceUrl, apiId)}\n                                    disabled={(isRestricted(['apim:api_create'], api)) || isUpdating}\n                                >\n                                    {isUpdating\n                                        ? <CircularProgress size={20} />\n                                        : (\n                                            <Tooltip\n                                                placement='top-start'\n                                                interactive\n                                                title={(\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Endpoints.GenericEndpoint.check.endpoint'\n                                                        defaultMessage='Check endpoint status'\n                                                    />\n                                                )}\n                                            >\n                                                <Icon>\n                                                    check_circle\n                                                </Icon>\n                                            </Tooltip>\n\n                                        )}\n                                </IconButton>\n                            )}\n                            {type === 'prototyped'\n                                ? <div />\n                                : (\n                                    <>\n                                        <IconButton\n                                            className={classes.iconButton}\n                                            aria-label='Settings'\n                                            onClick={() => setAdvancedConfigOpen(index, type, category)}\n                                            disabled={(isRestricted(['apim:api_create'], api))}\n                                        >\n                                            <Tooltip\n                                                placement='top-start'\n                                                interactive\n                                                title={(\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Endpoints.GenericEndpoint.config.endpoint'\n                                                        defaultMessage='Endpoint configurations'\n                                                    />\n                                                )}\n                                            >\n                                                <Icon>\n                                                    settings\n                                                </Icon>\n                                            </Tooltip>\n                                        </IconButton>\n                                        <IconButton\n                                            className={classes.iconButton}\n                                            aria-label='Security'\n                                            onClick={() => setESConfigOpen(type, esCategory)}\n                                            disabled={(isRestricted(['apim:api_create'], api))}\n                                        >\n                                            <Tooltip\n                                                placement='top-start'\n                                                interactive\n                                                title={(\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Endpoints.GenericEndpoint.security.endpoint'\n                                                        defaultMessage='Endpoint security'\n                                                    />\n                                                )}\n                                            >\n                                                <Icon>\n                                                    security\n                                                </Icon>\n                                            </Tooltip>\n                                        </IconButton>\n                                    </>\n                                )}\n                            {(index > 0) ? <Divider className={classes.divider} /> : <div />}\n                            {(type === 'load_balance' || type === 'failover') ? (\n                                <IconButton\n                                    className={classes.iconButton}\n                                    aria-label='Delete'\n                                    color='secondary'\n                                    onClick={() => deleteEndpoint(index, type, category)}\n                                    disabled={(isRestricted(['apim:api_create'], api))}\n                                >\n                                    <Icon>\n                                        delete\n                                    </Icon>\n                                </IconButton>\n                            ) : (<div />)}\n                        </InputAdornment>\n                    ),\n                }}\n            />\n        </div>\n    );\n}\n\nGenericEndpoint.defaultProps = {\n    readOnly: false,\n    autoFocus: false,\n    name: 'Service URL',\n};\n\nGenericEndpoint.propTypes = {\n    endpointURL: PropTypes.string.isRequired,\n    deleteEndpoint: PropTypes.func.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    type: PropTypes.string.isRequired,\n    setAdvancedConfigOpen: PropTypes.func.isRequired,\n    setESConfigOpen: PropTypes.func.isRequired,\n    index: PropTypes.number.isRequired,\n    editEndpoint: PropTypes.func.isRequired,\n    category: PropTypes.string.isRequired,\n    readOnly: PropTypes.bool,\n    autoFocus: PropTypes.bool,\n    name: PropTypes.string,\n    apiId: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles)(GenericEndpoint);\n","/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport {\n    TextField, Button, Typography, InputLabel,\n} from '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Alert from 'AppComponents/Shared/Alert';\nimport CommentsAPI from 'AppData/Comments';\n\nconst styles = (theme) => ({\n    commentIcon: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    content: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        marginTop: theme.spacing(2),\n    },\n    textField: {\n        marginTop: 0,\n        marginRight: 5,\n        width: '100%',\n    },\n    commentAddWrapper: {\n        display: 'flex',\n        alignItems: 'top',\n        flexFlow: 'column',\n        '& label': {\n            marginBottom: theme.spacing(1),\n        },\n    },\n    commentAddButton: {\n        '& > span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main) + '! important',\n        },\n    },\n});\n\n/**\n   * Display a component to add a new comment\n   * @class CommmentAdd\n   * @extends {React.Component}\n   */\nclass CommentAdd extends React.Component {\n    /**\n     * Creates an instance of CommentAdd\n     * @param {*} props properies passed by the parent element\n     * @memberof CommentAdd\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            content: '',\n            currentLength: 0,\n        };\n        this.inputChange = this.inputChange.bind(this);\n        this.handleClickAddComment = this.handleClickAddComment.bind(this);\n        this.handleClickCancel = this.handleClickCancel.bind(this);\n        this.filterCommentToAddReply = this.filterCommentToAddReply.bind(this);\n    }\n\n    /**\n     * Handles the comment text when input changes\n     * @param {Object} {target} target element\n     * @memberof CommentAdd\n     */\n    inputChange({ target }) {\n        this.setState({ content: target.value, currentLength: target.value.length });\n    }\n\n    /**\n     * Hides the component to add a new comment when cancelled\n     * @memberof CommentAdd\n     */\n    handleClickCancel() {\n        this.setState({ content: '' });\n        const { handleShowReply } = this.props;\n        handleShowReply();\n    }\n\n    /**\n     * Filters the comment to add the reply\n     * @memberof CommentAdd\n     */\n    filterCommentToAddReply(commentToFilter) {\n        const { replyTo } = this.props;\n        return commentToFilter.id === replyTo;\n    }\n\n    /**\n     * Handles adding a new comment\n     * @memberof CommentAdd\n     * * */\n    handleClickAddComment() {\n        const {\n            api: { id: apiId }, replyTo, handleShowReply, addComment, addReply,\n        } = this.props;\n        const { content } = this.state;\n        const comment = {\n            content: content.trim(), category: 'general',\n        };\n\n        // to check whether a string does not contain only white spaces\n        if (comment.content.replace(/\\s/g, '').length) {\n            CommentsAPI.add(apiId, comment, replyTo)\n                .then((newComment) => {\n                    this.setState({ content: '' });\n                    if (replyTo === null) {\n                        if (addComment) {\n                            addComment(newComment.body);\n                        }\n                    } else if (addReply) {\n                        addReply(newComment.body);\n                    }\n                })\n                .catch((error) => {\n                    console.error(error);\n                    if (error.response) {\n                        Alert.error(error.response.body.message);\n                    } else {\n                        Alert.error('Something went wrong while adding the comment');\n                    }\n                });\n        } else {\n            Alert.error('You cannot enter a blank comment');\n        }\n        this.setState({ currentLength: 0 });\n        if (replyTo !== null) {\n            handleShowReply();\n        }\n    }\n\n    /**\n     * Render method of the component\n     * @returns {React.Component} Comment html component\n     * @memberof CommentAdd\n     */\n    render() {\n        const {\n            classes, cancelButton, theme, intl, api,\n        } = this.props;\n        const { content, currentLength } = this.state;\n        return (\n            <Grid container spacing={2} className={classes.contentWrapper}>\n                <Grid item xs zeroMinWidth>\n                    <div className={classes.commentAddWrapper}>\n                        <InputLabel htmlFor='standard-multiline-flexible'>\n                            <FormattedMessage\n                                id='Apis.Details.Comments.CommentAdd.write.comment.label'\n                                defaultMessage='Write a comment'\n                            />\n                        </InputLabel>\n                        <TextField\n                            id='standard-multiline-flexible'\n                            autoFocus\n                            multiline\n                            disabled={api.isRevision}\n                            className={classes.textField}\n                            margin='normal'\n                            placeholder={intl.formatMessage({\n                                defaultMessage: 'Write a comment',\n                                id: 'Apis.Details.Comments.CommentAdd.write.comment.help',\n                            })}\n                            inputProps={{ maxLength: theme.custom.maxCommentLength }}\n                            value={content}\n                            onChange={this.inputChange}\n                            variant='outlined'\n                        />\n                        <Typography className={classes.content} align='right'>\n                            {currentLength + '/' + theme.custom.maxCommentLength}\n                        </Typography>\n                    </div>\n                    <Grid container spacing={1}>\n                        <Grid item>\n                            <Button\n                                variant='contained'\n                                color='primary'\n                                disabled={currentLength === 0}\n                                onClick={() => this.handleClickAddComment()}\n                                className={classes.commentAddButton}\n                            >\n                                <FormattedMessage\n                                    id='Apis.Details.Comments.CommentAdd.btn.add.comment'\n                                    defaultMessage='Comment'\n                                />\n                            </Button>\n                        </Grid>\n                        {cancelButton && (\n                            <Grid item>\n                                <Button onClick={() => this.handleClickCancel(-1)} className={classes.button}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Comments.CommentAdd.btn.cancel'\n                                        defaultMessage='Cancel'\n                                    />\n                                </Button>\n                            </Grid>\n                        )}\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nCommentAdd.defaultProps = {\n    replyTo: null,\n    handleShowReply: null,\n};\n\nCommentAdd.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    cancelButton: PropTypes.bool.isRequired,\n    api: PropTypes.instanceOf(Object).isRequired,\n    replyTo: PropTypes.string,\n    handleShowReply: PropTypes.func,\n    theme: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(CommentAdd));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useReducer, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { Typography } from '@material-ui/core';\nimport CloudUploadRounded from '@material-ui/icons/CloudUploadRounded';\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api.js';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ProvideWSDL from 'AppComponents/Apis/Create/WSDL/Steps/ProvideWSDL';\nimport ProvideAsyncAPI from 'AppComponents/Apis/Create/AsyncAPI/Steps/ProvideAsyncAPI';\nimport ProvideOpenAPI from '../../Create/OpenAPI/Steps/ProvideOpenAPI';\nimport ProvideGraphQL from '../../Create/GraphQL/Steps/ProvideGraphQL';\n\nconst useStyles = makeStyles(() => ({\n    importDefinitionDialogHeader: {\n        fontWeight: '600',\n    },\n    buttonIcon: {\n        marginRight: 10,\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function ImportDefinition(props) {\n    const { setSchemaDefinition } = props;\n    const classes = useStyles();\n    const [openAPIDefinitionImport, setOpenAPIDefinitionImport] = useState(false);\n    const [isImporting, setIsImporting] = useState(false);\n    const [api] = useAPI();\n    const intl = useIntl();\n    const isGraphQL = api.isGraphql();\n    const isSOAP = api.isSOAP();\n    // const isWebSocket = api.isWebSocket();\n    // const isWebSub = api.isWebSub();\n    const isAsyncAPI = api && (api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE');\n    const [asyncAPIDefinitionImport, setAsyncAPIDefinitionImport] = useState(false);\n\n    const handleAPIDefinitionImportOpen = () => {\n        // eslint-disable-next-line no-unused-expressions\n        isAsyncAPI ? setAsyncAPIDefinitionImport(true) : setOpenAPIDefinitionImport(true);\n        // isWebSocket || isWebSub ? setAsyncAPIDefinitionImport(true) : setOpenAPIDefinitionImport(true);\n    };\n\n    const handleAPIDefinitionImportCancel = () => {\n        // eslint-disable-next-line no-unused-expressions\n        isAsyncAPI ? setAsyncAPIDefinitionImport(false) : setOpenAPIDefinitionImport(false);\n        // isWebSocket || isWebSub ? setAsyncAPIDefinitionImport(false) : setOpenAPIDefinitionImport(false);\n    };\n\n    function apiInputsReducer(currentState, inputAction) {\n        const { action, value } = inputAction;\n        switch (action) {\n            case 'inputValue':\n            case 'isFormValid':\n                return { ...currentState, [action]: value };\n            case 'inputType':\n                return { ...currentState, [action]: value, inputValue: value === 'url' ? '' : null };\n            case 'preSetAPI':\n                return {\n                    ...currentState,\n                    content: value.content,\n                };\n            default:\n                return currentState;\n        }\n    }\n\n    const [apiInputs, inputsDispatcher] = useReducer(apiInputsReducer, {\n        type: '',\n        inputType: 'url',\n        inputValue: '',\n        formValidity: false,\n        mode: 'update',\n    });\n\n    /**\n     * Updates OpenAPI definition\n     */\n    function updateOASDefinition() {\n        setIsImporting(true);\n        const {\n            inputValue, inputType, content,\n        } = apiInputs;\n        const isFileInput = inputType === 'file';\n        if (isFileInput) {\n            const reader = new FileReader();\n            const contentType = inputValue.type.includes('yaml') ? 'yaml' : 'json';\n            reader.onloadend = (event) => {\n                setSchemaDefinition(event.currentTarget.result, contentType);\n            };\n            reader.readAsText(inputValue);\n        }\n        const newAPI = new API();\n        const promisedResponse = isFileInput ? newAPI.updateAPIDefinitionByFile(api.id, inputValue)\n            : newAPI.updateAPIDefinitionByUrl(api.id, inputValue);\n        promisedResponse\n            .then(() => {\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.api.definition.oas.updated.successfully',\n                    defaultMessage: 'API Definition Updated Successfully',\n                }));\n                setOpenAPIDefinitionImport(false);\n                if (!isFileInput) {\n                    // Test to starting the content with'{' character ignoring white spaces\n                    const isJSONRegex = RegExp(/^\\s*{/); // TODO: not a solid test need to support from REST API ~tmkb\n                    const contentType = isJSONRegex.test(content) ? 'json' : 'yaml';\n                    setSchemaDefinition(content, contentType);\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.import.api.definition',\n                    defaultMessage: 'Error while updating the API Definition',\n                }));\n            }).finally(() => setIsImporting(false));\n    }\n\n    /**\n     * Updates AsyncAPI definition\n     */\n    function updateAsyncAPIDefinition() {\n        setIsImporting(true);\n        const {\n            inputValue, inputType, content,\n        } = apiInputs;\n        const isFileInput = inputType === 'file';\n        if (isFileInput) {\n            const reader = new FileReader();\n            // eslint-disable-next-line no-nested-ternary\n            const contentType = inputValue.type.includes('yaml') ? 'yaml'\n                : inputValue.type.includes('yml') ? 'yml' : 'json';\n            reader.onloadend = (event) => {\n                setSchemaDefinition(event.currentTarget.result, contentType);\n            };\n            reader.readAsText(inputValue);\n        }\n        const newAPI = new API();\n        const promisedResponse = isFileInput ? newAPI.updateAsyncAPIDefinitionByFile(api.id, inputValue)\n            : newAPI.updateAsyncAPIDefinitionByUrl(api.id, inputValue);\n        promisedResponse\n            .then(() => {\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.async.api.import.definition.updated.successfully',\n                    defaultMessage: 'API Definition Updated Successfully',\n                }));\n                setAsyncAPIDefinitionImport(false);\n                if (!isFileInput) {\n                    // Test to starting the content with'{' character ignoring white spaces\n                    const isJSONRegex = RegExp(/^\\s*{/); // TODO: not a solid test need to support from REST API ~tmkb\n                    const contentType = isJSONRegex.test(content) ? 'json' : 'yaml';\n                    setSchemaDefinition(content, contentType);\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.import.async.api.definition',\n                    defaultMessage: 'Error while updating the API Definition',\n                }));\n            }).finally(() => setIsImporting(false));\n    }\n\n    /**\n     * Update the graphQL api with its operation\n     * @param {*}  api\n     * @param {*}  graphQLInfo\n     */\n    function updateGraphQLAPIDefinition(graphQLSchema) {\n        const promisedAPI = api.updateGraphQLAPIDefinition(api.id, graphQLSchema);\n        promisedAPI\n            .then((response) => {\n                api.operations = response.obj;\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.graphQLDefinition.updated.successfully',\n                    defaultMessage: 'Schema Definition Updated Successfully',\n                }));\n                setOpenAPIDefinitionImport(false);\n                setSchemaDefinition(graphQLSchema);\n            })\n            .catch((err) => {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.updating.graphQL.schema',\n                    defaultMessage: 'Error while updating GraphQL schema',\n                }));\n            });\n    }\n\n    /**\n     * Updates GraphQL schema definition\n     */\n    function updateGraphQLSchema() {\n        const {\n            inputValue,\n        } = apiInputs;\n\n        const promisedValidation = API.validateGraphQLFile(inputValue);\n        promisedValidation\n            .then((response) => {\n                const { isValid, graphQLInfo } = response.obj;\n                if (isValid === true) {\n                    updateGraphQLAPIDefinition(graphQLInfo.graphQLSchema.schemaDefinition);\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Error.while.validating.the.imported.graphQLSchema',\n                    defaultMessage: 'Error while validating the imported schema',\n                }));\n            });\n    }\n\n    /**\n     * Updates WSDL definition\n     */\n    function updateWSDL() {\n        const {\n            inputType, inputValue,\n        } = apiInputs;\n        const isFileInput = inputType === 'file';\n        let promisedAPI;\n        if (isFileInput) {\n            promisedAPI = api.updateWSDLByFileOrArchive(api.id, inputValue);\n        } else {\n            promisedAPI = api.updateWSDLByUrl(api.id, inputValue);\n        }\n        promisedAPI\n            .then(() => {\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.ImportDefinition.WSDL.updated.successfully',\n                    defaultMessage: 'WSDL Updated Successfully',\n                }));\n                setOpenAPIDefinitionImport(false);\n                setSchemaDefinition(isFileInput && inputValue.type === 'application/zip');\n            })\n            .catch((err) => {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.ImportDefinition.error.updating.WSDL',\n                    defaultMessage: 'Error while updating WSDL',\n                }));\n            });\n    }\n\n    /**\n     * Handles API definition import\n     */\n    function importDefinition() {\n        if (isGraphQL) {\n            updateGraphQLSchema();\n        } else if (isSOAP) {\n            updateWSDL();\n        // } else if (isWebSocket || isWebSub) {\n        } else if (isAsyncAPI) {\n            updateAsyncAPIDefinition();\n        } else {\n            updateOASDefinition();\n        }\n    }\n    /**\n     *\n     * Set the validity of the API definition imports\n     * @param {*} isValidForm\n     * @param {*} validationState\n     */\n    function handleOnValidate(isFormValid) {\n        inputsDispatcher({\n            action: 'isFormValid',\n            value: isFormValid,\n        });\n    }\n\n    let dialogTitle = (\n        <FormattedMessage\n            id='Apis.Details.APIDefinition.APIDefinition.import.definition.oas'\n            defaultMessage='Import OpenAPI Definition'\n        />\n    );\n    let dialogContent = (\n        <ProvideOpenAPI\n            onValidate={handleOnValidate}\n            apiInputs={apiInputs}\n            inputsDispatcher={inputsDispatcher}\n        />\n    );\n    let btnText = (\n        <FormattedMessage\n            id='Apis.Details.APIDefinition.APIDefinition.import.definition'\n            defaultMessage='Import Definition'\n        />\n    );\n    if (isGraphQL) {\n        dialogTitle = (\n            <FormattedMessage\n                id='Apis.Details.APIDefinition.APIDefinition.import.definition.graphql'\n                defaultMessage='Import GraphQL Schema Definition'\n            />\n        );\n        dialogContent = (\n            <ProvideGraphQL\n                onValidate={handleOnValidate}\n                apiInputs={apiInputs}\n                inputsDispatcher={inputsDispatcher}\n            />\n        );\n    }\n    if (isSOAP) {\n        dialogTitle = (\n            <FormattedMessage\n                id='Apis.Details.APIDefinition.APIDefinition.import.definition.wsdl'\n                defaultMessage='Import WSDL'\n            />\n        );\n        dialogContent = (\n            <ProvideWSDL\n                onValidate={handleOnValidate}\n                apiInputs={apiInputs}\n                inputsDispatcher={inputsDispatcher}\n            />\n        );\n        btnText = (\n            <FormattedMessage\n                id='Apis.Details.APIDefinition.APIDefinition.import.wsdl'\n                defaultMessage='Import WSDL'\n            />\n        );\n    }\n    // if (isWebSocket || isWebSub) {\n    if (isAsyncAPI) {\n        dialogTitle = (\n            <FormattedMessage\n                id='Apis.Details.APIDefinition.APIDefinition.import.definition.asyncApi'\n                defaultMessage='Import AsyncAPI Definition'\n            />\n        );\n        dialogContent = (\n            <ProvideAsyncAPI\n                onValidate={handleOnValidate}\n                apiInputs={apiInputs}\n                inputsDispatcher={inputsDispatcher}\n            />\n        );\n        btnText = (\n            <FormattedMessage\n                id='Apis.Details.APIDefinition.import.asyncAPI'\n                defaultMessage='Import AsyncAPI'\n            />\n        );\n    }\n\n    return (\n        <>\n            {!isAsyncAPI && (\n                <Button\n                    size='small'\n                    className={classes.button}\n                    onClick={handleAPIDefinitionImportOpen}\n                    disabled={isRestricted(['apim:api_create'], api) || api.isRevision}\n                >\n                    <CloudUploadRounded className={classes.buttonIcon} />\n                    {btnText}\n                </Button>\n            )}\n            <Dialog\n                onBackdropClick={isAsyncAPI ? setAsyncAPIDefinitionImport : setOpenAPIDefinitionImport}\n                open={isAsyncAPI ? asyncAPIDefinitionImport : openAPIDefinitionImport}\n            >\n                <DialogTitle>\n                    <Typography className={classes.importDefinitionDialogHeader}>\n                        {dialogTitle}\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    {dialogContent}\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleAPIDefinitionImportCancel}>\n                        <FormattedMessage\n                            id='Apis.Details.APIDefinition.APIDefinition.import.definition.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button\n                        onClick={importDefinition}\n                        variant='contained'\n                        color='primary'\n                        disabled={!apiInputs.isFormValid || isImporting || api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.APIDefinition.APIDefinition.import.definition.import'\n                            defaultMessage='Import'\n                        />\n                        {isImporting && <CircularProgress size={20} />}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n\nImportDefinition.propTypes = {\n    setSchemaDefinition: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { isRestricted } from 'AppData/AuthManager';\nimport LifeCycleIcon from '@material-ui/icons/Autorenew';\nimport StoreIcon from '@material-ui/icons/Store';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport CodeIcon from '@material-ui/icons/Code';\nimport PersonPinCircleOutlinedIcon from '@material-ui/icons/PersonPinCircleOutlined';\nimport ResourcesIcon from '@material-ui/icons/VerticalSplit';\nimport { withStyles } from '@material-ui/core/styles';\nimport { injectIntl, defineMessages } from 'react-intl';\nimport {\n    Redirect, Route, Switch, Link, matchPath,\n} from 'react-router-dom';\nimport isEmpty from 'lodash/isEmpty';\nimport Utils from 'AppData/Utils';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport AuthorizedError from 'AppComponents/Base/Errors/AuthorizedError';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\nimport LeftMenuItem from 'AppComponents/Shared/LeftMenuItem';\nimport API from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { Progress } from 'AppComponents/Shared';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport AppContext from 'AppComponents/Shared/AppContext';\nimport LastUpdatedTime from 'AppComponents/Apis/Details/components/LastUpdatedTime';\nimport Divider from '@material-ui/core/Divider';\nimport { RevisionContextProvider } from 'AppComponents/Shared/RevisionContext';\nimport DevelopSectionMenu from 'AppComponents/Apis/Details/components/leftMenu/DevelopSectionMenu';\nimport { PROPERTIES as UserProperties } from 'AppData/User';\nimport Overview from './NewOverview/Overview';\nimport DesignConfigurations from './Configuration/DesignConfigurations';\nimport RuntimeConfiguration from './Configuration/RuntimeConfiguration';\nimport Topics from './Configuration/Topics';\nimport RuntimeConfigurationWebSocket from './Configuration/RuntimeConfigurationWebSocket';\nimport LifeCycle from './LifeCycle/LifeCycle';\nimport Documents from './Documents';\nimport Operations from './Operations/Operations';\nimport APIOperations from './Resources/APIOperations';\nimport APIProductOperations from './ProductResources/APIProductOperations';\nimport ProductResourcesEdit from './ProductResources/ProductResourcesEdit';\nimport Endpoints from './Endpoints/Endpoints';\nimport Environments from './Environments/Environments';\nimport Subscriptions from './Subscriptions/Subscriptions';\nimport Comments from './Comments/Comments';\nimport Scope from './Scopes';\nimport Security from './Security';\nimport APIDefinition from './APIDefinition/APIDefinition';\nimport WSDL from './APIDefinition/WSDL';\nimport APIDetailsTopMenu from './components/APIDetailsTopMenu';\nimport BusinessInformation from './BusinessInformation/BusinessInformation';\nimport Properties from './Properties/Properties';\nimport Monetization from './Monetization';\nimport ExternalStores from './ExternalStores/ExternalStores';\nimport { APIProvider } from './components/ApiContext';\nimport CreateNewVersion from './NewVersion/NewVersion';\nimport TryOutConsole from './TryOut/TryOutConsole';\n\nconst styles = (theme) => ({\n    LeftMenu: {\n        backgroundColor: theme.palette.background.leftMenu,\n        width: theme.custom.leftMenuWidth,\n        minHeight: `calc(100vh - ${64 + theme.custom.footer.height}px)`,\n    },\n    leftLInkMain: {\n        cursor: 'pointer',\n        backgroundColor: theme.palette.background.leftMenuActive,\n        textAlign: 'center',\n        height: theme.custom.apis.topMenu.height,\n    },\n    content: {\n        display: 'flex',\n        flexGrow: 1,\n        flexDirection: 'column',\n        paddingBottom: theme.spacing(3),\n    },\n    contentInside: {\n        paddingLeft: theme.spacing(3),\n        paddingRight: theme.spacing(3),\n        paddingTop: theme.spacing(2),\n    },\n    footeremaillink: {\n        marginLeft: theme.custom.leftMenuWidth, /* 4px */\n    },\n    root: {\n        backgroundColor: theme.palette.background.leftMenu,\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n        paddingTop: '0',\n        paddingBottom: '0',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: theme.typography.fontWeightRegular,\n    },\n    expanded: {\n        '&$expanded': {\n            margin: 0,\n            backgroundColor: theme.palette.background.leftMenu,\n            minHeight: 40,\n            paddingBottom: 0,\n            paddingLeft: 0,\n            paddingRight: 0,\n            paddingTop: 0,\n        },\n    },\n    leftLInkText: {\n        color: theme.palette.getContrastText(theme.palette.background.leftMenu),\n        textTransform: theme.custom.leftMenuTextStyle,\n        width: '100%',\n        textAlign: 'left',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontSize: theme.typography.body1.fontSize,\n        fontWeight: 250,\n        whiteSpace: 'nowrap',\n    },\n    expandIconColor: {\n        color: '#ffffff',\n    },\n    headingText: {\n        marginTop: '10px',\n        fontWeight: 800,\n        color: '#ffffff',\n        textAlign: 'left',\n        marginLeft: '8px',\n    },\n    customIcon: {\n        marginTop: (theme.custom.apis.topMenu.height - theme.custom.leftMenuIconMainSize) / 2,\n    },\n});\n\n/**\n * Base component for API specific Details page,\n * What this component do is, Handle all the request coming under `/apis/:api_uuid` path, If the :api_uuid or\n *  the later part of the URL is not valid , This will return a `PageNotFound` component.\n * For valid API request , This component will fetch the API and pass the API response data to below components in `api`\n * prop name.\n * Note: If you want to add new route or new page under APIs detail, add the desired path to `PATHS` constant mapping.\n * This mapping will be used in parent component to directly return `PageNotFound` component, If user making a request\n * to an undefined path segment.\n */\nclass Details extends Component {\n    /**\n     * Return boolean , whether provided URL has a valid Route under the Details page.\n     * Check https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/modules/NavLink.js\n     * code for the usage of public matchPath method\n     * @static\n     * @param {String} pathname location URL of an incoming request\n     * @memberof Details\n     * @returns {Boolean} whether URL matched with defined sub paths or not\n     */\n    static isValidURL(pathname) {\n        for (const [subPathKey, subPath] of Object.entries(Details.subPaths)) {\n            // Skip the BASE path , because it will match for any `/apis/:apiUUID/*` values\n            if ((subPathKey !== 'BASE') && (subPathKey !== 'BASE_PRODUCT')) {\n                const matched = matchPath(pathname, subPath);\n                if (matched) {\n                    return matched;\n                }\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Creates an instance of Details.\n     * @param {any} props @inheritDoc\n     * @memberof Details\n     */\n    constructor(props) {\n        super(props);\n        const isAPIProduct = null;\n        this.state = {\n            api: null,\n            apiNotFound: false,\n            // updateAPI: this.updateAPI,\n            isAPIProduct,\n            imageUpdate: 0,\n            allRevisions: null,\n            allEnvRevision: null,\n            authorizedAPI: false,\n        };\n        this.setAPI = this.setAPI.bind(this);\n        this.setAPIProduct = this.setAPIProduct.bind(this);\n        this.updateAPI = this.updateAPI.bind(this);\n        this.setImageUpdate = this.setImageUpdate.bind(this);\n        this.getRevision = this.getRevision.bind(this);\n        this.getDeployedEnv = this.getDeployedEnv.bind(this);\n        this.handleAccordionState = this.handleAccordionState.bind(this);\n        this.getLeftMenuItemForResourcesByType = this.getLeftMenuItemForResourcesByType.bind(this);\n        this.getLeftMenuItemForDefinitionByType = this.getLeftMenuItemForDefinitionByType.bind(this);\n    }\n\n    /**\n     * @inheritDoc\n     * @memberof Details\n     */\n    componentDidMount() {\n        const {\n            location: { pathname },\n            isAPIProduct,\n        } = this.props;\n        // Load API data iff request page is valid\n        if (Details.isValidURL(pathname)) {\n            if (isAPIProduct) {\n                this.setAPIProduct();\n            } else {\n                this.setAPI();\n            }\n            const api = new API();\n            api.getTenantsByState('active')\n                .then((response) => {\n                    const { list } = response.body;\n                    this.setState({ tenantList: list });\n                }).catch((error) => {\n                    console.error('error when getting tenants ' + error);\n                });\n        }\n    }\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof Details\n     */\n    componentDidUpdate() {\n        const { api } = this.state;\n        const { match, isAPIProduct } = this.props;\n        const { apiUUID } = match.params;\n        const { apiProdUUID } = match.params;\n        if (!api || (api.id === apiUUID || api.id === apiProdUUID)) {\n            return;\n        }\n        if (isAPIProduct) {\n            this.setAPIProduct();\n        } else {\n            this.setAPI();\n        }\n    }\n\n    /**\n     *\n     * This method is a hack to update the image in the toolbar when a new image is uploaded\n     * @memberof Details\n     */\n    setImageUpdate() {\n        this.setState((previousState) => ({\n            imageUpdate: previousState.imageUpdate + 1,\n        }));\n        console.info(this.state.imageUpdate);\n    }\n\n    /**\n     *\n     *\n     * @memberof Details\n     */\n    setAPI(newAPI) {\n        if (newAPI) {\n            this.setState({ api: newAPI });\n        } else {\n            const { match } = this.props;\n            const { apiUUID } = match.params;\n            const promisedApi = API.get(apiUUID);\n            promisedApi\n                .then((api) => {\n                    this.setState({ api });\n                    this.getRevision();\n                    this.getDeployedEnv();\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                    const { status } = error;\n                    if (status === 404) {\n                        this.setState({ apiNotFound: true });\n                    } else if (status === 403) {\n                        this.setState({ authorizedAPI: true });\n                    } else if (status === 401) {\n                        doRedirectToLogin();\n                    }\n                });\n        }\n    }\n\n    /**\n     *\n     *\n     * @memberof Details\n     */\n    setAPIProduct() {\n        const { match } = this.props;\n        const { apiProdUUID } = match.params;\n        const { isAPIProduct } = this.props;\n        const promisedApi = APIProduct.get(apiProdUUID);\n        promisedApi\n            .then((api) => {\n                this.setState({ isAPIProduct });\n                this.setState({ api });\n                this.getRevision();\n                this.getDeployedEnv();\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ apiNotFound: true });\n                } else if (status === 403) {\n                    this.setState({ authorizedAPI: true });\n                }\n            });\n    }\n\n    /**\n     *\n     * @returns\n     * @memberof Details\n     */\n    getLeftMenuItemForDefinitionByType(apiType) {\n        const { isAPIProduct } = this.state;\n        const { intl, match } = this.props;\n        const uuid = match.params.apiUUID || match.params.api_uuid || match.params.apiProdUUID;\n        const pathPrefix = '/' + (isAPIProduct ? 'api-products' : 'apis') + '/' + uuid + '/';\n        const apiDefinitionMenuItem = (\n            <LeftMenuItem\n                text={intl.formatMessage({\n                    id: 'Apis.Details.index.api.definition2',\n                    defaultMessage: 'API definition',\n                })}\n                route='api definition'\n                to={pathPrefix + 'api definition'}\n                Icon={<CodeIcon />}\n            />\n        );\n\n        switch (apiType) {\n            case 'GRAPHQL':\n                return (\n                    <>\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.schema.definition',\n                                defaultMessage: 'Schema Definition',\n                            })}\n                            route='schema definition'\n                            to={pathPrefix + 'schema definition'}\n                            Icon={<CodeIcon />}\n                        />\n                    </>\n                );\n            case 'WS':\n            case 'WEBSUB':\n            case 'SSE':\n                return (\n                    <>\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.asyncApi.definition',\n                                defaultMessage: 'AsyncAPI Definition',\n                            })}\n                            route='asyncApi definition'\n                            to={pathPrefix + 'asyncApi definition'}\n                            Icon={<CodeIcon />}\n                        />\n                    </>\n                );\n            case 'SOAP':\n                return (\n                    <>\n                        {apiDefinitionMenuItem}\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.wsdl.definition',\n                                defaultMessage: 'WSDL Definition',\n                            })}\n                            route='wsdl'\n                            to={pathPrefix + 'wsdl'}\n                            Icon={<CodeIcon />}\n                        />\n                    </>\n                );\n            default:\n                return (\n                    <>\n                        {apiDefinitionMenuItem}\n                    </>\n                );\n        }\n    }\n\n    getLeftMenuItemForResourcesByType(apiType) {\n        const { isAPIProduct } = this.state;\n        const { intl, match } = this.props;\n        const uuid = match.params.apiUUID || match.params.api_uuid || match.params.apiProdUUID;\n        const pathPrefix = '/' + (isAPIProduct ? 'api-products' : 'apis') + '/' + uuid + '/';\n\n        switch (apiType) {\n            case 'GRAPHQL':\n                return (\n                    <>\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.operations',\n                                defaultMessage: 'operations',\n                            })}\n                            to={pathPrefix + 'operations'}\n                            Icon={<ResourcesIcon />}\n                        />\n                    </>\n                );\n            case 'WS':\n            case 'WEBSUB':\n            case 'SSE':\n                return (\n                    <>\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.topics',\n                                defaultMessage: 'topics',\n                            })}\n                            to={pathPrefix + 'topics'}\n                            Icon={<ResourcesIcon />}\n                        />\n                    </>\n                );\n            default:\n                return (\n                    <>\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.resources',\n                                defaultMessage: 'resources',\n                            })}\n                            to={pathPrefix + 'resources'}\n                            Icon={<ResourcesIcon />}\n                        />\n                    </>\n                );\n        }\n    }\n\n    /**\n     * Get Revisions\n     */\n    getRevision() {\n        const { api } = this.state;\n        const restApi = new API();\n        const restApiProduct = new APIProduct();\n        let isAPIProduct = false;\n        if (api.apiType === API.CONSTS.APIProduct) {\n            isAPIProduct = true;\n        }\n\n        let promisedUpdate;\n        let apiId = null;\n        if (!isAPIProduct) {\n            apiId = api.isRevision ? api.revisionedApiId : api.id;\n            promisedUpdate = restApi.getRevisions(apiId);\n        } else if (isAPIProduct) {\n            apiId = api.isRevision ? api.revisionedApiProductId : api.id;\n            promisedUpdate = restApiProduct.getProductRevisions(apiId);\n        }\n        return promisedUpdate\n            .then((result) => {\n                this.setState({ allRevisions: result.body.list });\n            })\n            .catch(() => {\n                Alert.error('Something went wrong while getting the revisions!');\n            });\n    }\n\n    /**\n     * Get Depolyed environment\n     */\n    getDeployedEnv() {\n        const { api } = this.state;\n        const restApi = new API();\n        const restApiProduct = new APIProduct();\n        let isAPIProduct = false;\n        if (api.apiType === API.CONSTS.APIProduct) {\n            isAPIProduct = true;\n        }\n\n        let promisedUpdate;\n        if (!isAPIProduct) {\n            promisedUpdate = restApi.getRevisionsWithEnv(api.isRevision ? api.revisionedApiId : api.id);\n        } else if (isAPIProduct) {\n            promisedUpdate = restApiProduct.getProductRevisionsWithEnv(api.isRevision\n                ? api.revisionedApiProductId : api.id);\n        }\n        return promisedUpdate\n            .then((result) => {\n                this.setState({ allEnvRevision: result.body.list });\n            })\n            .catch(() => {\n                Alert.error('Something went wrong while getting the revisions!');\n            });\n    }\n\n    /**\n     * update ls\n     * @param {String} name event triggered\n     * @param {Boolean} isExpanded state\n     */\n    handleAccordionState(name, isExpanded) {\n        const { user } = this.context;\n        this.setState({ [name]: isExpanded });\n        if (name === 'portalConfigsExpanded') {\n            user.setProperty(UserProperties.PORTAL_CONFIG_OPEN, isExpanded);\n        } else {\n            user.setProperty(UserProperties.API_CONFIG_OPEN, isExpanded);\n        }\n    }\n\n    /**\n     * This method is similar to ReactJS `setState` method, In this `updateAPI()` method, we accept partially updated\n     * API object or comple API object. When updating , the provided updatedAPI object will be merged with the existing\n     * API object in the state and use it as the payload in the /apis PUT operation.\n     *\n     * Partially updated API object means: {description: \"Here is my new description..\"} kind of object. It should have\n     * a key in API object and value contains the updated value of that property\n     * @param {Object} [_updatedProperties={}] Partially updated API object or complete API object\n     * (even an instance of API class is accepted here)\n     * @param {Boolean} isAPIProduct Whether the update operation should execute on an API or API Product\n     * @returns {Promise} promise object that resolve to update (/apis PUT operation) response\n     */\n    updateAPI(_updatedProperties = {}) {\n        const { api } = this.state;\n        let isAPIProduct = false;\n        if (api.apiType === API.CONSTS.APIProduct) {\n            isAPIProduct = true;\n        }\n\n        const updatedProperties = _updatedProperties instanceof API ? _updatedProperties.toJson() : _updatedProperties;\n        let promisedUpdate;\n        // TODO: Ideally, The state should hold the corresponding API object\n        // which we could call it's `update` method safely ~tmkb\n        if (!isEmpty(updatedProperties)) {\n            // newApi object has to be provided as the updatedProperties. Then api will be updated.\n            promisedUpdate = api.update(updatedProperties);\n        } else if (!isAPIProduct) {\n            // Just like calling noArg `setState()` will just trigger a re-render without modifying the state,\n            // Calling `updateAPI()` without args wil return the API without any update.\n            // Just sync-up the api state with backend\n            promisedUpdate = API.get(api.id);\n        } else if (isAPIProduct) {\n            promisedUpdate = APIProduct.get(api.id);\n        }\n        return promisedUpdate\n            .then((updatedAPI) => {\n                if (isAPIProduct) {\n                    Alert.info(`${updatedAPI.name} API updated successfully`);\n                    this.setState({ api: updatedAPI });\n                    return updatedAPI;\n                } else {\n                    Alert.info(`${updatedAPI.name} API updated successfully`);\n                    this.setState({ api: updatedAPI });\n                    return updatedAPI;\n                }\n            })\n            .catch((error) => {\n                // TODO: Should log and handle the error case by the original callee ~tmkb\n                console.error(error);\n                Alert.error(`Something went wrong while updating the ${api.name} API!!`);\n                // Kinda force render,Resting API object to old one\n                this.setState({ api });\n                throw error;\n            });\n    }\n\n    /**\n     * Renders Grid container layout with NavBar place static in LHS, Components which coming as children for\n     * Details page\n     * should wrap it's content with <Grid item > element\n     * @returns {Component} Render API Details page\n     */\n    render() {\n        const {\n            api, apiNotFound, isAPIProduct, imageUpdate, tenantList, allRevisions, allEnvRevision, authorizedAPI,\n        } = this.state;\n        const {\n            classes,\n            theme,\n            match,\n            intl,\n            location: pageLocation,\n            location: { pathname }, // nested destructuring\n        } = this.props;\n\n        const { settings: settingsContext } = this.context;\n\n        // pageLocation renaming is to prevent es-lint errors saying can't use global name location\n        if (!Details.isValidURL(pathname)) {\n            return <ResourceNotFound location={pageLocation} />;\n        }\n        const uuid = match.params.apiUUID || match.params.api_uuid || match.params.apiProdUUID;\n        const pathPrefix = '/' + (isAPIProduct ? 'api-products' : 'apis') + '/' + uuid + '/';\n        const redirectUrl = pathPrefix;\n        const isAsyncAPI = api && (api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE');\n        if (apiNotFound) {\n            const { apiUUID } = match.params;\n            const resourceNotFoundMessageText = defineMessages({\n                titleMessage: {\n                    id: 'Apis.Details.index.api.not.found.title',\n                    defaultMessage: 'API is not found in the {environmentLabel} Environment',\n                },\n                bodyMessage: {\n                    id: 'Apis.Details.index.api.not.found.body',\n                    defaultMessage: 'Cannot find the API with the given id',\n                },\n            });\n            const resourceNotFountMessage = {\n                title: intl.formatMessage(resourceNotFoundMessageText.titleMessage, {\n                    environmentLabel: `${Utils.getCurrentEnvironment().label}`,\n                }),\n                body: intl.formatMessage(resourceNotFoundMessageText.bodyMessage, { apiUUID: `${apiUUID}` }),\n            };\n            return <ResourceNotFound message={resourceNotFountMessage} />;\n        }\n        if (authorizedAPI) {\n            return (\n                <>\n                    <AuthorizedError />\n                </>\n            );\n        }\n\n        if (!api) {\n            return <Progress per={70} message='Loading API data ...' />;\n        }\n        const { leftMenuIconMainSize } = theme.custom;\n        return (\n            <Box display='flex' alignItems='stretch' flexDirection='row'>\n                <APIProvider\n                    value={{\n                        api,\n                        updateAPI: this.updateAPI,\n                        isAPIProduct,\n                        setAPI: this.setAPI,\n                        setImageUpdate: this.setImageUpdate,\n                        imageUpdate,\n                        tenantList,\n                    }}\n                >\n                    <Box className={classes.LeftMenu}>\n                        <Link to={'/' + (isAPIProduct ? 'api-products' : 'apis') + '/'}>\n                            <div className={classes.leftLInkMain}>\n                                <CustomIcon\n                                    className={classes.customIcon}\n                                    width={leftMenuIconMainSize}\n                                    height={leftMenuIconMainSize}\n                                    icon={isAPIProduct ? 'api-products' : 'apis'}\n                                />\n                            </div>\n                        </Link>\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.overview',\n                                defaultMessage: 'overview',\n                            })}\n                            to={pathPrefix + 'overview'}\n                            Icon={<DashboardIcon />}\n                            head='valueOnly'\n                        />\n                        <Typography className={classes.headingText}>\n                            Develop\n                        </Typography>\n                        <DevelopSectionMenu\n                            pathPrefix={pathPrefix}\n                            isAPIProduct={isAPIProduct}\n                            api={api}\n                            getLeftMenuItemForResourcesByType={this.getLeftMenuItemForResourcesByType}\n                            getLeftMenuItemForDefinitionByType={this.getLeftMenuItemForDefinitionByType}\n                        />\n                        <Divider />\n                        {!isAPIProduct && api.advertiseInfo && !api.advertiseInfo.advertised && (\n                            <>\n                                <Typography className={classes.headingText}>Deploy</Typography>\n                                <LeftMenuItem\n                                    text={intl.formatMessage({\n                                        id: 'Apis.Details.index.environments',\n                                        defaultMessage: 'Deployments',\n                                    })}\n                                    route='deployments'\n                                    to={pathPrefix + 'deployments'}\n                                    Icon={<PersonPinCircleOutlinedIcon />}\n                                />\n                            </>\n                        )}\n                        {isAPIProduct && (\n                            <>\n                                <Typography className={classes.headingText}>Deploy</Typography>\n                                <LeftMenuItem\n                                    text={intl.formatMessage({\n                                        id: 'Apis.Details.index.environments',\n                                        defaultMessage: 'Deployments',\n                                    })}\n                                    route='deployments'\n                                    to={pathPrefix + 'deployments'}\n                                    Icon={<PersonPinCircleOutlinedIcon />}\n                                />\n                            </>\n                        )}\n                        {!isAPIProduct && api.advertiseInfo && !api.advertiseInfo.advertised && !api.isWebSocket()\n                            && !api.isGraphql() && !isAsyncAPI && (\n                            <div>\n                                <Divider />\n                                <Typography className={classes.headingText}>Test</Typography>\n                                <LeftMenuItem\n                                    route='test-console'\n                                    text={intl.formatMessage({\n                                        id: 'Apis.Details.index.Tryout.menu.name',\n                                        defaultMessage: 'Try Out',\n                                    })}\n                                    to={pathPrefix + 'test-console'}\n                                    iconText='test'\n                                />\n                            </div>\n                        )}\n                        {!isAPIProduct && !isRestricted(['apim:api_publish'], api) && (\n                            <div>\n                                <Divider />\n                                <Typography className={classes.headingText}>Publish</Typography>\n                                <LeftMenuItem\n                                    text={intl.formatMessage({\n                                        id: 'Apis.Details.index.lifecycle',\n                                        defaultMessage: 'lifecycle',\n                                    })}\n                                    to={pathPrefix + 'lifecycle'}\n                                    Icon={<LifeCycleIcon />}\n                                />\n                            </div>\n                        )}\n                        {!isAPIProduct && settingsContext.externalStoresEnabled && (\n                            <>\n                                <Divider />\n                                <LeftMenuItem\n                                    text={intl.formatMessage({\n                                        id: 'Apis.Details.index.external-stores',\n                                        defaultMessage: 'external dev portals',\n                                    })}\n                                    to={pathPrefix + 'external-devportals'}\n                                    Icon={<StoreIcon />}\n                                />\n                            </>\n                        )}\n                        <Divider />\n                    </Box>\n                    <Box className={classes.content}>\n                        <RevisionContextProvider\n                            value={{\n                                allRevisions,\n                                getRevision: this.getRevision,\n                                allEnvRevision,\n                                getDeployedEnv: this.getDeployedEnv,\n                            }}\n                        >\n                            <APIDetailsTopMenu api={api} isAPIProduct={isAPIProduct} imageUpdate={imageUpdate} />\n                            <div className={classes.contentInside}>\n                                <LastUpdatedTime lastUpdatedTime={api.lastUpdatedTime} />\n                                <Switch>\n                                    <Redirect exact from={Details.subPaths.BASE} to={redirectUrl} />\n                                    <Route\n                                        path={Details.subPaths.OVERVIEW_PRODUCT}\n                                        key={Details.subPaths.OVERVIEW_PRODUCT}\n                                        component={() => <Overview api={api} />}\n                                    />\n                                    <Route path={Details.subPaths.OVERVIEW} component={() => <Overview api={api} />} />\n                                    <Route\n                                        path={Details.subPaths.API_DEFINITION}\n                                        component={() => <APIDefinition api={api} updateAPI={this.updateAPI} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.WSDL}\n                                        component={() => <WSDL api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.API_DEFINITION_PRODUCT}\n                                        component={() => <APIDefinition api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.SCHEMA_DEFINITION}\n                                        component={() => <APIDefinition api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.ASYNCAPI_DEFINITION}\n                                        component={() => <APIDefinition api={api} updateAPI={this.updateAPI} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.LIFE_CYCLE}\n                                        component={() => <LifeCycle api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.CONFIGURATION}\n                                        component={() => <DesignConfigurations api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.RUNTIME_CONFIGURATION}\n                                        component={() => <RuntimeConfiguration api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.RUNTIME_CONFIGURATION_WEBSOCKET}\n                                        component={() => <RuntimeConfigurationWebSocket api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.TOPICS}\n                                        component={() => <Topics api={api} updateAPI={this.updateAPI} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.CONFIGURATION_PRODUCT}\n                                        component={() => <DesignConfigurations api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.RUNTIME_CONFIGURATION_PRODUCT}\n                                        component={() => <RuntimeConfiguration api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.ENDPOINTS}\n                                        component={() => <Endpoints api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.ENVIRONMENTS}\n                                        component={() => <Environments api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.ENVIRONMENTS_PRODUCT}\n                                        component={() => <Environments api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.OPERATIONS}\n                                        component={() => <Operations api={api} updateAPI={this.updateAPI} />}\n                                    />\n                                    <Route\n                                        exact\n                                        path={Details.subPaths.RESOURCES_PRODUCT}\n                                        component={APIProductOperations}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.RESOURCES_PRODUCT_EDIT}\n                                        component={ProductResourcesEdit}\n                                    />\n\n                                    <Route\n                                        path={Details.subPaths.RESOURCES}\n                                        key={Details.subPaths.RESOURCES}\n                                        component={APIOperations}\n                                    />\n\n                                    <Route path={Details.subPaths.SCOPES} component={() => <Scope api={api} />} />\n                                    <Route\n                                        path={Details.subPaths.DOCUMENTS}\n                                        component={() => <Documents api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.DOCUMENTS_PRODUCT}\n                                        component={() => <Documents api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.SUBSCRIPTIONS}\n                                        component={() => <Subscriptions api={api} updateAPI={this.updateAPI} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.SUBSCRIPTIONS_PRODUCT}\n                                        component={() => <Subscriptions api={api} updateAPI={this.updateAPI} />}\n                                    />\n                                    <Route path={Details.subPaths.SECURITY} component={() => <Security api={api} />} />\n                                    <Route path={Details.subPaths.COMMENTS} component={() => <Comments api={api} />} />\n                                    <Route\n                                        path={Details.subPaths.BUSINESS_INFO}\n                                        component={() => <BusinessInformation api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.BUSINESS_INFO_PRODUCT}\n                                        component={() => <BusinessInformation api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.PROPERTIES}\n                                        component={() => <Properties api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.PROPERTIES_PRODUCT}\n                                        component={() => <Properties api={api} />}\n                                    />\n                                    <Route path={Details.subPaths.NEW_VERSION} component={() => <CreateNewVersion />} />\n                                    <Route path={Details.subPaths.SUBSCRIPTIONS} component={() => <Subscriptions />} />\n                                    <Route\n                                        path={Details.subPaths.MONETIZATION}\n                                        component={() => <Monetization api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.MONETIZATION_PRODUCT}\n                                        component={() => <Monetization api={api} />}\n                                    />\n                                    <Route\n                                        path={Details.subPaths.TRYOUT}\n                                        component={() => <TryOutConsole apiObj={api} />}\n                                    />\n                                    <Route path={Details.subPaths.EXTERNAL_STORES} component={ExternalStores} />\n                                    <Route\n                                        path={Details.subPaths.COMMENTS}\n                                        component={() => <Comments apiObj={api} />}\n                                    />\n                                </Switch>\n                            </div>\n                        </RevisionContextProvider>\n                    </Box>\n                </APIProvider>\n            </Box>\n        );\n    }\n}\n\nDetails.contextType = AppContext;\n// Add your path here and refer it in above <Route /> component,\n// Paths that are not defined here will be returned with Not Found error\n// key name doesn't matter here, Use an appropriate name as the key\nDetails.subPaths = {\n    BASE: '/apis/:api_uuid',\n    BASE_PRODUCT: '/api-products/:apiprod_uuid',\n    OVERVIEW: '/apis/:api_uuid/overview',\n    OVERVIEW_PRODUCT: '/api-products/:apiprod_uuid/overview',\n    API_DEFINITION: '/apis/:api_uuid/api definition',\n    WSDL: '/apis/:api_uuid/wsdl',\n    API_DEFINITION_PRODUCT: '/api-products/:apiprod_uuid/api definition',\n    SCHEMA_DEFINITION: '/apis/:api_uuid/schema definition',\n    LIFE_CYCLE: '/apis/:api_uuid/lifecycle',\n    CONFIGURATION: '/apis/:api_uuid/configuration',\n    RUNTIME_CONFIGURATION: '/apis/:api_uuid/runtime-configuration',\n    CONFIGURATION_PRODUCT: '/api-products/:apiprod_uuid/configuration',\n    RUNTIME_CONFIGURATION_PRODUCT: '/api-products/:apiprod_uuid/runtime-configuration',\n    RUNTIME_CONFIGURATION_WEBSOCKET: '/apis/:api_uuid/runtime-configuration-websocket',\n    ENDPOINTS: '/apis/:api_uuid/endpoints',\n    ENVIRONMENTS: '/apis/:api_uuid/deployments',\n    ENVIRONMENTS_PRODUCT: '/api-products/:apiprod_uuid/deployments',\n    OPERATIONS: '/apis/:api_uuid/operations',\n    RESOURCES: '/apis/:api_uuid/resources',\n    RESOURCES_PRODUCT: '/api-products/:apiprod_uuid/resources',\n    RESOURCES_PRODUCT_EDIT: '/api-products/:apiprod_uuid/resources/edit',\n    SCOPES: '/apis/:api_uuid/scopes',\n    DOCUMENTS: '/apis/:api_uuid/documents',\n    DOCUMENTS_PRODUCT: '/api-products/:apiprod_uuid/documents',\n    SUBSCRIPTIONS_PRODUCT: '/api-products/:apiprod_uuid/subscriptions',\n    SUBSCRIPTIONS: '/apis/:api_uuid/subscriptions',\n    SECURITY: '/apis/:api_uuid/security',\n    COMMENTS: '/apis/:api_uuid/comments',\n    BUSINESS_INFO: '/apis/:api_uuid/business info',\n    BUSINESS_INFO_PRODUCT: '/api-products/:apiprod_uuid/business info',\n    PROPERTIES: '/apis/:api_uuid/properties',\n    PROPERTIES_PRODUCT: '/api-products/:apiprod_uuid/properties',\n    NEW_VERSION: '/apis/:api_uuid/new_version',\n    MONETIZATION: '/apis/:api_uuid/monetization',\n    MONETIZATION_PRODUCT: '/api-products/:apiprod_uuid/monetization',\n    EXTERNAL_STORES: '/apis/:api_uuid/external-devportals',\n    TRYOUT: '/apis/:api_uuid/test-console',\n    QUERYANALYSIS: '/apis/:api_uuid/queryanalysis',\n    TOPICS: '/apis/:api_uuid/topics',\n    ASYNCAPI_DEFINITION: '/apis/:api_uuid/asyncApi definition',\n};\n\n// To make sure that paths will not change by outsiders, Basically an enum\nObject.freeze(Details.paths);\n\nDetails.propTypes = {\n    classes: PropTypes.shape({\n        LeftMenu: PropTypes.string,\n        content: PropTypes.string,\n        leftLInkMain: PropTypes.string,\n        contentInside: PropTypes.string,\n        footeremaillink: PropTypes.string,\n    }).isRequired,\n    match: PropTypes.shape({\n        params: PropTypes.shape({}),\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.shape({}),\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.shape({}),\n    }).isRequired,\n    theme: PropTypes.shape({\n        custom: PropTypes.shape({\n            leftMenuIconMainSize: PropTypes.number,\n        }),\n    }).isRequired,\n    isAPIProduct: PropTypes.bool.isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Details));\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Container from '@material-ui/core/Container';\nimport Image404 from './Custom404Image';\n\nconst AuthorizedError = (props) => {\n    const { response } = props;\n    const { message = {} } = props;\n\n    return (\n        <>\n            <Container maxWidth='md'>\n                <Box padding={4}>\n                    <Paper elevation={0}>\n                        <Box padding={4}>\n                            <Grid container alignItems='center' justify='center' style={{ height: '100%' }}>\n                                <Grid item xs={12} md={6}>\n                                    <Typography variant='h5' gutterBottom>\n                                        {message.title}\n                                    </Typography>\n                                    <Typography variant='subtitle1' gutterBottom>\n                                        {message.body}\n                                        <span style={{ color: 'green' }}>\n                                            {' '}\n                                            {response ? response.statusText : ''}\n                                            {' '}\n                                        </span>\n                                    </Typography>\n                                    {message.more}\n                                    <Box py={5}>\n                                        <Box pb={2}>\n                                            <Typography variant='subtitle1'>\n                                                <FormattedMessage\n                                                    id='Base.Errors.ResourceNotFound.more.links'\n                                                    defaultMessage='You may check the links below'\n                                                />\n                                            </Typography>\n                                        </Box>\n                                        <Link to='/apis/' style={{ marginRight: 8 }}>\n                                            <Button variant='contained' color='primary'>\n                                                <FormattedMessage\n                                                    id='Base.Errors.ResourceNotFound.api.list'\n                                                    defaultMessage='API List'\n                                                />\n                                            </Button>\n                                        </Link>\n                                        <Link to='/api-products/'>\n                                            <Button variant='contained' color='primary'>\n                                                <FormattedMessage\n                                                    id='Base.Errors.ResourceNotFound.api.product.list'\n                                                    defaultMessage='API Product List'\n                                                />\n                                            </Button>\n                                        </Link>\n                                    </Box>\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    {/* Image */}\n                                    <Image404 style={{ fontSize: 400, fill: '#ccc' }} />\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Paper>\n                </Box>\n            </Container>\n        </>\n    );\n};\n\nAuthorizedError.defaultProps = {\n    message: {\n        title: <FormattedMessage\n            id='Base.Errors.AuthorizedError.default_tittle'\n            defaultMessage='Authorized Error'\n        />,\n        body: <FormattedMessage\n            id='Base.Errors.AuthorizedError.default_body'\n            defaultMessage='User is not authorized to access the API'\n        />,\n    },\n};\n\nAuthorizedError.propTypes = {\n    response: PropTypes.shape({\n        statusText: PropTypes.string,\n    }).isRequired,\n    message: PropTypes.shape({\n        title: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.instanceOf(FormattedMessage),\n        ]),\n        body: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.instanceOf(FormattedMessage),\n        ]),\n    }),\n};\n\nexport default AuthorizedError;\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport { Typography, Tooltip } from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * API/Product last updated time.\n * @param {Parameter} props last updated time.\n * @returns {Property} The sum of the two numbers.\n */\nfunction LastUpdatedTime(props) {\n    const { lastUpdatedTime } = props;\n    return (\n        <div style={{ float: 'right' }}>\n            <Tooltip\n                title={moment(lastUpdatedTime).calendar()}\n                aria-label='add'\n            >\n                <Typography variant='caption' display='block'>\n                    <FormattedMessage\n                        id='Apis.Details.components.APIDetailsTopMenu.last.updated.time'\n                        defaultMessage='Last updated:'\n                    />\n                    {' '}\n                    {moment(lastUpdatedTime).fromNow()}\n                </Typography>\n            </Tooltip>\n        </div>\n    );\n}\n\nLastUpdatedTime.propTypes = {\n    lastUpdatedTime: PropTypes.shape({ content: PropTypes.string }).isRequired,\n};\n\nexport default (LastUpdatedTime);\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Accordion from '@material-ui/core/Accordion';\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\nimport MuiAccordionDetails from '@material-ui/core/AccordionDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport LeftMenuItem from 'AppComponents/Shared/LeftMenuItem';\nimport Typography from '@material-ui/core/Typography';\nimport EndpointIcon from '@material-ui/icons/GamesOutlined';\nimport ScopesIcon from '@material-ui/icons/VpnKey';\nimport DocumentsIcon from '@material-ui/icons/LibraryBooks';\nimport BusinessIcon from '@material-ui/icons/Business';\nimport ConfigurationIcon from '@material-ui/icons/Build';\nimport PropertiesIcon from '@material-ui/icons/List';\nimport SubscriptionsIcon from '@material-ui/icons/RssFeed';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport CommentIcon from '@material-ui/icons/Comment';\nimport IconButton from '@material-ui/core/IconButton';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport RuntimeConfigurationIcon from '@material-ui/icons/Settings';\nimport MonetizationIcon from '@material-ui/icons/LocalAtm';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { PROPERTIES as UserProperties } from 'AppData/User';\nimport { useUser } from 'AppComponents/Shared/AppContext';\nimport { useIntl } from 'react-intl';\n\n\nconst AccordianSummary = withStyles({\n    root: {\n        backgroundColor: '#1a1f2f',\n        paddingLeft: '8px',\n        borderBottom: '1px solid rgba(0, 0, 0, .125)',\n        minHeight: 40,\n        '&$expanded': {\n            minHeight: 40,\n        },\n    },\n    content: {\n        '&$expanded': {\n            margin: 0,\n        },\n    },\n    expanded: {\n        backgroundColor: '#1a1f2f',\n    },\n})(MuiAccordionSummary);\n\nconst AccordionDetails = withStyles((theme) => ({\n    root: {\n        backgroundColor: '#1a1f2f',\n        paddingLeft: theme.spacing(0),\n        paddingRight: theme.spacing(2),\n        paddingTop: '0',\n        paddingBottom: '0',\n    },\n}))(MuiAccordionDetails);\n\n\nconst useStyles = makeStyles((theme) => ({\n    footeremaillink: {\n        marginLeft: theme.custom.leftMenuWidth, /* 4px */\n    },\n    root: {\n        backgroundColor: theme.palette.background.leftMenu,\n        paddingLeft: theme.spacing(2),\n        paddingRight: theme.spacing(2),\n        paddingTop: '0',\n        paddingBottom: '0',\n    },\n    expanded: {\n        '&$expanded': {\n            margin: 0,\n            backgroundColor: theme.palette.background.leftMenu,\n            minHeight: 40,\n            paddingBottom: 0,\n            paddingLeft: 0,\n            paddingRight: 0,\n            paddingTop: 0,\n        },\n    },\n    leftLInkText: {\n        color: theme.palette.getContrastText(theme.palette.background.leftMenu),\n        textTransform: theme.custom.leftMenuTextStyle,\n        width: '100%',\n        textAlign: 'left',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        fontSize: theme.typography.body1.fontSize,\n        fontWeight: 250,\n        whiteSpace: 'nowrap',\n    },\n    expandIconColor: {\n        color: '#ffffff',\n    },\n}));\n\n/**\n *\n * @param {*} props\n * @returns\n */\nexport default function DevelopSectionMenu(props) {\n    const {\n        pathPrefix, isAPIProduct, api, getLeftMenuItemForResourcesByType, getLeftMenuItemForDefinitionByType,\n    } = props;\n    const user = useUser();\n    const [portalConfigsExpanded, setPortalConfigsExpanded] = useState(user\n        .getProperty(UserProperties.PORTAL_CONFIG_OPEN));\n    const [apiConfigsExpanded, setApiConfigsExpanded] = useState(user.getProperty(UserProperties.API_CONFIG_OPEN));\n    const handleAccordionState = (section, isExpanded) => {\n        if (section === 'portalConfigsExpanded') {\n            setPortalConfigsExpanded(isExpanded);\n            user.setProperty(UserProperties.PORTAL_CONFIG_OPEN, isExpanded);\n        } else {\n            setApiConfigsExpanded(isExpanded);\n            user.setProperty(UserProperties.API_CONFIG_OPEN, isExpanded);\n        }\n    };\n    const classes = useStyles();\n    const intl = useIntl();\n\n    return (\n        <div className={classes.root}>\n            <Accordion\n                id='itest-api-details-portal-config-acc'\n                defaultExpanded={portalConfigsExpanded}\n                elevation={0}\n                onChange={(e, isExpanded) => handleAccordionState('portalConfigsExpanded',\n                    isExpanded)}\n                classes={{ expanded: classes.expanded }}\n            >\n                <AccordianSummary\n                    expandIcon={<ExpandMoreIcon className={classes.expandIconColor} />}\n                >\n                    <Typography className={classes.leftLInkText}>\n                        Portal Configurations\n                    </Typography>\n                </AccordianSummary>\n                <AccordionDetails>\n                    <div>\n                        <LeftMenuItem\n                            className={classes.footeremaillink}\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.design.configs',\n                                defaultMessage: 'Basic info',\n                            })}\n                            route='configuration'\n                            to={pathPrefix + 'configuration'}\n                            Icon={<ConfigurationIcon />}\n                        />\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.business.info',\n                                defaultMessage: 'business info',\n                            })}\n                            to={pathPrefix + 'business info'}\n                            Icon={<BusinessIcon />}\n                        />\n                        {!isAPIProduct && api.advertiseInfo && !api.advertiseInfo.advertised && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.subscriptions',\n                                    defaultMessage: 'subscriptions',\n                                })}\n                                to={pathPrefix + 'subscriptions'}\n                                Icon={<SubscriptionsIcon />}\n                            />\n                        )}\n                        {isAPIProduct && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.subscriptions',\n                                    defaultMessage: 'subscriptions',\n                                })}\n                                to={pathPrefix + 'subscriptions'}\n                                Icon={<SubscriptionsIcon />}\n                            />\n                        )}\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.documents',\n                                defaultMessage: 'documents',\n                            })}\n                            to={pathPrefix + 'documents'}\n                            Icon={<DocumentsIcon />}\n                        />\n                        {!isAPIProduct && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.comments',\n                                    defaultMessage: 'Comments',\n                                })}\n                                route='comments'\n                                to={pathPrefix + 'comments'}\n                                Icon={<CommentIcon />}\n                            />\n                        )}\n                    </div>\n                </AccordionDetails>\n            </Accordion>\n            <Accordion\n                id='itest-api-details-api-config-acc'\n                defaultExpanded={apiConfigsExpanded}\n                elevation={0}\n                onChange={(e, isExpanded) => handleAccordionState('apiConfigsExpanded',\n                    isExpanded)}\n                classes={{ expanded: classes.expanded }}\n            >\n                <AccordianSummary\n                    expandIcon={<ExpandMoreIcon className={classes.expandIconColor} />}\n                >\n                    <Typography className={classes.leftLInkText}>\n                        API Configurations\n                    </Typography>\n                    <Tooltip\n                        title={'If you make any changes to the API configuration, you need to redeploy'\n                            + ' the API to see updates in the API Gateway.'}\n                        placement='bottom'\n                    >\n                        <IconButton color='primary' size='small' aria-label='delete'>\n                            <InfoOutlinedIcon fontSize='small' />\n                        </IconButton>\n                    </Tooltip>\n                </AccordianSummary>\n                <AccordionDetails>\n                    <div>\n                        {!isAPIProduct && api.advertiseInfo && !api.advertiseInfo.advertised\n                            && !api.isWebSocket() && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.runtime.configs',\n                                    defaultMessage: 'Runtime',\n                                })}\n                                route='runtime-configuration'\n                                to={pathPrefix + 'runtime-configuration'}\n                                Icon={<RuntimeConfigurationIcon />}\n                            />\n                        )}\n                        {isAPIProduct && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.runtime.configs',\n                                    defaultMessage: 'Runtime',\n                                })}\n                                route='runtime-configuration'\n                                to={pathPrefix + 'runtime-configuration'}\n                                Icon={<RuntimeConfigurationIcon />}\n                            />\n                        )}\n                        {api.advertiseInfo && !api.advertiseInfo.advertised && api.isWebSocket() && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.runtime.configs',\n                                    defaultMessage: 'Runtime',\n                                })}\n                                route='runtime-configuration'\n                                to={pathPrefix + 'runtime-configuration-websocket'}\n                                Icon={<RuntimeConfigurationIcon />}\n                            />\n                        )}\n                        {!isAPIProduct && api.advertiseInfo && !api.advertiseInfo.advertised\n                            && getLeftMenuItemForResourcesByType(api.type)}\n                        {isAPIProduct && getLeftMenuItemForResourcesByType(api.type)}\n                        {getLeftMenuItemForDefinitionByType(api.type)}\n                        {api.advertiseInfo && !api.advertiseInfo.advertised && !isAPIProduct\n                            && api.type !== 'WEBSUB' && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.endpoints',\n                                    defaultMessage: 'endpoints',\n                                })}\n                                to={pathPrefix + 'endpoints'}\n                                Icon={<EndpointIcon />}\n                            />\n                        )}\n                        {api.advertiseInfo && !api.advertiseInfo.advertised && !isAPIProduct && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.left.menu.scope',\n                                    defaultMessage: 'Local Scopes',\n                                })}\n                                route='scopes'\n                                to={pathPrefix + 'scopes'}\n                                Icon={<ScopesIcon />}\n                            />\n                        )}\n\n                        <LeftMenuItem\n                            text={intl.formatMessage({\n                                id: 'Apis.Details.index.properties',\n                                defaultMessage: 'properties',\n                            })}\n                            to={pathPrefix + 'properties'}\n                            Icon={<PropertiesIcon />}\n                        />\n\n                        {!api.isWebSocket() && !isRestricted(['apim:api_publish'], api) && (\n                            <>\n                                {!isAPIProduct && api.advertiseInfo\n                                    && !api.advertiseInfo.advertised && (\n                                    <LeftMenuItem\n                                        text={intl.formatMessage({\n                                            id: 'Apis.Details.index.monetization',\n                                            defaultMessage: 'monetization',\n                                        })}\n                                        to={pathPrefix + 'monetization'}\n                                        Icon={<MonetizationIcon />}\n                                    />\n                                )}\n                            </>\n                        )}\n                        {isAPIProduct && !api.isWebSocket()\n                            && !isRestricted(['apim:api_publish'], api) && (\n                            <LeftMenuItem\n                                text={intl.formatMessage({\n                                    id: 'Apis.Details.index.monetization',\n                                    defaultMessage: 'monetization',\n                                })}\n                                to={pathPrefix + 'monetization'}\n                                Icon={<MonetizationIcon />}\n                            />\n                        )}\n                    </div>\n                </AccordionDetails>\n            </Accordion>\n        </div>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport green from '@material-ui/core/colors/green';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport API from 'AppData/api';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Resources from './Resources';\nimport Operations from './Operations';\nimport ProductResources from './ProductResources';\nimport Configuration from './Configuration';\nimport CustomizedStepper from './CustomizedStepper';\nimport MetaData from './MetaData';\nimport Endpoints from './Endpoints';\nimport Topics from './Topics';\n\nconst styles = (theme) => ({\n    root: {\n        ...theme.mixins.gutters(),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    contentWrapper: {\n        marginTop: theme.spacing(2),\n    },\n    buttonSuccess: {\n        backgroundColor: green[500],\n        '&:hover': {\n            backgroundColor: green[700],\n        },\n    },\n    checkItem: {\n        textAlign: 'center',\n    },\n    divider: {\n        marginTop: 20,\n        marginBottom: 20,\n    },\n    chip: {\n        margin: theme.spacing(0.5),\n        padding: 0,\n        height: 'auto',\n        '& span': {\n            padding: '0 5px',\n        },\n    },\n    imageContainer: {\n        display: 'flex',\n    },\n    imageWrapper: {\n        marginRight: theme.spacing(3),\n    },\n    subtitle: {\n        marginTop: theme.spacing(0),\n    },\n    specialGap: {\n        marginTop: theme.spacing(3),\n    },\n    resourceTitle: {\n        marginBottom: theme.spacing(3),\n    },\n    ListRoot: {\n        padding: 0,\n        margin: 0,\n    },\n    titleWrapper: {\n        display: 'flex',\n    },\n    title: {\n        flex: 1,\n    },\n    helpButton: {\n        padding: 0,\n        minWidth: 20,\n    },\n    helpIcon: {\n        fontSize: 16,\n    },\n    htmlTooltip: {\n        backgroundColor: '#f5f5f9',\n        color: 'rgba(0, 0, 0, 0.87)',\n        maxWidth: 220,\n        fontSize: theme.typography.pxToRem(14),\n        border: '1px solid #dadde9',\n        '& b': {\n            fontWeight: theme.typography.fontWeightMedium,\n        },\n    },\n    lifecycleWrapper: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    lifecycleIcon: {\n        fontSize: 36,\n        color: 'green',\n        marginRight: theme.spacing(1),\n    },\n    leftSideWrapper: {\n        paddingRight: theme.spacing(2),\n    },\n    notConfigured: {\n        color: 'rgba(0, 0, 0, 0.40)',\n    },\n    url: {\n        maxWidth: '100%',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n    },\n});\n\n/**\n * API Overview page\n *\n * @param {*} props\n * @returns\n */\nfunction Overview(props) {\n    const { classes, api: newApi } = props;\n    const { api } = useContext(ApiContext);\n    let loadEndpoints;\n\n    if (api.apiType === API.CONSTS.API) {\n        loadEndpoints = <Endpoints parentClasses={classes} api={api} />;\n    }\n    function getResourcesClassForAPIs(apiType) {\n        switch (apiType) {\n            case 'GRAPHQL':\n                return <Operations parentClasses={classes} api={api} />;\n            case 'APIPRODUCT':\n                return <ProductResources parentClasses={classes} api={api} />;\n            case 'WS':\n            case 'WEBSUB':\n            case 'SSE':\n                return <Topics parentClasses={classes} api={api} />;\n            default:\n                return <Resources parentClasses={classes} api={api} />;\n        }\n    }\n\n    if (newApi.apiType === API.CONSTS.APIProduct) {\n        api.type = API.CONSTS.APIProduct;\n    }\n    return (\n        <>\n            <Typography variant='h4' align='left' className={classes.mainTitle}>\n                <FormattedMessage\n                    id='Apis.Details.Overview.Overview.topic.header'\n                    defaultMessage='Overview'\n                />\n            </Typography>\n            {api.type !== API.CONSTS.APIProduct && (\n                <Grid container spacing={12}>\n                    <Grid item xs={12} s={12} md={12} lg={12}>\n                        <CustomizedStepper />\n                    </Grid>\n                </Grid>\n            )}\n            <div className={classes.contentWrapper}>\n                <Paper className={classes.root}>\n                    <Grid container spacing={24}>\n                        <Grid item xs={12} md={12} lg={12}>\n                            <Grid container spacing={24}>\n                                <Grid item xs={12} md={6} lg={6}>\n                                    <MetaData parentClasses={classes} />\n                                </Grid>\n                                <Grid item xs={12} md={6} lg={6}>\n                                    <Configuration parentClasses={classes} />\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={12} md={12} lg={12}>\n                            <div className={classes.specialGap}>\n                                <Grid container spacing={24}>\n                                    {\n                                        api.type === 'WEBSUB' ? (\n                                            <Grid item xs={12} md={12} lg={12}>\n                                                <Grid item xs={12} md={12} lg={12}>\n                                                    {getResourcesClassForAPIs(api.type)}\n                                                </Grid>\n                                            </Grid>\n                                        ) : (\n                                            <>\n                                                <Grid item xs={12} md={6} lg={6}>\n                                                    <Grid item xs={12} md={8} lg={8}>\n                                                        {getResourcesClassForAPIs(api.type)}\n                                                    </Grid>\n                                                </Grid>\n                                                <Grid item xs={12} md={6} lg={6}>\n                                                    {loadEndpoints}\n                                                </Grid>\n                                            </>\n                                        )\n                                    }\n                                </Grid>\n                            </div>\n                        </Grid>\n                    </Grid>\n                </Paper>\n            </div>\n        </>\n    );\n}\n\nOverview.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n};\n\nexport default withStyles(styles)(Overview);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { withStyles, withTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Chip from '@material-ui/core/Chip';\nimport { FormattedMessage } from 'react-intl';\nimport Box from '@material-ui/core/Box';\nimport { Link } from 'react-router-dom';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nimport Typography from '@material-ui/core/Typography';\nimport Api from 'AppData/api';\nimport CONSTS from 'AppData/Constants';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\n\nfunction RenderMethodBase(props) {\n    const { theme, method } = props;\n    let chipColor = theme.custom.resourceChipColors ? theme.custom.resourceChipColors[method] : null;\n    let chipTextColor = '#000000';\n    if (!chipColor) {\n        console.log('Check the theme settings. The resourceChipColors is not populated properly');\n        chipColor = '#cccccc';\n    } else {\n        chipTextColor = theme.palette.getContrastText(theme.custom.resourceChipColors[method]);\n    }\n    return (\n        <Chip\n            label={method.toUpperCase()}\n            style={{\n                backgroundColor: chipColor, color: chipTextColor, height: 20, marginRight: 5,\n            }}\n        />\n    );\n}\n\nRenderMethodBase.propTypes = {\n    method: PropTypes.string.isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nconst RenderMethod = withTheme(RenderMethodBase);\n\nconst styles = {\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: 10,\n    },\n    heading: {\n        marginRight: 20,\n    },\n    contentWrapper: {\n        maxHeight: '125px',\n        overflowY: 'auto',\n    },\n};\n\nclass Resources extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            paths: null,\n        };\n        this.restApi = new Api();\n    }\n\n    componentDidMount() {\n        const { id } = this.props.api;\n        const promisedAPI = this.restApi.getSwagger(id);\n        promisedAPI\n            .then((response) => {\n                if (response.obj.paths !== undefined) {\n                    this.setState({ paths: response.obj.paths });\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    }\n\n    render() {\n        const { paths } = this.state;\n        if (this.state.notFound) {\n            return (\n                <div>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.Resources.resource.not.found'\n                        defaultMessage='resource not found...'\n                    />\n                </div>\n            );\n        }\n        if (!paths) {\n            return (\n                <div>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.Resources.loading'\n                        defaultMessage='loading...'\n                    />\n                </div>\n            );\n        }\n        const { classes, parentClasses, api } = this.props;\n        return (\n            <>\n                <div className={parentClasses.titleWrapper}>\n                    { api.type === 'GraphQL' ? (\n                        <Typography variant='h5' component='h3' className={parentClasses.title}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.Operations.operations'\n                                defaultMessage='Operation'\n                            />\n                        </Typography>\n                    )\n                        : (\n                            <Typography variant='h5' component='h3' className={parentClasses.title}>\n                                <FormattedMessage\n                                    id='Apis.Details.NewOverview.Resources.resources'\n                                    defaultMessage='Resources'\n                                />\n                            </Typography>\n                        )}\n                </div>\n                <Box p={1}>\n                    <div className={classes.contentWrapper}>\n                        {Object.keys(paths).map((key) => {\n                            const path = paths[key];\n                            return (\n                                <div className={classes.root}>\n                                    <Typography className={classes.heading} variant='body1'>\n                                        {key}\n                                    </Typography>\n                                    {Object.keys(path).map((innerKey) => {\n                                        return CONSTS.HTTP_METHODS.includes(innerKey)\n                                            ? <RenderMethod method={innerKey} /> : null;\n                                    })}\n                                </div>\n                            );\n                        })}\n                    </div>\n                    <Link to={'/apis/' + api.id + '/resources'}>\n                        <Typography\n                            className={classes.subHeading}\n                            color='primary'\n                            display='inline'\n                            variant='caption'\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.Operations.ShowMore'\n                                defaultMessage='Show More'\n                            />\n                            <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                        </Typography>\n                    </Link>\n                </Box>\n            </>\n        );\n    }\n}\nResources.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.shape({}),\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.shape({}),\n    }).isRequired,\n    parentClasses: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({ id: PropTypes.string }).isRequired,\n};\n\nexport default withStyles(styles)(Resources);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { withStyles, withTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Chip from '@material-ui/core/Chip';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport Box from '@material-ui/core/Box';\nimport { Link } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport ApiContext from '../components/ApiContext';\n\nconst styles = (theme) => ({\n    contentWrapper: {\n        marginTop: theme.spacing(2),\n        maxHeight: '250px',\n        overflowY: 'auto',\n    },\n});\n\n/**\n *\n * @param {*} props\n */\nfunction RenderMethodBase(props) {\n    const { theme, method } = props;\n    const methodLower = method.toLowerCase();\n    let chipColor = theme.custom.operationChipColor\n        ? theme.custom.operationChipColor[methodLower]\n        : null;\n    let chipTextColor = '#000000';\n    if (!chipColor) {\n        console.log('Check the theme settings. The resourceChipColors is not populated properlly');\n        chipColor = '#cccccc';\n    } else {\n        chipTextColor = theme.palette.getContrastText(theme.custom.operationChipColor[methodLower]);\n    }\n    return (\n        <Chip\n            label={method}\n            style={{\n                backgroundColor: chipColor, color: chipTextColor, height: 20, fontSize: 9, width: 95,\n            }}\n        />\n    );\n}\n\nRenderMethodBase.propTypes = {\n    method: PropTypes.string.isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nconst RenderMethod = withTheme(RenderMethodBase);\n/**\n *\n * @param {*} props\n */\nfunction Operations(props) {\n    const { classes, parentClasses } = props;\n    return (\n        <ApiContext.Consumer>\n            {({ api }) => (\n                <>\n                    <div className={parentClasses.titleWrapper}>\n                        <Typography variant='h5' component='h3' className={parentClasses.title}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.Operations.operation'\n                                defaultMessage='Operations'\n                            />\n                        </Typography>\n                    </div>\n                    <div>\n                        <div className={classes.contentWrapper}>\n                            <Table style={{ padding: 20 }}>\n                                {api.operations\n                            && api.operations.length !== 0\n                            && api.operations.map((item) => (\n                                <TableRow style={{ borderStyle: 'hidden' }}>\n                                    <TableCell style={{ padding: 8 }}>\n                                        <Typography className={parentClasses.heading} component='p' variant='body1'>\n                                            {item.target}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell style={{ padding: 8 }}>\n                                        <RenderMethod method={item.verb} />\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                            </Table>\n                        </div>\n                        <Box py={2}>\n                            <Link to={'/apis/' + api.id + '/operations'}>\n                                <Typography\n                                    className={classes.subHeading}\n                                    color='primary'\n                                    display='inline'\n                                    variant='caption'\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.Operations.ShowMore'\n                                        defaultMessage='Show More'\n                                    />\n                                    <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                                </Typography>\n                            </Link>\n                        </Box>\n                    </div>\n                </>\n            )}\n        </ApiContext.Consumer>\n    );\n}\n\nOperations.propTypes = {\n    parentClasses: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles)(Operations);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { withStyles, withTheme } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Chip from '@material-ui/core/Chip';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * Render method base.\n * @param {*} props\n */\nfunction RenderMethodBase(props) {\n    const { theme, method } = props;\n    const methodLower = method.toLowerCase();\n    let chipColor = theme.custom.resourceChipColors ? theme.custom.resourceChipColors[methodLower] : null;\n    let chipTextColor = '#000000';\n    if (!chipColor) {\n        console.log('Check the theme settings. The resourceChipColors is not populated properly');\n        chipColor = '#cccccc';\n    } else {\n        chipTextColor = theme.palette.getContrastText(theme.custom.resourceChipColors[methodLower]);\n    }\n    return (\n        <Chip\n            label={method.toUpperCase()}\n            style={{ backgroundColor: chipColor, color: chipTextColor, height: 20 }}\n        />\n    );\n}\n\nRenderMethodBase.propTypes = {\n    method: PropTypes.string.isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nconst RenderMethod = withTheme(RenderMethodBase);\n\nconst styles = {\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'left',\n        marginBottom: 10,\n        padding: 5,\n    },\n    heading: {\n        marginRight: 20,\n        paddingBottom: 10,\n    },\n    resourceRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        marginLeft: 10,\n    },\n};\n\n/**\n * Component to show api product resources in overview tab\n */\nclass ProductResources extends React.PureComponent {\n    /**\n     * @inheritDoc\n     */\n    render() {\n        const { classes, parentClasses, api } = this.props;\n        const apiResources = api.apis;\n        return (\n            <>\n                <div className={parentClasses.titleWrapper} style={{ margin: '20px 0 0' }}>\n                    <Typography variant='h5' component='h3' className={parentClasses.title}>\n                        <FormattedMessage\n                            id='Apis.Details.Overview.ProductResources.resources'\n                            defaultMessage='Resources'\n                        />\n                    </Typography>\n                </div>\n                <div className={classes.root}>\n                    <div className={classes.contentWrapper}>\n                        {Object.keys(apiResources).map((key) => {\n                            const resource = apiResources[key];\n                            return (\n                                <div className={classes.root}>\n                                    <Typography className={classes.heading} variant='body1'>\n                                        {resource.name + ' : ' + resource.version}\n                                    </Typography>\n                                    {Object.keys(resource.operations).map((innerKey) => {\n                                        const operation = (resource.operations)[innerKey];\n                                        return (\n                                            <div className={classes.resourceRow}>\n                                                <Typography className={classes.heading} variant='body1'>\n                                                    {operation.target}\n                                                </Typography>\n                                                <RenderMethod method={operation.verb} />\n\n                                            </div>\n                                        );\n                                    })}\n\n                                </div>\n                            );\n                        })}\n                    </div>\n                </div>\n            </>\n        );\n    }\n}\nProductResources.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.shape({}),\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.shape({}),\n    }).isRequired,\n    parentClasses: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({ id: PropTypes.string }).isRequired,\n};\n\nexport default withStyles(styles)(ProductResources);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useContext } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Chip from '@material-ui/core/Chip';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport Box from '@material-ui/core/Box';\nimport API from 'AppData/api';\nimport { capitalizeFirstLetter, upperCaseString, lowerCaseString } from 'AppData/stringFormatter';\nimport APIContext from '../components/ApiContext';\nimport Policies from './Policies';\n\nconst HUMAN_READABLE_SCHEMES = {\n    oauth2: 'OAuth2',\n    basic_auth: 'Basic Auth',\n    mutualssl: 'Mutual TLS',\n    api_key: 'API Key',\n};\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction Configuration(props) {\n    const { parentClasses } = props;\n    const { api } = useContext(APIContext);\n\n    return (\n        <>\n            <div>\n                <Typography variant='h5' component='h3' className={parentClasses.title}>\n                    <FormattedMessage id='Apis.Details.NewOverview.MetaData.config' defaultMessage='Configuration' />\n                </Typography>\n            </div>\n            <Box p={1}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Transports */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.transports'\n                                defaultMessage='Transports'\n                            />\n                            <Tooltip\n                                interactive\n                                placement='top'\n                                tabIndex='-1'\n                                classes={{\n                                    tooltip: parentClasses.htmlTooltip,\n                                }}\n                                title={(\n                                    <>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.transport.tooltip'\n                                            defaultMessage={\n                                                'HTTP is less secure than HTTPS and '\n                                                + 'makes your API vulnerable to security threats.'\n                                            }\n                                        />\n                                    </>\n                                )}\n                            >\n                                <Button className={parentClasses.helpButton}>\n                                    <HelpOutline className={parentClasses.helpIcon} />\n                                </Button>\n                            </Tooltip>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.transport && api.transport.length !== 0 && (\n                                <>\n                                    {api.transport.map((item, index) => (\n                                        <span>\n                                            {upperCaseString(item)}\n                                            {api.transport.length !== index + 1 && ', '}\n                                        </span>\n                                    ))}\n                                </>\n                            )}\n                            {!api.transport && (\n                                <>\n                                    <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.transports.not.set'\n                                            defaultMessage='-'\n                                        />\n                                    </Typography>\n                                </>\n                            )}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* API Security */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.securityScheme'\n                                defaultMessage='API Security'\n                            />\n                            <Tooltip\n                                interactive\n                                placement='top'\n                                tabIndex='-1'\n                                classes={{\n                                    tooltip: parentClasses.htmlTooltip,\n                                }}\n                                title={(\n                                    <>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.securityScheme.tooltip'\n                                            defaultMessage='OAuth2 is used as the default security schema.'\n                                        />\n                                    </>\n                                )}\n                            >\n                                <Button className={parentClasses.helpButton}>\n                                    <HelpOutline className={parentClasses.helpIcon} />\n                                </Button>\n                            </Tooltip>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.securityScheme && api.securityScheme.length !== 0 && (\n                                <>\n                                    {api.securityScheme\n                                        .filter((item) => !item.includes('mandatory'))\n                                        .map((filteredItem) => HUMAN_READABLE_SCHEMES[filteredItem])\n                                        .join(' , ')}\n                                </>\n                            )}\n                            {!api.securityScheme && (\n                                <>\n                                    <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.securityScheme.not.set'\n                                            defaultMessage='-'\n                                        />\n                                    </Typography>\n                                </>\n                            )}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Access Control */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.access.control'\n                                defaultMessage='Access Control'\n                            />\n                            <Tooltip\n                                interactive\n                                placement='top'\n                                tabIndex='-1'\n                                classes={{\n                                    tooltip: parentClasses.htmlTooltip,\n                                }}\n                                title={(\n                                    <>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.access.control.all.tooltip'\n                                            defaultMessage={\n                                                'All : The API is viewable, '\n                                                + 'modifiable by all the publishers and creators.'\n                                            }\n                                        />\n                                        <br />\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.access.control.tooltip'\n                                            defaultMessage={\n                                                'Restricted by roles : The API can be viewable and'\n                                                + ' modifiable by only specific publishers and creators '\n                                                + 'with the roles that you specify'\n                                            }\n                                        />\n                                    </>\n                                )}\n                            >\n                                <Button className={parentClasses.helpButton}>\n                                    <HelpOutline className={parentClasses.helpIcon} />\n                                </Button>\n                            </Tooltip>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.accessControl && (\n                                <>\n                                    {capitalizeFirstLetter(lowerCaseString(api.accessControl))}\n                                </>\n                            )}\n                            {api.accessControl === 'RESTRICTED' && ' ( Visible to '}\n                            {api.accessControl === 'RESTRICTED' && api.accessControlRoles.join()}\n                            {api.accessControl === 'RESTRICTED' && ' ) '}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* workflowStatus */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.workflow.status'\n                                defaultMessage='Workflow Status'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.workflowStatus && <>{api.workflowStatus}</>}\n                            {!api.workflowStatus && (\n                                <>\n                                    <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.workflowStatus.not.set'\n                                            defaultMessage='-'\n                                        />\n                                    </Typography>\n                                </>\n                            )}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Visibility */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.visibility.store'\n                                defaultMessage='Visibility on Developer Portal'\n                            />\n                            <Tooltip\n                                placement='top'\n                                interactive\n                                tabIndex='-1'\n                                classes={{\n                                    tooltip: parentClasses.htmlTooltip,\n                                }}\n                                title={(\n                                    <>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.visibility.store.all.tooltip'\n                                            defaultMessage={\n                                                'Public: The API is accessible to everyone and can be advertised '\n                                                + 'in multiple developer portals - a central developer portal '\n                                                + 'and/or non-WSO2 developer portals.'\n                                            }\n                                        />\n                                        <br />\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.visibility.store.res.tooltip'\n                                            defaultMessage={\n                                                'Restricted by roles: The API is visible only to '\n                                                + 'specific user roles in the tenant Developer Portal that you specify.'\n                                            }\n                                        />\n                                    </>\n                                )}\n                            >\n                                <Button className={parentClasses.helpButton}>\n                                    <HelpOutline className={parentClasses.helpIcon} />\n                                </Button>\n                            </Tooltip>\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {(api.visibility && api.visibility === 'PRIVATE')\n                                ? (\n                                    <>\n                                        Visible to my domain\n                                    </>\n                                )\n                                : (\n                                    <>\n                                        {capitalizeFirstLetter(lowerCaseString(api.visibility))}\n                                    </>\n                                )}\n                            {api.visibility === 'RESTRICTED' && ' ( Visible to '}\n                            {api.visibility === 'RESTRICTED' && api.visibleRoles.join()}\n                            {api.visibility === 'RESTRICTED' && ' ) '}\n                        </Typography>\n                    </Grid>\n                    <Policies parentClasses={parentClasses} />\n                    {api.apiType === API.CONSTS.APIProduct ? null : (\n                        <>\n                            <Grid item xs={12} md={6} lg={4}>\n                                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.MetaData.tags'\n                                        defaultMessage='Tags'\n                                    />\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12} md={6} lg={8}>\n                                {api.tags\n                                    && api.tags.map((tag) => (\n                                        <Chip\n                                            key={tag}\n                                            label={tag}\n                                            style={{\n                                                'font-size': 13,\n                                                height: 20,\n                                                marginRight: 5,\n                                            }}\n                                        />\n                                    ))}\n                                {api.tags.length === 0 && (\n                                    <>\n                                        <Typography\n                                            component='p'\n                                            variant='body1'\n                                            className={parentClasses.notConfigured}\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.NewOverview.MetaData.tags.not.set'\n                                                defaultMessage='-'\n                                            />\n                                        </Typography>\n                                    </>\n                                )}\n                            </Grid>\n                        </>\n                    )}\n                </Grid>\n            </Box>\n        </>\n    );\n}\n\nConfiguration.propTypes = {\n    parentClasses: PropTypes.shape({}).isRequired,\n};\n\nexport default Configuration;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction Policies(props) {\n    const { parentClasses, api } = props;\n    return (\n        <>\n            <Grid item xs={12} md={6} lg={4}>\n                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.Policies.business.plans'\n                        defaultMessage='Business Plans:'\n                    />\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={6} lg={8}>\n                {/* Throttling Policies */}\n                <Typography component='p' variant='body1'>\n                    {api.policies\n                    && api.policies.length !== 0\n                    && api.policies.map((item, index) => (\n                        <span>\n                            {item}\n                            {api.policies.length !== index + 1 && ', '}\n                            {' '}\n                        </span>\n                    ))}\n                </Typography>\n            </Grid>\n        </>\n    );\n}\n\nPolicies.propTypes = {\n    parentClasses: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default withAPI(Policies);\n","import React, { useEffect, useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FormattedMessage } from 'react-intl';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport StepConnector from '@material-ui/core/StepConnector';\nimport ApiContext, { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Link as RouterLink } from 'react-router-dom';\nimport Link from '@material-ui/core/Link';\nimport grey from '@material-ui/core/colors/grey';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport AuthManager from 'AppData/AuthManager';\nimport Typography from '@material-ui/core/Typography';\nimport LinkIcon from '@material-ui/icons/Link';\n\nconst ColorlibConnector = withStyles((theme) => {\n    const completedColor = theme.custom.apis.overview.stepper.completed || theme.palette.success.main;\n    const activeColor = theme.custom.apis.overview.stepper.active || theme.palette.info.main;\n    return {\n        alternativeLabel: {\n            top: 22,\n        },\n        active: {\n            '& $line': {\n                backgroundImage:\n                    `linear-gradient(to left, ${activeColor} 50%, ${completedColor} 50%)`,\n            },\n        },\n        completed: {\n            '& $line': {\n                backgroundImage:\n                    `linear-gradient( ${completedColor}, ${completedColor})`,\n            },\n        },\n        line: {\n            height: 3,\n            border: 0,\n            backgroundColor: '#eaeaf0',\n            borderRadius: 1,\n        },\n    };\n})(StepConnector);\n\nconst useColorlibStepIconStyles = makeStyles((theme) => ({\n    root: {\n        backgroundColor: '#ccc',\n        zIndex: 1,\n        color: '#fff',\n        width: 56,\n        height: 56,\n        display: 'flex',\n        borderRadius: '50%',\n        justifyContent: 'center',\n        alignItems: 'center',\n        border: '6px solid #E2E2E2',\n    },\n    active: {\n        backgroundColor: theme.custom.apis.overview.stepper.active || theme.palette.info.main,\n        border: '6px solid #E2E2E2',\n    },\n    completed: {\n        backgroundColor: theme.custom.apis.overview.stepper.completed || theme.palette.success.main,\n        border: '6px solid #E2E2E2',\n    },\n}));\n\n/**\n *\n * @param {*} props\n * @returns\n */\nfunction ColorlibStepIcon(props) {\n    const classes = useColorlibStepIconStyles();\n    const {\n        active, completed, forceComplete, icon: step,\n    } = props;\n    return (\n        <div\n            className={clsx(classes.root, {\n                [classes.active]: active,\n                [classes.completed]: completed || forceComplete.includes(step),\n            })}\n        />\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: '100%',\n    },\n    button: {\n        marginRight: theme.spacing(1),\n    },\n    instructions: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    iconTrue: {\n        display: 'block',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        backgroundColor: theme.custom.apis.overview.stepper.completed || theme.palette.success.main,\n        zIndex: 1,\n        color: '#fff',\n        width: 15,\n        height: 15,\n        borderRadius: '50%',\n    },\n    iconFalse: {\n        color: '#fff',\n        display: 'block',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n        backgroundColor: grey[500],\n        zIndex: 1,\n        width: 15,\n        height: 15,\n        borderRadius: '50%',\n    },\n    pageLinks: {\n        display: 'flex',\n    },\n    disabledLink: {\n        pointerEvents: 'none',\n        color: theme.palette.text.primary,\n    },\n    textLink: {\n        color: '#0060B6',\n        textDecoration: 'none',\n    },\n}));\n\n/**\n *\n * @returns\n */\nexport default function CustomizedStepper() {\n    const classes = useStyles();\n    const [api, updateAPI] = useAPI();\n    const [isUpdating, setUpdating] = useState(false);\n    const [deploymentsAvailable, setDeploymentsAvailable] = useState(false);\n    const isPrototypedAvailable = api.endpointConfig !== null\n    && api.endpointConfig.implementation_status === 'prototyped';\n    const isEndpointAvailable = api.endpointConfig !== null;\n    const isTierAvailable = api.policies.length !== 0;\n    const isPublished = api.lifeCycleStatus === 'PUBLISHED';\n    const { tenantList } = useContext(ApiContext);\n    const { settings, user } = useAppContext();\n    const userNameSplit = user.name.split('@');\n    const tenantDomain = userNameSplit[userNameSplit.length - 1];\n    let devportalUrl = `${settings.devportalUrl}/apis/${api.id}/overview`;\n    if (tenantList && tenantList.length > 0) {\n        devportalUrl = `${settings.devportalUrl}/apis/${api.id}/overview?tenant=${tenantDomain}`;\n    }\n    const steps = (api.isWebSocket() || api.isAPIProduct() || api.isGraphql() || api.isAsyncAPI())\n        ? ['Develop', 'Deploy', 'Publish'] : ['Develop', 'Deploy', 'Test', 'Publish'];\n    const forceComplete = [];\n    if (isPublished) {\n        forceComplete.push(steps.indexOf('Publish') + 1);\n    }\n    let activeStep = 0;\n    if (api && (api.type === 'WEBSUB' || isEndpointAvailable) && isTierAvailable && !deploymentsAvailable) {\n        activeStep = 1;\n    } else if ((api && !isEndpointAvailable && api.type !== 'WEBSUB') || (api && !isTierAvailable)) {\n        activeStep = 0;\n    } else if (api && (isEndpointAvailable || api.type === 'WEBSUB') && isTierAvailable\n        && deploymentsAvailable && (!isPublished && api.lifeCycleStatus !== 'PROTOTYPED')) {\n        activeStep = 3;\n    } else if ((isPublished || api.lifeCycleStatus === 'PROTOTYPED') && api\n        && (isEndpointAvailable || api.type === 'WEBSUB' || isPrototypedAvailable)\n        && isTierAvailable && deploymentsAvailable) {\n        activeStep = 4;\n    }\n\n    useEffect(() => {\n        api.getRevisionsWithEnv(api.isRevision ? api.revisionedApiId : api.id).then((result) => {\n            setDeploymentsAvailable(result.body.count > 0);\n        });\n    }, []);\n\n    /**\n * Update the LifeCycle state of the API\n *\n */\n    function updateLCStateOfAPI(apiId, state) {\n        setUpdating(true);\n        const promisedUpdate = api.updateLcState(apiId, state);\n        promisedUpdate\n            .then(() => {\n                updateAPI()\n                    .then()\n                    .catch((error) => {\n                        if (error.response) {\n                            Alert.error(error.response.body.description);\n                        } else {\n                            Alert.error('Something went wrong while updating the API');\n                        }\n                        console.error(error);\n                    });\n                Alert.info('Lifecycle state updated successfully');\n            })\n            .finally(() => setUpdating(false))\n            .catch((errorResponse) => {\n                console.log(errorResponse);\n                Alert.error(JSON.stringify(errorResponse.message));\n            });\n    }\n\n    /**\n     * This function renders the final lifecycle state\n     * @param {*} state\n     */\n    function finalLifecycleState(state) {\n        switch (state) {\n            case 'PUBLISHED':\n                return (\n                    <>\n                        <Grid\n                            container\n                            direction='row'\n                            alignItems='center'\n                            justify='center'\n                        >\n                            <Grid item>\n                                <CheckIcon className={classes.iconTrue} />\n                            </Grid>\n                            <Box ml={1}>\n                                <Grid item>\n                                    <Typography variant='h7'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Overview.CustomizedStepper.publish'\n                                            defaultMessage=' Published'\n                                        />\n                                        <Box display='inline' pl={0.4} color='text.secondary'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Overview.CustomizedStepper.publish.current.api'\n                                                defaultMessage=' (Current API)'\n                                            />\n                                        </Box>\n                                    </Typography>\n                                </Grid>\n                            </Box>\n                        </Grid>\n                        <Box mt={1} ml={2}>\n                            <a\n                                target='_blank'\n                                className={classes.textLink}\n                                rel='noopener noreferrer'\n                                href={devportalUrl}\n                            >\n                                <Grid\n                                    container\n                                    direction='row'\n                                    alignItems='center'\n                                    justify='center'\n                                >\n                                    <Grid item>\n                                        <Typography variant='h7' display='inline'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Overview.CustomizedStepper.view.devportal'\n                                                defaultMessage='View in devportal'\n                                            />\n                                        </Typography>\n                                    </Grid>\n                                    <Grid item>\n                                        <Box ml={1}>\n                                            <LaunchIcon\n                                                color='primary'\n                                                fontSize='small'\n                                            />\n                                        </Box>\n                                    </Grid>\n                                </Grid>\n                            </a>\n                        </Box>\n                    </>\n                );\n            case 'PROTOTYPED':\n                return (\n                    <Typography variant='h7'>\n                        <b>\n                            <FormattedMessage\n                                id='Apis.Details.Overview.CustomizedStepper.prototyped'\n                                defaultMessage='Prototyped'\n                            />\n                        </b>\n                    </Typography>\n                );\n            case 'BLOCKED':\n                return (\n                    <Typography variant='h7'>\n                        <b>\n                            <FormattedMessage\n                                id='Apis.Details.Overview.CustomizedStepper.blocked'\n                                defaultMessage='Blocked'\n                            />\n                        </b>\n                    </Typography>\n                );\n            case 'DEPRECATED':\n                return (\n                    <Typography variant='h7'>\n                        <b>\n                            <FormattedMessage\n                                id='Apis.Details.Overview.CustomizedStepper.deprecated'\n                                defaultMessage='Deprecated'\n                            />\n                        </b>\n                    </Typography>\n                );\n            case 'RETIRED':\n                return (\n                    <Typography variant='h7'>\n                        <b>\n                            <FormattedMessage\n                                id='Apis.Details.Overview.CustomizedStepper.retired'\n                                defaultMessage='Retired'\n                            />\n                        </b>\n                    </Typography>\n                );\n            default:\n                return (\n                    <>\n                        {isPrototypedAvailable ? (\n                            <Button\n                                size='small'\n                                variant='contained'\n                                color='primary'\n                                onClick={() => updateLCStateOfAPI(api.id, 'Deploy as a Prototype')}\n                                disabled={api.workflowStatus === 'CREATED'\n                                    || AuthManager.isNotPublisher()\n                                    || !deploymentsAvailable}\n                            >\n                                Prototype\n                                {isUpdating && <CircularProgress size={20} />}\n                            </Button>\n                        ) : (\n                            <Button\n                                size='small'\n                                variant='contained'\n                                color='primary'\n                                onClick={() => updateLCStateOfAPI(api.id, 'Publish')}\n                                disabled={((api.type !== 'WEBSUB' && !isEndpointAvailable) || !isTierAvailable)\n                                    || !deploymentsAvailable\n                                    || api.isRevision || AuthManager.isNotPublisher()\n                                    || api.workflowStatus === 'CREATED'}\n                            >\n                                Publish\n                                {isUpdating && <CircularProgress size={20} />}\n                            </Button>\n                        )}\n                        {api.workflowStatus === 'CREATED' && (\n                            <Typography variant='caption' color='error'>\n                                <FormattedMessage\n                                    id='Apis.Details.Overview.CustomizedStepper.pending'\n                                    defaultMessage='The request is pending'\n                                />\n                            </Typography>\n                        )}\n                    </>\n                );\n        }\n    }\n    const isTestLinkDisabled = api.lifeCycleStatus === 'RETIERD' || !deploymentsAvailable\n    || !isEndpointAvailable\n    || !isTierAvailable\n    || (api.type !== 'HTTP' && api.type !== 'SOAP');\n    const isDeployLinkDisabled = (((api.type !== 'WEBSUB' && !isEndpointAvailable))\n    || !isTierAvailable\n    || api.workflowStatus === 'CREATED');\n    return (\n        <div id='itest-overview-api-flow' className={classes.root}>\n            <Stepper alternativeLabel activeStep={activeStep} connector={<ColorlibConnector />}>\n                {steps.map((label) => (\n                    <Step key={label}>\n                        <StepLabel StepIconComponent={(props) => (\n                            <ColorlibStepIcon\n                                {...props}\n                                forceComplete={forceComplete}\n                            />\n                        )}\n                        >\n                            {label === 'Develop' && (\n                                <div>\n                                    <Grid\n                                        container\n                                        direction='row'\n                                        justify='center'\n                                    >\n                                        <Grid item>\n                                            {api ? (\n                                                <CheckIcon className={classes.iconTrue} />\n                                            ) : (\n                                                <CloseIcon className={classes.iconFalse} />\n                                            )}\n                                        </Grid>\n                                        <Box ml={1} mb={1}>\n                                            <Grid>\n                                                <Typography variant='h7'>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Overview.CustomizedStepper.Develop'\n                                                        defaultMessage=' Develop'\n                                                    />\n                                                </Typography>\n                                            </Grid>\n                                        </Box>\n                                    </Grid>\n                                    {api.type !== 'WEBSUB' && (\n                                        <Box ml={3}>\n                                            <Grid\n                                                container\n                                                direction='row'\n                                                justify='center'\n                                                style={{ marginLeft: '2px' }}\n                                            >\n                                                <Grid item>\n                                                    {isEndpointAvailable ? (\n                                                        <CheckIcon className={classes.iconTrue} />\n                                                    ) : (\n                                                        <CloseIcon className={classes.iconFalse} />\n                                                    )}\n                                                </Grid>\n                                                <Box ml={1} mb={1}>\n                                                    <Grid item>\n                                                        <Link\n                                                            underline='none'\n                                                            className={classes.pageLinks}\n                                                            component={RouterLink}\n                                                            to={'/apis/' + api.id + '/endpoints'}\n                                                        >\n                                                            <Typography variant='h7'>\n                                                                <FormattedMessage\n                                                                    id='Apis.Details.Overview.\n                                                                    CustomizedStepper.Endpoint'\n                                                                    defaultMessage=' Endpoint'\n                                                                />\n                                                            </Typography>\n                                                            <Box ml={1}>\n                                                                <LinkIcon\n                                                                    color='primary'\n                                                                    fontSize='small'\n                                                                />\n                                                            </Box>\n                                                        </Link>\n                                                    </Grid>\n                                                </Box>\n                                            </Grid>\n                                        </Box>\n                                    )}\n                                    <Box ml={6}>\n                                        <Grid\n                                            container\n                                            direction='row'\n                                            justify='center'\n                                            style={{ marginLeft: '2px' }}\n                                        >\n                                            <Grid item>\n                                                {isTierAvailable ? (\n                                                    <CheckIcon className={classes.iconTrue} />\n                                                ) : (\n                                                    <CloseIcon className={classes.iconFalse} />\n                                                )}\n                                            </Grid>\n                                            <Box ml={1}>\n                                                <Grid item>\n                                                    <Link\n                                                        underline='none'\n                                                        component={RouterLink}\n                                                        className={classes.pageLinks}\n                                                        to={'/apis/' + api.id + '/subscriptions'}\n                                                    >\n                                                        <Typography variant='h7'>\n                                                            <FormattedMessage\n                                                                id='Apis.Details.Overview.CustomizedStepper.Tier'\n                                                                defaultMessage=' Business Plan'\n                                                            />\n                                                        </Typography>\n                                                        <Box ml={1}>\n                                                            <LinkIcon\n                                                                color='primary'\n                                                                fontSize='small'\n                                                            />\n                                                        </Box>\n                                                    </Link>\n                                                </Grid>\n                                            </Box>\n                                        </Grid>\n                                    </Box>\n                                </div>\n                            )}\n                            {label === 'Deploy' && (\n                                <Tooltip\n                                    title={deploymentsAvailable ? '' : 'Deploy a revision of this API to the Gateway'}\n                                    placement='bottom'\n                                >\n                                    <Grid\n                                        container\n                                        direction='row'\n                                        alignItems='center'\n                                        justify='center'\n                                    >\n                                        <Box mb={1}>\n                                            <Grid item>\n                                                {deploymentsAvailable ? (\n                                                    <CheckIcon className={classes.iconTrue} />\n                                                ) : (\n                                                    <CloseIcon className={classes.iconFalse} />\n                                                )}\n                                            </Grid>\n                                        </Box>\n                                        <Box ml={1} mb={1}>\n                                            <Grid item>\n                                                <Link\n                                                    underline='none'\n                                                    className={clsx(classes.pageLinks, {\n                                                        [classes.disabledLink]: isDeployLinkDisabled,\n                                                    })}\n                                                    component={RouterLink}\n                                                    to={'/apis/' + api.id + '/deployments'}\n                                                >\n                                                    <Typography variant='h7'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.Overview.CustomizedStepper.Deploy'\n                                                            defaultMessage=' Deploy'\n                                                        />\n                                                    </Typography>\n                                                    <Box ml={1}>\n                                                        <LinkIcon\n                                                            color='default'\n                                                            fontSize='small'\n                                                        />\n                                                    </Box>\n                                                </Link>\n                                            </Grid>\n                                        </Box>\n                                    </Grid>\n                                </Tooltip>\n                            )}\n                            {label === 'Test' && (\n                                <Tooltip\n                                    title={api.lifeCycleStatus === 'RETIERD' ? 'Cannot use test option while API'\n                                        + ' is in retired state' : ''}\n                                    placement='bottom'\n                                >\n                                    <Grid\n                                        container\n                                        direction='row'\n                                        alignItems='center'\n                                        justify='center'\n                                    >\n                                        <Box ml={1} mb={1}>\n                                            <Grid item>\n                                                <Link\n                                                    className={clsx(classes.pageLinks, {\n                                                        [classes.disabledLink]: isTestLinkDisabled,\n                                                    })}\n                                                    underline='none'\n                                                    component={RouterLink}\n                                                    to={'/apis/' + api.id + '/test-console'}\n                                                >\n                                                    <Typography variant='h7'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.Overview.CustomizedStepper.Test'\n                                                            defaultMessage=' Test'\n                                                        />\n                                                    </Typography>\n                                                    <Box ml={1}>\n                                                        <LinkIcon\n                                                            color='default'\n                                                            fontSize='small'\n                                                        />\n                                                    </Box>\n                                                </Link>\n                                            </Grid>\n                                        </Box>\n                                    </Grid>\n                                </Tooltip>\n                            )}\n                            {label === 'Publish' && (\n                                <>\n                                    {finalLifecycleState(api.lifeCycleStatus)}\n                                </>\n                            )}\n                        </StepLabel>\n                    </Step>\n                ))}\n            </Stepper>\n        </div>\n    );\n}\n\nCustomizedStepper.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport ReactMarkdown from 'react-markdown';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport API from 'AppData/api';\nimport { capitalizeFirstLetter } from 'AppData/stringFormatter';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport BusinessInformation from './BusinessInformation';\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction MetaData(props) {\n    const { parentClasses } = props;\n    const [api] = useAPI();\n\n    return (\n        <>\n            <Typography variant='h5' component='h3' className={parentClasses.title}>\n                <FormattedMessage\n                    id='Apis.Details.NewOverview.MetaData.metadata'\n                    defaultMessage='Metadata'\n                />\n            </Typography>\n            <Box p={1}>\n                <Grid container spacing={1}>\n                    <Grid item xs={12} md={6} lg={4}>\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.description'\n                                defaultMessage='Description'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.description\n                            && (\n                                <ReactMarkdown source={capitalizeFirstLetter(api.description)} />\n                            )}\n                        </Typography>\n                        <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                            {!api.description\n                                && (\n                                    <>\n                                        <Typography\n                                            component='p'\n                                            variant='body1'\n                                            className={parentClasses.notConfigured}\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.NewOverview.MetaData.description.not.set'\n                                                defaultMessage='-'\n                                            />\n                                        </Typography>\n                                    </>\n                                )}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Provider */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.provider'\n                                defaultMessage='Provider'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.provider && <>{api.provider}</>}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.context:'\n                                defaultMessage='Context:'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.context && <>{api.context}</>}\n                        </Typography>\n                    </Grid>\n                    {/* Version */}\n                    {api.apiType === API.CONSTS.API && (\n                        <>\n                            <Grid item xs={12} md={6} lg={4}>\n                                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.MetaData.version'\n                                        defaultMessage='Version'\n                                    />\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={12} md={6} lg={8}>\n                                <Typography component='p' variant='body1'>\n                                    {api.version && <>{api.version}</>}\n                                </Typography>\n                            </Grid>\n                        </>\n                    )}\n                    {/* Type */}\n                    {api.apiType === API.CONSTS.APIProduct ? null : (\n                        <>\n                            <Grid item xs={12} md={6} lg={4}>\n                                <>\n                                    <Typography\n                                        component='p'\n                                        variant='subtitle2'\n                                        className={parentClasses.subtitle}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.MetaData.type:'\n                                            defaultMessage='Type:'\n                                        />\n                                    </Typography>\n                                </>\n                            </Grid>\n                            <Grid item xs={12} md={6} lg={8}>\n                                <Typography component='p' variant='body1'>\n                                    {api.type && <>{api.type === 'WS' ? 'WebSocket' : api.type}</>}\n                                    {!api.type\n                                        && (\n                                            <>\n                                                <Typography\n                                                    component='p'\n                                                    variant='body1'\n                                                    className={parentClasses.notConfigured}\n                                                >\n                                                    <FormattedMessage\n                                                        id='Apis.Details.NewOverview.MetaData.type.not.set'\n                                                        defaultMessage='-'\n                                                    />\n                                                </Typography>\n                                            </>\n                                        )}\n                                </Typography>\n                            </Grid>\n                        </>\n                    )}\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Created Time */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.created.time'\n                                defaultMessage='Created Time'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.createdTime\n                            && (\n                                <>\n                                    <Tooltip\n                                        title={moment(api.createdTime).calendar()}\n                                        aria-label='add'\n                                        interactive\n                                        placement='top-start'\n                                        tabIndex='-1'\n                                    >\n                                        <Typography variant='body1' display='block'>\n                                            {capitalizeFirstLetter(moment(api.createdTime).fromNow())}\n                                        </Typography>\n                                    </Tooltip>\n                                </>\n                            )}\n                            {!api.createdTime\n                                && (\n                                    <>\n                                        <Typography\n                                            component='p'\n                                            variant='body1'\n                                            className={parentClasses.notConfigured}\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.NewOverview.MetaData.createdTime.not.set'\n                                                defaultMessage='-'\n                                            />\n                                        </Typography>\n                                    </>\n                                )}\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Last Updated Time */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.MetaData.last.updated.time'\n                                defaultMessage='Last Updated Time'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.lastUpdatedTime\n                            && (\n                                <>\n                                    <Tooltip\n                                        title={moment(api.lastUpdatedTime).calendar()}\n                                        aria-label='add'\n                                        interactive\n                                        placement='top-start'\n                                        tabIndex='-1'\n                                    >\n                                        <Typography variant='body1' display='block'>\n                                            {capitalizeFirstLetter(moment(api.lastUpdatedTime).fromNow())}\n                                        </Typography>\n                                    </Tooltip>\n                                </>\n                            )}\n                            {!api.lastUpdatedTime\n                                && (\n                                    <>\n                                        <Typography\n                                            component='p'\n                                            variant='body1'\n                                            className={parentClasses.notConfigured}\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.NewOverview.MetaData.lastUpdatedTime.not.set'\n                                                defaultMessage='-'\n                                            />\n                                        </Typography>\n                                    </>\n                                )}\n                        </Typography>\n                    </Grid>\n                    <BusinessInformation parentClasses={parentClasses} />\n                </Grid>\n            </Box>\n        </>\n    );\n}\n\nMetaData.propTypes = {\n    parentClasses: PropTypes.shape({}).isRequired,\n};\n\nexport default MetaData;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction BusinessInformation(props) {\n    const { parentClasses, api } = props;\n    return (\n        <>\n            <Grid item xs={12} md={6} lg={4}>\n                {/* Business Owner */}\n                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.BusinessInformation.business.owner'\n                        defaultMessage='Business Owner'\n                    />\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={6} lg={8}>\n                <Typography component='p' variant='body1'>\n                    {api.businessInformation.businessOwner && (\n                        <>{api.businessInformation.businessOwner}</>\n                    )}\n                </Typography>\n                <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                    {!api.businessInformation.businessOwner && (\n                        <>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.BusinessInformation.business.owner.not.set'\n                                defaultMessage='-'\n                            />\n                        </>\n                    )}\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={6} lg={4}>\n                {/* Technical Owner */}\n                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.BusinessInformation.technical.owner'\n                        defaultMessage='Technical Owner'\n                    />\n                </Typography>\n            </Grid>\n            <Grid item xs={12} md={6} lg={8}>\n                <Typography component='p' variant='body1'>\n                    {api.businessInformation.technicalOwner\n                        && <>{api.businessInformation.technicalOwner}</>}\n                </Typography>\n                <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                    {!api.businessInformation.technicalOwner && (\n                        <>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.BusinessInformation.technical.owner.not.set'\n                                defaultMessage='-'\n                            />\n                        </>\n                    )}\n                </Typography>\n            </Grid>\n        </>\n    );\n}\n\nBusinessInformation.propTypes = {\n    parentClasses: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default withAPI(BusinessInformation);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Box from '@material-ui/core/Box';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst showEndpoint = (api, type) => {\n    if (api.endpointConfig) {\n        if (type === 'prod') {\n            return api.getProductionEndpoint();\n        }\n        if (type === 'sand') {\n            return api.getSandboxEndpoint();\n        }\n    }\n    return null;\n};\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction Endpoints(props) {\n    const { parentClasses, api } = props;\n    const isPrototypedAvailable = api.endpointConfig !== null\n        && api.endpointConfig.implementation_status === 'prototyped';\n\n    return (\n        <>\n            <div>\n                <Typography variant='h5' component='h3' className={parentClasses.title}>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.Endpoints.endpoints'\n                        defaultMessage='Endpoints'\n                    />\n                </Typography>\n            </div>\n            <Box p={1}>\n                <Grid container spacing={2}>\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Production Endpoint (TODO) fix the endpoint\n                                            info when it's available with the api object */}\n                        { !isPrototypedAvailable ? (\n                            <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                <FormattedMessage\n                                    id='Apis.Details.NewOverview.Endpoints.production.endpoint'\n                                    defaultMessage='Production Endpoint'\n                                />\n                            </Typography>\n                        )\n                            : (\n                                <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.Endpoints.prototype.endpoint'\n                                        defaultMessage='Prototype Endpoint'\n                                    />\n                                </Typography>\n                            )}\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Tooltip\n                            placement='top'\n                            classes={{\n                                tooltip: parentClasses.htmlTooltip,\n                            }}\n                            title={\n                                showEndpoint(api, 'prod')\n                                && <>{showEndpoint(api, 'prod')}</>\n                            }\n                        >\n                            <Typography component='p' variant='body1' className={parentClasses.url}>\n                                {showEndpoint(api, 'prod')\n                                && <>{showEndpoint(api, 'prod')}</>}\n                            </Typography>\n                        </Tooltip>\n                        <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                            {!showEndpoint(api, 'prod') && (\n                                <>\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.Endpoints.not.set'\n                                        defaultMessage='-'\n                                    />\n                                </>\n                            )}\n                        </Typography>\n                    </Grid>\n                    {!isPrototypedAvailable && (\n                        <Grid item xs={12} md={6} lg={4}>\n                            {/* Sandbox Endpoint (TODO) fix the endpoint info when\n                                                it's available with the api object */}\n                            <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                                <FormattedMessage\n                                    id='Apis.Details.NewOverview.Endpoints.sandbox.endpoint'\n                                    defaultMessage='Sandbox Endpoint'\n                                />\n                            </Typography>\n                        </Grid>\n                    )}\n\n                    {!isPrototypedAvailable && (\n                        <Grid item xs={12} md={6} lg={8}>\n                            <Tooltip\n                                placement='top'\n                                classes={{\n                                    tooltip: parentClasses.htmlTooltip,\n                                }}\n                                title={\n                                    showEndpoint(api, 'sand')\n                                    && <>{showEndpoint(api, 'sand')}</>\n                                }\n                            >\n                                <Typography component='p' variant='body1' className={parentClasses.url}>\n                                    {showEndpoint(api, 'sand')\n                                    && <>{showEndpoint(api, 'sand')}</>}\n                                </Typography>\n                            </Tooltip>\n                            <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                                {!showEndpoint(api, 'sand') && (\n                                    <>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewOverview.Endpoints.sandbox.not.set'\n                                            defaultMessage='-'\n                                        />\n                                    </>\n                                )}\n                            </Typography>\n                        </Grid>\n                    )}\n                    <Grid item xs={12} md={6} lg={4}>\n                        {/* Sandbox Endpoint (TODO) fix the endpoint info when\n                                            it's available with the api object */}\n                        <Typography component='p' variant='subtitle2' className={parentClasses.subtitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.Endpoints.endpoint.security'\n                                defaultMessage='Endpoint Security'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12} md={6} lg={8}>\n                        <Typography component='p' variant='body1'>\n                            {api.endpointSecurity && <>{api.endpointSecurity.type}</>}\n                        </Typography>\n                        <Typography component='p' variant='body1' className={parentClasses.notConfigured}>\n                            {!api.endpointSecurity\n                            && (\n                                <>\n                                    <FormattedMessage\n                                        id='Apis.Details.NewOverview.Endpoints.security.not.set'\n                                        defaultMessage='-'\n                                    />\n                                </>\n                            )}\n                        </Typography>\n                    </Grid>\n                </Grid>\n            </Box>\n        </>\n    );\n}\n\nEndpoints.propTypes = {\n    parentClasses: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default withAPI(Endpoints);\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport Box from '@material-ui/core/Box';\nimport { Link } from 'react-router-dom';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\nimport Typography from '@material-ui/core/Typography';\nimport Api from 'AppData/api';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\n\nconst styles = {\n    root: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: 10,\n    },\n    heading: {\n        marginRight: 20,\n    },\n    contentWrapper: {\n        maxHeight: '125px',\n        overflowY: 'auto',\n    },\n};\n\nfunction VerbElement(props) {\n    const {\n        verb,\n    } = props;\n\n    const useMenuStyles = makeStyles((theme) => {\n        const backgroundColor = theme.custom.resourceChipColors[verb.toLowerCase()];\n        return {\n            customButton: {\n                backgroundColor: '#ffffff',\n                borderColor: backgroundColor,\n                color: backgroundColor,\n                width: theme.spacing(2),\n            },\n        };\n    });\n    const classes = useMenuStyles();\n    return (\n        <Button disableFocusRipple variant='outlined' className={classes.customButton} size='small'>\n            {verb.toUpperCase()}\n        </Button>\n    );\n}\n\n/**\n * Topics component\n */\nclass Topics extends React.Component {\n    /**\n     *\n     * @param {*} props\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            topics: [],\n        };\n        this.restApi = new Api();\n    }\n\n    /**\n     *\n     */\n    componentDidMount() {\n        this.restApi.getAsyncAPIDefinition(this.props.api.id)\n            .then((response) => {\n                const topics = [];\n                Object.entries(response.body.channels).forEach(([name, topic]) => {\n                    if (topic.subscribe) {\n                        topics.push({ name, type: 'subscribe' });\n                    }\n\n                    if (topic.publish) {\n                        topics.push({ name, type: 'publish' });\n                    }\n                });\n                this.setState({ topics });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    }\n\n    /**\n     *\n     */\n    render() {\n        if (this.state.notFound) {\n            return (\n                <div>\n                    <FormattedMessage\n                        id='Apis.Details.NewOverview.Resources.resource.not.found'\n                        defaultMessage='resource not found...'\n                    />\n                </div>\n            );\n        }\n        const { classes, parentClasses, api } = this.props;\n\n        return (\n            <>\n                <div className={parentClasses.titleWrapper}>\n                    <Typography variant='h5' component='h3' className={parentClasses.title}>\n                        <FormattedMessage\n                            id='Apis.Details.NewOverview.async.api.topics'\n                            defaultMessage='Topics'\n                        />\n                    </Typography>\n                </div>\n                <Box p={1}>\n                    <div>\n                        {\n                            this.state.topics.map((topic) => {\n                                return (\n                                    <div className={classes.root}>\n                                        <Grid container spacing={1}>\n                                            <Grid item xs={12}>\n                                                <Grid container direction='row' spacing={1}>\n                                                    <Grid item>\n                                                        <VerbElement verb={topic.type.substr(0, 3)} />\n                                                    </Grid>\n                                                    <Grid item>\n                                                        <Typography className={classes.heading} variant='body1'>\n                                                            {topic.name}\n                                                        </Typography>\n                                                    </Grid>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </div>\n                                );\n                            })\n                        }\n                    </div>\n                    <Link to={'/apis/' + api.id + '/topics'}>\n                        <Typography\n                            className={classes.subHeading}\n                            color='primary'\n                            display='inline'\n                            variant='caption'\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.NewOverview.Operations.ShowMore'\n                                defaultMessage='Show More'\n                            />\n                            <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                        </Typography>\n                    </Link>\n                </Box>\n            </>\n        );\n    }\n}\nTopics.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.shape({}),\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.shape({}),\n    }).isRequired,\n    parentClasses: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({ id: PropTypes.string }).isRequired,\n};\n\nexport default withStyles(styles)(Topics);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useReducer,\n    useContext,\n    useState,\n    useMemo,\n    useEffect,\n} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport { FormattedMessage } from 'react-intl';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport CONSTS from 'AppData/Constants';\nimport Alert from 'AppComponents/Shared/Alert';\n\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport ThumbnailView from 'AppComponents/Apis/Listing/components/ImageGenerator/ThumbnailView';\nimport { isRestricted } from 'AppData/AuthManager';\nimport API from 'AppData/api.js';\nimport APIProduct from 'AppData/APIProduct';\nimport DefaultVersion from './components/DefaultVersion';\nimport DescriptionEditor from './components/DescriptionEditor';\nimport AccessControl from './components/AccessControl';\nimport StoreVisibility from './components/StoreVisibility';\nimport Tags from './components/Tags';\nimport Social from './components/Social';\nimport APICategories from './components/APICategories';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(3),\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    paper: {\n        padding: theme.spacing(3),\n    },\n    paperCenter: {\n        padding: theme.spacing(3),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    heading: {\n        fontSize: '1.1rem',\n        fontWeight: 400,\n        marginBottom: theme.spacing(0),\n    },\n    itemPadding: {\n        marginBottom: theme.spacing(3),\n    },\n    arrowForwardIcon: {\n        fontSize: 50,\n        color: '#ccc',\n        position: 'absolute',\n        top: 90,\n        right: -43,\n    },\n    arrowBackIcon: {\n        fontSize: 50,\n        color: '#ccc',\n        position: 'absolute',\n        top: 30,\n        right: -71,\n    },\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: '38px',\n    },\n    btnSpacing: {\n        marginRight: theme.spacing(1),\n    },\n}));\n\n/**\n *\n * Deep coping the properties in API object (what ever the object in the state),\n * making sure that no direct mutations happen when updating the state.\n * You should know the shape of the object that you are keeping in the state,\n * @param {Object} api\n * @returns {Object} Deep copy of an object\n */\nfunction copyAPIConfig(api) {\n    return {\n        id: api.id,\n        name: api.name,\n        description: api.description,\n        lifeCycleStatus: api.lifeCycleStatus,\n        accessControl: api.accessControl,\n        authorizationHeader: api.authorizationHeader,\n        responseCachingEnabled: api.responseCachingEnabled,\n        cacheTimeout: api.cacheTimeout,\n        visibility: api.visibility,\n        isDefaultVersion: api.isDefaultVersion,\n        enableSchemaValidation: api.enableSchemaValidation,\n        accessControlRoles: [...api.accessControlRoles],\n        visibleRoles: [...api.visibleRoles],\n        tags: [...api.tags],\n        maxTps: api.maxTps,\n        transport: [...api.transport],\n        wsdlUrl: api.wsdlUrl,\n        securityScheme: [...api.securityScheme],\n        categories: [...api.categories],\n        corsConfiguration: {\n            corsConfigurationEnabled: api.corsConfiguration.corsConfigurationEnabled,\n            accessControlAllowCredentials: api.corsConfiguration.accessControlAllowCredentials,\n            accessControlAllowOrigins: [...api.corsConfiguration.accessControlAllowOrigins],\n            accessControlAllowHeaders: [...api.corsConfiguration.accessControlAllowHeaders],\n            accessControlAllowMethods: [...api.corsConfiguration.accessControlAllowMethods],\n        },\n        additionalProperties: [...api.additionalProperties],\n    };\n}\n\n/**\n     *\n     * Reduce the configuration UI related actions in to updated state\n     * @param {*} state current state\n     * @param {*} configAction dispatched configuration action\n     * @returns {Object} updated state\n     */\nfunction configReducer(state, configAction) {\n    const { action, value } = configAction;\n    const nextState = copyAPIConfig(state);\n    switch (action) {\n        case 'description':\n        case 'isDefaultVersion':\n        case 'authorizationHeader':\n        case 'responseCachingEnabled':\n        case 'cacheTimeout':\n        case 'enableSchemaValidation':\n        case 'visibility':\n        case 'maxTps':\n        case 'categories':\n        case 'tags':\n            nextState[action] = value;\n            return nextState;\n        case 'accessControl':\n            nextState[action] = value;\n            if (value === 'NONE') {\n                nextState.accessControlRoles = [];\n            }\n            return nextState;\n        case 'accessControlRoles':\n            return { ...copyAPIConfig(state), [action]: value };\n        case 'visibleRoles':\n            return { ...copyAPIConfig(state), [action]: value };\n        case 'github_repo':\n        case 'slack_url': {\n            const targetProperty = nextState.additionalProperties.find((property) => property.name === action);\n            const updatedProperty = {\n                name: action,\n                value,\n                display: true,\n            };\n            if (targetProperty) {\n                nextState.additionalProperties = [\n                    ...nextState.additionalProperties.filter((property) => property.name !== action), updatedProperty];\n            } else {\n                nextState.additionalProperties.push(updatedProperty);\n            }\n            return nextState;\n        }\n        default:\n            return state;\n    }\n}\n/**\n * This component handles the basic configurations UI in the API details page\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function DesignConfigurations() {\n    const { api, updateAPI } = useContext(APIContext);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [apiConfig, configDispatcher] = useReducer(configReducer, copyAPIConfig(api));\n    const classes = useStyles();\n    const [descriptionType, setDescriptionType] = useState('');\n    const [overview, setOverview] = useState('');\n    const [overviewDocument, setOverviewDocument] = useState(null);\n    const [slackURLProperty, githubURLProperty] = useMemo(() => [\n        apiConfig.additionalProperties.find((prop) => prop.name === 'slack_url'),\n        apiConfig.additionalProperties.find((prop) => prop.name === 'github_repo'),\n    ],\n    [apiConfig.additionalProperties]);\n    const invalidTagsExist = apiConfig.tags.find((tag) => {\n        return (/([~!@#;%^&*+=|\\\\<>\"'/,])/.test(tag));\n    });\n    const handleChange = (event) => {\n        const type = event.target.value;\n        if (type === CONSTS.DESCRIPTION_TYPES.DESCRIPTION) {\n            if (apiConfig.description === null) {\n                configDispatcher({ action: CONSTS.DESCRIPTION_TYPES.DESCRIPTION, value: overview });\n            }\n        } else if (type === CONSTS.DESCRIPTION_TYPES.OVERVIEW) {\n            if (overviewDocument === null) {\n                setOverview(apiConfig.description);\n            }\n        }\n        setDescriptionType(type);\n    };\n    const updateContent = (content) => {\n        if (descriptionType === CONSTS.DESCRIPTION_TYPES.DESCRIPTION) {\n            configDispatcher({ action: CONSTS.DESCRIPTION_TYPES.DESCRIPTION, value: content });\n        } else if (descriptionType === CONSTS.DESCRIPTION_TYPES.OVERVIEW) {\n            configDispatcher({ action: CONSTS.DESCRIPTION_TYPES.DESCRIPTION, value: null });\n            setOverview(content);\n        }\n    };\n    const loadContentForDoc = (documentId) => {\n        const { apiType } = api.apiType;\n        const restApi = apiType === API.CONSTS.APIProduct ? new APIProduct() : new API();\n        const docPromise = restApi.getInlineContentOfDocument(api.id, documentId);\n        docPromise\n            .then((doc) => {\n                let { text } = doc;\n                Object.keys(api).forEach((fieldName) => {\n                    const regex = new RegExp('___' + fieldName + '___', 'g');\n                    text = text.replace(regex, api[fieldName]);\n                });\n                setOverview(text);\n            });\n    };\n    const addDocument = async () => {\n        const { apiType } = api.apiType;\n        const restApi = apiType === API.CONSTS.APIProduct ? new APIProduct() : new API();\n        const docPromise = await restApi.addDocument(api.id, {\n            name: 'overview',\n            type: 'OTHER',\n            summary: 'overview',\n            sourceType: 'MARKDOWN',\n            visibility: 'API_LEVEL',\n            sourceUrl: '',\n            otherTypeName: CONSTS.DESCRIPTION_TYPES.OVERVIEW,\n            inlineContent: '',\n        }).then((response) => {\n            return response.body;\n        }).catch((error) => {\n            if (process.env.NODE_ENV !== 'production') {\n                console.log(error);\n            }\n        });\n        return docPromise;\n    };\n\n    const addDocumentContent = (document) => {\n        const { apiType } = api.apiType;\n        const restApi = apiType === API.CONSTS.APIProduct ? new APIProduct() : new API();\n        const docPromise = restApi.addInlineContentToDocument(api.id, document.documentId, 'MARKDOWN', overview);\n        docPromise\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    console.log(error);\n                }\n            });\n    };\n\n    const deleteOverviewDocument = () => {\n        const { apiType } = api.apiType;\n        const restApi = apiType === API.CONSTS.APIProduct ? new APIProduct() : new API();\n        const docPromise = restApi.deleteDocument(api.id, overviewDocument.documentId);\n        docPromise\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n            });\n    };\n\n    useEffect(() => {\n        const { apiType } = api.apiType;\n        const restApi = apiType === API.CONSTS.APIProduct ? new APIProduct() : new API();\n        const promisedApi = restApi.getDocuments(api.id);\n        promisedApi\n            .then((response) => {\n                const overviewDoc = response.body.list.filter((item) => item.otherTypeName === '_overview');\n                if (overviewDoc.length > 0) {\n                    const doc = overviewDoc[0];\n                    setOverviewDocument(doc);\n                    loadContentForDoc(doc.documentId);\n                    setDescriptionType(CONSTS.DESCRIPTION_TYPES.OVERVIEW); // Only one doc we can render\n                } else {\n                    setDescriptionType(CONSTS.DESCRIPTION_TYPES.DESCRIPTION);\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    Alert.error('Error occurred');\n                }\n            });\n    }, []);\n\n    /**\n     *\n     * Handle the configuration view save button action\n     */\n    async function handleSave() {\n        setIsUpdating(true);\n        updateAPI(apiConfig)\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                }\n            });\n        if (descriptionType === CONSTS.DESCRIPTION_TYPES.DESCRIPTION) {\n            if (overviewDocument) {\n                deleteOverviewDocument();\n            }\n        }\n\n        if (descriptionType === CONSTS.DESCRIPTION_TYPES.OVERVIEW) {\n            let document = overviewDocument;\n            if (document === null) {\n                document = await addDocument();\n            }\n            addDocumentContent(document);\n        }\n        setIsUpdating(false);\n    }\n    const isDisabled = isUpdating || api.isRevision || invalidTagsExist\n    || isRestricted(['apim:api_create', 'apim:api_publish'], api)\n    || (apiConfig.visibility === 'RESTRICTED'\n        && apiConfig.visibleRoles.length === 0);\n    return (\n        <>\n            <Container maxWidth='md'>\n                <Grid container spacing={2}>\n                    <Grid item md={12}>\n                        <Typography id='itest-api-details-design-config-head' variant='h5'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Configuration.Design.topic.header'\n                                defaultMessage='Design Configurations'\n                            />\n                        </Typography>\n                        <Box color='text.secondary'>\n                            {api.apiType === API.CONSTS.APIProduct\n                                ? (\n                                    <Typography variant='caption'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.Configuration.Design.APIProduct.sub.heading'\n                                            defaultMessage='Configure basic API Product meta information'\n                                        />\n                                    </Typography>\n                                )\n                                : (\n                                    <Typography variant='caption'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.Configuration.Design.sub.heading'\n                                            defaultMessage='Configure basic API meta information'\n                                        />\n                                    </Typography>\n                                )}\n                        </Box>\n                    </Grid>\n                    <Grid item md={12}>\n                        <Paper elevation={0}>\n                            <div>\n                                <Box px={8} py={5}>\n                                    <Box py={1}>\n                                        <Grid container spacing={0}>\n                                            <Grid item xs={12} md={2}>\n                                                <ThumbnailView\n                                                    api={api}\n                                                    width={100}\n                                                    height={100}\n                                                    isEditable={!isRestricted(['apim:api_publish',\n                                                        'apim:api_create'], api)}\n                                                />\n                                            </Grid>\n                                            <Grid item xs={12} md={10}>\n                                                <DescriptionEditor\n                                                    api={apiConfig}\n                                                    disabled={isDisabled}\n                                                    updateContent={updateContent}\n                                                    descriptionType={descriptionType}\n                                                    handleChange={handleChange}\n                                                    overview={overview}\n                                                />\n                                            </Grid>\n                                        </Grid>\n                                    </Box>\n                                    <Box py={1}>\n                                        <AccessControl api={apiConfig} configDispatcher={configDispatcher} />\n                                    </Box>\n                                    <Box py={1}>\n                                        <StoreVisibility api={apiConfig} configDispatcher={configDispatcher} />\n                                    </Box>\n                                    <Box py={1}>\n                                        <Tags api={apiConfig} configDispatcher={configDispatcher} />\n                                    </Box>\n                                    <Box py={1}>\n                                        <APICategories\n                                            api={apiConfig}\n                                            configDispatcher={configDispatcher}\n                                            categories={api.categories}\n                                        />\n                                    </Box>\n                                    <Box py={1}>\n                                        <Social\n                                            slackURL={slackURLProperty && slackURLProperty.value}\n                                            githubURL={githubURLProperty && githubURLProperty.value}\n                                            configDispatcher={configDispatcher}\n                                        />\n                                    </Box>\n                                    <Box py={1}>\n                                        {api.apiType !== API.CONSTS.APIProduct && (\n                                            <DefaultVersion api={apiConfig} configDispatcher={configDispatcher} />\n                                        )}\n                                    </Box>\n                                    <Box pt={2}>\n                                        <Button\n                                            disabled={isDisabled}\n                                            type='submit'\n                                            variant='contained'\n                                            color='primary'\n                                            className={classes.btnSpacing}\n                                            onClick={handleSave}\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.Configuration.save'\n                                                defaultMessage='Save'\n                                            />\n                                            {isUpdating && <CircularProgress size={15} />}\n                                        </Button>\n                                        <Link to={'/apis/' + api.id + '/overview'}>\n                                            <Button>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Configuration.Configuration.cancel'\n                                                    defaultMessage='Cancel'\n                                                />\n                                            </Button>\n                                        </Link>\n                                    </Box>\n                                    {isRestricted(['apim:api_create'], api) && (\n                                        <Box py={1}>\n                                            <Typography variant='body2' color='primary'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Configuration.Configuration.update.not.allowed'\n                                                    defaultMessage={\n                                                        '* You are not authorized to update particular fields of'\n                                                        + ' the API due to insufficient permissions'\n                                                    }\n                                                />\n                                            </Typography>\n                                        </Box>\n                                    )}\n                                </Box>\n                            </div>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Container>\n        </>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport Box from '@material-ui/core/Box';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function DefaultVersion(props) {\n    const { api, configDispatcher } = props;\n    const [apiFromContext] = useAPI();\n    return (\n        <Grid container spacing={1} alignItems='flex-start' xs={11}>\n            <Grid item>\n                <Box mt={4}>\n                    <FormControl component='fieldset' style={{ display: 'flex' }}>\n                        <FormLabel component='legend'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Configuration.isdefault.label'\n                                defaultMessage='Make this the default version'\n                            />\n                        </FormLabel>\n                        <RadioGroup\n                            aria-label='Make this the default version'\n                            value={api.isDefaultVersion}\n                            onChange={({\n                                target: { value },\n                            }) => configDispatcher({\n                                action: 'isDefaultVersion', value: value === 'true',\n                            })}\n                            style={{ display: 'flow-root' }}\n                        >\n                            <FormControlLabel\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                value\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.isdefault.yes'\n                                        defaultMessage='Yes'\n                                    />\n                                )}\n                            />\n                            <FormControlLabel\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                value={false}\n                                control={<Radio color='primary' />}\n                                label={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.isdefault.no'\n                                        defaultMessage='No'\n                                    />\n                                )}\n                            />\n                        </RadioGroup>\n                    </FormControl>\n                </Box>\n            </Grid>\n            <Grid item xs={1}>\n                <Box mt={3}>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Configuration.defaultversion.tooltip'\n                                defaultMessage={\n                                    'Indicates if this is the default version of the API. If an '\n                                    + 'API is invoked without specifying a version, the API Gateway will '\n                                    + 'route the request to the default version of the API.'\n                                }\n                            />\n                        )}\n                        aria-label='add'\n                        placement='right-end'\n                        interactive\n                    >\n                        <HelpOutline />\n                    </Tooltip>\n                </Box>\n            </Grid>\n        </Grid>\n    );\n}\n\nDefaultVersion.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, Suspense, lazy } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport CONSTS from 'AppData/Constants';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"MDMonacoEditor\" */));\nconst ReactMarkdown = lazy(() => import('react-markdown' /* webpackChunkName: \"MDReactMarkdown\" */));\n\nconst useStyles = makeStyles(() => ({\n    flex: {\n        flex: 1,\n    },\n    popupHeader: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    splitWrapper: {\n        padding: 0,\n    },\n    editorHeader: {\n        alignItems: 'center',\n        display: 'flex',\n    },\n    markdownViewWrapper: {\n        height: '100vh',\n        overflowY: 'auto',\n    },\n    appBar: {\n        position: 'relative',\n    },\n    button: {\n        height: 30,\n        marginLeft: 30,\n    },\n}));\n\nfunction Transition(props) {\n    return <Slide direction='up' {...props} />;\n}\n\n/**\n * DescriptionEditor for API Description / Overview\n * @param {*} props properties\n * @returns {*} DescriptionEditor component\n */\nexport default function DescriptionEditor(props) {\n    const classes = useStyles();\n    const {\n        api,\n        updateContent,\n        descriptionType,\n        overview,\n        handleChange,\n    } = props;\n    const [open, setOpen] = useState(false);\n    const [content, setContent] = useState(null);\n    const [apiFromContext] = useAPI();\n    const [isUpdating, setIsUpdating] = useState(false);\n\n    const toggleOpen = () => {\n        if (!open) {\n            if (descriptionType === CONSTS.DESCRIPTION_TYPES.DESCRIPTION) {\n                setContent(api.description);\n            } else if (descriptionType === CONSTS.DESCRIPTION_TYPES.OVERVIEW) {\n                setContent(overview);\n            }\n        }\n        setOpen(!open);\n    };\n    const setNewContent = (newContent) => {\n        setContent(newContent);\n    };\n    const handleTextChange = (event) => {\n        const { value } = event.currentTarget;\n        setContent(value);\n    };\n    const modifyContent = () => {\n        setIsUpdating(true);\n        updateContent(content);\n        toggleOpen();\n        setIsUpdating(false);\n    };\n    const editorDidMount = (editor) => {\n        editor.focus();\n    };\n\n    return (\n        <>\n            <Button\n                variant='outlined'\n                color='primary'\n                disabled={api.isRevision || isRestricted(['apim:api_create'], apiFromContext)}\n                onClick={toggleOpen}\n            >\n                <FormattedMessage\n                    id='Apis.Details.Configuration.components.DescriptionEditor.edit.content.button'\n                    defaultMessage='Edit description'\n                />\n            </Button>\n            <Dialog fullScreen open={open} onClose={toggleOpen} TransitionComponent={Transition}>\n                <AppBar color='inherit' className={classes.appBar}>\n                    <Toolbar variant='dense'>\n                        <Grid\n                            container\n                            direction='row'\n                            justify='space-between'\n                            alignItems='center'\n                        >\n                            <Grid item xs={6}>\n                                <Box display='flex'>\n                                    <IconButton edge='start' color='inherit' onClick={toggleOpen} aria-label='close'>\n                                        <CloseIcon />\n                                    </IconButton>\n                                    <Box\n                                        display='flex'\n                                        alignItems='center'\n                                        mx={1}\n                                        fontFamily='fontFamily'\n                                        fontSize='h4.fontSize'\n                                        color='primary.main'\n                                    >\n                                        {api.name}\n                                    </Box>\n                                    <Typography variant='h5' className={classes.editorHeader}>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Configuration.components.DescriptionEditor'\n                                                + '.edit.description.of'}\n                                            defaultMessage='Description :'\n                                        />\n                                    </Typography>\n                                    <Box ml={2}>\n                                        <FormControl component='fieldset'>\n                                            <RadioGroup\n                                                row\n                                                aria-label='description-type'\n                                                value={descriptionType}\n                                                onChange={handleChange}\n                                            >\n                                                <FormControlLabel\n                                                    value={CONSTS.DESCRIPTION_TYPES.DESCRIPTION}\n                                                    control={<Radio />}\n                                                    label='Text'\n                                                />\n                                                <FormControlLabel\n                                                    value={CONSTS.DESCRIPTION_TYPES.OVERVIEW}\n                                                    control={<Radio />}\n                                                    label='Markdown'\n                                                />\n                                            </RadioGroup>\n                                        </FormControl>\n                                    </Box>\n                                </Box>\n                            </Grid>\n                            <Grid item>\n                                <Button\n                                    className={classes.button}\n                                    variant='contained'\n                                    disabled={isUpdating}\n                                    color='primary'\n                                    onClick={modifyContent}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.DescriptionEditor.update.cont.button'\n                                        defaultMessage='Update Content'\n                                    />\n                                    {isUpdating && <CircularProgress size={24} />}\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Toolbar>\n                </AppBar>\n                <div className={classes.splitWrapper}>\n                    <Grid container spacing={7}>\n                        { descriptionType === CONSTS.DESCRIPTION_TYPES.DESCRIPTION\n                            ? (\n                                <Grid item xs={12}>\n                                    <Box display='flex' m={2}>\n                                        <TextField\n                                            id='itest-description-textfield'\n                                            multiline\n                                            fullWidth\n                                            rows={4}\n                                            variant='outlined'\n                                            onChange={handleTextChange}\n                                            value={content}\n                                        />\n                                    </Box>\n                                </Grid>\n                            ) : (\n                                <>\n                                    <Grid item xs={6}>\n                                        <Suspense fallback={<CircularProgress />}>\n                                            <MonacoEditor\n                                                width='100%'\n                                                language='markdown'\n                                                theme='vs-dark'\n                                                value={content}\n                                                options={{ selectOnLineNumbers: true }}\n                                                onChange={setNewContent}\n                                                editorDidMount={editorDidMount}\n                                            />\n                                        </Suspense>\n                                    </Grid>\n                                    <Grid item xs={6}>\n                                        <div className={classes.markdownViewWrapper}>\n                                            <Suspense fallback={<CircularProgress />}>\n                                                <ReactMarkdown escapeHtml source={content} />\n                                            </Suspense>\n                                        </div>\n                                    </Grid>\n                                </>\n                            )}\n                    </Grid>\n                </div>\n            </Dialog>\n        </>\n    );\n}\n\nDescriptionEditor.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    updateContent: PropTypes.func.isRequired,\n    descriptionType: PropTypes.string.isRequired,\n    overview: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { isRestricted } from 'AppData/AuthManager';\nimport ChipInput from 'material-ui-chip-input';\nimport APIValidation from 'AppData/APIValidation';\nimport base64url from 'base64url';\nimport Error from '@material-ui/icons/Error';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Chip from '@material-ui/core/Chip';\nimport { red } from '@material-ui/core/colors/';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst useStyles = makeStyles((theme) => ({\n    tooltip: {\n        position: 'absolute',\n        right: theme.spacing(-4),\n        top: theme.spacing(1),\n    },\n}));\n\n/**\n *\n * api.accessControl possible values are `NONE` and `RESTRICTED`\n * @export\n * @param {*} props\n * @returns\n */\nexport default function AccessControl(props) {\n    const [roleValidity, setRoleValidity] = useState(true);\n    const [userRoleValidity, setUserRoleValidity] = useState(true);\n    const { api, configDispatcher } = props;\n    const isNone = api.accessControl === 'NONE';\n    const [apiFromContext] = useAPI();\n    const classes = useStyles();\n\n    const [invalidRoles, setInvalidRoles] = useState([]);\n    const [otherValidSystemRoles, setOtherValidSystemRoles] = useState([]);\n    useEffect(() => {\n        if (invalidRoles.length === 0) {\n            setRoleValidity(true);\n        }\n    }, [invalidRoles]);\n    useEffect(() => {\n        if (otherValidSystemRoles.length === api.accessControlRoles.length && otherValidSystemRoles.length !== 0\n            && (otherValidSystemRoles.every((val) => api.accessControlRoles.includes(val)))) {\n            setUserRoleValidity(false);\n        } else {\n            setUserRoleValidity(true);\n        }\n    }, [otherValidSystemRoles]);\n    const handleRoleAddition = (role) => {\n        const systemRolePromise = APIValidation.role.validate(base64url.encode(role));\n        const userRolePromise = APIValidation.userRole.validate(base64url.encode(role));\n        systemRolePromise.then(() => {\n            setRoleValidity(true);\n            userRolePromise.then(() => {\n                setUserRoleValidity(true);\n                configDispatcher({\n                    action: 'accessControlRoles',\n                    value: [...api.accessControlRoles, role],\n                });\n            }).catch((error) => {\n                if (error.status === 404) {\n                    configDispatcher({\n                        action: 'accessControlRoles',\n                        value: [...api.accessControlRoles, role],\n                    });\n                    setOtherValidSystemRoles([...otherValidSystemRoles, role]);\n                } else {\n                    Alert.error('Error when validating role: ' + role);\n                    console.error('Error when validating user roles ' + error);\n                }\n            });\n        }).catch((error) => {\n            if (error.status === 404) {\n                setRoleValidity(false);\n                setInvalidRoles([...invalidRoles, role]);\n            } else {\n                Alert.error('Error when validating role: ' + role);\n                console.error('Error when validating roles ' + error);\n            }\n        });\n    };\n\n    const handleRoleDeletion = (role) => {\n        setOtherValidSystemRoles(otherValidSystemRoles.filter((existingRole) => existingRole !== role));\n        setInvalidRoles(invalidRoles.filter((existingRole) => existingRole !== role));\n        configDispatcher({\n            action: 'accessControlRoles',\n            value: api.accessControlRoles.filter((existingRole) => existingRole !== role),\n        });\n    };\n\n    const handleRoleValidationFailure = () => {\n        if (!roleValidity) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Scopes.Roles.Invalid'\n                    defaultMessage='Role is invalid'\n                />\n            );\n        } else if (!userRoleValidity) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Scopes.Roles.User.Invalid'\n                    defaultMessage='At least one role must be associated with the API creator'\n                />\n            );\n        } else {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.AccessControl.roles.help'\n                    defaultMessage='Enter valid role and press enter'\n                />\n            );\n        }\n    };\n\n    return (\n        <>\n            <Box style={{ position: 'relative', marginBottom: -12 }}>\n                <TextField\n                    fullWidth\n                    id='accessControl-selector'\n                    select\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.AccessControl.head.topic'\n                            defaultMessage='Publisher Access Control'\n                        />\n                    )}\n                    value={api.accessControl}\n                    name='accessControl'\n                    onChange={({ target: { value } }) => configDispatcher({ action: 'accessControl', value })}\n                    SelectProps={{\n                        MenuProps: {\n                            className: classes.menu,\n                        },\n                    }}\n                    helperText={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.AccessControl.form.helper.text'\n                            defaultMessage='There are no access restrictions by default'\n                        />\n                    )}\n                    margin='normal'\n                    variant='outlined'\n                    disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                >\n                    <MenuItem value='NONE'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.AccessControl.dropdown.none'\n                            defaultMessage='All'\n                        />\n                    </MenuItem>\n                    <MenuItem value='RESTRICTED'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.AccessControl.dropdown.restricted'\n                            defaultMessage='Restrict by role(s)'\n                        />\n                    </MenuItem>\n                </TextField>\n                <Tooltip\n                    title={(\n                        <>\n                            <p>\n                                <strong>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.AccessControl.tooltip.all'\n                                        defaultMessage='All :'\n                                    />\n                                </strong>\n                                {'  '}\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.AccessControl.tooltip.all.desc'\n                                    defaultMessage='The API is viewable, modifiable by all the publishers and creators.'\n                                />\n                                <br />\n                                <br />\n                                <strong>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.AccessControl.tooltip.restrict'\n                                        defaultMessage='Restricted by roles :'\n                                    />\n                                </strong>\n                                {'  '}\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.AccessControl.tooltip.restrict.\n                                    desc'\n                                    defaultMessage={'The API can be viewed and modified only by specific'\n                                    + ' publishers and creators with the roles that you specify'}\n                                />\n                            </p>\n                        </>\n                    )}\n                    aria-label='Publisher Access Control'\n                    placement='right-end'\n                    interactive\n                    className={classes.tooltip}\n                >\n                    <HelpOutline />\n                </Tooltip>\n            </Box>\n            {!isNone && (\n                <Box py={1} style={{ marginTop: 10 }}>\n                    <ChipInput\n                        fullWidth\n                        variant='outlined'\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.AccessControl.roles'\n                                defaultMessage='Roles'\n                            />\n                        )}\n                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                        value={api.accessControlRoles.concat(invalidRoles)}\n                        alwaysShowPlaceholder={false}\n                        placeholder='Enter roles and press Enter'\n                        blurBehavior='clear'\n                        InputProps={{\n                            endAdornment: (!roleValidity || !userRoleValidity) && (\n                                <InputAdornment position='end'>\n                                    <Error color='error' style={{ paddingBottom: 8 }} />\n                                </InputAdornment>\n                            ),\n                        }}\n                        onAdd={handleRoleAddition}\n                        error={!roleValidity || !userRoleValidity}\n                        helperText={handleRoleValidationFailure()}\n                        chipRenderer={({ value }, key) => (\n                            <Chip\n                                key={key}\n                                size='small'\n                                label={value}\n                                onDelete={() => {\n                                    handleRoleDeletion(value);\n                                }}\n                                style={{\n                                    backgroundColor: invalidRoles.includes(value) ? red[300] : null,\n                                    margin: '0 8px 12px 0',\n                                    float: 'left',\n                                }}\n                            />\n                        )}\n                    />\n                </Box>\n            )}\n        </>\n    );\n}\n\nAccessControl.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ChipInput from 'material-ui-chip-input';\nimport APIValidation from 'AppData/APIValidation';\nimport base64url from 'base64url';\nimport Error from '@material-ui/icons/Error';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Chip from '@material-ui/core/Chip';\nimport { red } from '@material-ui/core/colors/';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport CONSTS from 'AppData/Constants';\nimport API from 'AppData/api';\n\nconst useStyles = makeStyles((theme) => ({\n    tooltip: {\n        position: 'absolute',\n        right: theme.spacing(-4),\n        top: theme.spacing(1),\n    },\n}));\n\n/**\n *\n * api.accessControl possible values are `NONE` and `RESTRICTED`\n * @export\n * @param {*} props\n * @returns\n */\nexport default function StoreVisibility(props) {\n    const [roleValidity, setRoleValidity] = useState(true);\n    const [roleExists, setRoleExists] = useState(true);\n    const { api, configDispatcher } = props;\n    const [invalidRoles, setInvalidRoles] = useState([]);\n    const isRestrictedByRoles = api.visibility === 'RESTRICTED';\n    const [apiFromContext] = useAPI();\n    const classes = useStyles();\n    const restApi = new API();\n    const [tenants, setTenants] = useState([]);\n    useEffect(() => {\n        restApi.getTenantsByState(CONSTS.TENANT_STATE_ACTIVE)\n            .then((result) => {\n                setTenants(result.body.count);\n            });\n    }, []);\n\n    useEffect(() => {\n        if (invalidRoles.length === 0) {\n            setRoleValidity(true);\n        }\n        if (api.visibility === 'RESTRICTED' && api.visibleRoles.length !== 0) {\n            setRoleExists(true);\n        }\n    }, [invalidRoles]);\n    const handleRoleAddition = (role) => {\n        const promise = APIValidation.role.validate(base64url.encode(role));\n        promise.then(() => {\n            setRoleExists(true);\n            setRoleValidity(true);\n            configDispatcher({\n                action: 'visibleRoles',\n                value: [...api.visibleRoles, role],\n            });\n        }).catch((error) => {\n            if (error.status === 404) {\n                setRoleValidity(false);\n                setInvalidRoles([...invalidRoles, role]);\n            } else {\n                Alert.error('Error when validating role: ' + role);\n                console.error('Error when validating roles ' + error);\n            }\n        });\n    };\n\n    const handleRoleDeletion = (role) => {\n        if (invalidRoles.includes(role)) {\n            setInvalidRoles(invalidRoles.filter((existingRole) => existingRole !== role));\n        }\n        if (api.visibility === 'RESTRICTED' && api.visibleRoles.length > 1) {\n            setRoleExists(true);\n        } else {\n            setRoleExists(false);\n        }\n        configDispatcher({\n            action: 'visibleRoles',\n            value: api.visibleRoles.filter((existingRole) => existingRole !== role),\n        });\n    };\n\n    return (\n        <>\n            <Box style={{ position: 'relative' }}>\n                <TextField\n                    fullWidth\n                    id='storeVisibility-selector'\n                    select\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.storeVisibility.head.topic'\n                            defaultMessage='Developer Portal Visibility'\n                        />\n                    )}\n                    value={api.visibility}\n                    name='storeVisibility'\n                    onChange={({ target: { value } }) => configDispatcher({ action: 'visibility', value })}\n                    SelectProps={{\n                        MenuProps: {\n                            className: classes.menu,\n                        },\n                    }}\n                    helperText={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.storeVisibility.form.helper.text'\n                            defaultMessage='By default API is visible to all developer portal users'\n                        />\n                    )}\n                    margin='normal'\n                    variant='outlined'\n                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                >\n                    <MenuItem value='PUBLIC'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.StoreVisibility.dropdown.public'\n                            defaultMessage='Public'\n                        />\n                    </MenuItem>\n                    <MenuItem value='RESTRICTED'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.storeVisibility.dropdown.restrict'\n                            defaultMessage='Restrict by role(s)'\n                        />\n                    </MenuItem>\n                    {tenants !== 0\n                        && (\n                            <MenuItem value='PRIVATE'>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.storeVisibility.dropdown.private'\n                                    defaultMessage='Visible to my domain'\n                                />\n                            </MenuItem>\n                        )}\n                </TextField>\n                <Tooltip\n                    title={(\n                        <>\n                            <p>\n                                <strong>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.storeVisibility.tooltip.public'\n                                        defaultMessage='Public :'\n                                    />\n                                </strong>\n                                {'  '}\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.storeVisibility.tooltip.public.desc'\n                                    defaultMessage={\n                                        'The API is accessible to everyone and can be advertised '\n                                        + 'in multiple developer portals - a central developer portal '\n                                        + 'and/or non-WSO2 developer portals.'\n                                    }\n                                />\n                                <br />\n                                <br />\n                                <strong>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.storeVisibility.tooltip.restrict'\n                                        defaultMessage='Restricted by roles(s) :'\n                                    />\n                                </strong>\n                                {'  '}\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.storeVisibility.tooltip.restrict.desc'\n                                    defaultMessage={\n                                        'The API is visible only to specific user'\n                                        + ' roles in the tenant developer portal that you specify.'\n                                    }\n                                />\n                            </p>\n                        </>\n                    )}\n                    aria-label='Store Visibility'\n                    placement='right-end'\n                    className={classes.tooltip}\n                    interactive\n                >\n                    <HelpOutline />\n                </Tooltip>\n            </Box>\n            {isRestrictedByRoles && (\n                <Box py={2} style={{ marginTop: -10, marginBottom: 10 }}>\n                    <ChipInput\n                        fullWidth\n                        variant='outlined'\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.storeVisibility.roles'\n                                defaultMessage='Roles'\n                            />\n                        )}\n                        disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                        value={api.visibleRoles.concat(invalidRoles)}\n                        alwaysShowPlaceholder={false}\n                        placeholder='Enter roles and press Enter'\n                        blurBehavior='clear'\n                        InputProps={{\n                            endAdornment: !roleValidity && (\n                                <InputAdornment position='end'>\n                                    <Error color='error' style={{ paddingBottom: 8 }} />\n                                </InputAdornment>\n                            ),\n                        }}\n                        onAdd={handleRoleAddition}\n                        error={!roleValidity || !roleExists}\n                        helperText={\n                            roleValidity ? (\n                                <FormattedMessage\n                                    id='Apis.Details.Scopes.visibility.CreateScope.roles.help'\n                                    defaultMessage='Enter valid role and press enter'\n                                />\n                            ) : (\n                                <FormattedMessage\n                                    id='Apis.Details.Scopes.Roles.Invalid'\n                                    defaultMessage='Role is invalid'\n                                />\n                            )\n                        }\n                        chipRenderer={({ value }, key) => (\n                            <Chip\n                                key={key}\n                                size='small'\n                                label={value}\n                                onDelete={() => {\n                                    handleRoleDeletion(value);\n                                }}\n                                style={{\n                                    backgroundColor: invalidRoles.includes(value) ? red[300] : null,\n                                    margin: '0 8px 12px 0',\n                                    float: 'left',\n                                }}\n                            />\n                        )}\n                    />\n                </Box>\n            )}\n        </>\n    );\n}\n\nStoreVisibility.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ChipInput from 'material-ui-chip-input';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport Chip from '@material-ui/core/Chip';\nimport { red } from '@material-ui/core/colors/';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function Tags(props) {\n    const { api, configDispatcher } = props;\n    const [apiFromContext] = useAPI();\n    const [isTagValid, setIsTagValid] = useState(true);\n    const [invalidTags, setInvalidTags] = useState([]);\n    const regexPattern = /([~!@#;%^&*+=|\\\\<>\"'/,])/;\n    return (\n        <React.Fragment style={{ marginTop: 10 }}>\n            <ChipInput\n                fullWidth\n                variant='outlined'\n                label={(\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Tags.title'\n                        defaultMessage='Tags'\n                    />\n                )}\n                disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                value={api.tags}\n                error={!isTagValid}\n                helperText={isTagValid ? (\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Tags.helper'\n                        defaultMessage='Press `Enter` after typing the tag name to add a new tag'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Tags.validation.error'\n                        defaultMessage={\n                            'The tag contains one or more illegal characters '\n                            + '( ~ ! @ # ; % ^ & * + = } | < > , \\' \" \\\\\\\\ / ) .'\n                        }\n                    />\n                )}\n                onAdd={(tag) => {\n                    if (regexPattern.test(tag)) {\n                        setIsTagValid(false);\n                        setInvalidTags([...invalidTags, tag]);\n                    }\n                    configDispatcher({\n                        action: 'tags',\n                        value: [...api.tags, tag.length > 30 ? tag.substring(0, 30) : tag],\n                    });\n                }}\n                chipRenderer={({ value }, key) => (\n                    <Chip\n                        key={key}\n                        size='small'\n                        label={value}\n                        onDelete={() => {\n                            if (invalidTags.includes(value)) {\n                                const currentInvalidTags = invalidTags.filter((existingTag) => existingTag !== value);\n                                setInvalidTags(currentInvalidTags);\n                                if (currentInvalidTags.length === 0) {\n                                    setIsTagValid(true);\n                                }\n                            }\n                            configDispatcher({ action: 'tags', value: api.tags.filter((oldTag) => oldTag !== value) });\n                        }}\n                        style={{\n                            backgroundColor: regexPattern.test(value) ? red[300] : null,\n                            margin: '0 8px 12px 0',\n                            float: 'left',\n                        }}\n                    />\n                )}\n                style={{ display: 'flex' }}\n            />\n        </React.Fragment>\n    );\n}\n\nTags.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport TextField from '@material-ui/core/TextField';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nconst Social = (props) => {\n    const { slackURL, githubURL, configDispatcher } = props;\n    const [apiFromContext] = useAPI();\n    return (\n        <>\n            <TextField\n                label={(\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Social.giturl'\n                        defaultMessage='GitHub URL'\n                    />\n                )}\n                variant='outlined'\n                value={githubURL || ''}\n                fullWidth\n                margin='normal'\n                onChange={(e) => configDispatcher({ action: 'github_repo', value: e.target.value })}\n                disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                helperText={(\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Social.giturl.help'\n                        defaultMessage='This GitHub URL will be available in the API overview page in developer portal'\n                    />\n                )}\n                style={{ marginTop: 0 }}\n            />\n            <TextField\n                label={(\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Social.slack'\n                        defaultMessage='Slack URL'\n                    />\n                )}\n                variant='outlined'\n                value={slackURL || ''}\n                fullWidth\n                margin='normal'\n                onChange={(e) => configDispatcher({ action: 'slack_url', value: e.target.value })}\n                disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                helperText={(\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.Social.slack_url.help'\n                        defaultMessage={'This Slack Channel URL will be available in the'\n                        + ' API overview page in developer portal'}\n                    />\n                )}\n                style={{ marginTop: 0 }}\n            />\n        </>\n    );\n};\n\nSocial.propTypes = {\n    slackURL: PropTypes.string.isRequired,\n    githubURL: PropTypes.string.isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n\nexport default React.memo(Social);\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport { FormattedMessage } from 'react-intl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { makeStyles } from '@material-ui/core/styles';\nimport API from 'AppData/api';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst useStyles = makeStyles((theme) => ({\n    tooltip: {\n        position: 'absolute',\n        right: theme.spacing(-4),\n        top: theme.spacing(1),\n    },\n    listItemText: {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n    },\n}));\n/**\n * Render the categories drop down.\n * @param {JSON} props props passed from it's parents.\n * @returns {JSX} Render the categories drop down.\n */\nfunction APICategories(props) {\n    const [categories, setCategories] = useState({});\n    const { api, configDispatcher } = props;\n    const classes = useStyles();\n    const [apiFromContext] = useAPI();\n\n    useEffect(() => {\n        API.apiCategories().then((response) => setCategories(response.body));\n    }, []);\n\n    if (!categories.list) {\n        return null;\n    } else if (categories.list.length === 0) {\n        return (\n            <Box style={{ position: 'relative', marginTop: 10 }}>\n                <TextField\n                    fullWidth\n                    select\n                    label={(\n                        <>\n                            <FormattedMessage\n                                id='Apis.Details.Configurations.api.categories'\n                                defaultMessage='API Categories'\n                            />\n                        </>\n                    )}\n                    margin='normal'\n                    variant='outlined'\n                    disabled\n                    value='emptyMessage'\n                >\n                    <MenuItem\n                        dense\n                        disableGutters\n                        value='emptyMessage'\n                    >\n                        <ListItemText primary={(\n                            <FormattedMessage\n                                id='Apis.Details.Configurations.api.categories.empty'\n                                defaultMessage='No API Categories defined.'\n                            />\n                        )}\n                        />\n                    </MenuItem>\n                </TextField>\n            </Box>\n        );\n    } else {\n        return (\n            <Box style={{ position: 'relative', marginTop: 10 }}>\n                <TextField\n                    fullWidth\n                    select\n                    label={(\n                        <>\n                            <FormattedMessage\n                                id='Apis.Details.Configurations.api.categories'\n                                defaultMessage='API Categories'\n                            />\n                        </>\n                    )}\n                    name='categories'\n                    margin='normal'\n                    variant='outlined'\n                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], apiFromContext)}\n                    value={api.categories}\n                    SelectProps={{\n                        multiple: true,\n                        renderValue: (selected) => (Array.isArray(selected) ? selected.join(', ') : selected),\n                        MenuProps: {\n                            anchorOrigin: {\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            },\n                            getContentAnchorEl: null,\n                            keepMounted: true,\n                            PaperProps: {\n                                style: {\n                                    maxHeight: 300,\n                                    maxWidth: 300,\n                                },\n                            },\n                        },\n                    }}\n                    onChange={(e) => configDispatcher({ action: 'categories', value: e.target.value })}\n                    InputProps={{\n                        id: 'itest-id-categories-input',\n                    }}\n                    helperText='Select API Categories for the API'\n                >\n                    { categories.list.map((category) => (\n                        <MenuItem\n                            dense\n                            disableGutters\n                            id={category.id}\n                            key={category.name}\n                            value={category.name}\n                        >\n                            <Checkbox color='primary' checked={api.categories.includes(category.name)} />\n                            <ListItemText\n                                primary={category.name}\n                                secondary={category.description}\n                                classes={{ primary: classes.listItemText }}\n                            />\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <Tooltip\n                    title={(\n                        <>\n                            <p>\n                                <FormattedMessage\n                                    id='Api.category.dropdown.tooltip'\n                                    defaultMessage={'Allow to group APIs that have similar attributes.'\n                                        + ' There has to be pre-defined API categories in the'\n                                        + ' environment in order to be attached to an API.'}\n                                />\n                            </p>\n                        </>\n                    )}\n                    aria-label='API Categories'\n                    placement='right-end'\n                    interactive\n                    className={classes.tooltip}\n                >\n                    <HelpOutline />\n                </Tooltip>\n            </Box>\n        );\n    }\n}\n\nAPICategories.defaultProps = {\n    categories: [],\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n\nexport default APICategories;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useReducer, useContext, useState, useEffect,\n} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport { Link, useHistory } from 'react-router-dom';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport isEmpty from 'lodash/isEmpty';\nimport cloneDeep from 'lodash.clonedeep';\nimport Api from 'AppData/api';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { isRestricted } from 'AppData/AuthManager';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport ResponseCaching from './components/ResponseCaching';\nimport CORSConfiguration from './components/CORSConfiguration';\nimport SchemaValidation from './components/SchemaValidation';\nimport MaxBackendTps from './components/MaxBackendTps';\nimport Flow from './components/Flow';\nimport Endpoints from './components/Endpoints';\nimport APISecurity from './components/APISecurity/APISecurity';\nimport QueryAnalysis from './components/QueryAnalysis';\nimport {\n    DEFAULT_API_SECURITY_OAUTH2,\n    API_SECURITY_BASIC_AUTH,\n    API_SECURITY_API_KEY,\n    API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY,\n    API_SECURITY_MUTUAL_SSL_MANDATORY,\n    API_SECURITY_MUTUAL_SSL,\n} from './components/APISecurity/components/apiSecurityConstants';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(3),\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    paper: {\n        padding: theme.spacing(3),\n    },\n    paperCenter: {\n        padding: theme.spacing(3),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    heading: {\n        fontSize: '1.1rem',\n        fontWeight: 400,\n        marginBottom: theme.spacing(0),\n    },\n    itemPadding: {\n        marginBottom: theme.spacing(3),\n    },\n    arrowForwardIcon: {\n        fontSize: 50,\n        color: '#ccc',\n        position: 'absolute',\n        top: 90,\n        right: -43,\n    },\n    arrowBackIcon: {\n        fontSize: 50,\n        color: '#ccc',\n        position: 'absolute',\n        top: 30,\n        right: -71,\n    },\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: '38px',\n    },\n    info: {\n        display: 'flex',\n        height: '100%',\n    },\n}));\n\n/**\n *\n * Deep coping the properties in API object (what ever the object in the state),\n * making sure that no direct mutations happen when updating the state.\n * You should know the shape of the object that you are keeping in the state,\n * @param {Object} api\n * @returns {Object} Deep copy of an object\n */\nfunction copyAPIConfig(api) {\n    const apiConfigJson = {\n        id: api.id,\n        name: api.name,\n        description: api.description,\n        lifeCycleStatus: api.lifeCycleStatus,\n        accessControl: api.accessControl,\n        authorizationHeader: api.authorizationHeader,\n        responseCachingEnabled: api.responseCachingEnabled,\n        cacheTimeout: api.cacheTimeout,\n        visibility: api.visibility,\n        isDefaultVersion: api.isDefaultVersion,\n        enableSchemaValidation: api.enableSchemaValidation,\n        accessControlRoles: [...api.accessControlRoles],\n        visibleRoles: [...api.visibleRoles],\n        tags: [...api.tags],\n        maxTps: api.maxTps,\n        wsdlUrl: api.wsdlUrl,\n        transport: [...api.transport],\n        securityScheme: [...api.securityScheme],\n        keyManagers: [...(api.keyManagers || [])],\n        corsConfiguration: {\n            corsConfigurationEnabled: api.corsConfiguration.corsConfigurationEnabled,\n            accessControlAllowCredentials: api.corsConfiguration.accessControlAllowCredentials,\n            accessControlAllowOrigins: [...api.corsConfiguration.accessControlAllowOrigins],\n            accessControlAllowHeaders: [...api.corsConfiguration.accessControlAllowHeaders],\n            accessControlAllowMethods: [...api.corsConfiguration.accessControlAllowMethods],\n        },\n    };\n    return apiConfigJson;\n}\n\n\n/**\n * This component handles the basic configurations UI in the API details page\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function RuntimeConfiguration() {\n    const [keyManagersConfigured, setKeyManagersConfigured] = useState([]);\n    const [saveButtonDisabled, setSaveButtonDisabled] = useState(false);\n    /**\n     *\n     * Reduce the configuration UI related actions in to updated state\n     * @param {*} state current state\n     * @param {*} configAction dispatched configuration action\n     * @returns {Object} updated state\n     */\n    function configReducer(state, configAction) {\n        const { action, value, event } = configAction;\n        const nextState = { ...copyAPIConfig(state) };\n        switch (action) {\n            case 'description':\n            case 'isDefaultVersion':\n            case 'authorizationHeader':\n            case 'responseCachingEnabled':\n            case 'cacheTimeout':\n            case 'enableSchemaValidation':\n            case 'accessControl':\n            case 'visibility':\n            case 'maxTps':\n            case 'tags':\n                nextState[action] = value;\n                return nextState;\n            case 'accessControlRoles':\n                return { ...copyAPIConfig(state), [action]: value };\n            case 'visibleRoles':\n                return { ...copyAPIConfig(state), [action]: value };\n            case 'securityScheme':\n                // If event came from mandatory selector of either Application level or Transport level\n                if (\n                    [API_SECURITY_MUTUAL_SSL_MANDATORY, API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY]\n                        .includes(event.name)\n                ) {\n                    // If user select not mandatory (optional) , Remove the respective schema, else add it\n                    if (event.value === 'optional') {\n                        return {\n                            ...copyAPIConfig(state),\n                            [action]: state[action].filter((schema) => schema !== event.name),\n                        };\n                    } else if (state[action].includes(event.name)) {\n                        return state; // Add for completeness, Ideally there couldn't exist this state\n                    } else {\n                        return { ...copyAPIConfig(state), [action]: [...state[action], event.name] };\n                    }\n                }\n                // User checked on one of api security schemas (either OAuth, Basic, ApiKey or Mutual SSL)\n                if (event.checked) {\n                    if (state[action].includes(event.value)) {\n                        return state; // Add for completeness, Ideally there couldn't exist this state\n                    } else {\n                        return { ...copyAPIConfig(state), [action]: [...state[action], event.value] };\n                    }\n                } else if (state[action].includes(event.value)) {\n                    // User has unchecked a security schema type\n                    const newState = {\n                        ...copyAPIConfig(state),\n                        [action]: state[action].filter((schema) => schema !== event.value),\n                    };\n                    if (\n                        !(\n                            newState[action].includes(DEFAULT_API_SECURITY_OAUTH2)\n                            || newState[action].includes(API_SECURITY_BASIC_AUTH)\n                            || newState[action].includes(API_SECURITY_API_KEY)\n                        )\n                    ) {\n                        const noMandatoryOAuthBasicAuth = newState[action]\n                            .filter((schema) => schema !== API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY);\n                        return {\n                            ...newState,\n                            [action]: noMandatoryOAuthBasicAuth,\n                        };\n                    } else if (!newState[action].includes(API_SECURITY_MUTUAL_SSL)) {\n                        const noMandatoryMutualSSL = newState[action]\n                            .filter((schema) => schema !== API_SECURITY_MUTUAL_SSL_MANDATORY);\n                        return {\n                            ...newState,\n                            [action]: noMandatoryMutualSSL,\n                        };\n                    }\n\n                    return newState;\n                } else {\n                    return state; // Add for completeness, Ideally there couldn't exist this state\n                }\n            case 'transport':\n                if (event.checked) {\n                    return { ...copyAPIConfig(state), transport: [...state.transport, event.value] };\n                } else {\n                    return {\n                        ...copyAPIConfig(state),\n                        transport: state.transport.filter((transport) => transport !== event.value),\n                    };\n                }\n            case 'accessControlAllowHeaders':\n            case 'accessControlAllowMethods':\n            case 'accessControlAllowCredentials':\n            case 'corsConfigurationEnabled':\n                nextState.corsConfiguration[action] = value;\n                return nextState;\n            case 'accessControlAllowOrigins':\n                if (event.checked) {\n                    nextState.corsConfiguration[action] = [event.value];\n                } else {\n                    nextState.corsConfiguration[action] = event.checked === false ? [] : event.value;\n                }\n                return nextState;\n            case 'keymanagers':\n                nextState.keyManagers = value;\n                return nextState;\n            case 'allKeyManagersEnabled':\n                if (value) {\n                    nextState.keyManagers = ['all'];\n                } else {\n                    nextState.keyManagers = keyManagersConfigured;\n                }\n                return nextState;\n            case 'saveButtonDisabled':\n                setSaveButtonDisabled(value);\n                return state;\n            default:\n                return state;\n        }\n    }\n    const { api, updateAPI } = useContext(APIContext);\n    const history = useHistory();\n    const isAsyncAPI = api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE';\n    const isNonWebSubAsyncAPI = api.type === 'WS' || api.type === 'SSE';\n    const isWebSub = api.type === 'WEBSUB';\n    const [isUpdating, setIsUpdating] = useState(false);\n    const [updateComplexityList, setUpdateComplexityList] = useState(null);\n    const [apiConfig, configDispatcher] = useReducer(configReducer, copyAPIConfig(api));\n    const classes = useStyles();\n    const mediationPolicies = cloneDeep(api.mediationPolicies || []);\n    const [inPolicy, setInPolicy] = useState(mediationPolicies.filter((seq) => seq.type === 'IN')[0]);\n    const [outPolicy, setOutPolicy] = useState(mediationPolicies.filter((seq) => seq.type === 'OUT')[0]);\n    const [faultPolicy, setFaultPolicy] = useState(mediationPolicies.filter((seq) => seq.type === 'FAULT')[0]);\n    const intl = useIntl();\n    useEffect(() => {\n        Api.keyManagers().then((response) => {\n            const kmNameList = [];\n            if (response.body.list) {\n                response.body.list.forEach((km) => kmNameList.push(km.name));\n            }\n            setKeyManagersConfigured(kmNameList);\n        })\n            .catch((error) => {\n                const { response } = error;\n                if (response.body) {\n                    const { description } = response.body;\n                    Alert.error(description);\n                }\n            });\n    }, []);\n\n    const getMediationPoliciesToSave = () => {\n        const NONE = 'none';\n        const newMediationPolicies = [];\n        if (!(isEmpty(inPolicy) || inPolicy.name === NONE)) {\n            newMediationPolicies.push(inPolicy);\n        }\n        if (!(isEmpty(outPolicy) || outPolicy.name === NONE)) {\n            newMediationPolicies.push(outPolicy);\n        }\n        if (!(isEmpty(faultPolicy) || faultPolicy.name === NONE)) {\n            newMediationPolicies.push(faultPolicy);\n        }\n        return newMediationPolicies;\n    };\n    const updateInMediationPolicy = (policy) => {\n        setInPolicy({ id: policy.id, name: policy.name, type: policy.type });\n    };\n    const updateOutMediationPolicy = (policy) => {\n        setOutPolicy({ id: policy.id, name: policy.name, type: policy.type });\n    };\n    const updateFaultMediationPolicy = (policy) => {\n        setFaultPolicy({ id: policy.id, name: policy.name, type: policy.type });\n    };\n\n    /**\n     * Update the GraphQL Query Complexity Values\n     */\n    function updateComplexity() {\n        const apiId = apiConfig.id;\n        const apiClient = new Api();\n        const promisedComplexity = apiClient.updateGraphqlPoliciesComplexity(\n            apiId, {\n                list: updateComplexityList,\n            },\n        );\n        promisedComplexity\n            .catch((error) => {\n                const { response } = error;\n                if (response.body) {\n                    const { description } = response.body;\n                    Alert.error(description);\n                }\n            });\n    }\n\n    /**\n     *\n     * Handle the configuration view save button action\n     */\n    function handleSave() {\n        const newMediationPolicies = getMediationPoliciesToSave();\n        if (api.isAPIProduct()) {\n            delete apiConfig.keyManagers; // remove keyManagers property if API type is API Product\n        } else {\n            apiConfig.mediationPolicies = newMediationPolicies;\n        }\n        if (updateComplexityList !== null) {\n            updateComplexity();\n        }\n        // Validate the key managers\n        if (\n            !api.isAPIProduct()\n            && apiConfig.securityScheme.includes('oauth2')\n            && !apiConfig.keyManagers.includes('all')\n            && (apiConfig.keyManagers && apiConfig.keyManagers.length === 0)\n        ) {\n            Alert.error(\n                intl.formatMessage(\n                    {\n                        id: 'Apis.Details.Configuration.RuntimeConfiguration.no.km.error',\n                        defaultMessage: 'Select one or more Key Managers',\n                    },\n                ),\n            );\n            return;\n        }\n        setIsUpdating(true);\n        updateAPI(apiConfig)\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                }\n            })\n            .finally(() => setIsUpdating(false));\n    }\n\n    /**\n     *\n     * Handle the configuration view save button action\n     */\n    function handleSaveAndDeploy() {\n        const newMediationPolicies = getMediationPoliciesToSave();\n        if (api.isAPIProduct()) {\n            delete apiConfig.keyManagers; // remove keyManagers property if API type is API Product\n        } else {\n            apiConfig.mediationPolicies = newMediationPolicies;\n        }\n        if (updateComplexityList !== null) {\n            updateComplexity();\n        }\n        // Validate the key managers\n        if (\n            !api.isAPIProduct()\n            && apiConfig.securityScheme.includes('oauth2')\n            && !apiConfig.keyManagers.includes('all')\n            && (apiConfig.keyManagers && apiConfig.keyManagers.length === 0)\n        ) {\n            Alert.error(\n                intl.formatMessage(\n                    {\n                        id: 'Apis.Details.Configuration.RuntimeConfiguration.no.km.error',\n                        defaultMessage: 'Select one or more Key Managers',\n                    },\n                ),\n            );\n            return;\n        }\n        setIsUpdating(true);\n        updateAPI(apiConfig)\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                }\n            })\n            .finally(() => history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            }));\n    }\n\n    return (\n        <>\n            <Box pb={3}>\n                <Typography id='itest-api-details-runtime-config-head' variant='h5'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.RuntimeConfiguration.topic.header'\n                        defaultMessage='Runtime Configurations'\n                    />\n                </Typography>\n            </Box>\n            <div className={classes.contentWrapper}>\n                <Grid container direction='row' justify='space-around' alignItems='stretch' spacing={8}>\n                    <Grid item xs={12} md={7}>\n                        <Typography className={classes.heading} variant='h6'>\n                            { isAsyncAPI\n                                ? (\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.section.initial.request'\n                                        defaultMessage='Initial Request'\n                                    />\n                                ) : (\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.section.request'\n                                        defaultMessage='Request'\n                                    />\n                                )}\n                        </Typography>\n                        <Grid\n                            direction=' column'\n                            justify='space-between'\n                            alignItems='stretch'\n                            spacing={6}\n                        >\n                            <Grid item xs={12} style={{ marginBottom: 30, position: 'relative' }}>\n                                <Paper className={classes.paper} elevation={0}>\n                                    <APISecurity api={apiConfig} configDispatcher={configDispatcher} />\n                                    { api.type !== 'WS' && (\n                                        <CORSConfiguration api={apiConfig} configDispatcher={configDispatcher} />\n                                    )}\n\n                                    {(api.type !== 'GRAPHQL' && !isAsyncAPI)\n                                        && <SchemaValidation api={apiConfig} configDispatcher={configDispatcher} />}\n                                    {!api.isAPIProduct() && !isAsyncAPI && (\n                                        <Flow\n                                            api={apiConfig}\n                                            type='IN'\n                                            updateMediationPolicy={updateInMediationPolicy}\n                                            selectedMediationPolicy={inPolicy}\n                                            isRestricted={isRestricted(['apim:api_create'], api)}\n                                        />\n                                    )}\n                                    {api.type === 'GRAPHQL' && (\n                                        <Box mt={3}>\n                                            <QueryAnalysis\n                                                api={apiConfig}\n                                                setUpdateComplexityList={setUpdateComplexityList}\n                                                isRestricted={isRestricted(['apim:api_create'], api)}\n                                            />\n                                        </Box>\n                                    )}\n                                </Paper>\n                                {!isWebSub && (\n                                    <ArrowForwardIcon className={classes.arrowForwardIcon} />\n                                )}\n                            </Grid>\n                            { !isNonWebSubAsyncAPI && (\n                                <>\n                                    <Typography className={classes.heading} variant='h6'>\n                                        {!isWebSub ? (\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.Configuration.section.response'\n                                                defaultMessage='Response'\n                                            />\n                                        ) : (\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.Configuration.section.events'\n                                                defaultMessage='Events'\n                                            />\n                                        )}\n\n                                    </Typography>\n                                    <Grid item xs={12} style={{ position: 'relative' }}>\n                                        <Box mb={3}>\n                                            <Paper className={classes.paper} elevation={0}>\n                                                {!api.isAPIProduct() && (\n                                                    <Box mb={3}>\n                                                        {isWebSub ? (\n                                                            <Flow\n                                                                api={apiConfig}\n                                                                type='IN'\n                                                                updateMediationPolicy={updateInMediationPolicy}\n                                                                selectedMediationPolicy={inPolicy}\n                                                                isRestricted={isRestricted(['apim:api_create'], api)}\n                                                            />\n                                                        ) : (\n                                                            <Flow\n                                                                api={apiConfig}\n                                                                type='OUT'\n                                                                updateMediationPolicy={updateOutMediationPolicy}\n                                                                selectedMediationPolicy={outPolicy}\n                                                                isRestricted={isRestricted(['apim:api_create'], api)}\n                                                            />\n                                                        )}\n                                                    </Box>\n                                                )}\n                                                {!isAsyncAPI && (\n                                                    <ResponseCaching\n                                                        api={apiConfig}\n                                                        configDispatcher={configDispatcher}\n                                                    />\n                                                )}\n                                            </Paper>\n                                            {!isWebSub && (\n                                                <ArrowBackIcon className={classes.arrowBackIcon} />\n                                            )}\n                                        </Box>\n                                    </Grid>\n                                </>\n                            )}\n                            {!api.isAPIProduct() && (\n                                <>\n                                    <Typography className={classes.heading} variant='h6'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.RuntimeConfiguration.section.fault'\n                                            defaultMessage='Fault'\n                                        />\n                                    </Typography>\n                                    <Grid item xs={12} style={{ position: 'relative' }}>\n                                        <Paper className={classes.paper} elevation={0}>\n                                            <Flow\n                                                api={apiConfig}\n                                                type='FAULT'\n                                                updateMediationPolicy={updateFaultMediationPolicy}\n                                                selectedMediationPolicy={faultPolicy}\n                                                isRestricted={isRestricted(['apim:api_create'], api)}\n                                            />\n                                        </Paper>\n                                    </Grid>\n                                </>\n                            )}\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={12} md={5}>\n                        {!isWebSub && (\n                            <>\n                                <Typography className={classes.heading} variant='h6'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.section.backend'\n                                        defaultMessage='Backend'\n                                    />\n                                </Typography>\n                                <Paper className={classes.paper} style={{ height: 'calc(100% - 75px)' }} elevation={0}>\n                                    {!api.isAPIProduct() && (\n                                        <>\n                                            {!isAsyncAPI && (\n                                                <MaxBackendTps api={apiConfig} configDispatcher={configDispatcher} />\n                                            )}\n                                            { !isWebSub && (\n                                                <Endpoints api={api} />\n                                            )}\n                                        </>\n                                    )}\n\n                                    {api.isAPIProduct() && (\n                                        <Box alignItems='center' justifyContent='center' className={classes.info}>\n                                            <Typography variant='body1'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Configuration.RuntimeConfiguration.backend.api.\n                                                    product.endpoint'\n                                                    defaultMessage='Please refer respective APIs for endpoint\n                                                    information'\n                                                />\n                                            </Typography>\n                                        </Box>\n                                    )}\n                                </Paper>\n                            </>\n                        )}\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid container direction='row' alignItems='center' spacing={1} style={{ marginTop: 20 }}>\n                        <Grid item>\n                            {api.isRevision\n                                || ((apiConfig.visibility === 'RESTRICTED' && apiConfig.visibleRoles.length === 0)\n                                || isRestricted(['apim:api_create'], api)) || saveButtonDisabled ? (\n                                    <Button\n                                        disabled\n                                        type='submit'\n                                        variant='contained'\n                                        color='primary'\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.Configuration.save'\n                                            defaultMessage='Save'\n                                        />\n                                    </Button>\n                                ) : (\n                                    <CustomSplitButton\n                                        handleSave={handleSave}\n                                        handleSaveAndDeploy={handleSaveAndDeploy}\n                                        isUpdating={isUpdating}\n                                    />\n                                )}\n                        </Grid>\n                        <Grid item>\n                            <Link to={'/apis/' + api.id + '/overview'}>\n                                <Button>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.cancel'\n                                        defaultMessage='Cancel'\n                                    />\n                                </Button>\n                            </Link>\n                        </Grid>\n                        {isRestricted(['apim:api_create'], api) && (\n                            <Grid item>\n                                <Typography variant='body2' color='primary'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.update.not.allowed'\n                                        defaultMessage={\n                                            '* You are not authorized to update particular fields of'\n                                            + ' the API due to insufficient permissions'\n                                        }\n                                    />\n                                </Typography>\n                            </Grid>\n                        )}\n                    </Grid>\n                </Grid>\n            </div>\n        </>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { FormattedMessage } from 'react-intl';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport WrappedExpansionPanel from 'AppComponents/Shared/WrappedExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { makeStyles } from '@material-ui/core';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport TextField from '@material-ui/core/TextField';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(3),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    actionSpace: {\n        margin: '-7px auto',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n    paper: {\n        padding: theme.spacing(0, 3),\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function ResponseCaching(props) {\n    const { api, configDispatcher } = props;\n    const classes = useStyles();\n    const [apiFromContext] = useAPI();\n    const isResponseCachingEnabled = api.responseCachingEnabled;\n\n    const generateElement = (isEnabled) => {\n        if (isEnabled) {\n            return (\n                <ExpandMoreIcon />\n            );\n        }\n        return (null);\n    };\n\n    return (\n        <>\n            <WrappedExpansionPanel className={classes.expansionPanel} id='responseCaching'>\n                <ExpansionPanelSummary expandIcon={generateElement(api.responseCachingEnabled)}>\n                    <Typography className={classes.subHeading} variant='h6'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.Configuration.response.caching'\n                            defaultMessage='Response Caching'\n                        />\n                        <Tooltip\n                            title={(\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.ResponseCaching.tooltip'\n                                    defaultMessage={\n                                        'If enabled, the API response will be cached at the gateway level'\n                                        + ' to improve the response time and minimize the backend load'\n                                    }\n                                />\n                            )}\n                            aria-label='Response cache'\n                            placement='right-end'\n                            interactive\n                        >\n                            <HelpOutline className={classes.iconSpace} />\n                        </Tooltip>\n                    </Typography>\n                    <FormControlLabel\n                        className={classes.actionSpace}\n                        control={(\n                            <Switch\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                checked={api.responseCachingEnabled}\n                                onChange={({ target: { checked } }) => configDispatcher({\n                                    action: 'responseCachingEnabled',\n                                    value: checked,\n                                })}\n                                color='primary'\n                            />\n                        )}\n                    />\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                    <Grid container spacing={1} alignItems='flex-start'>\n                        <Grid item>\n                            {isResponseCachingEnabled && (\n                                <TextField\n                                    value={api.cacheTimeout}\n                                    onChange={({ target: { value } }) => configDispatcher({\n                                        action: 'cacheTimeout',\n                                        value,\n                                    })}\n                                    margin='normal'\n                                    helperText={(\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.Configuration.cache.timeout'\n                                            defaultMessage='Cache Timeout (seconds)'\n                                        />\n                                    )}\n                                />\n                            )}\n                        </Grid>\n                    </Grid>\n                </ExpansionPanelDetails>\n            </WrappedExpansionPanel>\n        </>\n    );\n}\n\nResponseCaching.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// TODO: Move to `User` class , drawback is updating new property require JSON parse, Stringify cycle ~tmkb\nimport Utils from 'AppData/Utils';\nimport User from 'AppData/User';\n\nconst environmentName = Utils.getCurrentEnvironment().label;\nconst userStorageKey = `${User.CONST.LOCAL_STORAGE_USER}_${environmentName}`;\n\nexport const updateUserLocalStorage = (key, newValue) => {\n    const userData = JSON.parse(localStorage.getItem(userStorageKey));\n    userData[key] = newValue;\n    localStorage.setItem(userStorageKey, JSON.stringify(userData));\n};\n\nexport const getUserLocalStorage = (key) => {\n    const userData = JSON.parse(localStorage.getItem(userStorageKey));\n    return userData[key];\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ChipInput from 'material-ui-chip-input';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport WrappedExpansionPanel from 'AppComponents/Shared/WrappedExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(3),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    actionSpace: {\n        margin: '-7px auto',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n}));\n\n/**\n *\n * api.corsConfiguration possible values true and false\n * @export\n * @param {*} props\n * @returns\n */\nexport default function CORSConfiguration(props) {\n    const [apiFromContext] = useAPI();\n    const {\n        configDispatcher,\n        api: { corsConfiguration },\n    } = props;\n    const isCorsEnabled = corsConfiguration.corsConfigurationEnabled;\n    const isAllowAllOrigins = corsConfiguration.accessControlAllowOrigins[0] === '*'\n        && corsConfiguration.accessControlAllowOrigins.length === 1;\n    const classes = useStyles();\n    const generateElement = (isEnabled) => {\n        if (isEnabled) {\n            return (\n                <ExpandMoreIcon />\n            );\n        }\n        return (null);\n    };\n    return (\n        <WrappedExpansionPanel className={classes.expansionPanel} id='corsConfiguration'>\n            <ExpansionPanelSummary expandIcon={generateElement(corsConfiguration.corsConfigurationEnabled)}>\n                <Typography className={classes.subHeading} variant='h6'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.CORSConfiguration.cors.configuration'\n                        defaultMessage='CORS Configuration'\n                    />\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.components.CORSConfiguration.tooltip'\n                                defaultMessage='If enabled, the CORS configuration for the API will be enabled.'\n                            />\n                        )}\n                        aria-label='Response cache'\n                        placement='right-end'\n                        interactive\n                    >\n                        <HelpOutline className={classes.iconSpace} />\n                    </Tooltip>\n                </Typography>\n                <FormControlLabel\n                    className={classes.actionSpace}\n                    control={(\n                        <Switch\n                            disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                            checked={corsConfiguration.corsConfigurationEnabled}\n                            onChange={({ target: { checked } }) => configDispatcher({\n                                action: 'corsConfigurationEnabled',\n                                value: checked,\n                            })}\n                            color='primary'\n                        />\n                    )}\n                />\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                <Grid container>\n                    <Grid item md={12}>\n                        {isCorsEnabled && (\n                            <Grid container>\n                                <Grid item md={12}>\n                                    <Typography variant='subtitle1'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.components.CORSConfiguration.allow.\n                                                    origins'\n                                            defaultMessage='Access Control Allow Origins'\n                                        />\n                                    </Typography>\n                                </Grid>\n                                <Grid item md={12}>\n                                    <Grid container>\n                                        <Grid item md={12}>\n                                            <FormControlLabel\n                                                style={{ display: 'flex' }}\n                                                control={(\n                                                    <Checkbox\n                                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                                        checked={isAllowAllOrigins}\n                                                        onChange={({ target: { checked, value } }) => configDispatcher({\n                                                            action: 'accessControlAllowOrigins',\n                                                            event: { checked, value },\n                                                        })}\n                                                        value='*'\n                                                        color='primary'\n                                                    />\n                                                )}\n                                                label='Allow All Origins'\n                                            />\n                                        </Grid>\n                                        {!isAllowAllOrigins && (\n                                            <Grid item md={12}>\n                                                <ChipInput\n                                                    style={{ marginBottom: 40, display: 'flex' }}\n                                                    value={corsConfiguration.accessControlAllowOrigins}\n                                                    helperText={(\n                                                        <FormattedMessage\n                                                            id={\n                                                                'Apis.Details.Configuration.components'\n                                                                + '.CORSConfigurations.origin.helper'\n                                                            }\n                                                            defaultMessage={\n                                                                'Press `Enter` after typing the origin name,'\n                                                                + 'to add a new origin'\n                                                            }\n                                                        />\n                                                    )}\n                                                    onAdd={(accessControlAllowOrigin) => {\n                                                        configDispatcher({\n                                                            action: 'accessControlAllowOrigins',\n                                                            event: {\n                                                                value: [\n                                                                    ...corsConfiguration.accessControlAllowOrigins,\n                                                                    accessControlAllowOrigin,\n                                                                ],\n                                                            },\n                                                        });\n                                                    }}\n                                                    onDelete={(accessControlAllowOrigin) => {\n                                                        configDispatcher({\n                                                            action: 'accessControlAllowOrigins',\n                                                            event: {\n                                                                value: corsConfiguration\n                                                                    .accessControlAllowOrigins\n                                                                    .filter(\n                                                                        (oldOrigin) => (\n                                                                            oldOrigin !== accessControlAllowOrigin),\n                                                                    ),\n                                                            },\n                                                        });\n                                                    }}\n                                                />\n                                            </Grid>\n                                        )}\n                                    </Grid>\n                                </Grid>\n                                <Grid item md={12}>\n                                    <Typography variant='subtitle1'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.components.CORSConfiguration.allow.\n                                                    headers'\n                                            defaultMessage='Access Control Allow Headers'\n                                        />\n                                    </Typography>\n                                </Grid>\n                                <Grid item md={12}>\n                                    <ChipInput\n                                        style={{ marginBottom: 40, display: 'flex' }}\n                                        value={corsConfiguration.accessControlAllowHeaders}\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                        helperText={(\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.Configuration.components.'\n                                                    + 'CORSConfigurations.header.helper'\n                                                }\n                                                defaultMessage={\n                                                    'Press `Enter` after typing the header name, '\n                                                    + 'to add a new header'\n                                                }\n                                            />\n                                        )}\n                                        onAdd={(accessControlAllowHeader) => {\n                                            configDispatcher({\n                                                action: 'accessControlAllowHeaders',\n                                                value: [\n                                                    ...corsConfiguration.accessControlAllowHeaders,\n                                                    accessControlAllowHeader,\n                                                ],\n                                            });\n                                        }}\n                                        onDelete={(accessControlAllowHeader) => {\n                                            configDispatcher({\n                                                action: 'accessControlAllowHeaders',\n                                                value: corsConfiguration.accessControlAllowHeaders\n                                                    .filter((oldHeader) => oldHeader !== accessControlAllowHeader),\n                                            });\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item md={12}>\n                                    <Typography variant='subtitle1'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.components.CORSConfiguration.allow.\n                                                    methods'\n                                            defaultMessage='Access Control Allow Methods'\n                                        />\n                                    </Typography>\n                                </Grid>\n                                <Grid item md={12}>\n                                    <ChipInput\n                                        style={{ marginBottom: 40, display: 'flex' }}\n                                        value={corsConfiguration.accessControlAllowMethods}\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                        helperText={(\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.Configuration.components'\n                                                    + '.CORSConfigurations.method.helper'\n                                                }\n                                                defaultMessage={\n                                                    'Press `Enter` after typing the method name,'\n                                                    + ' to add a new method'\n                                                }\n                                            />\n                                        )}\n                                        onAdd={(newValue) => {\n                                            let value = [...corsConfiguration.accessControlAllowMethods,\n                                                newValue.toUpperCase()];\n                                            if (\n                                                corsConfiguration\n                                                    .accessControlAllowMethods\n                                                    .find((method) => method === newValue.toUpperCase())\n                                            ) {\n                                                value = [...corsConfiguration.accessControlAllowMethods];\n                                            }\n                                            configDispatcher({\n                                                action: 'accessControlAllowMethods',\n                                                value,\n                                            });\n                                        }}\n                                        onDelete={(accessControlAllowMethod) => {\n                                            configDispatcher({\n                                                action: 'accessControlAllowMethods',\n                                                value: corsConfiguration\n                                                    .accessControlAllowMethods\n                                                    .filter((oldMethod) => oldMethod !== accessControlAllowMethod),\n                                            });\n                                        }}\n                                    />\n                                </Grid>\n                                <Grid item>\n                                    <FormControlLabel\n                                        control={(\n                                            <Checkbox\n                                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                                checked={corsConfiguration.accessControlAllowCredentials}\n                                                onChange={({ target: { checked } }) => configDispatcher({\n                                                    action: 'accessControlAllowCredentials',\n                                                    value: checked,\n                                                })}\n                                                color='primary'\n                                            />\n                                        )}\n                                        label={(\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.Configuration.components'\n                                                    + '.CORSConfiguration.allow.credentials'\n                                                }\n                                                defaultMessage='Access Control Allow Credentials'\n                                            />\n                                        )}\n                                    />\n                                </Grid>\n                            </Grid>\n                        )}\n                    </Grid>\n                </Grid>\n            </ExpansionPanelDetails>\n        </WrappedExpansionPanel>\n    );\n}\n\nCORSConfiguration.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { withStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { isRestricted } from 'AppData/AuthManager';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Paper from '@material-ui/core/Paper';\n\nconst styles = (theme) => ({\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 2.5,\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    actionSpace: {\n        margin: theme.spacing(0, -1),\n        float: 'right',\n    },\n    paper: {\n        padding: theme.spacing(0, 3),\n        marginBottom: theme.spacing(3),\n    },\n});\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nclass SchemaValidation extends React.Component {\n    /**\n     *Creates an instance of SchemaValidation.\n     * @param {*} props\n     * @memberof SchemaValidation\n     */\n    constructor(props) {\n        super(props);\n        this.state = { isOpen: false };\n        this.setIsOpen = this.setIsOpen.bind(this);\n    }\n\n    /**\n     *\n     * @inheritdoc\n     * @param {Object} prevProps\n     * @param {Object} prevState\n     * @memberof SchemaValidation\n     */\n    componentDidUpdate(prevProps) {\n        const { api } = this.props;\n        /*\n        This could have been done using hooks too, But at the moment it requires `useRef` hook to get the previous props\n        Hence using class component and its `componentDidUpdate` life cycle method to open the caution dialog box\n        For more info: https://reactjs.org/docs/hooks-faq.html#how-to-get-the-previous-props-or-state\n         */\n        if (!prevProps.api.enableSchemaValidation && api.enableSchemaValidation) {\n            this.setIsOpen(true);\n        }\n    }\n\n    /**\n     *\n     * Set isOpen state of the dialog box which shows the caution message when enabling schema validation\n     * @param {Boolean} isOpen Should dialog box is open or not\n     * @memberof SchemaValidation\n     */\n    setIsOpen(isOpen) {\n        this.setState({ isOpen });\n    }\n\n    /**\n     *\n     * @inheritdoc\n     * @param {*} props\n     * @returns\n     * @memberof SchemaValidation\n     */\n    render() {\n        const { api, configDispatcher, classes } = this.props;\n        const { isOpen } = this.state;\n        const { api: apiFromContext } = this.context;\n\n        return (\n            <Paper className={classes.paper}>\n                <Grid container spacing={1} alignItems='flex-start'>\n                    <Grid item md={12}>\n                        <Typography className={classes.subHeading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Configuration.schema.validation'\n                                defaultMessage='Schema Validation'\n                            />\n                            <Tooltip\n                                title={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.schema.validation.tooltip'\n                                        defaultMessage={'Enable the request and response '\n                                        + 'validation against the OpenAPI definition'}\n                                    />\n                                )}\n                                aria-label='Schema Validation'\n                                placement='right-end'\n                                interactive\n                            >\n                                <HelpOutline className={classes.iconSpace} />\n                            </Tooltip>\n                        </Typography>\n                        <FormControlLabel\n                            className={classes.actionSpace}\n                            control={(\n                                <Switch\n                                    disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    checked={\n                                        api.enableSchemaValidation === undefined ? false : api.enableSchemaValidation\n                                    }\n                                    onChange={({ target: { checked } }) => configDispatcher({\n                                        action: 'enableSchemaValidation',\n                                        value: checked,\n                                    })}\n                                    color='primary'\n                                />\n                            )}\n                        />\n                    </Grid>\n                </Grid>\n                <Dialog\n                    open={isOpen}\n                    onClose={() => this.setIsOpen(false)}\n                    aria-labelledby='alert-dialog-title'\n                    aria-describedby='alert-dialog-description'\n                >\n                    <DialogTitle id='alert-dialog-title'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.SchemaValidation.title'\n                            defaultMessage='Caution!'\n                        />\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id='alert-dialog-description'>\n                            <Typography variant='subtitle1' display='block' gutterBottom>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.SchemaValidation.description'\n                                    defaultMessage={\n                                        'Enabling JSON schema validation will cause to build the'\n                                        + ' payload in every request and response. This will impact'\n                                        + ' the round trip time of an API request!'\n                                    }\n                                />\n                            </Typography>\n                            <Typography variant='subtitle2' display='block' gutterBottom>\n                                <b>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Configuration.components.SchemaValidation'\n                                        + '.description.question'}\n                                        defaultMessage='Do you want to enable schema validation?'\n                                    />\n                                </b>\n                            </Typography>\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button color='primary' variant='contained' onClick={() => this.setIsOpen(false)}>\n                            Yes\n                        </Button>\n                        <Button\n                            onClick={() => {\n                                this.setIsOpen(false);\n                                configDispatcher({\n                                    action: 'enableSchemaValidation',\n                                    value: false,\n                                });\n                            }}\n                            color='primary'\n                        >\n                            No\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Paper>\n        );\n    }\n}\n\nSchemaValidation.propTypes = {\n    api: PropTypes.shape({ enableSchemaValidation: PropTypes.bool }).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nSchemaValidation.contextType = ApiContext;\n\nexport default withStyles(styles)(SchemaValidation);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport WrappedExpansionPanel from 'AppComponents/Shared/WrappedExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport Radio from '@material-ui/core/Radio';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Collapse } from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(1), // TODO: replace with <Box /> element `mb`\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function MaxBackendTps(props) {\n    const { api, configDispatcher } = props;\n    const classes = useStyles();\n\n    return (\n        <>\n            <Grid item xs={12}>\n                <WrappedExpansionPanel className={classes.expansionPanel} defaultExpanded id='maxBackendTps'>\n                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography className={classes.subHeading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Components.MaxBackendTps.maximum.backend.throughput'\n                                defaultMessage='Backend Throughput'\n                            />\n                            <Tooltip\n                                title={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.MaxBackendTps.tooltip'\n                                        defaultMessage={'Limits the total number of calls the API Manager is allowed'\n                                        + ' to make to the backend'}\n                                    />\n                                )}\n                                aria-label='APISecurity'\n                                placement='right-end'\n                                interactive\n                            >\n                                <HelpOutline className={classes.iconSpace} />\n                            </Tooltip>\n                        </Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                        <FormControl component='fieldset'>\n                            <FormLabel component='legend'>Maximum Throughput</FormLabel>\n                            <RadioGroup\n                                aria-label='change-max-TPS'\n                                value={api.maxTps === null ? 'unlimited' : 'specify'}\n                                onChange={(event) => {\n                                    configDispatcher({\n                                        action: 'maxTps',\n                                        value:\n                                            event.target.value === 'specify' ? { production: null, sandbox: null }\n                                                : null,\n                                    });\n                                }}\n                                row\n                            >\n                                <FormControlLabel\n                                    value='unlimited'\n                                    control={(\n                                        <Radio\n                                            color='primary'\n                                            disabled={isRestricted(['apim:api_create'], api)}\n                                        />\n                                    )}\n                                    label='Unlimited'\n                                    labelPlacement='end'\n\n                                />\n                                <FormControlLabel\n                                    value='specify'\n                                    control={(\n                                        <Radio\n                                            color='primary'\n                                            disabled={isRestricted(['apim:api_create'], api)}\n                                        />\n                                    )}\n                                    label='Specify'\n                                    labelPlacement='end'\n                                    disabled={isRestricted(['apim:api_create'], api)}\n                                />\n                            </RadioGroup>\n                        </FormControl>\n                        <Collapse in={api.maxTps !== null}>\n                            <Grid item xs={12} style={{ marginBottom: 10, position: 'relative' }}>\n                                <TextField\n                                    label='Max Production TPS'\n                                    margin='normal'\n                                    variant='outlined'\n                                    onChange={(event) => {\n                                        configDispatcher({\n                                            action: 'maxTps',\n                                            value: { ...api.maxTps, production: event.target.value },\n                                        });\n                                    }}\n                                    value={api.maxTps !== null ? api.maxTps.production : ''}\n                                    disabled={isRestricted(['apim:api_create'], api)}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position='end'>TPS</InputAdornment>,\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item xs={12} style={{ marginBottom: 10, position: 'relative' }}>\n                                <TextField\n                                    label='Max Sandbox TPS'\n                                    margin='normal'\n                                    variant='outlined'\n                                    onChange={(event) => {\n                                        configDispatcher({\n                                            action: 'maxTps',\n                                            value: { ...api.maxTps, sandbox: event.target.value },\n                                        });\n                                    }}\n                                    value={api.maxTps !== null ? api.maxTps.sandbox : ''}\n                                    disabled={isRestricted(['apim:api_create'], api)}\n                                    InputProps={{\n                                        endAdornment: <InputAdornment position='end'>TPS</InputAdornment>,\n                                    }}\n                                />\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.MaxBackendTps.formattedMessage'\n                                        defaultMessage='Maximum backend transactions per second in integers'\n                                    />\n                                </FormHelperText>\n                            </Grid>\n                        </Collapse>\n                    </ExpansionPanelDetails>\n                </WrappedExpansionPanel>\n            </Grid>\n        </>\n    );\n}\n\nMaxBackendTps.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { Grid, withStyles } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport EditMediationPolicy from 'AppComponents/Apis/Details/MediationPolicies/EditMediationPolicy';\nimport EditRounded from '@material-ui/icons/EditRounded';\n\nconst styles = {\n    content: {\n        flexGrow: 1,\n    },\n    itemWrapper: {\n        width: 'auto',\n        display: 'flex',\n    },\n    FormControl: {\n        padding: 10,\n        width: '100%',\n        marginTop: 0,\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    subTitle: {\n        marginTop: 20,\n    },\n    subTitleDescription: {\n        marginBottom: 10,\n    },\n    flowWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: 10,\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n    heading: {\n        margin: 'auto',\n        color: 'rgba(0, 0, 0, 0.40)',\n        wordBreak: 'break-all',\n        whiteSpace: 'normal',\n    },\n    paper: {\n        padding: '10px 24px',\n        width: 'auto',\n    },\n};\n\n/**\n * The base component of the IN mediation policy.\n * @param {any} props The props passed to the layout\n * @returns {any} HTML representation.\n */\nfunction InFlow(props) {\n    const {\n        classes, updateMediationPolicy, selectedMediationPolicy, type, isRestricted,\n    } = props;\n    const [editing, setEditing] = useState(false);\n\n    function startEditing() {\n        setEditing(true);\n    }\n    return (\n        <>\n            <Paper className={classes.paper}>\n                <Grid container spacing={2} alignItems='flex-start'>\n                    <Grid item md={12} style={{ position: 'relative', display: 'inline-flex' }}>\n                        <Typography className={classes.subHeading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.MediationPolicies.Mediation'\n                                defaultMessage='Message Mediation'\n                            />\n                        </Typography>\n                        <Typography className={classes.heading}>\n                            {selectedMediationPolicy && selectedMediationPolicy.name ? (\n                                <span>{selectedMediationPolicy.name}</span>\n                            ) : (\n                                <span>none</span>\n                            )}\n                        </Typography>\n                        <Button\n                            size='small'\n                            onClick={startEditing}\n                            disabled={isRestricted}\n                        >\n                            <EditRounded />\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Paper>\n            <EditMediationPolicy\n                setEditing={setEditing}\n                editing={editing}\n                updateMediationPolicy={updateMediationPolicy}\n                selectedMediationPolicy={selectedMediationPolicy}\n                type={type}\n            />\n        </>\n    );\n}\n\nInFlow.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    updateMediationPolicy: PropTypes.func.isRequired,\n    selectedMediationPolicy: PropTypes.shape({}).isRequired,\n    type: PropTypes.string.isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles)(InFlow);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Box from '@material-ui/core/Box';\nimport IconButton from '@material-ui/core/IconButton';\nimport Dropzone from 'react-dropzone';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Utils from 'AppData/Utils';\nimport API from 'AppData/api.js';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst dropzoneStyles = {\n    border: '1px dashed ',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    height: 75,\n    padding: '8px 0px',\n    position: 'relative',\n    textAlign: 'center',\n    width: '100%',\n    margin: '10px 0',\n};\nconst styles = (theme) => ({\n    formControl: {\n        display: 'flex',\n        flexDirection: 'row',\n        padding: `${theme.spacing(2)}px 2px`,\n    },\n    dropzone: {\n        border: '1px dashed ' + theme.palette.primary.main,\n        borderRadius: '5px',\n        cursor: 'pointer',\n        height: 'calc(100vh - 50em)',\n        padding: `${theme.spacing(2)}px ${theme.spacing(2)}px`,\n        position: 'relative',\n        textAlign: 'center',\n        width: '100%',\n        margin: '10px 0',\n    },\n    dropZoneWrapper: {\n        height: '100%',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexDirection: 'column',\n        '& span': {\n            fontSize: 64,\n            color: theme.palette.primary.main,\n        },\n    },\n    radioWrapper: {\n        flexDirection: 'row',\n    },\n});\n/**\n * The component to manage IN mediation policies.\n * @param {any} props The props passed to the layout\n * @returns {any} HTML representation.\n */\nfunction EditMediationPolicy(props) {\n    const {\n        classes, updateMediationPolicy, selectedMediationPolicy, setEditing, editing, type, intl,\n    } = props;\n    const { api } = useContext(ApiContext);\n\n    const [globalMediationPolicies, setGlobalMediationPolicies] = useState(null);\n    // user uploaded api specific mediation policies\n    const [seqCustom, setSeqCustom] = useState(null);\n    const [provideBy, setProvideBy] = useState();\n    const { id: apiId } = api;\n    const NONE = 'none';\n    const [localSelectedPolicyFile, setLocalSelectedPolicyFile] = useState(selectedMediationPolicy);\n    function updatePoliciesFromBE() {\n        const globalPromise = API.getGlobalMediationPolicies();\n        const customPromise = API.getMediationPolicies(apiId);\n        Promise.all([globalPromise, customPromise])\n            .then((values) => {\n                setGlobalMediationPolicies([...values[0].obj.list.filter((seq) => seq.type === type)]);\n                setSeqCustom([...values[1].obj.list.filter((seq) => seq.type === type)]);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.MediationPolicies.Edit.EditMediationPolicy.error',\n                        defaultMessage: 'Error retrieving mediation policies',\n                    }));\n                }\n            });\n    }\n    function setActivePolicy(policy) {\n        if (policy.name !== NONE) {\n            Object.assign(policy, { content: '' });\n            setLocalSelectedPolicyFile(policy);\n            // updateMediationPolicy(policy);\n        } else {\n            Object.assign(policy, { content: '', id: NONE });\n            setLocalSelectedPolicyFile(policy);\n            // updateMediationPolicy(policy);\n        }\n    }\n    useEffect(() => {\n        if (selectedMediationPolicy) {\n            const { shared } = selectedMediationPolicy;\n            if (shared) {\n                setProvideBy('global');\n            } else if (selectedMediationPolicy.name === NONE) {\n                setProvideBy('none');\n            } else {\n                setProvideBy('custom');\n            }\n        } else {\n            setProvideBy('none');\n        }\n    }, [selectedMediationPolicy]);\n    useEffect(() => {\n        updatePoliciesFromBE();\n    }, []);\n\n    useEffect(() => {\n        if (provideBy === 'custom' && seqCustom && seqCustom.length > 0) {\n            setActivePolicy(seqCustom[0]);\n        } else if (provideBy === 'global' && globalMediationPolicies && globalMediationPolicies.length > 0) {\n            setActivePolicy(globalMediationPolicies[0]);\n        }\n    }, [provideBy]);\n\n    // useEffect(() => {\n    //     if (globalInMediationPolicies && globalInMediationPolicies.length > 0) {\n    //         setProvideBy('global');\n    //     } else if (inSeqCustom && inSeqCustom.length > 0) {\n    //         setProvideBy('custom');\n    //     } else {\n    //         setProvideBy('none');\n    //     }\n    // }, [globalInMediationPolicies, inSeqCustom]);\n    const saveMediationPolicy = (newPolicy) => {\n        const promisedApi = API.addMediationPolicy(newPolicy, apiId, type);\n        promisedApi\n            .then((response) => {\n                const {\n                    body: { id, type: policyType, name },\n                } = response;\n                updatePoliciesFromBE();\n                setLocalSelectedPolicyFile({\n                    id,\n                    type: policyType,\n                    name,\n                    shared: false,\n                    content: '',\n                });\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.MediationPolicies.Edit.EditMediationPolicy.success',\n                    defaultMessage: 'Mediation policy added successfully',\n                }));\n            })\n            .catch((errorResponse) => {\n                console.error(errorResponse);\n                if (errorResponse.response.body.description !== null) {\n                    Alert.error(errorResponse.response.body.description);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.MediationPolicies.Edit.AddMediationPolicy.error',\n                        defaultMessage: 'Error while adding mediation policy',\n                    }));\n                }\n            });\n    };\n    /**\n     * Handled the file upload action of the dropzone.\n     * @param {file} policy The accepted file list by the dropzone.\n     * */\n    const onDrop = (policy) => {\n        const policyFile = policy[0];\n        if (policyFile) {\n            saveMediationPolicy(policyFile);\n        }\n    };\n    /**\n     * Handles the mediation policy select event.\n     * @param {any} event The event pass to the layout\n     */\n    function handleChange(event) {\n        const policy = {\n            name: event.target.getAttribute('seq_name'),\n            id: event.target.getAttribute('seq_id'),\n            type: event.target.getAttribute('seq_type'),\n        };\n        setActivePolicy(policy);\n    }\n    /**\n     * Handles the Global mediation policy download.\n     * @param {any} policyToDownload policy file id that is to be downloaded.\n     */\n    function downloadGlobalMediationPolicyContent(policyToDownload) {\n        const promisedGetContent = API.getGlobalMediationPolicyContent(policyToDownload);\n        promisedGetContent\n            .then((response) => {\n                Utils.forceDownload(response);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                    Alert.error(<FormattedMessage\n                        id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.download.error'\n                        defaultMessage='Error downloading the file'\n                    />);\n                }\n            });\n    }\n\n    /**\n     * Handles the custom mediation policy download.\n     * @param {any} policyToDownload policy file id that is to be downloaded.\n     */\n    function downloadCustomMediationPolicyContent(policyToDownload) {\n        const promisedGetContent = API.getMediationPolicyContent(policyToDownload, apiId);\n        promisedGetContent\n            .then((done) => {\n                Utils.forceDownload(done, document);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(<FormattedMessage\n                        id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.download.error'\n                        defaultMessage='Error downloading the file'\n                    />);\n                }\n            });\n    }\n    /**\n     * Handles the custom mediation policy delete.\n     * @param {any} policyToDelete policy file id that is to be deleted.\n     */\n    function deleteCustomMediationPolicy(policyToDelete) {\n        const promisedGetContent = API.deleteMediationPolicy(policyToDelete, api.id);\n        promisedGetContent\n            .then(() => {\n                setSeqCustom(seqCustom.filter((seq) => seq.id !== policyToDelete));\n                Alert.info(<FormattedMessage\n                    id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.delete.success'\n                    defaultMessage='Mediation policy deleted successfully.'\n                />);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(<FormattedMessage\n                        id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.delete.error'\n                        defaultMessage='Error deleting the file'\n                    />);\n                }\n            });\n    }\n    const handleDownload = (policyToDownload) => {\n        const isGlobalMediationPolicy = globalMediationPolicies.filter(\n            (policy) => policy.id === policyToDownload,\n        ).length > 0;\n        if (isGlobalMediationPolicy) {\n            downloadGlobalMediationPolicyContent(policyToDownload);\n        } else {\n            downloadCustomMediationPolicyContent(policyToDownload);\n        }\n    };\n    const handleDelete = (policyToDelete) => {\n        const isGlobalMediationPolicy = globalMediationPolicies.filter(\n            (policy) => policy.id === policyToDelete,\n        ).length > 0;\n        if (isGlobalMediationPolicy) {\n            Alert.error(<FormattedMessage\n                id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.global.delete'\n                defaultMessage='Cannot delete Global mediation policies.'\n            />);\n        } else {\n            deleteCustomMediationPolicy(policyToDelete);\n        }\n    };\n    function cancelEditing() {\n        setEditing(false);\n    }\n    function doneEditing() {\n        updateMediationPolicy(localSelectedPolicyFile);\n        setEditing(false);\n    }\n    function handleChangeProvideBy(event) {\n        const inputValue = event.target.value;\n        setProvideBy(inputValue);\n        if (inputValue === NONE) {\n            setActivePolicy({ name: NONE, type: NONE });\n        } else {\n            setActivePolicy({});\n        }\n    }\n    return (\n        <Dialog\n            disableBackdropClick\n            disableEscapeKeyDown\n            maxWidth='sm'\n            fullWidth\n            aria-labelledby='confirmation-dialog-title'\n            open={editing}\n        >\n            <DialogTitle id='confirmation-dialog-title'>\n                <FormattedMessage\n                    id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.select.policy'\n                    defaultMessage='Select a Mediation Policy'\n                />\n            </DialogTitle>\n            {globalMediationPolicies && seqCustom && (\n                <DialogContent dividers>\n                    <RadioGroup value={provideBy} onChange={handleChangeProvideBy} className={classes.radioWrapper}>\n                        <FormControlLabel\n                            value='none'\n                            control={<Radio color='primary' />}\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.none'\n                                    defaultMessage='None'\n                                />\n                            )}\n                        />\n                        <FormControlLabel\n                            value='global'\n                            control={<Radio color='primary' />}\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.common.policies'\n                                    defaultMessage='Common Policies'\n                                />\n                            )}\n                        />\n                        <FormControlLabel\n                            value='custom'\n                            control={<Radio color='primary' />}\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.custom.policies'\n                                    defaultMessage='Custom Policies'\n                                />\n                            )}\n                        />\n                    </RadioGroup>\n                    {provideBy === 'custom' && (\n                        <>\n                            <Dropzone\n                                multiple={false}\n                                className={classes.dropzone}\n                                activeClassName={classes.acceptDrop}\n                                rejectClassName={classes.rejectDrop}\n                                onDrop={(dropFile) => {\n                                    onDrop(dropFile);\n                                }}\n                            >\n                                {({ getRootProps, getInputProps }) => (\n                                    <div {...getRootProps({ style: dropzoneStyles })}>\n                                        <input {...getInputProps()} accept='application/xml,text/xml' />\n                                        <div className={classes.dropZoneWrapper}>\n                                            <Icon className={classes.dropIcon}>cloud_upload</Icon>\n                                            <Typography>\n                                                <FormattedMessage\n                                                    id={\n                                                        'Apis.Details.MediationPolicies.Edit.EditMediationPolicy.'\n                                                        + 'click.or.drop.to.upload.file'\n                                                    }\n                                                    defaultMessage='Click or drag the mediation file to upload.'\n                                                />\n                                            </Typography>\n                                        </div>\n                                    </div>\n                                )}\n                            </Dropzone>\n                            <RadioGroup\n                                aria-label='inflow'\n                                name='inflow'\n                                className={classes.radioGroup}\n                                value={localSelectedPolicyFile.name}\n                                onChange={handleChange}\n                            >\n                                <FormLabel component='customPolicies'>\n                                    <FormattedMessage\n                                        id={\n                                            'Apis.Details.Edit.MediationPolicies.'\n                                            + 'EditMediationPolicies.custom.mediation.policies'\n                                        }\n                                        defaultMessage='Custom Mediation Policies'\n                                    />\n                                </FormLabel>\n                                {seqCustom.map((seq) => (\n                                    <div>\n                                        <IconButton onClick={() => handleDelete(seq.id)}>\n                                            <Icon>delete</Icon>\n                                        </IconButton>\n                                        <Button onClick={() => handleDownload(seq.id)}>\n                                            <Icon>arrow_downward</Icon>\n                                        </Button>\n                                        <FormControlLabel\n                                            control={(\n                                                <Radio\n                                                    inputProps={{\n                                                        seq_id: seq.id,\n                                                        seq_name: seq.name,\n                                                        seq_type: seq.type,\n                                                    }}\n                                                    color='primary'\n                                                />\n                                            )}\n                                            label={seq.name}\n                                            value={seq.name}\n                                            checked={localSelectedPolicyFile.name === seq.name}\n                                        />\n                                    </div>\n                                ))}\n                            </RadioGroup>\n                        </>\n                    )}\n                    {provideBy === 'global' && (\n                        <RadioGroup\n                            aria-label='inflow'\n                            name='inflow'\n                            className={classes.radioGroup}\n                            value={localSelectedPolicyFile.name}\n                            onChange={handleChange}\n                        >\n                            {globalMediationPolicies.map((seq) => (\n                                <Box display='flex' justifyContent='space-between'>\n                                    <FormControlLabel\n                                        control={(\n                                            <Radio\n                                                inputProps={{\n                                                    seq_id: seq.id,\n                                                    seq_name: seq.name,\n                                                    seq_type: seq.type,\n                                                }}\n                                                color='primary'\n                                            />\n                                        )}\n                                        label={seq.name}\n                                        value={seq.name}\n                                        checked={localSelectedPolicyFile.name === seq.name}\n                                    />\n                                    <Box mr={22}>\n                                        <Tooltip\n                                            title={(\n                                                <FormattedMessage\n                                                    id='Apis.Details.MediationPolicies.EditMediationPolicy.download'\n                                                    defaultMessage='Download'\n                                                />\n                                            )}\n                                            aria-label='Download policy'\n                                            placement='right-end'\n                                            interactive\n                                        >\n                                            <Button onClick={() => handleDownload(seq.id)}>\n                                                <Icon>vertical_align_bottom</Icon>\n                                            </Button>\n                                        </Tooltip>\n                                    </Box>\n                                </Box>\n                            ))}\n                        </RadioGroup>\n                    )}\n                </DialogContent>\n            )}\n            <DialogActions>\n                <Button onClick={cancelEditing} color='primary'>\n                    <FormattedMessage\n                        id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.cancel.btn'\n                        defaultMessage='Cancel'\n                    />\n                </Button>\n                <Button\n                    onClick={doneEditing}\n                    color='primary'\n                    variant='contained'\n                    disabled={provideBy === 'custom' && seqCustom && seqCustom.length === 0}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.MediationPolicies.Edit.EditMediationPolicy.select.btn'\n                        defaultMessage='Select'\n                    />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\nEditMediationPolicy.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    selectedMediationPolicy: PropTypes.shape({}).isRequired,\n    type: PropTypes.string.isRequired,\n    updateMediationPolicy: PropTypes.func.isRequired,\n    setEditing: PropTypes.func.isRequired,\n    editing: PropTypes.bool.isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(EditMediationPolicy));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ApiContext, { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\nimport {\n    API_SECURITY_MUTUAL_SSL_MANDATORY,\n    DEFAULT_API_SECURITY_OAUTH2,\n    API_SECURITY_BASIC_AUTH,\n    API_SECURITY_API_KEY,\n    API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY,\n    API_SECURITY_MUTUAL_SSL,\n} from './components/apiSecurityConstants';\nimport ApplicationLevel from './components/ApplicationLevel';\nimport TransportLevel from './components/TransportLevel';\n\nconst useStyles = makeStyles((theme) => ({\n    error: {\n        color: theme.palette.error.main,\n    },\n    bottomSpace: {\n        marginBottom: theme.spacing(4),\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function APISecurity(props) {\n    const {\n        api: { securityScheme, id },\n        configDispatcher,\n        api,\n    } = props;\n    const apiContext = useContext(ApiContext);\n    const isAPIProduct = apiContext.api.apiType === API.CONSTS.APIProduct;\n    let isEndpointAvailable;\n    let isPrototyped;\n    if (isAPIProduct) {\n        isEndpointAvailable = false;\n        isPrototyped = false;\n    } else {\n        isEndpointAvailable = apiContext.api.endpointConfig !== null;\n        isPrototyped = apiContext.api.endpointConfig !== null\n             && apiContext.api.endpointConfig.implementation_status === 'prototyped';\n    }\n\n    const haveMultiLevelSecurity = securityScheme.includes(API_SECURITY_MUTUAL_SSL)\n        && (securityScheme.includes(API_SECURITY_BASIC_AUTH)\n        || securityScheme.includes(\n            DEFAULT_API_SECURITY_OAUTH2,\n        ) || securityScheme.includes(API_SECURITY_API_KEY));\n    const classes = useStyles();\n    const [apiFromContext] = useAPI();\n\n    // Check the validation conditions and return an error message\n    const Validate = () => {\n        let resourcesWithSecurity;\n        if (apiFromContext.apiType === API.CONSTS.APIProduct) {\n            const apiList = apiFromContext.apis;\n            for (const apiInProduct in apiList) {\n                if (Object.prototype.hasOwnProperty.call(apiList, apiInProduct)) {\n                    resourcesWithSecurity = apiList[apiInProduct].operations.findIndex(\n                        (op) => op.authType !== 'None',\n                    ) > -1;\n                    if (resourcesWithSecurity) {\n                        break;\n                    }\n                }\n            }\n        } else {\n            resourcesWithSecurity = apiFromContext.operations.findIndex((op) => op.authType !== 'None') > -1;\n        }\n\n        if (\n            !securityScheme.includes(API_SECURITY_MUTUAL_SSL)\n            && !securityScheme.includes(API_SECURITY_BASIC_AUTH)\n            && !securityScheme.includes(DEFAULT_API_SECURITY_OAUTH2)\n            && !securityScheme.includes(API_SECURITY_API_KEY)\n            && resourcesWithSecurity\n        ) {\n            return (\n                <Typography className={classes.bottomSpace}>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.APISecurity.emptySchemas'\n                        defaultMessage='Please select at least one API security method!'\n                    />\n                </Typography>\n            );\n        } else if (\n            // User has enabled both security levels and set both levels as optional\n            haveMultiLevelSecurity\n            && !(\n                securityScheme.includes(API_SECURITY_MUTUAL_SSL_MANDATORY)\n                || securityScheme.includes(API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY)\n            )\n        ) {\n            return (\n                <Typography className={classes.bottomSpace}>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.APISecurity.allOptional'\n                        defaultMessage=\"Please select at least one API security level as 'Mandatory'!\"\n                    />\n                </Typography>\n            );\n        }\n        return null; // No errors :-)\n    };\n    return (\n        <>\n            <Grid container spacing={2} alignItems='flex-start'>\n                {(isAPIProduct || (!isEndpointAvailable || (isEndpointAvailable && !isPrototyped)))\n                && (\n                    <>\n                        <TransportLevel\n                            haveMultiLevelSecurity={haveMultiLevelSecurity}\n                            securityScheme={securityScheme}\n                            configDispatcher={configDispatcher}\n                            api={api}\n                            id={id}\n                        />\n                        <ApplicationLevel\n                            haveMultiLevelSecurity={haveMultiLevelSecurity}\n                            securityScheme={securityScheme}\n                            api={api}\n                            configDispatcher={configDispatcher}\n                            id={id}\n                        />\n                        <Grid item>\n                            <span className={classes.error}>\n                                <Validate />\n                            </span>\n                        </Grid>\n                    </>\n                )}\n            </Grid>\n        </>\n    );\n}\n\nAPISecurity.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport WrappedExpansionPanel from 'AppComponents/Shared/WrappedExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport AuthorizationHeader from 'AppComponents/Apis/Details/Configuration/components/AuthorizationHeader.jsx';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport KeyManager from 'AppComponents/Apis/Details/Configuration/components/KeyManager';\nimport API from 'AppData/api';\n\nimport {\n    DEFAULT_API_SECURITY_OAUTH2,\n    API_SECURITY_BASIC_AUTH,\n    API_SECURITY_API_KEY,\n    API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY,\n    API_SECURITY_MUTUAL_SSL,\n} from './apiSecurityConstants';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    bottomSpace: {\n        marginBottom: theme.spacing(4),\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function ApplicationLevel(props) {\n    const {\n        haveMultiLevelSecurity, securityScheme, configDispatcher, api,\n    } = props;\n    const [apiFromContext] = useAPI();\n    const classes = useStyles();\n    let mandatoryValue = null;\n    let hasResourceWithSecurity;\n    if (apiFromContext.apiType === API.CONSTS.APIProduct) {\n        const apiList = apiFromContext.apis;\n        for (const apiInProduct in apiList) {\n            if (Object.prototype.hasOwnProperty.call(apiList, apiInProduct)) {\n                hasResourceWithSecurity = apiList[apiInProduct].operations.findIndex(\n                    (op) => op.authType !== 'None',\n                ) > -1;\n                if (hasResourceWithSecurity) {\n                    break;\n                }\n            }\n        }\n    } else {\n        hasResourceWithSecurity = apiFromContext.operations.findIndex((op) => op.authType !== 'None') > -1;\n    }\n\n    mandatoryValue = 'optional';\n    // If not Oauth2, Basic auth or ApiKey security is selected, no mandatory values should be pre-selected\n    if (!(securityScheme.includes(DEFAULT_API_SECURITY_OAUTH2) || securityScheme.includes(API_SECURITY_BASIC_AUTH)\n        || securityScheme.includes(API_SECURITY_API_KEY))) {\n        mandatoryValue = null;\n    } else if (!securityScheme.includes(API_SECURITY_MUTUAL_SSL)) {\n        mandatoryValue = API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY;\n    } else if (securityScheme.includes(API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY)) {\n        mandatoryValue = API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY;\n    }\n\n    return (\n        <>\n            <Grid item xs={12}>\n                <WrappedExpansionPanel className={classes.expansionPanel} id='applicationLevel'>\n                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography className={classes.subHeading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Components.APISecurity.Components.\n                                    ApplicationLevel.http'\n                                defaultMessage='Application Level Security'\n                            />\n                            <Tooltip\n                                title={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.APISecurity.tooltip'\n                                        defaultMessage={\n                                            'This option determines the type of security'\n                                            + ' that will be used to secure this API. An API can be secured '\n                                            + 'with either OAuth2/Basic/ApiKey or it can be secured with all of them. '\n                                            + 'If OAuth2 option is selected, relevant API will require a valid '\n                                            + 'OAuth2 token for successful invocation.'\n                                        }\n                                    />\n                                )}\n                                aria-label='APISecurity'\n                                placement='right-end'\n                                interactive\n                            >\n                                <HelpOutline className={classes.iconSpace} />\n                            </Tooltip>\n                        </Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                        <FormGroup style={{ display: 'flow-root' }}>\n                            <FormControlLabel\n                                control={(\n                                    <Checkbox\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                        checked={securityScheme.includes(DEFAULT_API_SECURITY_OAUTH2)}\n                                        onChange={({ target: { checked, value } }) => configDispatcher({\n                                            action: 'securityScheme',\n                                            event: { checked, value },\n                                        })}\n                                        value={DEFAULT_API_SECURITY_OAUTH2}\n                                        color='primary'\n                                    />\n                                )}\n                                label='OAuth2'\n                            />\n                            <FormControlLabel\n                                control={(\n                                    <Checkbox\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                        checked={securityScheme.includes(API_SECURITY_BASIC_AUTH)}\n                                        onChange={({ target: { checked, value } }) => configDispatcher({\n                                            action: 'securityScheme',\n                                            event: { checked, value },\n                                        })}\n                                        value={API_SECURITY_BASIC_AUTH}\n                                        color='primary'\n                                    />\n                                )}\n                                label='Basic'\n                            />\n                            <FormControlLabel\n                                control={(\n                                    <Checkbox\n                                        checked={securityScheme.includes(API_SECURITY_API_KEY)}\n                                        disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                        onChange={({ target: { checked, value } }) => configDispatcher({\n                                            action: 'securityScheme',\n                                            event: { checked, value },\n                                        })}\n                                        value={API_SECURITY_API_KEY}\n                                        color='primary'\n                                    />\n                                )}\n                                label='Api Key'\n                            />\n                        </FormGroup>\n                        <FormControl className={classes.bottomSpace} component='fieldset'>\n                            <RadioGroup\n                                aria-label='HTTP security HTTP mandatory selection'\n                                name={API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY}\n                                value={mandatoryValue}\n                                onChange={({ target: { name, value } }) => configDispatcher({\n                                    action: 'securityScheme',\n                                    event: { name, value },\n                                })}\n                                row\n                            >\n                                <FormControlLabel\n                                    value={API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY}\n                                    control={(\n                                        <Radio\n                                            disabled={!haveMultiLevelSecurity\n                                                || isRestricted(['apim:api_create'], apiFromContext)}\n                                            color='primary'\n                                        />\n                                    )}\n                                    label='Mandatory'\n                                    labelPlacement='end'\n                                />\n                                <FormControlLabel\n                                    value='optional'\n                                    control={(\n                                        <Radio\n                                            disabled={!haveMultiLevelSecurity\n                                                || isRestricted(['apim:api_create'], apiFromContext)}\n                                            color='primary'\n                                        />\n                                    )}\n                                    label='Optional'\n                                    labelPlacement='end'\n                                />\n                            </RadioGroup>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.components.APISecurity.application.mandatory'\n                                    defaultMessage='Choose whether Application level security is mandatory or optional'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                        {(apiFromContext.apiType === API.CONSTS.API) && (\n                            <KeyManager\n                                api={api}\n                                configDispatcher={configDispatcher}\n                            />\n                        )}\n                        <AuthorizationHeader api={api} configDispatcher={configDispatcher} />\n                        <FormControl>\n                            {!hasResourceWithSecurity\n                            && (\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.APISecurity.api.unsecured'\n                                        defaultMessage='Application level security is not required since API\n                                        has no secured resources'\n                                    />\n                                </FormHelperText>\n                            )}\n                        </FormControl>\n                    </ExpansionPanelDetails>\n                </WrappedExpansionPanel>\n            </Grid>\n        </>\n    );\n}\n\nApplicationLevel.propTypes = {\n    configDispatcher: PropTypes.func.isRequired,\n    haveMultiLevelSecurity: PropTypes.bool.isRequired,\n    securityScheme: PropTypes.arrayOf(PropTypes.string).isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\nimport APIValidation from 'AppData/APIValidation';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\n\nexport default function AuthorizationHeader(props) {\n    const { api, configDispatcher } = props;\n    const [apiFromContext] = useAPI();\n    const [isHeaderNameValid, setIsHeaderNameValid] = useState(true);\n    let hasResourceWithSecurity;\n    if (apiFromContext.apiType === API.CONSTS.APIProduct) {\n        const apiList = apiFromContext.apis;\n        for (const apiInProduct in apiList) {\n            if (Object.prototype.hasOwnProperty.call(apiList, apiInProduct)) {\n                hasResourceWithSecurity = apiList[apiInProduct].operations.findIndex(\n                    (op) => op.authType !== 'None',\n                ) > -1;\n                if (hasResourceWithSecurity) {\n                    break;\n                }\n            }\n        }\n    } else {\n        hasResourceWithSecurity = apiFromContext.operations.findIndex((op) => op.authType !== 'None') > -1;\n    }\n    if (!hasResourceWithSecurity && api.authorizationHeader !== '') {\n        configDispatcher({ action: 'authorizationHeader', value: '' });\n    }\n\n    function validateHeader(value) {\n        const headerValidity = APIValidation.authorizationHeader.required()\n            .validate(value, { abortEarly: false }).error;\n        if (headerValidity === null) {\n            setIsHeaderNameValid(true);\n            configDispatcher({ action: 'saveButtonDisabled', value: false });\n        } else {\n            setIsHeaderNameValid(false);\n            configDispatcher({ action: 'saveButtonDisabled', value: true });\n        }\n    }\n\n    return (\n        <Grid container spacing={1} alignItems='center'>\n            <Grid item xs={11}>\n                <TextField\n                    disabled={isRestricted(['apim:api_create'], apiFromContext) || !hasResourceWithSecurity}\n                    id='outlined-name'\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.Configuration.auth.header.label'\n                            defaultMessage='Authorization Header'\n                        />\n                    )}\n                    value={hasResourceWithSecurity ? (api.authorizationHeader || ' ') : ''}\n                    error={!isHeaderNameValid}\n                    helperText={\n                        (!isHeaderNameValid)\n                        && (\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.AuthHeader.helper.text'\n                                defaultMessage='Authorization header name cannot contain spaces or special characters'\n                            />\n                        )\n                    }\n                    InputProps={{\n                        id: 'itest-id-headerName-input',\n                        onBlur: ({ target: { value } }) => {\n                            validateHeader(value);\n                        },\n                    }}\n                    margin='normal'\n                    variant='outlined'\n                    onChange={({ target: { value } }) => configDispatcher({ action: 'authorizationHeader', value })}\n                    style={{ display: 'flex' }}\n                />\n            </Grid>\n            <Grid item xs={1}>\n                <Tooltip\n                    title={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.Configuration.AuthHeader.tooltip'\n                            defaultMessage={\n                                ' The header name that is used to send the authorization '\n                                + 'information. \"Authorization\" is the default header.'\n                            }\n                        />\n                    )}\n                    aria-label='Auth Header'\n                    placement='right-end'\n                    interactive\n                >\n                    <HelpOutline />\n                </Tooltip>\n            </Grid>\n        </Grid>\n    );\n}\n\nAuthorizationHeader.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Certificates from 'AppComponents/Apis/Details/Endpoints/GeneralConfiguration/Certificates';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport WrappedExpansionPanel from 'AppComponents/Shared/WrappedExpansionPanel';\nimport Transports from 'AppComponents/Apis/Details/Configuration/components/Transports.jsx';\n\nimport {\n    API_SECURITY_MUTUAL_SSL,\n    API_SECURITY_MUTUAL_SSL_MANDATORY,\n    DEFAULT_API_SECURITY_OAUTH2,\n    API_SECURITY_BASIC_AUTH,\n    API_SECURITY_API_KEY,\n} from './apiSecurityConstants';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    bottomSpace: {\n        marginBottom: theme.spacing(4),\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n}));\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nfunction TransportLevel(props) {\n    const {\n        haveMultiLevelSecurity, securityScheme, configDispatcher, intl, id, api,\n    } = props;\n    const isMutualSSLEnabled = securityScheme.includes(API_SECURITY_MUTUAL_SSL);\n    const [apiFromContext] = useAPI();\n    const [clientCertificates, setClientCertificates] = useState([]);\n    const classes = useStyles();\n\n    /**\n     * Method to upload the certificate content by calling the rest api.\n     *\n     * @param {string} certificate The certificate needs to be associated with the API\n     * @param {string} policy The tier to be used for the certificate.\n     * @param {string} alias The alias of the certificate to be deleted.\n     *\n     * */\n    const saveClientCertificate = (certificate, policy, alias) => {\n        return API.addClientCertificate(id, certificate, policy, alias).then((resp) => {\n            if (resp.status === 201) {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Configuration.components.APISecurity.TranportLevel.certificate.add.success',\n                    defaultMessage: 'Certificate added successfully',\n                }));\n                const tmpCertificates = [...clientCertificates];\n                tmpCertificates.push({\n                    apiId: resp.obj.apiId,\n                    alias: resp.obj.alias,\n                    tier: resp.obj.tier,\n                });\n                setClientCertificates(tmpCertificates);\n            }\n        }).catch((error) => {\n            if (error.response) {\n                Alert.error(error.response.body.description);\n            } else {\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Configuration.components.APISecurity.TranportLevel.certificate.alias.error',\n                    defaultMessage: 'Something went wrong while adding the API certificate',\n                }));\n            }\n        });\n    };\n\n    /**\n     * Method to delete the selected certificate.\n     *\n     * @param {string} alias The alias of the certificate to be deleted.\n     * */\n    const deleteClientCertificate = (alias) => {\n        return API.deleteClientCertificate(alias, id).then((resp) => {\n            setClientCertificates(() => {\n                if (resp.status === 200) {\n                    return clientCertificates.filter((cert) => {\n                        return cert.alias !== alias;\n                    });\n                } else {\n                    return -1;\n                }\n            });\n            Alert.info(intl.formatMessage({\n                id: 'Apis.Details.Configuration.components.APISecurity.TranportLevel.certificate.delete.success',\n                defaultMessage: 'Certificate Deleted Successfully',\n            }));\n        }).catch((error) => {\n            if (error.response) {\n                Alert.error(error.response.body.description);\n            } else {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Configuration.components.APISecurity.TranportLevel.certificate.delete.error',\n                    defaultMessage: 'Error while deleting certificate',\n                }));\n            }\n        });\n    };\n\n    // Get the client certificates from backend.\n    useEffect(() => {\n        API.getAllClientCertificates(id).then((resp) => {\n            const { certificates } = resp.obj;\n            setClientCertificates(certificates);\n        }).catch((err) => {\n            console.error(err);\n            setClientCertificates([]);\n        });\n    }, []);\n\n    let mandatoryValue = 'optional';\n    // If not mutual ssl security is selected, no mandatory values should be pre-selected\n    if (!isMutualSSLEnabled) {\n        mandatoryValue = 'null';\n    } else if (\n        !(securityScheme.includes(DEFAULT_API_SECURITY_OAUTH2) || securityScheme.includes(API_SECURITY_BASIC_AUTH)\n            || securityScheme.includes(API_SECURITY_API_KEY))\n    ) {\n        mandatoryValue = API_SECURITY_MUTUAL_SSL_MANDATORY;\n    } else if (securityScheme.includes(API_SECURITY_MUTUAL_SSL_MANDATORY)) {\n        mandatoryValue = API_SECURITY_MUTUAL_SSL_MANDATORY;\n    }\n    return (\n        <>\n            <Grid item xs={12}>\n                <WrappedExpansionPanel className={classes.expansionPanel} id='transportLevel'>\n                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography className={classes.subHeading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Components.APISecurity.Components.\n                                    TransportLevel.transport.level.security'\n                                defaultMessage='Transport Level Security'\n                            />\n                        </Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                        <Transports api={api} configDispatcher={configDispatcher} securityScheme={securityScheme} />\n                        <FormControlLabel\n                            control={(\n                                <Checkbox\n                                    disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    checked={isMutualSSLEnabled}\n                                    onChange={({ target: { checked, value } }) => configDispatcher({\n                                        action: 'securityScheme',\n                                        event: { checked, value },\n                                    })}\n                                    value={API_SECURITY_MUTUAL_SSL}\n                                    color='primary'\n                                />\n                            )}\n                            label='Mutual SSL'\n                        />\n                        {isMutualSSLEnabled && (\n                            <FormControl component='fieldset'>\n                                <RadioGroup\n                                    aria-label='HTTP security SSL mandatory selection'\n                                    name={API_SECURITY_MUTUAL_SSL_MANDATORY}\n                                    value={mandatoryValue}\n                                    onChange={({ target: { name, value } }) => configDispatcher({\n                                        action: 'securityScheme',\n                                        event: { name, value },\n                                    })}\n                                    row\n                                >\n                                    <FormControlLabel\n                                        value={API_SECURITY_MUTUAL_SSL_MANDATORY}\n                                        control={(\n                                            <Radio\n                                                disabled={!haveMultiLevelSecurity\n                                                || isRestricted(['apim:api_create'], apiFromContext)}\n                                                color='primary'\n                                            />\n                                        )}\n                                        label='Mandatory'\n                                        labelPlacement='end'\n                                    />\n                                    <FormControlLabel\n                                        value='optional'\n                                        control={(\n                                            <Radio\n                                                disabled={!haveMultiLevelSecurity\n                                                || isRestricted(['apim:api_create'], apiFromContext)}\n                                                color='primary'\n                                            />\n                                        )}\n                                        label='Optional'\n                                        labelPlacement='end'\n                                    />\n                                </RadioGroup>\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.APISecurity.http.mandatory'\n                                        defaultMessage='Choose whether Transport level security is mandatory or\n                                        optional'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        )}\n                        {isMutualSSLEnabled && (\n                            // TODO:\n                            // This is half baked!!!\n                            // Refactor the Certificate component to share its capabilities in here and\n                            // endpoints page ~tmkb\n                            <Certificates\n                                isMutualSSLEnabled={isMutualSSLEnabled}\n                                certificates={clientCertificates}\n                                uploadCertificate={saveClientCertificate}\n                                deleteCertificate={deleteClientCertificate}\n                                apiId={id}\n                            />\n                        )}\n                    </ExpansionPanelDetails>\n                </WrappedExpansionPanel>\n            </Grid>\n        </>\n    );\n}\n\nTransportLevel.propTypes = {\n    configDispatcher: PropTypes.func.isRequired,\n    haveMultiLevelSecurity: PropTypes.bool.isRequired,\n    securityScheme: PropTypes.arrayOf(PropTypes.string).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    id: PropTypes.string.isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl((TransportLevel));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport {\n    Button,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Grid,\n    Icon,\n    TextField,\n    Typography,\n} from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport Dropzone from 'react-dropzone';\nimport Box from '@material-ui/core/Box';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\nimport APIValidation from 'AppData/APIValidation';\nimport SelectEndpoint from 'AppComponents/Apis/Details/Endpoints/GeneralConfiguration/SelectEndpoint';\nimport SelectPolicies from '../../../Create/Components/SelectPolicies';\n\nconst dropzoneStyles = {\n    border: '1px dashed #c4c4c4',\n    borderRadius: '5px',\n    cursor: 'pointer',\n    height: 75,\n    padding: '8px 0px',\n    position: 'relative',\n    textAlign: 'center',\n    width: '100%',\n    margin: '10px 0',\n};\n\nconst useStyles = makeStyles((theme) => ({\n    fileinput: {\n        display: 'none',\n    },\n    dropZoneWrapper: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        '& span.material-icons': {\n            color: theme.palette.primary.main,\n        },\n    },\n    uploadedFile: {\n        fontSize: 11,\n    },\n    certificatesHeader: {\n        fontWeight: 600,\n        marginTop: 20,\n    },\n    addCertificateBtn: {\n        borderColor: '#c4c4c4',\n        borderRadius: '8px',\n        borderStyle: 'dashed',\n        borderWidth: 'thin',\n    },\n    certificateList: {\n        maxHeight: '250px',\n        overflow: 'scroll',\n    },\n    certDetailsHeader: {\n        fontWeight: '600',\n    },\n    uploadCertDialogHeader: {\n        fontWeight: '600',\n    },\n}));\n\n/**\n * This component is used to upload the certificates\n * @param {any} props The input props.\n * @returns {any} The HTML representation of the Certificates.\n */\nexport default function UploadCertificate(props) {\n    const {\n        endpoints,\n        uploadCertificate,\n        isMutualSSLEnabled,\n        uploadCertificateOpen,\n        setUploadCertificateOpen,\n        aliasList,\n    } = props;\n    const [alias, setAlias] = useState('');\n    const [policy, setPolicy] = useState('');\n    const [endpoint, setEndpoint] = useState('');\n    const [isSaving, setSaving] = useState(false);\n    const [certificate, setCertificate] = useState({ name: '', content: {} });\n    const [isEndpointEmpty, setIsEndpointEmpty] = useState(false);\n    const [isPoliciesEmpty, setPoliciesEmpty] = useState(false);\n    const [aliasValidity, setAliasValidity] = useState();\n    const classes = useStyles();\n    const [isRejected, setIsRejected] = useState(false);\n\n    const closeCertificateUpload = () => {\n        setUploadCertificateOpen(false);\n        setAliasValidity();\n        setCertificate({ name: '', content: '' });\n        setAlias('');\n        setEndpoint('');\n        setPolicy('');\n    };\n\n    /**\n     * On change functionality to handle the policy dropdown\n     *\n     * @param {*} event\n     */\n    function handleOnChange(event) {\n        const { value } = event.target;\n        setPolicy(value);\n    }\n\n    /**\n     * Method to validate the policies.\n     * @param {string} value selected policy.\n     * */\n    const onValidate = (value) => {\n        setPoliciesEmpty(value === '');\n    };\n\n    /**\n     * Method to upload the certificate content by calling the rest api.\n     * */\n    const saveCertificate = () => {\n        setSaving(true);\n        if (isMutualSSLEnabled) {\n            uploadCertificate(certificate.content, policy, alias)\n                .then(closeCertificateUpload)\n                .finally(() => setSaving(false));\n        } else {\n            uploadCertificate(certificate.content, endpoint, alias)\n                .then(closeCertificateUpload)\n                .finally(() => setSaving(false));\n        }\n    };\n\n    /**\n     * Handled the file upload action of the dropzone.\n     *\n     * @param {array} file The accepted file list by the dropzone.\n     * */\n    const onDrop = (file) => {\n        const certificateFile = file[0];\n        const rejectedFiles = ['pem', 'txt', 'jks', 'key', 'ca-bundle'];\n        const extension = certificateFile.name.split('.');\n        if (rejectedFiles.includes(extension[1])) {\n            setIsRejected(true);\n        } else {\n            setIsRejected(false);\n        }\n        if (certificateFile) {\n            setCertificate({ name: certificateFile.name, content: certificateFile });\n        }\n    };\n\n    const handleEndpointOnChange = (value) => {\n        setEndpoint(value);\n        if (value) {\n            setIsEndpointEmpty(false);\n        } else {\n            setIsEndpointEmpty(true);\n        }\n    };\n\n    const handleAliasOnBlur = () => {\n        const aliasValidation = APIValidation.alias.required().validate(alias).error;\n        if (aliasValidation) {\n            setAliasValidity({ isValid: false, message: aliasValidation.details[0].message });\n        } else {\n            setAliasValidity({ isValid: true, message: '' });\n        }\n    };\n\n    const getHelperText = () => {\n        if (aliasValidity && !aliasValidity.isValid) {\n            return (aliasValidity.message);\n        } else if (aliasList && aliasList.includes(alias)) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.alias.exist.error'\n                    defaultMessage='Alias already exists'\n                />\n            );\n        } else {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.alias.default.message'\n                    defaultMessage='Alias for the Certificate'\n                />\n            );\n        }\n    };\n\n    const iff = (condition, then, otherwise) => (condition ? then : otherwise);\n    return (\n        <Dialog open={uploadCertificateOpen}>\n            <DialogTitle>\n                <Typography className={classes.uploadCertDialogHeader}>\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.uploadCertificate'\n                        defaultMessage='Upload Certificate'\n                    />\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <Grid>\n                    <div>\n                        {isMutualSSLEnabled ? (\n                            <SelectPolicies\n                                multiple={false}\n                                policies={policy}\n                                helperText='Select a throttling policy for the certificate'\n                                onChange={handleOnChange}\n                                required\n                                validate={onValidate}\n                            />\n                        )\n                            : (\n                                <SelectEndpoint\n                                    endpoints={endpoints}\n                                    onChange={handleEndpointOnChange}\n                                    endpoint={endpoint}\n                                    isEndpointEmpty={isEndpointEmpty}\n                                    required\n                                />\n                            )}\n                        <TextField\n                            required\n                            id='certificateAlias'\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.alias'\n                                    defaultMessage='Alias'\n                                />\n                            )}\n                            value={alias}\n                            placeholder='My Alias'\n                            onChange={(event) => setAlias(event.target.value)}\n                            onBlur={() => handleAliasOnBlur()}\n                            margin='normal'\n                            variant='outlined'\n                            error={\n                                (aliasValidity && !aliasValidity.isValid) || (aliasList && aliasList.includes(alias))\n                            }\n                            helperText={getHelperText()}\n                            fullWidth\n                            inputProps={{ maxLength: 45 }}\n                        />\n                        <Dropzone\n                            multiple={false}\n                            accept={\n                                'application/pkcs8,'\n                                    + 'application/pkcs10, application/pkix-crl,'\n                                    + 'application/pkcs7-mime,'\n                                    + 'application/x-x509-ca-cert,'\n                                    + 'application/x-x509-user-cert,'\n                                    + 'application/x-pkcs7-crl,'\n                                    + 'application/x-pkcs12,'\n                                    + 'application/x-pkcs7-certificates,'\n                                    + 'application/x-pkcs7-certreqresp,'\n                                    + '.p8, .p10, .cer, .cert, .p7c, .crt, .der, .p12, .pfx, .p7b, .spc, .p7r'\n                            }\n                            className={classes.dropzone}\n                            activeClassName={classes.acceptDrop}\n                            rejectClassName={classes.rejectDrop}\n                            onDrop={(dropFile) => {\n                                onDrop(dropFile);\n                            }}\n                        >\n                            {({ getRootProps, getInputProps }) => (\n                                <div {...getRootProps({ style: dropzoneStyles })}>\n                                    <input {...getInputProps()} />\n                                    <div className={classes.dropZoneWrapper}>\n                                        {certificate.name === '' ? (\n                                            <div>\n                                                <Icon style={{ fontSize: 56 }}>cloud_upload</Icon>\n                                                <Typography>\n                                                    <FormattedMessage\n                                                        id={\n                                                            'Apis.Details.Endpoints.GeneralConfiguration'\n                                                                + '.UploadCertificate.click.or.drop.to.upload.file'\n                                                        }\n                                                        defaultMessage={\n                                                            'Click or drag the certificate'\n                                                                + ' file to upload.'\n                                                        }\n                                                    />\n                                                </Typography>\n                                            </div>\n                                        ) : iff(\n                                            isRejected,\n                                            <div classNames={classes.uploadedFile}>\n                                                <InsertDriveFileIcon color='error' fontSize='large' />\n                                                <Box fontSize='h6.fontSize' color='error' fontWeight='fontWeightLight'>\n                                                    <Grid xs={12}>\n                                                        {certificate.name}\n                                                    </Grid>\n                                                    <Grid xs={12}>\n                                                        <Typography variant='caption' color='error'>\n                                                            <FormattedMessage\n                                                                id={\n                                                                    'Apis.Details.Endpoints.GeneralConfiguration'\n                                                            + '.UploadCertificate.invalid.file'\n                                                                }\n                                                                defaultMessage='Invalid file type'\n                                                            />\n                                                        </Typography>\n                                                    </Grid>\n                                                </Box>\n                                            </div>,\n                                            <div className={classes.uploadedFile}>\n                                                <InsertDriveFileIcon color='primary' fontSize='large' />\n                                                <Box fontSize='h6.fontSize' fontWeight='fontWeightLight'>\n                                                    <Typography>\n                                                        {certificate.name}\n                                                    </Typography>\n                                                </Box>\n                                            </div>,\n                                        )}\n                                    </div>\n                                </div>\n                            )}\n                        </Dropzone>\n                    </div>\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={closeCertificateUpload}>\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.cancel.button'\n                        defaultMessage='Close'\n                    />\n                </Button>\n                <Button\n                    onClick={saveCertificate}\n                    variant='contained'\n                    color='primary'\n                    autoFocus\n                    disabled={\n                        alias === '' || (aliasValidity && !aliasValidity.isValid)\n                            || (!isMutualSSLEnabled && endpoint === '')\n                            || certificate.name === ''\n                            || (isMutualSSLEnabled && isPoliciesEmpty)\n                            || isSaving || (aliasList && aliasList.includes(alias)) || isRejected\n                    }\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.config.save.button'\n                        defaultMessage='Save'\n                    />\n                    {isSaving && <CircularProgress size={24} />}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nUploadCertificate.defaultProps = {\n    isMutualSSLEnabled: false,\n    endpoints: [],\n};\n\nUploadCertificate.propTypes = {\n    certificates: PropTypes.shape({}).isRequired,\n    uploadCertificate: PropTypes.func.isRequired,\n    isMutualSSLEnabled: PropTypes.bool,\n    setUploadCertificateOpen: PropTypes.func.isRequired,\n    uploadCertificateOpen: PropTypes.bool.isRequired,\n    endpoints: PropTypes.shape([]),\n    aliasList: PropTypes.shape([]).isRequired,\n};\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React from 'react';\nimport { MenuItem, TextField } from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nexport default function SelectEndpoint(props) {\n    const {\n        onChange,\n        endpoint,\n        isEndpointEmpty,\n        endpoints,\n    } = props;\n    const iff = (condition, then, otherwise) => (condition ? then : otherwise);\n    return (\n        <TextField\n            autoFocus\n            error={isEndpointEmpty || endpoints.length === 0}\n            helperText={endpoints.length === 0 ? (\n                <FormattedMessage\n                    id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.endpoint.empty.error'\n                    defaultMessage='Save endpoints before adding the Certificate'\n                />\n            ) : iff(isEndpointEmpty, <FormattedMessage\n                id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.endpoint.error'\n                defaultMessage='Endpoint should not be empty'\n            />, <FormattedMessage\n                id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.endpoint.helpertext'\n                defaultMessage='Endpoint for the Certificate'\n            />)}\n            required\n            id='certificateEndpoint'\n            label={(\n                <FormattedMessage\n                    id='Apis.Details.Endpoints.GeneralConfiguration.UploadCertificate.endpoint'\n                    defaultMessage='Endpoint'\n                />\n            )}\n            value={endpoint}\n            placeholder='Endpoint'\n            onChange={(event) => onChange(event.target.value)}\n            margin='normal'\n            variant='outlined'\n            fullWidth\n            select\n        >\n            {endpoints !== null && endpoints.map((ep) => {\n                if (ep) {\n                    return (<MenuItem value={ep.url}>{ep.url}</MenuItem>);\n                }\n                return null;\n            })}\n        </TextField>\n    );\n}\n\nSelectEndpoint.propTypes = {\n    endpoints: PropTypes.shape({}).isRequired,\n    onChange: PropTypes.func.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    endpoint: PropTypes.string.isRequired,\n    isEndpointEmpty: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { FormattedMessage } from 'react-intl';\nimport API from 'AppData/api';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    mandatoryStar: {\n        color: theme.palette.error.main,\n        marginLeft: theme.spacing(0.1),\n    },\n}));\n\n/**\n * Trottling Policies dropdown selector used in minimized API Create form\n * @export\n * @param {*} props\n * @returns {React.Component}\n */\nexport default function SelectPolicies(props) {\n    const {\n        onChange, policies: selectedPolicies, multiple, helperText, isAPIProduct, validate,\n    } = props;\n    const [policies, setPolicies] = useState({});\n    const classes = useStyles();\n    useEffect(() => {\n        API.policies('subscription').then((response) => setPolicies(response.body));\n    }, []);\n    const handleValidateAndChange = ({ target: { value, name } }) => {\n        validate('policies', value);\n        onChange({ target: { name, value } });\n    };\n    if (!policies.list) {\n        return <CircularProgress />;\n    } else {\n        return (\n            <TextField\n                fullWidth\n                select\n                label={(\n                    <>\n                        <FormattedMessage\n                            id='Apis.Create.Components.SelectPolicies.business.plans'\n                            defaultMessage='Business plan(s)'\n                        />\n                        {isAPIProduct && (<sup className={classes.mandatoryStar}>*</sup>)}\n                    </>\n                )}\n                value={selectedPolicies}\n                name='policies'\n                onChange={handleValidateAndChange}\n                SelectProps={{\n                    multiple,\n                    renderValue: (selected) => (Array.isArray(selected) ? selected.join(', ') : selected),\n                }}\n                helperText={isAPIProduct ? helperText + 'API Product' : helperText + 'API'}\n                margin='normal'\n                variant='outlined'\n                InputProps={{\n                    id: 'itest-id-apipolicies-input',\n                }}\n            >\n                {policies.list.map((policy) => (\n                    <MenuItem\n                        dense\n                        disableGutters={multiple}\n                        id={policy.name}\n                        key={policy.name}\n                        value={policy.displayName}\n                    >\n                        {multiple && <Checkbox color='primary' checked={selectedPolicies.includes(policy.name)} />}\n                        <ListItemText primary={policy.displayName} secondary={policy.description} />\n                    </MenuItem>\n                ))}\n            </TextField>\n        );\n    }\n}\n\nSelectPolicies.defaultProps = {\n    policies: [],\n    multiple: true,\n    required: false,\n    isAPIProduct: PropTypes.bool.isRequired,\n    helperText: 'Select one or more throttling policies for the ',\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Typography from '@material-ui/core/Typography';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { API_SECURITY_MUTUAL_SSL } from './APISecurity/components/apiSecurityConstants';\n\nconst useStyles = makeStyles((theme) => ({\n    error: {\n        color: theme.palette.error.main,\n    },\n}));\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function Transports(props) {\n    const { api, configDispatcher, securityScheme } = props;\n    const [apiFromContext] = useAPI();\n    const classes = useStyles();\n    const isMutualSSLEnabled = securityScheme.includes(API_SECURITY_MUTUAL_SSL);\n    const Validate = () => {\n        if (api.transport && api.transport.length === 0) {\n            return (\n                <Typography>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.transport.empty'\n                        defaultMessage='Please select at least one transport!'\n                    />\n                </Typography>\n            );\n        } else if (isMutualSSLEnabled && !api.transport.includes('https')) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Configuration.components.transport.sslHttps'\n                    defaultMessage='Please select Https as transport with mutual SSL!'\n                />\n            );\n        }\n        return null; // No errors :-)\n    };\n    return (\n        <Grid container spacing={1} alignItems='flex-start'>\n            <Grid item>\n                <FormControl component='fieldset'>\n                    <FormLabel component='legend'>\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.Configuration.transports'\n                            defaultMessage='Transports'\n                        />\n                    </FormLabel>\n                    <FormGroup style={{ display: 'flow-root' }}>\n                        <FormControlLabel\n                            control={(\n                                <Checkbox\n                                    disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    checked={api.transport\n                                        ? api.transport.includes('http') : null}\n                                    onChange={({ target: { checked } }) => configDispatcher({\n                                        action: 'transport',\n                                        event: { checked, value: 'http' },\n                                    })}\n                                    value='http'\n                                    color='primary'\n                                />\n                            )}\n                            label='HTTP'\n                        />\n                        <FormControlLabel\n                            control={(\n                                <Checkbox\n                                    disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                    checked={api.transport\n                                        ? api.transport.includes('https') : null}\n                                    onChange={({ target: { checked } }) => configDispatcher({\n                                        action: 'transport',\n                                        event: { checked, value: 'https' },\n                                    })}\n                                    value='https'\n                                    color='primary'\n                                />\n                            )}\n                            label='HTTPS'\n                        />\n                    </FormGroup>\n                </FormControl>\n            </Grid>\n            <Grid item>\n                <Tooltip\n                    title={(\n                        <FormattedMessage\n                            id='Apis.Details.Configuration.components.Transports.tooltip'\n                            defaultMessage={\n                                'API will be exposed in selected transport(s) in the gateway(s)'\n                                + ' If Mutual SSL option is selected, a trusted client'\n                                + ' certificate should be presented to access the API'\n                            }\n                        />\n                    )}\n                    aria-label='Transports'\n                    placement='right-end'\n                    interactive\n                >\n                    <HelpOutline />\n                </Tooltip>\n            </Grid>\n            <Grid item>\n                <span className={classes.error}>\n                    <Validate />\n                </span>\n            </Grid>\n        </Grid>\n    );\n}\n\nTransports.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport EditRounded from '@material-ui/icons/EditRounded';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Container from '@material-ui/core/Container';\nimport Api from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { Progress } from 'AppComponents/Shared';\nimport UpdateComplexity from '../../QueryAnalysis/UpdateComplexity';\n\nconst useStyles = makeStyles(() => ({\n    content: {\n        flexGrow: 1,\n    },\n    itemWrapper: {\n        width: 'auto',\n        display: 'flex',\n    },\n    FormControl: {\n        padding: 10,\n        width: '100%',\n        marginTop: 0,\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    subTitle: {\n        marginTop: 20,\n    },\n    subTitleDescription: {\n        marginBottom: 10,\n    },\n    flowWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: 10,\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n    heading: {\n        margin: 'auto',\n        color: 'rgba(0, 0, 0, 0.40)',\n    },\n    paper: {\n        padding: '10px 24px',\n        width: 'auto',\n    },\n    editIcon: {\n        position: 'absolute',\n        top: 8,\n        right: 0,\n    },\n    dialogPaper: {\n        minHeight: '95vh',\n        maxHeight: '95vh',\n        minWidth: '150vh',\n        maxWidth: '150vh',\n    },\n}));\n\n/**\n * The base component of the GraphQL Query Analysis.\n * @param {any} props The props passed to the layout\n * @returns {any} HTML representation.\n */\nexport default function GraphQLQueryAnalysis(props) {\n    const {\n        api,\n        setUpdateComplexityList,\n    } = props;\n    const [open, setOpen] = useState(false);\n    const classes = useStyles();\n    const [list, setList] = useState(null);\n    const [typelist, setTypeList] = useState([]);\n\n    /**\n     * Get Summation of field's complexity value of all types\n     * @param {Object of array} List\n     */\n    function findSummation(List) {\n        const type = [...new Set(List.map((respond) => respond.type))];\n        const array = [];\n        type.map((respond) => {\n            const ob = {};\n            ob.type = respond;\n            ob.summation = 0;\n            List.map((obj) => {\n                if (obj.type === respond) {\n                    ob.summation += obj.complexityValue;\n                }\n                return ob;\n            });\n            array.push(ob);\n            return array;\n        });\n        setTypeList(array);\n    }\n\n    /**\n     * Set the Initial Complexity Values to the field's\n     */\n\n    function setInitialComplexity() {\n        const apiId = api.id;\n        const apiClient = new Api();\n        const promisedComplexityType = apiClient.getGraphqlPoliciesComplexityTypes(apiId);\n        promisedComplexityType\n            .then((res) => {\n                const array = [];\n                res.typeList.map((respond) => {\n                    respond.fieldList.map((ob) => {\n                        const obj = {};\n                        obj.type = respond.type;\n                        obj.field = ob;\n                        obj.complexityValue = 1;\n                        array.push(obj);\n                        return ob;\n                    });\n                    return array;\n                });\n                setList(array);\n                findSummation(array);\n            });\n    }\n\n    useEffect(() => {\n        const apiId = api.id;\n        const apiClient = new Api();\n        const promisedComplexity = apiClient.getGraphqlPoliciesComplexity(apiId);\n        promisedComplexity\n            .then((res) => {\n                setList(res.list);\n                findSummation(res.list);\n                if (res.list.length === 0) {\n                    setInitialComplexity();\n                }\n            })\n            .catch((error) => {\n                const { response } = error;\n                if (response.body) {\n                    const { description } = response.body;\n                    Alert.error(description);\n                }\n            });\n    }, []);\n\n    /**\n    * Edit Custom Complexity Values\n    */\n    function editComplexity() {\n        setUpdateComplexityList(list);\n        findSummation(list);\n        setOpen(false);\n    }\n    /**\n     * set open state of the dialog box\n     */\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    if (list === null) {\n        return <Progress />;\n    }\n\n    return (\n        <>\n            <Paper className={classes.paper} spacing={2}>\n                <Grid container spacing={2} alignItems='flex-start'>\n                    <Grid item md={12} style={{ position: 'relative', display: 'inline-flex' }}>\n                        <Typography className={classes.subHeading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.Configurartion.components.QueryAnalysis'\n                                defaultMessage='Query Analysis'\n                            />\n                        </Typography>\n                        <Typography className={classes.heading}>\n\n                            <span>update complexity</span>\n\n                        </Typography>\n                        <Button\n                            className={classes.editIcon}\n                            size='small'\n                            onClick={handleClickOpen}\n                        >\n                            <EditRounded />\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Paper>\n            <Dialog\n                classes={{ paper: classes.dialogPaper }}\n                open={open}\n                aria-labelledby='responsive-dialog-title'\n            >\n                <DialogTitle id='responsive-dialog-title'>\n                    <Typography className={classes.subHeading} variant='h4'>\n                        <FormattedMessage\n                            id='Apis.Details.Configurartion.components.QueryAnalysis.edit'\n                            defaultMessage='Edit Complexity Values'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent dividers>\n                    <DialogContentText>\n                        <Container fixed>\n                            <UpdateComplexity\n                                list={list}\n                                setList={setList}\n                                typelist={typelist}\n                            />\n                        </Container>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Grid item>\n                        <Button\n                            variant='contained'\n                            color='primary'\n                            onClick={editComplexity}\n                            className={classes.saveButton}\n                        >\n\n                            <FormattedMessage\n                                id='Apis.Details.QyeryAnalysis.UpdateComplexity.save'\n                                defaultMessage='Set'\n                            />\n\n                        </Button>\n                    </Grid>\n                    <Button onClick={handleClose} color='primary'>\n                        <FormattedMessage\n                            id='Apis.Details.Configurartion.components.QueryAnalysis.cancle.btn'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n\nGraphQLQueryAnalysis.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    setUpdateComplexityList: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TextField from '@material-ui/core/TextField';\nimport TableCell from '@material-ui/core/TableCell';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport TableRow from '@material-ui/core/TableRow';\nimport PropTypes from 'prop-types';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport Box from '@material-ui/core/Box';\n\nconst useStyles = makeStyles((theme) => ({\n    searchWrapper: {\n        width: '100%',\n        marginBottom: theme.spacing(2),\n    },\n}));\n\n/**\n *\n * @param {any} props The props passed to the layout\n * @returns {any} HTML representation.\n */\nexport default function UpdateComplexity(props) {\n    const classes = useStyles();\n    const [filterKeyWord, setFilter] = useState('');\n    const {\n        setList, typelist, list,\n    } = props;\n\n    /**\n     * Filter the information by Types.\n     */\n\n    const setFilterByKeyWord = (event) => {\n        setFilter(event.target.value.toLowerCase());\n    };\n\n    return (\n        <>\n            <Grid item md={2}>\n                <Box mt={4} pb={2}>\n                    <div className={classes.searchWrapper}>\n                        <TextField\n                            id='outlined-full-width'\n                            label='Type'\n                            placeholder='Search By Types'\n                            onChange={(e) => setFilterByKeyWord(e, typelist)}\n                            fullWidth\n                            variant='outlined'\n                            InputLabelProps={{\n                                shrink: true,\n                            }}\n                        />\n                    </div>\n                </Box>\n            </Grid>\n            <Grid item md={12}>\n                <Table stickyHeader>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>\n                                <Typography variant='subtitle2'>\n                                    <FormattedMessage\n                                        id='Apis.Details.QueryAnalysis.UpdateComplexity.typeName'\n                                        defaultMessage='Type'\n                                    />\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography variant='subtitle2'>\n                                    <FormattedMessage\n                                        id='Apis.Details.QueryAnalysis.UpdateComplexity.fieldcomplexity'\n                                        defaultMessage='Fields'\n                                    />\n                                </Typography>\n                            </TableCell>\n                            <TableCell>\n                                <Typography variant='subtitle2'>\n                                    <FormattedMessage\n                                        id='Apis.Details.QueryAnalysis.UpdateComplexity.fieldcomplexitysum'\n                                        defaultMessage='Sum of the Complexity'\n                                    />\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {typelist.filter(\n                            (item) => item.type.toLowerCase().includes(filterKeyWord),\n                        ).map((typename) => {\n                            return (\n                                <TableRow style={{ borderStyle: 'hidden' }}>\n                                    <TableCell>\n                                        <Typography variant='body1'>\n                                            {typename.type}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <ExpansionPanel>\n                                            <ExpansionPanelSummary\n                                                expandIcon={<ExpandMoreIcon />}\n                                                aria-controls='panel1a-content'\n                                                id='panel1a-header'\n                                            />\n                                            <ExpansionPanelDetails>\n                                                <Grid item md={12}>\n                                                    <Table>\n                                                        <TableRow>\n                                                            <TableCell>\n                                                                <b>Field</b>\n                                                            </TableCell>\n                                                            <TableCell>\n                                                                <b>ComplexityValue</b>\n                                                            </TableCell>\n                                                        </TableRow>\n                                                        {list.map((respond, index) => ((respond.type === typename.type)\n                                                     && (\n                                                         <TableRow>\n                                                             <TableCell>\n                                                                 {respond.field}\n                                                             </TableCell>\n                                                             <TableCell>\n                                                                 <TextField\n                                                                     id='complexityValue'\n                                                                     label='complexityValue'\n                                                                     margin='normal'\n                                                                     variant='outlined'\n                                                                     value={respond.complexityValue}\n                                                                     onChange={(event) => {\n                                                                         const newArr = [...list];\n                                                                         newArr[index] = {\n                                                                             type: respond.type,\n                                                                             field: respond.field,\n                                                                             complexityValue: +event.target.value,\n                                                                         };\n                                                                         setList(newArr);\n                                                                     }}\n                                                                 />\n                                                             </TableCell>\n                                                         </TableRow>\n                                                     )))}\n                                                    </Table>\n                                                </Grid>\n                                            </ExpansionPanelDetails>\n                                        </ExpansionPanel>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography variant='body1'>\n                                            {typename.summation}\n                                        </Typography>\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </Grid>\n        </>\n    );\n}\n\nUpdateComplexity.propTypes = {\n    setList: PropTypes.func.isRequired,\n    list: PropTypes.arrayOf(\n        PropTypes.shape({\n            type: PropTypes.string,\n            field: PropTypes.string,\n            complexityValue: PropTypes.number,\n        }),\n    ).isRequired,\n    typelist: PropTypes.arrayOf(\n        PropTypes.shape({\n            type: PropTypes.string,\n            summation: PropTypes.number,\n        }),\n    ).isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useReducer, useEffect, useState, useCallback,\n} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport cloneDeep from 'lodash.clonedeep';\nimport isEmpty from 'lodash/isEmpty';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Banner from 'AppComponents/Shared/Banner';\nimport API from 'AppData/api';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport PropTypes from 'prop-types';\nimport { isRestricted } from 'AppData/AuthManager';\nimport AsyncOperation from '../Resources/components/AsyncOperation';\nimport GroupOfOperations from '../Resources/components/operationComponents/asyncapi/GroupOfOperations';\nimport AddOperation from '../Resources/components/AddOperation';\nimport SubscriptionConfig from '../Resources/components/operationComponents/asyncapi/SubscriptionConfig';\nimport { extractAsyncAPIPathParameters } from '../Resources/operationUtils';\nimport SaveOperations from '../Resources/components/SaveOperations';\n\nconst verbMap = {\n    sub: 'subscribe',\n    pub: 'publish',\n};\n\n/**\n * This component handles the Resource page in API details though it's written in a sharable way\n * that anyone could use this to render resources in anywhere else if needed.\n *\n * @export\n * @returns {React.Component} @inheritdoc\n */\nexport default function Topics(props) {\n    const {\n        disableUpdate,\n        disableAddOperation,\n    } = props;\n\n    const [api, updateAPI] = useAPI();\n    const [pageError, setPageError] = useState(false);\n    const [sharedScopes, setSharedScopes] = useState();\n    const [sharedScopesByName, setSharedScopesByName] = useState();\n    const [asyncAPISpec, setAsyncAPISpec] = useState({});\n    const [securityDefScopes, setSecurityDefScopes] = useState({});\n    const isAsyncAPI = api.type === 'WEBSUB' || api.type === 'WS' || api.type === 'SSE';\n    const [markedOperations, setSelectedOperation] = useState({});\n\n    /**\n     *\n     * @param {*} spec\n     * @param {*} ref\n     */\n    function getRefTarget(spec, ref) {\n        const arr = ref.split('/');\n        const i = (arr[0] === '#') ? 1 : 0;\n        let target = spec;\n        for (let j = i; j < arr.length; j++) {\n            target = target[arr[j]];\n        }\n        return target;\n    }\n\n    /**\n     *\n     * @param {*} spec\n     * @param {*} parent\n     */\n    function resolveSpec(spec, source) {\n        if (typeof source === 'object') {\n            let o = {};\n            Object.entries(source).forEach(([k, v]) => {\n                if (v !== null) {\n                    if (k !== '$ref') {\n                        o[k] = resolveSpec(spec, v);\n                    } else {\n                        const resolvedRef = resolveSpec(spec, getRefTarget(spec, v));\n                        o = { ...o, ...resolvedRef };\n                    }\n                }\n            });\n            return o;\n        }\n        return source;\n    }\n\n    /**\n     *\n     * @param {*} state\n     * @param {*} configAction\n     */\n    function websubSubscriptionConfigReducer(state, configAction) {\n        const { action, value } = configAction;\n        const nextState = { ...state };\n        switch (action) {\n            case 'enable':\n                nextState.enable = value;\n                if (!value) {\n                    nextState.secret = '';\n                }\n                break;\n            case 'signingAlgorithm':\n            case 'signatureHeader':\n            case 'secret':\n                nextState[action] = value;\n                break;\n            default:\n                return nextState;\n        }\n        return nextState;\n    }\n    const initialWebsubSubscriptionConfig = api.websubSubscriptionConfiguration || {\n        enable: false,\n        signingAlgorithm: '',\n        signatureHeader: '',\n        secret: '',\n    };\n\n    const [websubSubscriptionConfiguration, websubSubscriptionConfigDispatcher] = useReducer(\n        websubSubscriptionConfigReducer, initialWebsubSubscriptionConfig,\n    );\n\n    /**\n     *\n     *\n     * @param {*} currenPaths\n     * @param {*} action\n     */\n    function operationsReducer(currentOperations, operationAction) {\n        const { action, data } = operationAction;\n        const { target, verb, value } = data || {};\n        const addedOperations = cloneDeep(currentOperations);\n        let updatedOperation;\n        if (target) {\n            updatedOperation = cloneDeep(currentOperations[target]);\n        }\n\n        switch (action) {\n            case 'init':\n                setSelectedOperation({});\n                return data || asyncAPISpec.channels;\n            case 'description':\n                updatedOperation[action] = value;\n                return {\n                    ...currentOperations,\n                    [target]: { ...currentOperations[target], description: updatedOperation.description },\n                };\n            case 'uriMapping':\n                return {\n                    ...currentOperations,\n                    [target]: {\n                        ...currentOperations[target],\n                        [verb]: {\n                            ...currentOperations[target][verb],\n                            'x-uri-mapping': value,\n                        },\n                    },\n                };\n            case 'authType':\n                updatedOperation['x-auth-type'] = value ? 'Any' : 'None';\n                return {\n                    ...currentOperations,\n                    [target]: { ...currentOperations[target], 'x-auth-type': updatedOperation['x-auth-type'] },\n                };\n            case 'add':\n                // If target is not there add an empty object\n                if (!addedOperations[data.target]) {\n                    addedOperations[data.target] = {};\n                }\n                addedOperations[data.target].parameters = extractAsyncAPIPathParameters(data.target);\n                // eslint-disable-next-line no-case-declarations\n                let alreadyExistCount = 0;\n                for (let currentVerb of data.verbs) {\n                    currentVerb = verbMap[currentVerb];\n                    if (addedOperations[data.target][currentVerb]) {\n                        const message = `Operation already exist with ${data.target} and ${currentVerb}`;\n                        Alert.warning(message);\n                        console.warn(message);\n                        alreadyExistCount++;\n                    } else {\n                        addedOperations[data.target][currentVerb] = { };\n                    }\n                }\n                if (alreadyExistCount === data.verbs.length) {\n                    Alert.error('Operation(s) already exist!');\n                    return currentOperations;\n                }\n                return addedOperations;\n            case 'parameter':\n                updatedOperation.parameters = updatedOperation.parameters || { };\n                updatedOperation.parameters[value.name] = { ...value };\n                delete updatedOperation.parameters[value.name].name;\n                return {\n                    ...currentOperations,\n                    [target]: { ...currentOperations[target], parameters: updatedOperation.parameters },\n                };\n            case 'addPayloadProperty':\n                updatedOperation[verb].message = updatedOperation[verb].message || { };\n                updatedOperation[verb].message.payload = updatedOperation[verb].message.payload || { };\n                updatedOperation[verb].message.payload.type = 'object';\n                updatedOperation[verb].message.payload.properties = updatedOperation[verb].message.payload.properties\n                    || { };\n                updatedOperation[verb].message.payload.properties[value.name] = {\n                    description: value.description,\n                    type: value.type,\n                };\n                break;\n            case 'deletePayloadProperty':\n                delete updatedOperation[verb].message.payload.properties[value];\n                break;\n            case 'payloadProperty':\n                updatedOperation[verb].message.payload.properties[value.name] = value;\n                break;\n            case 'scopes': {\n                const defValue = value[0];\n                updatedOperation[verb]['x-scopes'] = [];\n                for (let i = 0; i < defValue.length; i++) {\n                    updatedOperation[verb]['x-scopes'].push(defValue[i]);\n                }\n\n                for (const selectedScope of defValue) {\n                    if (selectedScope\n                        && !securityDefScopes[selectedScope]\n                        && securityDefScopes[selectedScope] !== '') {\n                        let scopeDescription = '';\n                        if (selectedScope in sharedScopesByName) {\n                            if (sharedScopesByName[selectedScope].scope.description !== null) {\n                                scopeDescription = sharedScopesByName[selectedScope].scope.description;\n                            }\n                            securityDefScopes[selectedScope] = scopeDescription;\n                        }\n                        setSecurityDefScopes(securityDefScopes);\n                    }\n                }\n                break;\n            }\n            default:\n                return currentOperations;\n        }\n        return {\n            ...currentOperations,\n            [target]: { ...currentOperations[target], [verb]: updatedOperation[verb] },\n        };\n    }\n    const [operations, operationsDispatcher] = useReducer(operationsReducer, {});\n\n    /**\n     *\n     *\n     * @param {*} operation\n     * @param {*} checked\n     */\n    function onOperationSelectM(operation, checked) {\n        const { target, verb } = operation;\n        setSelectedOperation((currentSelections) => {\n            const nextSelectedOperations = cloneDeep(currentSelections);\n            if (!nextSelectedOperations[target]) {\n                nextSelectedOperations[target] = {};\n            }\n            if (checked) {\n                nextSelectedOperations[target][verb] = checked;\n            } else {\n                delete nextSelectedOperations[target][verb];\n            }\n            if (isEmpty(nextSelectedOperations[target])) {\n                delete nextSelectedOperations[target];\n            }\n            return nextSelectedOperations;\n        });\n    }\n    const onMarkAsDelete = useCallback(onOperationSelectM, [setSelectedOperation]);\n\n    /**\n     *\n     * @param {*} spec\n     */\n    function verifySecurityScheme(spec) {\n        /* eslint-disable no-param-reassign */\n        spec.components = spec.components || {};\n        spec.components.securitySchemes = spec.components.securitySchemes || {};\n        spec.components.securitySchemes.oauth2 = spec.components.securitySchemes.oauth2 || { type: 'oauth2' };\n        spec.components.securitySchemes.oauth2.flows = spec.components.securitySchemes.oauth2.flows || {};\n        spec.components.securitySchemes.oauth2.flows.implicit = spec.components.securitySchemes.oauth2.flows.implicit\n            || {};\n        spec.components.securitySchemes.oauth2.flows.implicit.scopes = spec.components.securitySchemes.oauth2.flows\n            .implicit.scopes || {};\n        /* eslint-enable no-param-reassign */\n    }\n\n    /**\n     * This method sets the securityDefinitionScopes from the spec\n     * @param {Object} spec The original swagger content.\n     */\n    function setSecurityDefScopesFromSpec(spec) {\n        verifySecurityScheme(spec);\n        setSecurityDefScopes(cloneDeep(spec.components.securitySchemes.oauth2.flows.implicit.scopes));\n    }\n\n    /**\n     * This method sets the scopes of the spec from the securityDefinitionScopes\n     */\n    function setSpecScopesFromSecurityDefScopes() {\n        verifySecurityScheme(asyncAPISpec);\n        asyncAPISpec.components.securitySchemes.oauth2.flows.implicit.scopes = securityDefScopes;\n    }\n\n    /**\n     *\n     * @param {*} rawSpec The original swagger content.\n     * @returns {null}\n     */\n    function resolveAndUpdateSpec(rawSpec) {\n        const resolvedChannels = resolveSpec(rawSpec, rawSpec);\n        const resolvedSpec = { ...rawSpec, channels: resolvedChannels.channels };\n        operationsDispatcher({ action: 'init', data: resolvedSpec.channels });\n        setAsyncAPISpec(resolvedSpec);\n        setSecurityDefScopesFromSpec(rawSpec);\n    }\n\n    /**\n     *\n     * Update the asyncapi using /asyncapi PUT operation and then fetch the updated API Object doing a apis/{api-uuid}\n     * GET\n     * @param {JSON} spec Updated full AsyncAPI spec ready to PUT\n     * @returns {Promise} Promise resolving to updated API object\n     */\n    function updateAsyncAPIDefinition(spec) {\n        return api\n            .updateAsyncAPIDefinition(spec)\n            .then((response) => resolveAndUpdateSpec(response.body))\n            .then(updateAPI)\n            .catch((error) => {\n                console.error(error);\n                if (error.response) {\n                    setPageError(error.response.body);\n                } else {\n                    Alert.error('Error while updating the definition');\n                }\n            });\n    }\n\n    /**\n     *\n     * This method modifies the security definition scopes by removing the scopes which are not present\n     * in operations and which are shared scopes\n     * @param {Array} apiOperations Operations list\n     */\n    function updateSecurityDefinition(apiOperations) {\n        Object.keys(securityDefScopes).forEach((key) => {\n            let isScopeExistsInOperation = false;\n            for (const [, verbs] of Object.entries(apiOperations)) {\n                for (const [, verbInfo] of Object.entries(verbs)) {\n                    // Checking if the scope resides in the operation\n                    for (const secDef of verbInfo.security || []) {\n                        if (secDef\n                            && secDef.default\n                            && secDef.default.includes(key)) {\n                            isScopeExistsInOperation = true;\n                            break;\n                        }\n                    }\n\n                    if (isScopeExistsInOperation) {\n                        break;\n                    }\n                }\n                if (isScopeExistsInOperation) {\n                    break;\n                }\n            }\n        });\n        setSecurityDefScopes(securityDefScopes);\n    }\n\n    /**\n     *\n     * Save the OpenAPI changes using REST API, type parameter is required to\n     * identify the locally created data structured, i:e type `operation` will assume that `data` contains the\n     * object structure of locally created operation object which is a combination of REST API\n     * response `operations` field and OpenAPI spec operation information\n     * @param {String} type Type of data object\n     * @param {Object} data Data object\n     * @returns {Promise|null} A promise object which resolve to Swagger PUT response body.\n     */\n    function updateAsyncAPI() {\n        const copyOfOperations = cloneDeep(operations);\n        for (const [target, verbs] of Object.entries(markedOperations)) {\n            for (const verb of Object.keys(verbs)) {\n                delete copyOfOperations[target][verb];\n                if (!copyOfOperations[target].publish && !copyOfOperations[target].subscribe) {\n                    delete copyOfOperations[target];\n                }\n            }\n        }\n\n        updateSecurityDefinition(copyOfOperations);\n        setSpecScopesFromSecurityDefScopes();\n        if (websubSubscriptionConfiguration !== api.websubSubscriptionConfiguration) {\n            return updateAPI({ websubSubscriptionConfiguration })\n                .catch((error) => {\n                    console.error(error);\n                    Alert.error('Error while updating the API');\n                })\n                .then(() => updateAsyncAPIDefinition({ ...asyncAPISpec, channels: copyOfOperations }));\n        } else {\n            return updateAsyncAPIDefinition({ ...asyncAPISpec, channels: copyOfOperations });\n        }\n    }\n\n    useEffect(() => {\n        if (api.apitype !== 'APIProduct') {\n            API.getAllScopes()\n                .then((response) => {\n                    if (response.body && response.body.list) {\n                        const sharedScopesList = [];\n                        const sharedScopesByNameList = {};\n                        const shared = true;\n                        for (const scope of response.body.list) {\n                            const modifiedScope = {};\n                            modifiedScope.scope = scope;\n                            modifiedScope.shared = shared;\n                            sharedScopesList.push(modifiedScope);\n                            sharedScopesByNameList[scope.name] = modifiedScope;\n                        }\n                        setSharedScopes(sharedScopesList);\n                        setSharedScopesByName(sharedScopesByNameList);\n                    }\n                });\n        }\n    }, []);\n\n    useEffect(() => {\n        // Update the Swagger spec object when API object gets changed\n        api.getAsyncAPIDefinition()\n            .then((response) => {\n                resolveAndUpdateSpec(response.body);\n            })\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                    setPageError(error.response.body);\n                }\n                console.error(error);\n            });\n    }, [api.id]);\n\n    // Note: Make sure not to use any hooks after/within this condition , because it returns conditionally\n    // If you do so, You will probably get `Rendered more hooks than during the previous render.` exception\n    // if ((!pageError && isEmpty(openAPISpec)) || (resolvedSpec.errors.length === 0 && isEmpty(resolvedSpec.spec))) {\n    if ((!pageError && isEmpty(asyncAPISpec))) {\n        return (\n            <Grid container direction='row' justify='center' alignItems='center'>\n                <Grid item>\n                    <CircularProgress disableShrink />\n                </Grid>\n            </Grid>\n        );\n    }\n\n    return (\n        <Grid container direction='row' justify='flex-start' spacing={2} alignItems='stretch'>\n            {pageError && (\n                <Grid item md={12}>\n                    <Banner onClose={() => setPageError(null)} disableActions type='error' message={pageError} />\n                </Grid>\n            )}\n            {!isRestricted(['apim:api_create'], api) && !disableAddOperation && api.type === 'WEBSUB' && (\n                <Grid item md={12} xs={12}>\n                    <SubscriptionConfig\n                        websubSubscriptionConfigDispatcher={websubSubscriptionConfigDispatcher}\n                        websubSubscriptionConfiguration={websubSubscriptionConfiguration}\n                    />\n                </Grid>\n            )}\n            {!isRestricted(['apim:api_create'], api) && !disableAddOperation && (\n                <Grid item md={12} xs={12}>\n                    <AddOperation operationsDispatcher={operationsDispatcher} isAsyncAPI={isAsyncAPI} api={api} />\n                </Grid>\n            )}\n            <Grid item md={12}>\n                <Paper>\n                    {\n                        operations && Object.entries(operations).map(([target, operation]) => (\n                            <Grid key={target} item md={12}>\n                                <GroupOfOperations tag={target} operation={operation}>\n                                    <Grid\n                                        container\n                                        direction='column'\n                                        justify='flex-start'\n                                        spacing={1}\n                                        alignItems='stretch'\n                                    >\n                                        {operation.subscribe && (\n                                            <Grid key={target + '_subscribe'} item md={12}>\n                                                <AsyncOperation\n                                                    target={target}\n                                                    verb='subscribe'\n                                                    highlight\n                                                    operation={operation}\n                                                    spec={asyncAPISpec}\n                                                    api={api}\n                                                    operationsDispatcher={operationsDispatcher}\n                                                    sharedScopes={sharedScopes}\n                                                    markAsDelete={Boolean(markedOperations[target]\n                                                        && markedOperations[target].subscribe)}\n                                                    onMarkAsDelete={onMarkAsDelete}\n                                                />\n                                            </Grid>\n                                        )}\n                                        {operation.publish && (\n                                            <Grid key={target + '_publish'} item md={12}>\n                                                <AsyncOperation\n                                                    target={target}\n                                                    verb='publish'\n                                                    highlight\n                                                    operation={operation}\n                                                    spec={asyncAPISpec}\n                                                    api={api}\n                                                    operationsDispatcher={operationsDispatcher}\n                                                    sharedScopes={sharedScopes}\n                                                    markAsDelete={Boolean(markedOperations[target]\n                                                        && markedOperations[target].publish)}\n                                                    onMarkAsDelete={onMarkAsDelete}\n                                                />\n                                            </Grid>\n                                        )}\n                                    </Grid>\n                                </GroupOfOperations>\n                            </Grid>\n                        ))\n                    }\n                </Paper>\n                <Grid\n                    style={{ marginTop: '25px' }}\n                    container\n                    direction='row'\n                    justify='space-between'\n                    alignItems='center'\n                >\n                    {!disableUpdate && (\n                        <SaveOperations\n                            operationsDispatcher={operationsDispatcher}\n                            updateAsyncAPI={updateAsyncAPI}\n                            api={api}\n                        />\n                    )}\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n}\n\nTopics.defaultProps = {\n    operationProps: { disableDelete: false },\n    disableUpdate: false,\n    disableAddOperation: false,\n};\n\nTopics.propTypes = {\n    disableAddOperation: PropTypes.bool,\n    disableUpdate: PropTypes.bool,\n    operationProps: PropTypes.shape({\n        disableDelete: PropTypes.bool,\n    }),\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Utils from 'AppData/Utils';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\n\nimport { FormattedMessage } from 'react-intl';\nimport DescriptionAndSummary from './operationComponents/asyncapi/DescriptionAndSummary';\nimport OperationGovernance from './operationComponents/asyncapi/OperationGovernance';\nimport Parameters from './operationComponents/asyncapi/Parameters';\nimport PayloadProperties from './operationComponents/asyncapi/PayloadProperties';\nimport Runtime from './operationComponents/asyncapi/Runtime';\n\n/**\n *\n * Handle the operation UI\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nfunction AsyncOperation(props) {\n    const {\n        operation,\n        operationsDispatcher,\n        highlight,\n        api,\n        disableDelete,\n        disableUpdate,\n        onMarkAsDelete,\n        markAsDelete,\n        spec,\n        target,\n        verb,\n        sharedScopes,\n    } = props;\n\n    const trimmedVerb = verb === 'publish' || verb === 'subscribe' ? verb.substr(0, 3) : verb;\n\n    const [isExpanded, setIsExpanded] = useState(false);\n    const useStyles = makeStyles((theme) => {\n        const backgroundColor = theme.custom.resourceChipColors[trimmedVerb];\n        return {\n            customButton: {\n                backgroundColor: '#ffffff',\n                borderColor: backgroundColor,\n                color: backgroundColor,\n                width: theme.spacing(2),\n            },\n            paperStyles: {\n                border: `1px solid ${backgroundColor}`,\n                borderBottom: '',\n            },\n            customDivider: {\n                backgroundColor,\n            },\n            linearProgress: {\n                height: '2px',\n            },\n            highlightSelected: {\n                backgroundColor: Utils.hexToRGBA(backgroundColor, 0.1),\n            },\n            contentNoMargin: {\n                margin: theme.spacing(0),\n            },\n            overlayUnmarkDelete: {\n                position: 'absolute',\n                zIndex: theme.zIndex.operationDeleteUndo,\n                right: '10%',\n            },\n        };\n    });\n    const isUsedInAPIProduct = false;\n\n    /**\n     *\n     *\n     * @param {*} event\n     */\n    function toggleDelete(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        setIsExpanded(false);\n        onMarkAsDelete({ verb, target }, !markAsDelete);\n    }\n\n    /**\n     *\n     *\n     * @param {*} event\n     * @param {*} expanded\n     */\n    function handleExpansion(event, expanded) {\n        setIsExpanded(expanded);\n    }\n    const classes = useStyles();\n    return (\n        <>\n            {markAsDelete && (\n                <Box className={classes.overlayUnmarkDelete}>\n                    <Tooltip title='Marked for delete' aria-label='Marked for delete'>\n                        <Button onClick={toggleDelete} variant='outlined' style={{ marginTop: '10px' }}>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.Operation.undo.delete'\n                                defaultMessage='Undo Delete'\n                            />\n                        </Button>\n                    </Tooltip>\n                </Box>\n            )}\n            <ExpansionPanel\n                expanded={isExpanded}\n                onChange={handleExpansion}\n                disabled={markAsDelete}\n                className={classes.paperStyles}\n            >\n                <ExpansionPanelSummary\n                    className={highlight ? classes.highlightSelected : ''}\n                    disableRipple\n                    disableTouchRipple\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls='panel2a-content'\n                    id='panel2a-header'\n                    classes={{ content: classes.contentNoMargin }}\n                >\n                    <Grid container direction='row' justify='space-between' alignItems='center' spacing={0}>\n                        <Grid item md={11}>\n                            <Badge invisible='false' color='error' variant='dot'>\n                                <Button\n                                    disableFocusRipple\n                                    variant='outlined'\n                                    size='small'\n                                    className={classes.customButton}\n                                >\n                                    {trimmedVerb.toUpperCase()}\n                                </Button>\n                            </Badge>\n                            <Typography display='inline' style={{ margin: '0px 30px' }} variant='h6' gutterBottom>\n                                {target}\n                            </Typography>\n                        </Grid>\n                        {!(disableDelete || markAsDelete) && (\n                            <Grid item md={1} justify='flex-end' container>\n                                <Tooltip\n                                    title={\n                                        isUsedInAPIProduct\n                                            ? (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Resources.components.Operation.cannot.delete'\n                                                    + '.when.used.in.api.products'}\n                                                    defaultMessage='Cannot delete operation when used in an API product'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Resources.components.Operation.Delete'\n                                                    defaultMessage='Delete'\n                                                />\n                                            )\n                                    }\n                                    aria-label={(\n                                        <FormattedMessage\n                                            id='Apis.Details.Resources.components.Operation.delete.operation'\n                                            defaultMessage='Delete operation'\n                                        />\n                                    )}\n                                >\n                                    <div>\n                                        <IconButton\n                                            disabled={Boolean(isUsedInAPIProduct) || disableUpdate}\n                                            onClick={toggleDelete}\n                                            aria-label='delete'\n                                        >\n                                            <DeleteIcon fontSize='small' />\n                                        </IconButton>\n                                    </div>\n                                </Tooltip>\n                            </Grid>\n                        )}\n                    </Grid>\n                </ExpansionPanelSummary>\n                <Divider light className={classes.customDivider} />\n                <ExpansionPanelDetails>\n                    <Grid spacing={2} container direction='row' justify='flex-start' alignItems='flex-start'>\n                        <DescriptionAndSummary\n                            operation={operation}\n                            operationsDispatcher={operationsDispatcher}\n                            disableUpdate={disableUpdate}\n                            target={target}\n                            verb={verb}\n                        />\n                        {operation.parameters && (\n                            <Parameters\n                                operation={operation}\n                                operationsDispatcher={operationsDispatcher}\n                                api={api}\n                                disableUpdate={disableUpdate}\n                                spec={spec}\n                                target={target}\n                                verb={verb}\n                            />\n                        )}\n                        <PayloadProperties\n                            operation={operation}\n                            operationsDispatcher={operationsDispatcher}\n                            disableUpdate={disableUpdate}\n                            target={target}\n                            verb={verb}\n                        />\n                        <OperationGovernance\n                            operation={operation}\n                            operationsDispatcher={operationsDispatcher}\n                            api={api}\n                            disableUpdate={disableUpdate}\n                            spec={spec}\n                            target={target}\n                            verb={verb}\n                            sharedScopes={sharedScopes}\n                        />\n                        {(api.type === 'WS' || api.type === 'WEBSUB') && (\n                            <Runtime\n                                operation={operation}\n                                operationsDispatcher={operationsDispatcher}\n                                disableUpdate={disableUpdate}\n                                target={target}\n                                verb={verb}\n                                api={api}\n                            />\n                        )}\n                    </Grid>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        </>\n    );\n}\nAsyncOperation.defaultProps = {\n    highlight: false,\n    disableUpdate: false,\n    disableDelete: false,\n    onMarkAsDelete: () => {},\n    markAsDelete: false,\n};\nAsyncOperation.propTypes = {\n    api: PropTypes.shape({ scopes: PropTypes.arrayOf(PropTypes.shape({})), resourcePolicies: PropTypes.shape({}) })\n        .isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    onMarkAsDelete: PropTypes.func,\n    resourcePolicy: PropTypes.shape({}).isRequired,\n    markAsDelete: PropTypes.bool,\n    disableDelete: PropTypes.bool,\n    operation: PropTypes.shape({\n        'x-wso2-new': PropTypes.bool,\n        summary: PropTypes.string,\n    }).isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n    sharedScopes: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    highlight: PropTypes.bool,\n    disableUpdate: PropTypes.bool,\n};\n\nexport default React.memo(AsyncOperation);\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\n/**\n * Renders the operation summary and description sections\n * @export\n * @param {*} props\n * @returns\n */\nexport default function DescriptionAndSummary(props) {\n    const {\n        operation, operationsDispatcher, disableUpdate, target, verb,\n    } = props;\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Description\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={5}>\n                <TextField\n                    margin='dense'\n                    fullWidth\n                    label='Description'\n                    multiline\n                    disabled={disableUpdate}\n                    rows='4'\n                    value={operation.description || ''}\n                    variant='outlined'\n                    onChange={\n                        ({ target: { value } }) => operationsDispatcher(\n                            { action: 'description', data: { target, verb, value } },\n                        )\n                    }\n                />\n            </Grid>\n            <Grid item md={6} />\n        </>\n    );\n}\n\nDescriptionAndSummary.propTypes = {\n    disableUpdate: PropTypes.bool,\n    operation: PropTypes.shape({\n        target: PropTypes.string.isRequired,\n        verb: PropTypes.string.isRequired,\n        spec: PropTypes.shape({}).isRequired,\n    }).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n};\n\nDescriptionAndSummary.defaultProps = {\n    disableUpdate: false,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { Link } from 'react-router-dom';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport { getAsyncAPIOperationScopes } from '../../../operationUtils';\n\n/**\n *\n * Renders the security and scopes selection section in the operation collapsed page\n * @export\n * @param {*} props\n * @returns\n */\nexport default function OperationGovernance(props) {\n    const {\n        operation, operationsDispatcher, api, disableUpdate, target, verb, sharedScopes,\n    } = props;\n    const operationScopes = getAsyncAPIOperationScopes(operation[verb]);\n    const filteredApiScopes = api.scopes.filter((sharedScope) => !sharedScope.shared);\n    const intl = useIntl();\n\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography gutterBottom variant='subtitle1'>\n                    <FormattedMessage\n                        id='Apis.Details.Topics.components.operationComponents.OperationGovernance.title'\n                        defaultMessage='Operation Governance'\n                    />\n                    <Typography style={{ marginLeft: '10px' }} gutterBottom variant='caption'>\n                        <FormattedMessage\n                            id='Apis.Details.Topics.components.operationComponents.OperationGovernance.subTitle'\n                            defaultMessage='(Security & Scopes)'\n                        />\n                    </Typography>\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item xs={1} />\n            <Grid item xs={11}>\n                <FormControl disabled={disableUpdate} component='fieldset'>\n                    <FormControlLabel\n                        control={(\n                            <Switch\n                                checked={operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none'}\n                                onChange={({ target: { checked } }) => operationsDispatcher({\n                                    action: 'authType',\n                                    data: { target, verb, value: checked },\n                                })}\n                                size='small'\n                                color='primary'\n                            />\n                        )}\n                        label='Security'\n                        labelPlacement='start'\n                    />\n                </FormControl>\n                <sup style={{ marginLeft: '10px' }}>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id={'Apis.Details.Topics.components.operationComponents.OperationGovernance.Security'\n                                + '.tooltip'}\n                                defaultMessage='This will enable/disable Application Level securities defined in the\n                                Runtime Configurations page.'\n                            />\n                        )}\n                        fontSize='small'\n                        aria-label='Operation security'\n                        placement='right-end'\n                        interactive\n                    >\n                        <HelpOutline />\n                    </Tooltip>\n                </sup>\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={5}>\n                {\n                    operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none' ? (\n                        <TextField\n                            id='operation_scope'\n                            select\n                            SelectProps={{\n                                multiple: true,\n                                renderValue: (selected) => (Array.isArray(selected) ? selected.join(', ') : selected),\n                            }}\n                            disabled={disableUpdate}\n                            fullWidth\n                            label={api.scopes.length !== 0 || sharedScopes ? intl.formatMessage({\n                                id: 'Apis.Details.Topics.components.operationComponents.'\n                                + 'OperationGovernance.operation.scope.label.default',\n                                defaultMessage: 'Operation scope',\n                            }) : intl.formatMessage({\n                                id: 'Apis.Details.Topics.components.operationComponents.'\n                                + 'OperationGovernance.operation.scope.label.notAvailable',\n                                defaultMessage: 'No scope available',\n                            })}\n                            value={operationScopes}\n                            onChange={({ target: { value } }) => operationsDispatcher({\n                                action: 'scopes',\n                                data: { target, verb, value: value ? [value] : [] },\n                            })}\n                            helperText={(\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.'\n                                    + 'OperationGovernance.operation.scope.helperText'}\n                                    defaultMessage='Select a scope to control permissions to this operation'\n                                />\n                            )}\n                            margin='dense'\n                            variant='outlined'\n                        >\n                            <ListSubheader>\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.'\n                                    + 'OperationGovernance.operation.scope.select.local'}\n                                    defaultMessage='API Scopes'\n                                />\n                            </ListSubheader>\n                            {filteredApiScopes.length !== 0 ? filteredApiScopes.map((apiScope) => (\n                                <MenuItem\n                                    key={apiScope.scope.name}\n                                    value={apiScope.scope.name}\n                                    dense\n                                >\n                                    <Checkbox checked={operationScopes.includes(apiScope.scope.name)} color='primary' />\n                                    {apiScope.scope.name}\n                                </MenuItem>\n                            )) : (\n                                <MenuItem\n                                    value=''\n                                    disabled\n                                >\n                                    <em>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Topics.components.operationComponents.'\n                                        + 'OperationGovernance.operation.no.api.scope.available'}\n                                            defaultMessage='No API scopes available'\n                                        />\n                                    </em>\n                                </MenuItem>\n                            )}\n                            <ListSubheader>\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.'\n                                    + 'OperationGovernance.operation.scope.select.shared'}\n                                    defaultMessage='Shared Scopes'\n                                />\n                            </ListSubheader>\n                            {sharedScopes && sharedScopes.length !== 0 ? sharedScopes.map((sharedScope) => (\n                                <MenuItem\n                                    key={sharedScope.scope.name}\n                                    value={sharedScope.scope.name}\n                                    dense\n                                >\n                                    <Checkbox\n                                        checked={operationScopes.includes(sharedScope.scope.name)}\n                                        color='primary'\n                                    />\n                                    {sharedScope.scope.name}\n                                </MenuItem>\n                            )) : (\n                                <MenuItem\n                                    value=''\n                                    disabled\n                                >\n                                    <em>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Topics.components.operationComponents.'\n                                        + 'OperationGovernance.operation.no.sharedpi.scope.available'}\n                                            defaultMessage='No shared scopes available'\n                                        />\n                                    </em>\n                                </MenuItem>\n                            )}\n                        </TextField>\n                    ) : null\n                }\n            </Grid>\n            <Grid item md={5} style={{ marginTop: '14px' }}>\n                {\n                    operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none' ? !disableUpdate && (\n                        <Link\n                            to={`/apis/${api.id}/scopes/create`}\n                            target='_blank'\n                        >\n                            <Typography\n                                style={{ marginLeft: '10px' }}\n                                color='primary'\n                                display='inline'\n                                variant='caption'\n                            >\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.'\n                                    + 'OperationGovernance.operation.scope.create.new.scope'}\n                                    defaultMessage='Create New Scope'\n                                />\n                                <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                            </Typography>\n                        </Link>\n                    ) : null\n                }\n            </Grid>\n            <Grid item md={1} />\n        </>\n    );\n}\n\nOperationGovernance.propTypes = {\n    disableUpdate: PropTypes.bool,\n    operation: PropTypes.shape({\n        target: PropTypes.string.isRequired,\n        verb: PropTypes.string.isRequired,\n    }).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    api: PropTypes.shape({ scopes: PropTypes.arrayOf(PropTypes.shape({})) }),\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    sharedScopes: PropTypes.arrayOf(PropTypes.shape({})),\n};\n\nOperationGovernance.defaultProps = {\n    api: { scopes: [] },\n    sharedScopes: [],\n    disableUpdate: false,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport ListParameters from './ListParameters';\n\n/*\n    Paramters will contain: name, description, type\n*/\n\n/**\n * Renders the operation parameters section\n * @export\n * @param {*} props\n * @returns\n */\nexport default function Parameters(props) {\n    const {\n        operation, spec, target, verb, operationsDispatcher,\n    } = props;\n    let haveParameters = false;\n    Object.entries(operation.parameters).forEach(() => {\n        haveParameters = true;\n    });\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Topic Parameters\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={11}>\n                {haveParameters && (\n                    <ListParameters\n                        target={target}\n                        verb={verb}\n                        operationsDispatcher={operationsDispatcher}\n                        operation={operation}\n                        spec={spec}\n                    />\n                )}\n            </Grid>\n        </>\n    );\n}\n\nParameters.propTypes = {\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    operation: PropTypes.shape({}).isRequired,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EditIcon from '@material-ui/icons/Edit';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FormattedMessage } from 'react-intl';\nimport EditParameter from './EditParameter';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 650,\n    },\n});\n\n/**\n *\n * Renders the operation parameters section\n * @export\n * @param {*} props\n * @returns\n */\nexport default function ListParameters(props) {\n    const {\n        operation, operationsDispatcher, target, verb, disableUpdate,\n    } = props;\n    const classes = useStyles();\n    const [editingParameter, setEditingParameter] = useState(null);\n\n    return (\n        <>\n            {editingParameter !== null && (\n                <EditParameter\n                    operationsDispatcher={operationsDispatcher}\n                    target={target}\n                    verb={verb}\n                    editingParameter={editingParameter}\n                    setEditingParameter={setEditingParameter}\n                />\n            )}\n            <Table className={classes.table} aria-label='parameters list'>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListParameter.param.name'\n                                defaultMessage='Name'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListParameter.param.datatype'\n                                defaultMessage='Data Type'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListParameter.param.description'\n                                defaultMessage='Description'\n                            />\n                        </TableCell>\n                        {!disableUpdate && (\n                            <TableCell align='left'>\n                                <FormattedMessage\n                                    id='Apis.Details.Topics.components.operationComponents.ListParameter.actions'\n                                    defaultMessage='Actions'\n                                />\n                            </TableCell>\n                        )}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        operation.parameters && Object.entries(operation.parameters).map(([k, v]) => {\n                            return (\n                                <TableRow key={k}>\n                                    <TableCell align='left'>{k}</TableCell>\n                                    <TableCell align='left'>{v.schema.type}</TableCell>\n                                    <TableCell align='left'>{v.description}</TableCell>\n                                    <TableCell align='left'>\n                                        <Tooltip title={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.operationComponents.'\n                                            + 'ListParameter.edit'}\n                                                defaultMessage='Edit'\n                                            />\n                                        )}\n                                        >\n                                            <IconButton\n                                                onClick={() => setEditingParameter({ name: k, ...v })}\n                                                fontSize='small'\n                                            >\n                                                <EditIcon fontSize='small' />\n                                            </IconButton>\n                                        </Tooltip>\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })\n                    }\n                </TableBody>\n            </Table>\n        </>\n    );\n}\n\nListParameters.defaultProps = {\n    disableUpdate: false,\n};\nListParameters.propTypes = {\n    operation: PropTypes.shape({}).isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    disableUpdate: PropTypes.bool,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { capitalizeFirstLetter } from 'AppData/stringFormatter';\nimport { FormattedMessage } from 'react-intl';\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        display: 'flex',\n        flexDirection: 'column',\n        margin: 'auto',\n        width: 'fit-content',\n    },\n    formControl: {\n        marginTop: theme.spacing(2),\n        minWidth: 120,\n    },\n    formControlLabel: {\n        marginTop: theme.spacing(1),\n    },\n}));\n\n/**\n *\n *\n * @export\n * @returns\n */\nexport default function EditParameter(props) {\n    const {\n        operationsDispatcher, target, verb, editingParameter, setEditingParameter,\n    } = props;\n\n    /**\n     *\n     *\n     * @param {*} currentParameter\n     * @param {*} paramAction\n     */\n    function parameterActionReducer(currentParameter, paramAction) {\n        const { action, value } = paramAction;\n        const nextParameter = currentParameter.schema\n            ? { ...currentParameter, schema: { ...currentParameter.schema } } : { ...currentParameter };\n        switch (action) {\n            case 'description':\n                nextParameter[action] = value;\n                break;\n            case 'type':\n                nextParameter.schema = nextParameter.schema || {};\n                nextParameter.schema[action] = value;\n                break;\n            default:\n                break;\n        }\n        return nextParameter;\n    }\n    const [parameter, parameterActionDispatcher] = useReducer(parameterActionReducer, editingParameter);\n    const classes = useStyles();\n\n    const handleClose = () => {\n        setEditingParameter(null);\n    };\n\n    const handelDone = () => {\n        operationsDispatcher({ action: 'parameter', data: { target, verb, value: parameter } });\n        handleClose();\n    };\n\n    const getSupportedDataTypes = () => {\n        return ['integer', 'string', 'long', 'double', 'float'];\n    };\n\n    const isEditing = parameter !== null;\n    if (!isEditing) {\n        return null;\n    }\n    return (\n        <Dialog fullWidth maxWidth='md' open={isEditing} onClose={handleClose} aria-labelledby='edit-parameter'>\n            <DialogTitle disableTypography id='edit-parameter'>\n                <Typography variant='h6'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditParameter.title'\n                        defaultMessage='Edit'\n                    />\n                    {' '}\n                    <Typography display='inline' variant='subtitle1'>\n                        {parameter.name}\n                    </Typography>\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <Grid container direction='row' spacing={2} justify='flex-start' alignItems='center'>\n                    <Grid item md={6}>\n                        <FormControl\n                            required\n                            fullWidth\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.formControl}\n                        >\n                            <InputLabel required id='edit-parameter-type'>\n                                <FormattedMessage\n                                    id='Apis.Details.Topics.components.operationComponents.EditParameter.data.type'\n                                    defaultMessage='Data Type'\n                                />\n                            </InputLabel>\n\n                            <Select\n                                value={parameter.schema ? parameter.schema.type : ''}\n                                onChange={\n                                    ({ target: { name, value } }) => parameterActionDispatcher({ action: name, value })\n                                }\n                                inputProps={{\n                                    name: 'type',\n                                    id: 'edit-parameter-type',\n                                }}\n                                MenuProps={{\n                                    getContentAnchorEl: null,\n                                    anchorOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    },\n                                }}\n                            >\n                                {getSupportedDataTypes().map((dataType) => (\n                                    <MenuItem value={dataType} dense>\n                                        {capitalizeFirstLetter(dataType)}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.EditParameter.'\n                                    + 'select.data.type'}\n                                    defaultMessage='Select the Data Type'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Grid item md={6} />\n                    <Grid item md={12}>\n                        <TextField\n                            value={parameter.description}\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Topics.components.operationComponents.EditParameter.description'\n                                    defaultMessage='Description'\n                                />\n                            )}\n                            multiline\n                            rows='4'\n                            name='description'\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { name, value } }) => {\n                                parameterActionDispatcher({ action: name, value });\n                            }}\n                        />\n                    </Grid>\n                    {/* <Grid item md={6}>\n                        <TextField\n                            value={capitalizeFirstLetter(parameter.in)}\n                            disabled\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.type'\n                                    defaultMessage='Parameter Type'\n                                />\n                            )}\n                            margin='dense'\n                            variant='outlined'\n                        />\n                    </Grid> */}\n                    {/* <Grid item md={6}>\n                        <TextField\n                            value={parameter.name}\n                            disabled\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.name'\n                                    defaultMessage='Name'\n                                />\n                            )}\n                            margin='dense'\n                            variant='outlined'\n                        />\n                    </Grid> */}\n                    {/* <Grid item md={12}>\n                        <TextField\n                            value={parameter.description}\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.description'\n                                    defaultMessage='Description'\n                                />\n                            )}\n                            multiline\n                            rows='4'\n                            name='description'\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { name, value } }) => {\n                                parameterActionDispatcher({ action: name, value });\n                            }}\n                        />\n                    </Grid> */}\n                    {/* <Grid item md={6}>\n                        <FormControl\n                            required\n                            fullWidth\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.formControl}\n                        >\n                            <InputLabel required id='edit-parameter-type'>\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.data.type'\n                                    defaultMessage='Data Type'\n                                />\n                            </InputLabel>\n\n                            <Select\n                                value={parameter.schema ? parameter.schema.type : parameter.type}\n                                onChange={\n                                    ({ target: { name, value } }) => parameterActionDispatcher({ action: name, value })\n                                }\n                                inputProps={{\n                                    name: 'type',\n                                    id: 'edit-parameter-type',\n                                }}\n                                MenuProps={{\n                                    getContentAnchorEl: null,\n                                    anchorOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    },\n                                }}\n                            >\n                                {getSupportedDataTypes(version, parameter.in).map((dataType) => (\n                                    <MenuItem value={dataType} dense>\n                                        {capitalizeFirstLetter(dataType)}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                    + 'select.schema.data.type'}\n                                    defaultMessage='Select the Schema Type'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    </Grid> */}\n                    {/* <Grid item md={6}>\n                        <FormControl\n                            fullWidth\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.formControl}\n                            disabled={parameter.schema\n                                ? iff(\n                                    parameter.schema.type === 'boolean' || parameter.schema.type === 'object',\n                                    true,\n                                    false,\n                                )\n                                : iff(\n                                    parameter.type === 'boolean' || parameter.type === 'object',\n                                    true,\n                                    false,\n                                )}\n                        >\n                            <InputLabel id='edit-parameter-format'>\n                                <FormattedMessage\n                                    id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                    + 'data.format'}\n                                    defaultMessage='Data Format'\n                                />\n                            </InputLabel>\n                            <Select\n                                value={parameter.schema ? parameter.schema.format : parameter.format}\n                                onChange={\n                                    ({ target: { name, value } }) => parameterActionDispatcher({ action: name, value })\n                                }\n                                inputProps={{\n                                    name: 'format',\n                                    id: 'edit-parameter-format',\n                                }}\n                                MenuProps={{\n                                    getContentAnchorEl: null,\n                                    anchorOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    },\n                                }}\n                            >\n                                {getDataFormats(\n                                    parameter.schema ? parameter.schema.type : parameter.type,\n                                ).map((dataType) => (\n                                    <MenuItem value={dataType} dense>\n                                        {capitalizeFirstLetter(dataType)}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                    + 'select.format.of.data.type'}\n                                    defaultMessage='Select the Format of Data Type'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    </Grid> */}\n                    {/* <Grid item>\n                        <FormControl component='fieldset'>\n                            <FormControlLabel\n                                control={(\n                                    <Checkbox\n                                        checked={parameter.required}\n                                        onChange={(\n                                            { target: { name, checked } },\n                                        ) => parameterActionDispatcher({ action: name, value: checked })}\n                                        value={parameter.required}\n                                        inputProps={{\n                                            name: 'required',\n                                        }}\n                                    />\n                                )}\n                                label={(\n                                    <FormattedMessage\n                                        id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                        + 'required'}\n                                        defaultMessage='Required'\n                                    />\n                                )}\n                            />\n                        </FormControl>\n                    </Grid> */}\n                    {/* <Grid container direction='row' justify='flex-end' alignItems='center'>\n                        <DialogContentText>\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                + 'use.done.button.to.persist.changes'}\n                                defaultMessage='Use DONE button in the page to persist changes'\n                            />\n                        </DialogContentText>\n                    </Grid> */}\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button size='small' onClick={handleClose} color='primary'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditParameter.close'\n                        defaultMessage='Close'\n                    />\n                </Button>\n                <Button\n                    size='small'\n                    onClick={handelDone}\n                    variant='contained'\n                    color='primary'\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditParameter.done'\n                        defaultMessage='Done'\n                    />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nEditParameter.propTypes = {\n    // operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    editingParameter: PropTypes.shape({}).isRequired,\n    setEditingParameter: PropTypes.func.isRequired,\n    // version: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport AddPayloadProperty from './AddPayloadProperty';\nimport ListPayloadProperties from './ListPayloadProperties';\n\n/*\n    Paramters will contain: name, description, type\n*/\n\n/**\n * Renders the payload properties section\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function PayloadProperties(props) {\n    const {\n        operation, operationsDispatcher, target, verb, disableUpdate,\n    } = props;\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Payload Properties\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item xs={1} />\n            <Grid item xs={11}>\n                {!disableUpdate && (\n                    <AddPayloadProperty\n                        target={target}\n                        verb={verb}\n                        operationsDispatcher={operationsDispatcher}\n                        operation={operation}\n                    />\n                )}\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={11}>\n                <ListPayloadProperties\n                    disableUpdate={disableUpdate}\n                    target={target}\n                    verb={verb}\n                    operationsDispatcher={operationsDispatcher}\n                    operation={operation}\n                />\n            </Grid>\n        </>\n    );\n}\n\nPayloadProperties.propTypes = {\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    operation: PropTypes.shape({}).isRequired,\n    disableUpdate: PropTypes.bool,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n};\n\nPayloadProperties.defaultProps = {\n    disableUpdate: false,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nconst useStyles = makeStyles(() => ({\n    formControl: {\n        minWidth: 120,\n    },\n    parameterContainer: {\n        alignItems: 'center',\n        justifyContent: 'space-between',\n    },\n    checkBox: {\n        color: '#7c7c7c',\n    },\n}));\n\n/**\n *\n * Add payload properties according to the AsyncAPI spec.\n *\n * @export\n * @param {*} props\n * @returns\n */\nfunction AddPayloadProperty(props) {\n    const {\n        operationsDispatcher, target, verb,\n    } = props;\n\n    /**\n     *\n     * @param {*} state\n     * @param {*} action\n     */\n    function newPropertyReducer(state, action) {\n        const { type, value } = action;\n        const nextState = { ...state };\n        switch (type) {\n            case 'name':\n            case 'description':\n            case 'type':\n                nextState[type] = value;\n                break;\n            case 'clear':\n                return {\n                    name: '',\n                    description: '',\n                    type: '',\n                };\n            default:\n                return nextState;\n        }\n        return nextState;\n    }\n\n    const [property, newPropertyDispatcher] = useReducer(newPropertyReducer, { });\n    const classes = useStyles();\n\n    /**\n     * Get supported data types for properies.\n     * @returns {*} data types\n     */\n    function getSupportedDataTypes() {\n        return ['integer', 'string', 'long', 'double', 'float'];\n    }\n\n    /**\n     * Clear inputs\n     */\n    function clearInputs() {\n        newPropertyDispatcher({ type: 'clear' });\n    }\n\n    /**\n     * Add new property\n     */\n    function addNewProperty() {\n        operationsDispatcher({\n            action: 'addPayloadProperty',\n            data: {\n                target, verb, value: property,\n            },\n        });\n        clearInputs();\n    }\n\n    return (\n        <Grid container direction='row' spacing={1} className={classes.parameterContainer}>\n            <Grid item xs={2} md={2}>\n                <TextField\n                    id='parameter-name'\n                    label='Name'\n                    name='name'\n                    value={property.name}\n                    onChange={({ target: { name, value } }) => newPropertyDispatcher({ type: name, value })}\n                    helperText='Enter property name'\n                    margin='dense'\n                    variant='outlined'\n                    onKeyPress={(event) => {\n                        if (event.key === 'Enter') {\n                            // key code 13 is for `Enter` key\n                            event.preventDefault(); // To prevent form submissions\n                            addNewProperty();\n                        }\n                    }}\n                />\n            </Grid>\n            <Grid item xs={2} md={2}>\n                <FormControl margin='dense' variant='outlined' className={classes.formControl}>\n                    {/* <InputLabel ref={inputLabel} htmlFor='data-type' error={isParameterExist}> */}\n                    <InputLabel htmlFor='data-type'>\n                        <FormattedMessage\n                            id='Apis.Details.Resources.components.operationComponents.data.type'\n                            defaultMessage='Data Type'\n                        />\n                    </InputLabel>\n\n                    <Select\n                        value={property.type}\n                        onChange={({ target: { name, value } }) => newPropertyDispatcher({ type: name, value })}\n                        inputProps={{\n                            name: 'type',\n                            id: 'data-type',\n                        }}\n                        MenuProps={{\n                            getContentAnchorEl: null,\n                            anchorOrigin: {\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            },\n                        }}\n                    >\n                        {\n                            getSupportedDataTypes().map((dataType) => {\n                                return (\n                                    <MenuItem value={dataType} dense>\n                                        {dataType}\n                                    </MenuItem>\n                                );\n                            })\n                        }\n                    </Select>\n                    <FormHelperText id='my-helper-text'>Select the data type</FormHelperText>\n                </FormControl>\n            </Grid>\n            <Grid item xs={6} md={6}>\n                <TextField\n                    id='parameter-description'\n                    label='Description'\n                    name='description'\n                    value={property.description}\n                    onChange={({ target: { name, value } }) => newPropertyDispatcher({ type: name, value })}\n                    helperText='Enter property description'\n                    margin='dense'\n                    variant='outlined'\n                    onKeyPress={(event) => {\n                        if (event.key === 'Enter') {\n                            // key code 13 is for `Enter` key\n                            event.preventDefault(); // To prevent form submissions\n                            addNewProperty();\n                        }\n                    }}\n                />\n            </Grid>\n            <Grid item xs={2} md={2}>\n                <Tooltip\n                    title={(\n                        <FormattedMessage\n                            id='Apis.Details.Resources.components.operationComponents.AddParameter.add.tooltip'\n                            defaultMessage='Add new parameter'\n                        />\n                    )}\n                    aria-label='AddParameter'\n                    placement='bottom'\n                    interactive\n                >\n                    <span>\n                        <Button\n                            style={{ marginLeft: '20px', marginBottom: '15px', marginRight: '20px' }}\n                            size='small'\n                            variant='outlined'\n                            aria-label='add'\n                            color='primary'\n                            onClick={addNewProperty}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.AddParameter.add'\n                                defaultMessage='Add'\n                            />\n                        </Button>\n                    </span>\n                </Tooltip>\n                <sup>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.AddParameter.clear.inputs.tooltip'\n                                defaultMessage='Clear inputs'\n                            />\n                        )}\n                        aria-label='clear-inputs'\n                        placement='bottom'\n                        interactive\n                    >\n                        <span>\n                            <IconButton\n                                onClick={clearInputs}\n                                size='small'\n                            >\n                                <ClearIcon />\n                            </IconButton>\n                        </span>\n                    </Tooltip>\n                </sup>\n            </Grid>\n        </Grid>\n    );\n}\n\nAddPayloadProperty.propTypes = {\n    operation: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default React.memo(injectIntl(AddPayloadProperty));\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FormattedMessage } from 'react-intl';\nimport EditPayloadProperty from './EditPayloadProperty';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 650,\n    },\n});\n\n/**\n *\n * Renders the operation parameters section\n * @export\n * @param {*} props\n * @returns\n */\nexport default function ListPayloadProperties(props) {\n    const {\n        operation, operationsDispatcher, target, verb, disableUpdate,\n    } = props;\n    const classes = useStyles();\n    const [editingProperty, setEditingProperty] = useState(null);\n    const properties = (operation && operation[verb] && operation[verb].message && operation[verb].message.payload\n            && operation[verb].message.payload.properties) ? operation[verb].message.payload.properties : { };\n\n    return (\n        <>\n            {editingProperty !== null && (\n                <EditPayloadProperty\n                    operationsDispatcher={operationsDispatcher}\n                    target={target}\n                    verb={verb}\n                    editingProperty={editingProperty}\n                    setEditingProperty={setEditingProperty}\n                />\n            )}\n            <Table className={classes.table} aria-label='parameters list'>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListPayloadProps.name'\n                                defaultMessage='Name'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListPayloadProps.data.type'\n                                defaultMessage='Data Type'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListPayloadProps.description'\n                                defaultMessage='Description'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Topics.components.operationComponents.ListPayloadProps.actions'\n                                defaultMessage='Actions'\n                            />\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {\n                        properties && Object.entries(properties).map(([k, v]) => {\n                            return (\n                                <TableRow key={k}>\n                                    <TableCell align='left'>{k}</TableCell>\n                                    <TableCell align='left'>{v.type}</TableCell>\n                                    <TableCell align='left'>{v.description}</TableCell>\n                                    <TableCell align='left'>\n                                        <Tooltip title={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.operationComponents.'\n                                            + 'ListPayloadProperties.edit'}\n                                                defaultMessage='Edit'\n                                            />\n                                        )}\n                                        >\n                                            <IconButton\n                                                onClick={() => setEditingProperty({ name: k, ...v })}\n                                                fontSize='small'\n                                            >\n                                                <EditIcon fontSize='small' />\n                                            </IconButton>\n                                        </Tooltip>\n                                        <Tooltip title={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.operationComponents'\n                                            + '.ListPayloadProps.delete'}\n                                                defaultMessage='Delete'\n                                            />\n                                        )}\n                                        >\n                                            <IconButton\n                                                disabled={disableUpdate}\n                                                onClick={() => operationsDispatcher({\n                                                    action: 'deletePayloadProperty',\n                                                    data: { target, verb, value: k },\n                                                })}\n                                                fontSize='small'\n                                            >\n                                                <DeleteIcon fontSize='small' />\n                                            </IconButton>\n                                        </Tooltip>\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        })\n                    }\n                </TableBody>\n            </Table>\n        </>\n    );\n}\n\nListPayloadProperties.defaultProps = {\n    disableUpdate: false,\n};\nListPayloadProperties.propTypes = {\n    operation: PropTypes.shape({}).isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    disableUpdate: PropTypes.bool,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport { FormattedMessage } from 'react-intl';\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        display: 'flex',\n        flexDirection: 'column',\n        margin: 'auto',\n        width: 'fit-content',\n    },\n    formControl: {\n        marginTop: theme.spacing(2),\n        minWidth: 120,\n    },\n    formControlLabel: {\n        marginTop: theme.spacing(1),\n    },\n}));\n\n/**\n * Edit payload properties according to the AsyncAPI spec.\n * @export\n * @returns\n */\nexport default function EditPayloadProperty(props) {\n    const {\n        operationsDispatcher, target, verb, editingProperty, setEditingProperty,\n    } = props;\n\n    /**\n     * Payload property reducer\n     *\n     * @param {*} currentProperty\n     * @param {*} paramAction\n     */\n    function propertyActionReducer(currentProperty, paramAction) {\n        const { action, value } = paramAction;\n        const nextProperty = currentProperty.schema\n            ? { ...currentProperty, schema: { ...currentProperty.schema } } : { ...currentProperty };\n        switch (action) {\n            case 'type':\n            case 'description':\n                nextProperty[action] = value;\n                break;\n            default:\n                break;\n        }\n        return nextProperty;\n    }\n\n    const [property, propertyActionDispatcher] = useReducer(propertyActionReducer, editingProperty);\n    const classes = useStyles();\n\n    const handleClose = () => {\n        setEditingProperty(null);\n    };\n\n    const handelDone = () => {\n        operationsDispatcher({ action: 'payloadProperty', data: { target, verb, value: property } });\n        handleClose();\n    };\n\n    const getSupportedDataTypes = () => {\n        return ['integer', 'string', 'long', 'double', 'float'];\n    };\n\n    const isEditing = property !== null;\n    if (!isEditing) {\n        return null;\n    }\n    return (\n        <Dialog fullWidth maxWidth='md' open={isEditing} onClose={handleClose} aria-labelledby='edit-property'>\n            <DialogTitle disableTypography id='edit-property'>\n                <Typography variant='h6'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditPayloadProperty.title'\n                        defaultMessage='Edit'\n                    />\n                    {' '}\n                    <Typography display='inline' variant='subtitle1'>\n                        {property.name}\n                    </Typography>\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <Grid container direction='row' spacing={2} justify='flex-start' alignItems='center'>\n                    <Grid item md={6}>\n                        <FormControl\n                            required\n                            fullWidth\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.formControl}\n                        >\n                            <InputLabel required id='edit-property-type'>\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.EditPayloadProperty'\n                                    + '.data.type'}\n                                    defaultMessage='Data Type'\n                                />\n                            </InputLabel>\n\n                            <Select\n                                value={property.type}\n                                onChange={\n                                    ({ target: { name, value } }) => propertyActionDispatcher({ action: name, value })\n                                }\n                                inputProps={{\n                                    name: 'type',\n                                    id: 'edit-property-type',\n                                }}\n                                MenuProps={{\n                                    getContentAnchorEl: null,\n                                    anchorOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    },\n                                }}\n                            >\n                                {getSupportedDataTypes().map((dataType) => (\n                                    <MenuItem value={dataType} dense>\n                                        {dataType}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.EditPayloadProperty.'\n                                    + 'select.data.type'}\n                                    defaultMessage='Select the Data Type'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Grid item md={6} />\n                    <Grid item md={12}>\n                        <TextField\n                            value={property.description}\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id={'Apis.Details.Topics.components.operationComponents.EditPayloadProperty'\n                                    + '.description'}\n                                    defaultMessage='Description'\n                                />\n                            )}\n                            multiline\n                            rows='4'\n                            name='description'\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { name, value } }) => {\n                                propertyActionDispatcher({ action: name, value });\n                            }}\n                        />\n                    </Grid>\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button size='small' onClick={handleClose} color='primary'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditPayloadProperty.close'\n                        defaultMessage='Close'\n                    />\n                </Button>\n                <Button\n                    size='small'\n                    onClick={handelDone}\n                    variant='contained'\n                    color='primary'\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditPayloadProperty.done'\n                        defaultMessage='Done'\n                    />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nEditPayloadProperty.propTypes = {\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    editingProperty: PropTypes.shape({}).isRequired,\n    setEditingProperty: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\nimport { useRevisionContext } from 'AppComponents/Shared/RevisionContext';\nimport Utils from 'AppData/Utils';\nimport { FileCopy } from '@material-ui/icons';\n\n/**\n * Renders the callback URL for WebSub and URI mapping for WebSocket.\n *\n * @param {*} props\n */\nexport default function Runtime(props) {\n    const {\n        operation, operationsDispatcher, target, verb, api,\n    } = props;\n    const { settings } = useAppContext();\n    const { allEnvRevision } = useRevisionContext();\n    const allEnvDeployments = Utils.getAllEnvironmentDeployments(settings.environment, allEnvRevision);\n\n    const buildCallbackURL = (protocol, host, port) => {\n        const context = api.context.substr(0, 1) !== '/' ? '/' + api.context : api.context;\n        let url = `${protocol}://${host || '{GATEWAY_HOST}'}:${port || `{websub_event_receiver_${protocol}_endpoint}`}`;\n        url += context;\n        url += '/' + api.version;\n        url += '/webhooks_events_receiver_resource?topic=';\n        url += target.toLowerCase();\n        return url;\n    };\n\n    const getUriMappingHelperText = (value) => {\n        let fqPath;\n        if (api.endpointConfig\n            && api.endpointConfig.production_endpoints\n            && api.endpointConfig.production_endpoints.url\n            && api.endpointConfig.production_endpoints.url.length > 0\n            && value\n            && value.length > 0) {\n            const { url } = api.endpointConfig.production_endpoints;\n            const seperator = url.substr(url.length - 1, 1) !== '/' ? '/' : '';\n            fqPath = url + seperator + value;\n        }\n        return fqPath ? 'Production URL will be ' + fqPath : '';\n    };\n    const [uriMappingHelperText, setUriMappingHelperText] = useState(\n        getUriMappingHelperText(operation[verb]['x-uri-mapping']),\n    );\n\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Runtime\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            {api.type === 'WS' && (\n                <>\n                    <Grid item md={1} />\n                    <Grid item md={5}>\n                        <TextField\n                            margin='dense'\n                            fullWidth\n                            label='URL Mapping'\n                            value={operation[verb]['x-uri-mapping']}\n                            variant='outlined'\n                            helperText={uriMappingHelperText}\n                            onChange={(e) => {\n                                let { value } = e.target;\n                                if (value.length > 0 && value.substr(0, 1) !== '/') {\n                                    value = '/' + value;\n                                }\n                                setUriMappingHelperText(getUriMappingHelperText(value));\n                                operationsDispatcher({ action: 'uriMapping', data: { target, verb, value } });\n                            }}\n                        />\n                    </Grid>\n                    <Grid item md={6} />\n                </>\n            )}\n            {api.type === 'WEBSUB' && settings.environment.map((env) => (\n                <>\n                    <Grid item md={1} />\n                    <Grid item md={10}>\n                        <Typography variant='subtitle1'>{env.displayName}</Typography>\n                        <TextField\n                            margin='dense'\n                            fullWidth\n                            label='HTTP Callback URL'\n                            disabled\n                            value={buildCallbackURL('http', allEnvDeployments[env.name].vhost.host,\n                                allEnvDeployments[env.name].vhost.websubHttpPort)}\n                            variant='outlined'\n                            InputProps={{\n                                endAdornment: (\n                                    <InputAdornment position='end'>\n                                        <CopyToClipboard\n                                            text={buildCallbackURL('http',\n                                                allEnvDeployments[env.name].vhost.host,\n                                                allEnvDeployments[env.name].vhost.websubHttpPort)}\n                                        >\n                                            <IconButton>\n                                                <Icon>\n                                                    <FileCopy />\n                                                </Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                        <TextField\n                            margin='dense'\n                            fullWidth\n                            label='HTTPS Callback URL'\n                            disabled\n                            value={buildCallbackURL('https', allEnvDeployments[env.name].vhost.host,\n                                allEnvDeployments[env.name].vhost.websubHttpsPort)}\n                            variant='outlined'\n                            InputProps={{\n                                endAdornment: (\n                                    <InputAdornment position='end'>\n                                        <CopyToClipboard\n                                            text={buildCallbackURL('https',\n                                                allEnvDeployments[env.name].vhost.host,\n                                                allEnvDeployments[env.name].vhost.websubHttpsPort)}\n                                        >\n                                            <IconButton>\n                                                <Icon>\n                                                    <FileCopy />\n                                                </Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                    </Grid>\n                    <Grid item md={1} />\n                </>\n            ))}\n        </>\n    );\n}\n\nRuntime.propTypes = {\n    operation: PropTypes.shape({\n        target: PropTypes.string.isRequired,\n        verb: PropTypes.string.isRequired,\n        spec: PropTypes.shape({}).isRequired,\n    }).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport PropTypes from 'prop-types';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\n/**\n * Return a group container , User should provide the operations list as the child component\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function GroupOfOperations(props) {\n    const { children, tag } = props;\n    return (\n        <ExpansionPanel defaultExpanded>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} aria-controls='panel1a-content' id='panel1a-header'>\n                <Typography variant='h4'>\n                    {tag}\n                </Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>{children}</ExpansionPanelDetails>\n        </ExpansionPanel>\n    );\n}\n\nGroupOfOperations.propTypes = {\n    children: PropTypes.element.isRequired,\n    tag: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport { FormattedMessage } from 'react-intl';\n\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n        minWidth: 120,\n    },\n    paper: {\n        paddingLeft: theme.spacing(4),\n        paddingTop: theme.spacing(1.5),\n        paddingBottom: theme.spacing(0.5),\n        marginTop: '12px',\n    },\n}));\n\n/**\n * Renders Subscription configurations for WebSub APIs.\n *\n * @export\n * @param {*} props\n * @returns\n */\nfunction SubscriptionConfig(props) {\n    const {\n        websubSubscriptionConfigDispatcher, websubSubscriptionConfiguration,\n    } = props;\n\n    const [isExpanded, setIsExpanded] = useState(false);\n    const classes = useStyles();\n    const [enabled, setEnabled] = useState(!!websubSubscriptionConfiguration.enable);\n\n    /**\n     *\n     */\n    function generateSecret() {\n        return 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'.replace(/[x]/g, (c) => {\n            // eslint-disable-next-line no-bitwise\n            const r = Math.random() * 16 | 0;\n            // eslint-disable-next-line no-bitwise, no-mixed-operators\n            const v = c === 'x' ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    }\n\n    /**\n     *\n     */\n    function getAlgorithms() {\n        return ['SHA1', 'SHA256', 'SHA384', 'SHA512'];\n    }\n\n    return (\n        <ExpansionPanel\n            expanded={isExpanded}\n            onChange={(e, expanded) => {\n                setIsExpanded(expanded);\n            }}\n            className={classes.paperStyles}\n        >\n            <ExpansionPanelSummary\n                disableRipple\n                disableTouchRipple\n                expandIcon={<ExpandMoreIcon />}\n                aria-controls='panel2a-content'\n                id='panel2a-header'\n                classes={{ content: classes.contentNoMargin }}\n            >\n                <Grid item md={12} xs={12}>\n                    <Box ml={1}>\n                        <Typography variant='subtitle1' gutterBottom>\n                            Subscription Configuration\n                        </Typography>\n                    </Box>\n                </Grid>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n                <Grid container direction='row' spacing={0} justify='center' alignItems='center'>\n                    <Grid item xs={6}>\n                        <FormControl component='fieldset'>\n                            <FormControlLabel\n                                control={(\n                                    <Switch\n                                        checked={websubSubscriptionConfiguration.enable}\n                                        onChange={({ target: { checked } }) => {\n                                            setEnabled(checked);\n                                            websubSubscriptionConfigDispatcher({\n                                                action: 'enable',\n                                                value: checked,\n                                            });\n                                        }}\n                                        size='small'\n                                        color='primary'\n                                    />\n                                )}\n                                label='Enable'\n                                labelPlacement='start'\n                            />\n                        </FormControl>\n                    </Grid>\n                    <Grid item xs={6} />\n                    <Grid item xs={6}>\n                        <TextField\n                            autoFocus\n                            fullWidth\n                            select\n                            disabled={!enabled}\n                            label={(\n                                <>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.Subscription.signingAlgorithm'\n                                        defaultMessage='Signing Algortithm'\n                                    />\n                                </>\n                            )}\n                            value={websubSubscriptionConfiguration.signingAlgorithm}\n                            helperText='Select an algorithm to sign the message'\n                            name='secret'\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { value } }) => websubSubscriptionConfigDispatcher({\n                                action: 'signingAlgorithm',\n                                value,\n                            })}\n                        >\n                            {\n                                getAlgorithms().map((name) => (\n                                    <MenuItem value={name} dense>\n                                        {name}\n                                    </MenuItem>\n                                ))\n                            }\n                        </TextField>\n                    </Grid>\n                    <Grid item xs={6} />\n                    <Grid item xs={6}>\n                        <TextField\n                            autoFocus\n                            fullWidth\n                            disabled={!enabled}\n                            label={(\n                                <>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.components.Subscription.signature.header'\n                                        defaultMessage='Signature Header'\n                                    />\n                                </>\n                            )}\n                            value={websubSubscriptionConfiguration.signatureHeader}\n                            helperText='Set the HTTP header use by the provider to send the signature'\n                            name='secret'\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { value } }) => websubSubscriptionConfigDispatcher({\n                                action: 'signatureHeader',\n                                value,\n                            })}\n                        />\n                    </Grid>\n                    <Grid item xs={6} />\n                    <Grid item xs={6}>\n                        <Grid container direction='row'>\n                            <Grid item xs={10}>\n                                <TextField\n                                    autoFocus\n                                    fullWidth\n                                    disabled\n                                    label={(\n                                        <>\n                                            <FormattedMessage\n                                                id='Apis.Details.Configuration.components.Subscription.secret'\n                                                defaultMessage='Secret'\n                                            />\n                                        </>\n                                    )}\n                                    value={websubSubscriptionConfiguration.secret}\n                                    helperText='Use the above secret key while registering at the provider'\n                                    name='secret'\n                                    margin='normal'\n                                    variant='outlined'\n                                />\n                            </Grid>\n                            <Grid item xs={2}>\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    disabled={!enabled}\n                                    onClick={() => websubSubscriptionConfigDispatcher({\n                                        action: 'secret',\n                                        value: generateSecret(),\n                                    })}\n                                    style={{ marginLeft: 10, marginTop: 25 }}\n                                >\n                                    Generate\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <Grid item xs={6} />\n                </Grid>\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n    );\n}\n\nSubscriptionConfig.propTypes = {\n    websubSubscriptionConfigDispatcher: PropTypes.func.isRequired,\n    websubSubscriptionConfiguration: PropTypes.shape({\n        signingAlgorithm: PropTypes.string.isRequired,\n        signatureHeader: PropTypes.string.isRequired,\n        secret: PropTypes.string.isRequired,\n        enable: PropTypes.bool.isRequired,\n    }).isRequired,\n};\n\nexport default React.memo(SubscriptionConfig);\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useReducer, useContext, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport { Link, useHistory } from 'react-router-dom';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport { FormattedMessage } from 'react-intl';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ArrowForwardIcon from '@material-ui/icons/SettingsEthernet';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport { isRestricted } from 'AppData/AuthManager';\nimport API from 'AppData/api';\nimport Endpoints from './components/Endpoints';\nimport KeyManager from './components/KeyManager';\nimport APILevelRateLimitingPolicies from './components/APILevelRateLimitingPolicies';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(3),\n    },\n    boxFlex: {\n        display: 'flex',\n        flexDirection: 'row',\n        flexWrap: 'wrap',\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    paper: {\n        padding: theme.spacing(3),\n        minHeight: '250px',\n    },\n    paperCenter: {\n        padding: theme.spacing(3),\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    heading: {\n        fontSize: '1.1rem',\n        fontWeight: 400,\n        marginBottom: theme.spacing(1),\n    },\n    itemPadding: {\n        marginBottom: theme.spacing(3),\n    },\n    arrowForwardIcon: {\n        fontSize: 50,\n        color: '#ccc',\n        position: 'absolute',\n        top: 175,\n        right: -55,\n    },\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: '38px',\n    },\n    info: {\n        display: 'flex',\n        height: '100%',\n    },\n}));\n\n/**\n *\n * Deep coping the properties in API object (what ever the object in the state),\n * making sure that no direct mutations happen when updating the state.\n * You should know the shape of the object that you are keeping in the state,\n * @param {Object} api\n * @returns {Object} Deep copy of an object\n */\nfunction copyAPIConfig(api) {\n    const keyManagers = api.apiType === API.CONSTS.APIProduct ? ['all'] : [...api.keyManagers];\n    return {\n        id: api.id,\n        name: api.name,\n        description: api.description,\n        lifeCycleStatus: api.lifeCycleStatus,\n        accessControl: api.accessControl,\n        authorizationHeader: api.authorizationHeader,\n        responseCachingEnabled: api.responseCachingEnabled,\n        cacheTimeout: api.cacheTimeout,\n        visibility: api.visibility,\n        apiThrottlingPolicy: api.apiThrottlingPolicy,\n        isDefaultVersion: api.isDefaultVersion,\n        enableSchemaValidation: api.enableSchemaValidation,\n        accessControlRoles: [...api.accessControlRoles],\n        visibleRoles: [...api.visibleRoles],\n        tags: [...api.tags],\n        maxTps: api.maxTps,\n        wsdlUrl: api.wsdlUrl,\n        transport: [...api.transport],\n        securityScheme: [...api.securityScheme],\n        corsConfiguration: {\n            corsConfigurationEnabled: api.corsConfiguration.corsConfigurationEnabled,\n            accessControlAllowCredentials: api.corsConfiguration.accessControlAllowCredentials,\n            accessControlAllowOrigins: [...api.corsConfiguration.accessControlAllowOrigins],\n            accessControlAllowHeaders: [...api.corsConfiguration.accessControlAllowHeaders],\n            accessControlAllowMethods: [...api.corsConfiguration.accessControlAllowMethods],\n        },\n        keyManagers,\n    };\n}\n/**\n * This component handles the basic configurations UI in the API details page\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function RuntimeConfiguration() {\n    /**\n     *\n     * Reduce the configuration UI related actions in to updated state\n     * @param {*} state current state\n     * @param {*} configAction dispatched configuration action\n     * @returns {Object} updated state\n     */\n    function configReducer(state, configAction) {\n        const { action, value } = configAction;\n        const nextState = { ...copyAPIConfig(state) };\n        switch (action) {\n            case 'apiThrottlingPolicy':\n            case 'maxTps':\n                nextState[action] = value;\n                return nextState;\n            case 'keymanagers':\n                nextState.keyManagers = value;\n                return nextState;\n            case 'throttlingPoliciesEnabled':\n                if (value) {\n                    nextState.apiThrottlingPolicy = '';\n                } else {\n                    nextState.apiThrottlingPolicy = null;\n                }\n                return nextState;\n            case 'allKeyManagersEnabled':\n                if (value) {\n                    nextState.keyManagers = [];\n                } else {\n                    nextState.keyManagers = ['all'];\n                }\n                return nextState;\n            default:\n                return state;\n        }\n    }\n    const { api, updateAPI } = useContext(APIContext);\n    const [isUpdating, setIsUpdating] = useState(false);\n    const history = useHistory();\n    const [apiConfig, configDispatcher] = useReducer(configReducer, copyAPIConfig(api));\n    const classes = useStyles();\n\n    /**\n     *\n     * Handle the configuration view save button action\n     */\n    function handleSave() {\n        setIsUpdating(true);\n\n        updateAPI(apiConfig)\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                }\n            })\n            .finally(() => setIsUpdating(false));\n    }\n\n    function handleSaveAndDeploy() {\n        setIsUpdating(true);\n\n        updateAPI(apiConfig)\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                }\n            })\n            .finally(() => history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            }));\n    }\n\n    return (\n        <>\n            <Box pb={3}>\n                <Typography variant='h5'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.RuntimeConfigurationWebSocket.topic.header'\n                        defaultMessage='Runtime Configurations'\n                    />\n                </Typography>\n            </Box>\n            <div className={classes.contentWrapper}>\n                <Grid container direction='row' justify='space-around' alignItems='stretch' spacing={8}>\n                    <Grid item xs={12} md={7} style={{ marginBottom: 30, position: 'relative' }}>\n                        <Typography className={classes.heading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.RuntimeConfigurationWebSocket.section.client.websocket'\n                                defaultMessage='Client Websocket'\n                            />\n                        </Typography>\n                        <div className={classes.boxFlex}>\n                            <Paper\n                                className={classes.paper}\n                                elevation={0}\n                                style={{ display: 'flex', alignItems: 'center' }}\n                            >\n                                <Box pr={3}>\n                                    <KeyManager api={apiConfig} configDispatcher={configDispatcher} />\n                                </Box>\n                                <Box pr={3}>\n                                    <APILevelRateLimitingPolicies api={apiConfig} configDispatcher={configDispatcher} />\n                                </Box>\n                            </Paper>\n                            <ArrowForwardIcon className={classes.arrowForwardIcon} />\n                        </div>\n                    </Grid>\n                    <Grid item xs={12} md={4}>\n                        <Typography className={classes.heading} variant='h6'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.RuntimeConfigurationWebSocket.section.backend.websocket'\n                                defaultMessage='Backend Websocket'\n                            />\n                        </Typography>\n                        <Paper className={classes.paper} style={{ height: 'calc(100% - 75px)' }} elevation={0}>\n                            {!api.isAPIProduct() && (\n                                <>\n                                    <Endpoints api={api} />\n                                </>\n                            )}\n                        </Paper>\n                    </Grid>\n                </Grid>\n                <Grid container>\n                    <Grid container direction='row' alignItems='center' spacing={1} style={{ marginTop: 20 }}>\n                        <Grid item>\n                            {api.isRevision\n                                || ((apiConfig.visibility === 'RESTRICTED' && apiConfig.visibleRoles.length === 0)\n                                || isRestricted(['apim:api_create'], api)) ? (\n                                    <Button\n                                        disabled\n                                        type='submit'\n                                        variant='contained'\n                                        color='primary'\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Configuration.Configuration.save'\n                                            defaultMessage='Save'\n                                        />\n                                    </Button>\n                                ) : (\n                                    <CustomSplitButton\n                                        handleSave={handleSave}\n                                        handleSaveAndDeploy={handleSaveAndDeploy}\n                                        isUpdating={isUpdating}\n                                    />\n                                )}\n                        </Grid>\n                        <Grid item>\n                            <Link to={'/apis/' + api.id + '/overview'}>\n                                <Button>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.cancel'\n                                        defaultMessage='Cancel'\n                                    />\n                                </Button>\n                            </Link>\n                        </Grid>\n                        {isRestricted(['apim:api_create'], api) && (\n                            <Grid item>\n                                <Typography variant='body2' color='primary'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.update.not.allowed'\n                                        defaultMessage={\n                                            '* You are not authorized to update particular fields of'\n                                            + ' the API due to insufficient permissions'\n                                        }\n                                    />\n                                </Typography>\n                            </Grid>\n                        )}\n                    </Grid>\n                </Grid>\n            </div>\n        </>\n    );\n}\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\n\nconst useStyles = makeStyles((theme) => ({\n    expansionPanel: {\n        marginBottom: theme.spacing(3),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n        display: 'inline-flex',\n    },\n    iconSpace: {\n        marginLeft: theme.spacing(0.5),\n    },\n    actionSpace: {\n        margin: '-7px auto',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: 1.5,\n    },\n    keyManagerSelect: {\n        minWidth: 180,\n    },\n}));\n\n/**\n *\n * API Level Rate Limiting configuration\n * @param {*} props\n * @returns\n */\nexport default function APILevelRateLimitingPolicies(props) {\n    const [apiFromContext] = useAPI();\n    const classes = useStyles();\n    const {\n        configDispatcher,\n        api: { apiThrottlingPolicy },\n    } = props;\n    const [apiRateLimits, setApiRateLimits] = useState([]);\n    const handleChange = (event) => {\n        configDispatcher({\n            action: 'apiThrottlingPolicy',\n            value: event.target.value,\n        });\n    };\n\n    useEffect(() => {\n        API.policies('api').then((response) => setApiRateLimits(response.body.list));\n    }, []);\n\n    return (\n        <ExpansionPanel className={classes.expansionPanel} defaultExpanded>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                <Typography className={classes.subHeading} variant='h6'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.components.APILevelRateLimitingPolicies.configuration'\n                        defaultMessage='Rate Limiting Configuration'\n                    />\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.APILevelRateLimitingPolicies.components.Configuration.tooltip'\n                                defaultMessage={'Selected Rate Limiting Policy will be applied to all the'\n                                + ' requests of this API.'}\n                            />\n                        )}\n                        aria-label='Rate Limiting Policies'\n                        placement='right-end'\n                        interactive\n                    >\n                        <HelpOutline className={classes.iconSpace} />\n                    </Tooltip>\n                </Typography>\n                <FormControlLabel\n                    className={classes.actionSpace}\n                    control={(\n                        <Switch\n                            disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                            checked={!(apiThrottlingPolicy === null)}\n                            onChange={({ target: { checked } }) => configDispatcher({\n                                action: 'throttlingPoliciesEnabled',\n                                value: checked,\n                            })}\n                            color='primary'\n                        />\n                    )}\n                />\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails className={classes.expansionPanelDetails}>\n                <Grid container spacing={1} alignItems='center'>\n                    <Grid item md={6} xs={12}>\n                        {!(apiThrottlingPolicy === null) && (\n                            <TextField\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                id='operation_throttling_policy'\n                                select\n                                value={apiThrottlingPolicy}\n                                onChange={handleChange}\n                                label='Rate limiting policies'\n                                margin='dense'\n                                variant='outlined'\n                                style={{ display: 'flex', minWidth: 180 }}\n                            >\n                                {apiRateLimits.map((rateLimit) => (\n                                    <MenuItem key={rateLimit.name} value={rateLimit.name}>\n                                        {rateLimit.displayName}\n                                    </MenuItem>\n                                ))}\n                            </TextField>\n                        )}\n                    </Grid>\n                </Grid>\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n    );\n}\n\nAPILevelRateLimitingPolicies.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    configDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport Api from 'AppData/api';\nimport { Progress } from 'AppComponents/Shared';\nimport { withStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Alert from 'AppComponents/Shared/Alert';\n\nimport LifeCycleUpdate from './LifeCycleUpdate';\nimport LifeCycleHistory from './LifeCycleHistory';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    historyHead: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n});\n/**\n *\n *\n * @class LifeCycle\n * @extends {Component}\n */\nclass LifeCycle extends Component {\n    /**\n     * Creates an instance of LifeCycle.\n     * @param {Object} props\n     * @memberof LifeCycle\n     */\n    constructor(props) {\n        super(props);\n        this.api = new Api();\n        this.state = {\n            lcHistory: null,\n            checkList: [],\n            certList: [],\n        };\n        this.updateData = this.updateData.bind(this);\n        this.handleChangeCheckList = this.handleChangeCheckList.bind(this);\n    }\n\n    /**\n     *\n     * @inheritdoc\n     * @memberof LifeCycle\n     */\n    componentDidMount() {\n        const { api: { id } } = this.props;\n        const promisedClientCerts = Api.getAllClientCertificates(id);\n        const { intl } = this.props;\n        promisedClientCerts.then((certList) => {\n            const clientCerts = certList.body;\n            this.setState({\n                certList: [...clientCerts.certificates],\n            });\n            this.updateData();\n        }).catch((error) => {\n            if (process.env.NODE_ENV !== 'production') {\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.LifeCycle.LifeCycleUpdate.error.certs',\n                    defaultMessage: 'Error while retrieving certificates',\n                }));\n                console.error(error);\n            }\n        });\n    }\n\n    handleChangeCheckList = (index) => (event, checked) => {\n        const { checkList } = this.state;\n        checkList[index].checked = checked;\n        this.setState({ checkList });\n    };\n\n    /**\n     *\n     *\n     * @memberof LifeCycle\n     */\n    updateData() {\n        const { api: { id } } = this.props;\n        const promisedAPI = Api.get(id);\n        const promisedLcState = this.api.getLcState(id);\n        const promisedLcHistory = this.api.getLcHistory(id);\n        Promise.all([promisedAPI, promisedLcState, promisedLcHistory])\n            .then((response) => {\n                const api = response[0];\n                const lcState = response[1].body;\n                const lcHistory = response[2].body.list;\n\n                // Creating checklist\n                const checkList = [];\n                let index = 0;\n                for (const item of lcState.checkItems) {\n                    checkList.push({\n                        index,\n                        label: item.name,\n                        value: item.name,\n                        checked: false,\n                    });\n                    index++;\n                }\n                this.setState({\n                    api,\n                    lcState,\n                    lcHistory,\n                    checkList,\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n            });\n    }\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof LifeCycle\n     */\n    render() {\n        const { classes } = this.props;\n        const {\n            api, lcState, checkList, lcHistory, certList,\n        } = this.state;\n        const apiFromContext = this.context.api;\n        if (apiFromContext && isRestricted(['apim:api_publish'], apiFromContext)) {\n            return (\n                <Grid container direction='row' alignItems='center' spacing={4} style={{ marginTop: 20 }}>\n                    <Grid item>\n                        <Typography variant='body2' color='primary'>\n                            <FormattedMessage\n                                id='Apis.Details.LifeCycle.LifeCycle.change.not.allowed'\n                                defaultMessage={\n                                    '* You are not authorized to change the life cycle state of the API'\n                                    + ' due to insufficient permissions'\n                                }\n                            />\n                        </Typography>\n                    </Grid>\n                </Grid>\n            );\n        }\n        if (!lcState) {\n            return <Progress />;\n        }\n        return (\n            <>\n                <Typography id='itest-api-details-lifecycle-head' variant='h4' gutterBottom>\n                    <FormattedMessage id='Apis.Details.LifeCycle.LifeCycle.lifecycle' defaultMessage='Lifecycle' />\n                </Typography>\n                <div className={classes.contentWrapper}>\n                    <Grid container>\n                        <Grid item xs={12}>\n                            <LifeCycleUpdate\n                                handleUpdate={this.updateData}\n                                lcState={lcState}\n                                checkList={checkList}\n                                handleChangeCheckList={this.handleChangeCheckList}\n                                api={api}\n                                certList={certList}\n                            />\n                        </Grid>\n                        <Grid item xs={12}>\n                            {lcHistory.length > 1 && (\n                                <div>\n                                    <Typography variant='h6' gutterBottom className={classes.historyHead}>\n                                        <FormattedMessage\n                                            id='Apis.Details.LifeCycle.LifeCycle.history'\n                                            defaultMessage='History'\n                                        />\n                                    </Typography>\n                                    <LifeCycleHistory lcHistory={lcHistory} />\n                                </div>\n                            )}\n                        </Grid>\n                    </Grid>\n                </div>\n            </>\n        );\n    }\n}\n\nLifeCycle.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n};\n\nLifeCycle.contextType = ApiContext;\n\nexport default withStyles(styles)(LifeCycle);\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Box from '@material-ui/core/Box';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport API from 'AppData/api';\nimport { CircularProgress } from '@material-ui/core';\nimport { ScopeValidation, resourceMethod, resourcePath } from 'AppData/ScopeValidation';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Banner from 'AppComponents/Shared/Banner';\nimport LaunchIcon from '@material-ui/icons/Launch';\n// import Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\nimport { Link as RouterLink } from 'react-router-dom';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Configurations from 'Config';\nimport LifeCycleImage from './LifeCycleImage';\nimport CheckboxLabels from './CheckboxLabels';\nimport LifecyclePending from './LifecyclePending';\nimport { API_SECURITY_MUTUAL_SSL_MANDATORY, API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY }\n    from '../Configuration/components/APISecurity/components/apiSecurityConstants';\n\nconst styles = (theme) => ({\n    buttonsWrapper: {\n        marginTop: 40,\n    },\n    stateButton: {\n        marginRight: theme.spacing(),\n    },\n    paperCenter: {\n        padding: theme.spacing(2),\n        display: 'flex',\n        alignItems: 'left',\n        justifyContent: 'left',\n    },\n    subHeading: {\n        fontSize: '1rem',\n        fontWeight: 400,\n        margin: 0,\n        display: 'inline-flex',\n        lineHeight: '38px',\n    },\n});\n\n/**\n *\n *\n * @class LifeCycleUpdate\n * @extends {Component}\n */\nclass LifeCycleUpdate extends Component {\n    /**\n     * @param {*} props @inheritdoc\n     */\n    constructor(props) {\n        super(props);\n        this.updateLifeCycleState = this.updateLifeCycleState.bind(this);\n        this.api = new API();\n        this.WORKFLOW_STATUS = {\n            CREATED: 'CREATED',\n            APPROVED: 'APPROVED',\n        };\n        this.state = {\n            newState: null,\n            isUpdating: null,\n            pageError: null,\n            isOpen: false,\n            deploymentsAvailable: false,\n        };\n        this.setIsOpen = this.setIsOpen.bind(this);\n    }\n\n    /**\n     *\n     * Set Deployment availbility\n     */\n    componentDidMount() {\n        const {\n            api: { id: apiUUID },\n        } = this.props;\n        this.api.getRevisionsWithEnv(apiUUID).then((result) => {\n            this.setState({ deploymentsAvailable: result.body.count > 0 });\n        });\n    }\n\n    /**\n     *\n     * Set isOpen state of the dialog box which shows the caution message when publish without deploying\n     * @param {Boolean} isOpen Should dialog box is open or not\n     */\n    setIsOpen(isOpen) {\n        this.setState({ isOpen });\n    }\n\n    /**\n     * @param {*} apiUUID api UUID\n     * @param {*} action life cycle action\n     * @memberof LifeCycleUpdate\n     */\n    updateLCStateOfAPI(apiUUID, action) {\n        this.setState({ isUpdating: action });\n        let promisedUpdate;\n        const lifecycleChecklist = this.props.checkList.map((item) => item.value + ':' + item.checked);\n        if (lifecycleChecklist.length > 0) {\n            promisedUpdate = this.api.updateLcState(apiUUID, action, lifecycleChecklist);\n        } else {\n            promisedUpdate = this.api.updateLcState(apiUUID, action);\n        }\n        promisedUpdate\n            .then((response) => {\n                /* TODO: Handle IO erros ~tmkb */\n                // get the latest state of the API\n                this.context.updateAPI();\n                const newState = response.body.lifecycleState.state;\n                const { workflowStatus } = response.body;\n                this.setState({ newState });\n                const { intl } = this.props;\n\n                if (workflowStatus === this.WORKFLOW_STATUS.CREATED) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.LifeCycle.LifeCycleUpdate.success.createStatus',\n                        defaultMessage: 'Lifecycle state change request has been sent',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.LifeCycle.LifeCycleUpdate.success.otherStatus',\n                        defaultMessage: 'Lifecycle state updated successfully',\n                    }));\n                }\n            })\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                    this.setState({ pageError: error.response.body });\n                } else {\n                    // TODO add i18n ~tmkb\n                    const message = 'Something went wrong while updating the lifecycle';\n                    Alert.error(message);\n                    this.setState({ pageError: error.response.body });\n                }\n                console.error(error);\n            })\n            .finally(() => {\n                this.setState({ isUpdating: null });\n            });\n    }\n\n    /**\n     *\n     * Set handle click warning\n     */\n    handleClick() {\n        const {\n            api: { id: apiUUID },\n        } = this.props;\n        this.setIsOpen(false);\n        this.updateLCStateOfAPI(apiUUID, 'Publish');\n    }\n\n    /**\n     *\n     *\n     * @param {*} event event\n     * @memberof LifeCycleUpdate\n     */\n    updateLifeCycleState(event) {\n        const { deploymentsAvailable } = this.state;\n        event.preventDefault();\n        let action = event.currentTarget.getAttribute('data-value');\n        if (action === 'Deploy To Test') {\n            action = 'Deploy as a Prototype';\n        }\n        const {\n            api: { id: apiUUID },\n        } = this.props;\n        if (action === 'Publish' && !deploymentsAvailable) {\n            this.setIsOpen(true);\n        } else {\n            this.updateLCStateOfAPI(apiUUID, action);\n        }\n    }\n\n    /**\n     * @inheritdoc\n     * @memberof LifeCycleUpdate\n     */\n    render() {\n        const {\n            api, lcState, classes, theme, handleChangeCheckList, checkList, certList,\n        } = this.props;\n        const lifecycleStates = [...lcState.availableTransitions];\n        const { newState, pageError, isOpen } = this.state;\n        const isWorkflowPending = api.workflowStatus && api.workflowStatus === this.WORKFLOW_STATUS.CREATED;\n        const lcMap = new Map();\n        lcMap.set('Published', 'Publish');\n        lcMap.set('Prototyped', 'Deploy as a prototype');\n        lcMap.set('Deprecated', 'Deprecate');\n        lcMap.set('Blocked', 'Block');\n        lcMap.set('Created', 'Create');\n        lcMap.set('Retired', 'Retire');\n        const isPrototype = api.endpointConfig && api.endpointConfig.implementation_status === 'prototyped';\n        const isMutualSSLEnabled = api.securityScheme.includes(API_SECURITY_MUTUAL_SSL_MANDATORY);\n        const isAppLayerSecurityMandatory = api.securityScheme.includes(\n            API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY,\n        );\n        const isCertAvailable = certList.length !== 0;\n        const isBusinessPlanAvailable = api.policies.length !== 0;\n        const lifecycleButtons = lifecycleStates.map((item) => {\n            const state = { ...item, displayName: item.event };\n            if (state.event === 'Deploy as a Prototype') {\n                if (state.displayName === 'Deploy as a Prototype') {\n                    state.displayName = 'Prototype';\n                }\n                return {\n                    ...state,\n                    disabled: !isPrototype || (api.type !== 'WEBSUB' && api.endpointConfig == null),\n                };\n            }\n            if (state.event === 'Publish') {\n                return {\n                    ...state,\n                    disabled:\n                        (api.type !== 'WEBSUB' && api.endpointConfig === null)\n                        || (isMutualSSLEnabled && !isCertAvailable)\n                        || (isAppLayerSecurityMandatory && !isBusinessPlanAvailable)\n                        || (api.type !== 'WEBSUB' && api.endpointConfig != null\n                            && api.endpointConfig.implementation_status === 'prototyped'),\n                };\n            }\n            return {\n                ...state,\n                disabled: false,\n            };\n        });\n\n        return (\n            <Grid container>\n                {isWorkflowPending ? (\n                    <Grid item xs={12}>\n                        <LifecyclePending currentState={lcState.state} />\n                    </Grid>\n                ) : (\n                    <Grid item xs={12}>\n                        {theme.custom.lifeCycleImage ? (\n                            <img\n                                src={Configurations.app.context + theme.custom.lifeCycleImage}\n                                alt='life cycles'\n                            />\n                        ) : (\n                            <Grid container spacing={3}>\n                                <Grid item xs={8}>\n                                    <LifeCycleImage lifeCycleStatus={newState || api.lifeCycleStatus} />\n                                </Grid>\n                                {(api.lifeCycleStatus === 'CREATED'\n                                    || api.lifeCycleStatus === 'PROTOTYPED') && (\n                                    <Grid item xs={3}>\n                                        <CheckboxLabels\n                                            api={api}\n                                            isMutualSSLEnabled={isMutualSSLEnabled}\n                                            isAppLayerSecurityMandatory={isAppLayerSecurityMandatory}\n                                            isCertAvailable={isCertAvailable}\n                                            isBusinessPlanAvailable={isBusinessPlanAvailable}\n                                        />\n                                    </Grid>\n                                )}\n                            </Grid>\n                        )}\n                    </Grid>\n                )}\n                <Grid item xs={12}>\n                    {!isWorkflowPending && (\n                        <FormGroup row>\n                            {checkList.map((checkItem, index) => (\n                                <FormControlLabel\n                                    key={checkList[index].value}\n                                    control={(\n                                        <Checkbox\n                                            checked={checkList[index].checked}\n                                            onChange={handleChangeCheckList(index)}\n                                            value={checkList[index].value}\n                                            color='primary'\n                                        />\n                                    )}\n                                    label={checkList[index].label}\n                                />\n                            ))}\n                        </FormGroup>\n                    )}\n                    <ScopeValidation resourcePath={resourcePath.API_CHANGE_LC} resourceMethod={resourceMethod.POST}>\n                        <div className={classes.buttonsWrapper}>\n                            {!isWorkflowPending\n                                && lifecycleButtons.map((transitionState) => {\n                                    /* Skip when transitions available for current state ,\n                            this occurs in states where have allowed re-publishing in prototype and published sates */\n                                    return (\n                                        <Button\n                                            disabled={transitionState.disabled\n                                                || this.state.isUpdating || api.isRevision}\n                                            variant='contained'\n                                            color='primary'\n                                            className={classes.stateButton}\n                                            key={transitionState.event}\n                                            data-value={transitionState.event}\n                                            onClick={this.updateLifeCycleState}\n                                        >\n                                            {transitionState.displayName}\n                                            {this.state.isUpdating === transitionState.event && (\n                                                <CircularProgress size={18} />\n                                            )}\n                                        </Button>\n                                    );\n                                })}\n                        </div>\n                    </ScopeValidation>\n                </Grid>\n                <Dialog\n                    open={isOpen}\n                    onClose={() => this.setIsOpen(false)}\n                    aria-labelledby='alert-dialog-title'\n                    aria-describedby='alert-dialog-description'\n                >\n                    <DialogTitle id='alert-dialog-title'>\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.components'\n                            defaultMessage='Publish API without deployments'\n                        />\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id='alert-dialog-description'>\n                            <Typography variant='subtitle1' display='block' gutterBottom>\n                                <FormattedMessage\n                                    id='Apis.Details.LifeCycle.publish.content'\n                                    defaultMessage={'The API will not be available for '\n                                        + 'consumption unless it is deployed.'}\n                                />\n                            </Typography>\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button\n                            onClick={() => {\n                                this.setIsOpen(false);\n                            }}\n                        >\n                            Cancel\n                        </Button>\n                        <Button\n                            color='primary'\n                            onClick={() => this.handleClick()}\n                        >\n                            Publish\n                        </Button>\n                        <Link\n                            component={RouterLink}\n                            to={'/apis/' + api.id + '/deployments'}\n                        >\n                            <Box fontSize='button.fontSize' display='flex' fontFamily='fontFamily'>\n                                <FormattedMessage\n                                    id='Apis.Details.LifeCycle.publish.content.info.deployments'\n                                    defaultMessage='Deployments'\n                                />\n                                <LaunchIcon fontSize='small' />\n                            </Box>\n\n                        </Link>\n                    </DialogActions>\n                </Dialog>\n                {/* Page error banner */}\n                {pageError && (\n                    <Grid item xs={11}>\n                        <Banner\n                            onClose={() => this.setState({ pageError: null })}\n                            disableActions\n                            dense\n                            paperProps={{ elevation: 1 }}\n                            type='error'\n                            message={pageError}\n                        />\n                    </Grid>\n                )}\n                {/* end of Page error banner */}\n            </Grid>\n        );\n    }\n}\n\nLifeCycleUpdate.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n    checkList: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n    lcState: PropTypes.shape({}).isRequired,\n    handleChangeCheckList: PropTypes.func.isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nLifeCycleUpdate.contextType = ApiContext;\n\nexport default withStyles(styles, { withTheme: true })(injectIntl(LifeCycleUpdate));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n/*\n `max-len` es-lint rule has been disabled for the entire file due to the generated svg elements in the file.\n it's impossible to get them under 120 columns rule\n  */\n/* eslint-disable max-len */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = () => ({\n    root: {\n        marginTop: 30,\n    },\n});\n\n/**\n *\n *\n * @class LifeCycleImage\n * @extends {React.Component}\n */\nclass LifeCycleImage extends React.Component {\n    /**\n     *\n     *\n     * @param {*} element\n     * @returns\n     * @memberof LifeCycleImage\n     */\n    highLightMe(element) {\n        const style = {};\n        if (!element.startsWith(this.props.lifeCycleStatus.toLowerCase())) {\n            style.opacity = 0.2;\n        }\n        return style;\n    }\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof LifeCycleImage\n     */\n    render() {\n        const { classes } = this.props;\n\n        return (\n            <svg\n                xmlns='http://www.w3.org/2000/svg'\n                width='633'\n                height='244'\n                viewBox='0 0 743.09858 287.34519'\n                id='svg5953'\n                className={classes.root}\n            >\n                <defs id='defs5955'>\n                    <path\n                        transform='scale(.26458)'\n                        id='path5588'\n                        d='m 1738.3694,290.45336 a 290.37688,290.37688 0 0 1 268.3994,-179.55952 290.37688,290.37688 0 0 1 5.8758,0.0595'\n                        style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                        color='#000'\n                        overflow='visible'\n                        fill='none'\n                        strokeWidth='6.633'\n                        strokeLinejoin='round'\n                    />\n                    <path\n                        transform='scale(.26458)'\n                        id='path5578'\n                        d='m 2103.6746,127.54094 a 290.37688,290.37688 0 0 1 193.3409,265.03704'\n                        style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                        color='#000'\n                        overflow='visible'\n                        fill='none'\n                        strokeWidth='6.633'\n                        strokeLinejoin='round'\n                    />\n                    <path\n                        transform='scale(.26458)'\n                        id='path5547'\n                        d='m 1748.9295,534.82816 a 290.37688,290.37688 0 0 0 257.8393,156.81941 290.37688,290.37688 0 0 0 5.8709,-0.0593'\n                        style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                        color='#000'\n                        overflow='visible'\n                        fill='none'\n                        strokeWidth='6.633'\n                        strokeLinejoin='round'\n                    />\n                    <path\n                        transform='scale(.26458)'\n                        id='path4189'\n                        d='m 1748.9295,534.82816 a 290.37688,290.37688 0 0 0 257.8393,156.81941 290.37688,290.37688 0 0 0 5.8709,-0.0593'\n                        style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                        color='#000'\n                        overflow='visible'\n                        fill='none'\n                        strokeWidth='6.633'\n                        strokeLinejoin='round'\n                    />\n                </defs>\n                <g id='layer1' transform='translate(51.512 4.77)'>\n                    <path d='m 99,13.3622 24,0 0,24 -24,0 z' id='path6746' fill='none' />\n                    <g id='prototyped' style={this.highLightMe('prototyped')}>\n                        <text\n                            id='text6729'\n                            y='6.362'\n                            x='61'\n                            style={{ lineHeight: '125%' }}\n                            fontWeight='400'\n                            fontSize='15'\n                            fontFamily='sans-serif'\n                            letterSpacing='0'\n                            wordSpacing='0'\n                            fill='#2b2b2b'\n                        >\n                            <tspan y='6.362' x='61' id='tspan6731'>\n                                PROTOTYPED\n                            </tspan>\n                        </text>\n                        <path\n                            id='path6748'\n                            d='m 118,16.3622 -4.18,0 c -0.42,-1.16 -1.52,-2 -2.82,-2 -1.3,0 -2.4,0.84 -2.82,2 l -4.18,0 c -1.1,0 -2,0.9 -2,2 l 0,14 c 0,1.1 0.9,2 2,2 l 14,0 c 1.1,0 2,-0.9 2,-2 l 0,-14 c 0,-1.1 -0.9,-2 -2,-2 z m -7,0 c 0.55,0 1,0.45 1,1 0,0.55 -0.45,1 -1,1 -0.55,0 -1,-0.45 -1,-1 0,-0.55 0.45,-1 1,-1 z m -2,14 -4,-4 1.41,-1.41 2.59,2.58 6.59,-6.59 1.41,1.42 -8,8 z'\n                        />\n                    </g>\n                    <path d='m 224.5,133.8622 24,0 0,24 -24,0 z' id='path6762' fill='none' />\n                    <g id='published' style={this.highLightMe('published')}>\n                        <text\n                            id='text6524'\n                            y='125.476'\n                            x='207'\n                            style={{ lineHeight: '125%' }}\n                            fontWeight='400'\n                            fontSize='15'\n                            fontFamily='sans-serif'\n                            letterSpacing='0'\n                            wordSpacing='0'\n                        >\n                            <tspan y='125.476' x='207' id='tspan6526'>\n                                PUBLISHED\n                            </tspan>\n                        </text>\n                        <path\n                            id='path6764'\n                            d='m 240.5,144.8622 c 1.66,0 2.99,-1.34 2.99,-3 0,-1.66 -1.33,-3 -2.99,-3 -1.66,0 -3,1.34 -3,3 0,1.66 1.34,3 3,3 z m -8,0 c 1.66,0 2.99,-1.34 2.99,-3 0,-1.66 -1.33,-3 -2.99,-3 -1.66,0 -3,1.34 -3,3 0,1.66 1.34,3 3,3 z m 0,2 c -2.33,0 -7,1.17 -7,3.5 l 0,2.5 14,0 0,-2.5 c 0,-2.33 -4.67,-3.5 -7,-3.5 z m 8,0 c -0.29,0 -0.62,0.02 -0.97,0.05 1.16,0.84 1.97,1.97 1.97,3.45 l 0,2.5 6,0 0,-2.5 c 0,-2.33 -4.67,-3.5 -7,-3.5 z'\n                        />\n                    </g>\n                    <g id='created' style={this.highLightMe('created')}>\n                        <text\n                            id='text6520'\n                            y='282.362'\n                            x='68'\n                            style={{ lineHeight: '125%' }}\n                            fontWeight='400'\n                            fontSize='15'\n                            fontFamily='sans-serif'\n                            letterSpacing='0'\n                            wordSpacing='0'\n                        >\n                            <tspan y='282.362' x='68' id='tspan6522'>\n                                CREATED\n                            </tspan>\n                        </text>\n                        <path\n                            id='path6778'\n                            d='m 97,238.8622 c -1.1,0 -1.99,0.9 -1.99,2 l -0.01,16 c 0,1.1 0.89,2 1.99,2 l 12.01,0 c 1.1,0 2,-0.9 2,-2 l 0,-12 -6,-6 -8,0 z m 7,7 0,-5.5 5.5,5.5 -5.5,0 z'\n                        />\n                    </g>\n                    <path d='m 91,236.8622 24,0 0,24 -24,0 z' id='path6780' fill='none' />\n                    <g id='deprecated' style={this.highLightMe('deprecated')}>\n                        <text\n                            id='text6536'\n                            y='125.476'\n                            x='397.858'\n                            style={{ lineHeight: '125%' }}\n                            fontWeight='400'\n                            fontSize='15'\n                            fontFamily='sans-serif'\n                            letterSpacing='0'\n                            wordSpacing='0'\n                        >\n                            <tspan y='125.476' x='397.858' id='tspan6538'>\n                                DEPRECATED\n                            </tspan>\n                        </text>\n                        <path\n                            id='path6794'\n                            d='m 433.52944,97.811947 c 0,1.1 0.9,2 2,2 l 8,0 c 1.1,0 2,-0.9 2,-2 l 0,-12 -12,0 0,12 z m 13,-15 -3.5,0 -1,-1 -5,0 -1,1 -3.5,0 0,2 14,0 0,-2 z'\n                        />\n                        <path id='path6796' d='m 427.52944,78.811947 24,0 0,24.000003 -24,0 z' fill='none' />\n                    </g>\n                    <path d='m 427.52944,236.8622 24,0 0,24 -24,0 z' id='path6810' clipRule='evenodd' fill='none' />\n                    <g id='blocked' style={this.highLightMe('blocked')}>\n                        <text\n                            id='text6532'\n                            y='282.362'\n                            x='386.858'\n                            style={{ lineHeight: '125%' }}\n                            fontWeight='400'\n                            fontSize='15'\n                            fontFamily='sans-serif'\n                            letterSpacing='0'\n                            wordSpacing='0'\n                        >\n                            <tspan y='282.362' x='386.858' id='tspan6534'>\n                                BLOCKED\n                            </tspan>\n                        </text>\n                        <path\n                            id='path6812'\n                            d='m 450.22944,255.8622 -9.1,-9.1 c 0.9,-2.3 0.4,-5 -1.5,-6.9 -2,-2 -5,-2.4 -7.4,-1.3 l 4.3,4.3 -3,3 -4.4,-4.3 c -1.2,2.4 -0.7,5.4 1.3,7.4 1.9,1.9 4.6,2.4 6.9,1.5 l 9.1,9.1 c 0.4,0.4 1,0.4 1.4,0 l 2.3,-2.3 c 0.5,-0.4 0.5,-1.1 0.1,-1.4 z'\n                        />\n                    </g>\n                    <g id='retired' style={this.highLightMe('retired')}>\n                        <text\n                            id='text6540'\n                            y='125.483'\n                            x='627.485'\n                            style={{ lineHeight: '125%' }}\n                            fontWeight='400'\n                            fontSize='15'\n                            fontFamily='sans-serif'\n                            letterSpacing='0'\n                            wordSpacing='0'\n                        >\n                            <tspan y='125.483' x='627.485' id='tspan6542'>\n                                RETIRED\n                            </tspan>\n                        </text>\n                        <path\n                            id='path6826'\n                            d='m 663.36667,89.811947 0,2 -13,0 0,-6 9,0 c 2.21,0 4,1.79 4,4 z m -20,3 0,2 6,0 0,2 8,0 0,-2 6,0 0,-2 -20,0 z m 5.14,-1.9 c 1.16,-1.19 1.14,-3.08 -0.04,-4.24 -1.19,-1.16 -3.08,-1.14 -4.24,0.04 -1.16,1.19 -1.14,3.08 0.04,4.24 1.19,1.16 3.08,1.14 4.24,-0.04 z'\n                        />\n                        <path id='path6828' d='m 641.36667,78.811947 24,0 0,24.000003 -24,0 z' fill='none' />\n                    </g>\n                    <g id='published_to_created' style={this.highLightMe('published_to_created')}>\n                        <path\n                            id='path6872'\n                            d='m 235.84375,184.86133 c -11.86654,31.99459 -35.12697,58.48216 -65.32031,74.38281 l -5.4624,15.71344 14.85695,3.63617 c 35.16928,-17.95415 62.42125,-48.3249 76.47461,-85.22656 l -15.28708,7.18109 z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#065381'\n                        />\n                        <path\n                            id='path6985'\n                            d='m 178.61585,255.22337 -4.875,15.375 14.5,3.625'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                        <path\n                            d='m 187.11585,249.22337 -4.875,15.375 14.5,3.625'\n                            id='path6987'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                    </g>\n                    <g id='created_to_published' style={this.highLightMe('created_to_published')}>\n                        <path\n                            id='path6850'\n                            d='m 202.80469,171.18359 c -8.60566,23.79669 -25.78994,43.52064 -48.1836,55.30469 l 15.33148,4.4495 -5.74163,15.30245 c 27.19915,-14.16065 48.15744,-37.93366 58.79687,-66.69335 l -4.08764,-14.98782 z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#34b2e4'\n                        />\n                        <path\n                            d='m 200.07828,178.47337 15.66836,-6.25318 3.78013,13.89858'\n                            id='path6979'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                        <path\n                            id='path6991'\n                            d='m 195.3937,187.48898 15.66836,-6.25318 3.78013,13.89858'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                    </g>\n                    <g id='prototyped_to_published' style={this.highLightMe('prototyped_to_published')}>\n                        <path\n                            id='path6874'\n                            d='m 181.42383,-4.0683594 5.18392,15.3553234 -15.14681,3.480614 c 26.97521,14.497097 48.38501,37.525806 60.88086,65.484375 l 16.41911,5.795641 4.09261,-14.231188 C 238.22018,39.231643 213.06477,12.507292 181.42383,-4.0683594 Z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#fe912a'\n                        />\n                        <path\n                            id='path6993'\n                            d='m 228.26421,71.982698 16.39604,5.833631 3.93328,-14.097941'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                        <path\n                            d='m 224.76421,65.357698 16.39604,5.833631 3.93328,-14.097941'\n                            id='path6995'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                    </g>\n                    <g id='published_to_prototyped' style={this.highLightMe('published_to_prototyped')}>\n                        <path\n                            id='path6855'\n                            d='m 164.61328,27.712891 -16.76273,3.798407 6.57718,15.455499 c 19.64736,10.327117 35.3679,26.809879 44.75391,46.923828 l 6.94786,-12.105746 13.33339,3.763949 C 208.07457,60.73778 188.78631,40.399355 164.61328,27.712891 Z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#ffc95c'\n                        />\n                        <path\n                            id='path6997'\n                            d='m 163.43006,52.336437 -6.45235,-15.202795 16.61701,-3.535534'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                        <path\n                            d='M 171.82695,57.993291 165.3746,42.790496 181.99161,39.254962'\n                            id='path6999'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                    </g>\n                    <g id='created_to_prototyped' style={this.highLightMe('created_to_prototyped')}>\n                        <path\n                            id='path6870'\n                            d='M 35.433594,-4.7226562 C -17.800688,22.43674 -51.366944,77.095386 -51.511719,136.85742 c 0.08726,60.42038 34.333636,115.59607 88.439453,142.48828 l -5.963174,-14.43529 14.818643,-3.6858 C -1.8626488,238.10436 -32.152993,189.83798 -32.251953,136.87891 -32.191581,84.271252 -2.3316563,36.239603 44.818359,12.90625 l 7.576833,-14.3582512 z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#8b103e'\n                        />\n                        <path\n                            id='path7001'\n                            d='m 25.625,1.1122031 16.25,3 -7.125,13.7499999'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                        <path\n                            d='m 16.375,7.1122031 16.25,2.9999999 -7.125,13.75'\n                            id='path7003'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                    </g>\n                    <g id='prototyped_to_created' style={this.highLightMe('prototyped_to_created')}>\n                        <path\n                            id='path6840'\n                            d='M 52.171875,26.720703 C 10.473112,47.61586 -15.897048,90.22032 -16,136.86133 c 0.06835,46.84095 26.630186,89.61173 68.585938,110.43945 l 18.169686,-5.17409 -8.489999,-14.63841 C 27.868397,210.36444 6.0894455,175.28511 6,136.86133 6.0597413,98.328986 27.932967,63.153267 62.464844,46.056641 l -14.466177,-4.2932 z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#e34856'\n                        />\n                        <path\n                            id='path7005'\n                            d='m 39.421204,240.07329 17.677669,-4.94975 -7.778174,-14.49569'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                        <path\n                            d='m 27.930719,230.8809 17.677669,-4.94975 -7.778174,-14.49569'\n                            id='path7007'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                        />\n                    </g>\n                    <g id='deprecated_to_retired' style={this.highLightMe('deprecated_to_retired')}>\n                        <path\n                            id='rect7009'\n                            d='m 530.25049,110.51652 68.24164,0 9.89949,9.52539 -9.89949,9.40863 -68.24164,0 9.54594,-9.76218 z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#5c5c5c'\n                            strokeWidth='6.016'\n                            strokeLinecap='round'\n                            strokeLinejoin='round'\n                        />\n                        <path\n                            id='path7016'\n                            d='m 589.97554,111.03345 9.31051,8.95242 -9.42988,8.89273'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                        <path\n                            d='m 581.28804,111.03345 9.31051,8.95242 -9.42988,8.89273'\n                            id='path7018'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                    </g>\n                    <g id='published_to_deprecated' style={this.highLightMe('published_to_deprecated')}>\n                        <path\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            d='m 306.25049,110.51652 68.24164,0 9.89949,9.52539 -9.89949,9.40863 -68.24164,0 9.54594,-9.76218 z'\n                            id='path7020'\n                            color='#000'\n                            overflow='visible'\n                            fill='#5c5c5c'\n                            strokeWidth='6.016'\n                            strokeLinecap='round'\n                            strokeLinejoin='round'\n                        />\n                        <path\n                            d='m 365.97554,111.03345 9.31051,8.95242 -9.42988,8.89273'\n                            id='path7022'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                        <path\n                            id='path7024'\n                            d='m 357.28804,111.03345 9.31051,8.95242 -9.42988,8.89273'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                    </g>\n                    <g id='published_to_blocked' style={this.highLightMe('published_to_blocked')}>\n                        <path\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            d='m 306.92162,149.0749 92.7941,75.49823 1.41692,13.66474 -13.63383,0.80053 -92.79411,-75.49822 13.59185,-1.29876 z'\n                            id='path7026'\n                            color='#000'\n                            overflow='visible'\n                            fill='#65daad'\n                            strokeWidth='6.016'\n                            strokeLinecap='round'\n                            strokeLinejoin='round'\n                        />\n                        <path\n                            d='m 392.87565,219.47284 1.33665,12.84698 -12.94218,0.70939'\n                            id='path7028'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                        <path\n                            id='path7030'\n                            d='m 386.23855,213.86735 1.33664,12.84698 -12.94218,0.70939'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                    </g>\n                    <g\n                        id='blocked_to_published'\n                        transform='rotate(180 338.919 207.057)'\n                        style={this.highLightMe('blocked_to_published')}\n                    >\n                        <path\n                            id='path7039'\n                            d='m 306.92162,149.0749 92.7941,75.49823 1.41692,13.66474 -13.63383,0.80053 -92.79411,-75.49822 13.59185,-1.29876 z'\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            color='#000'\n                            overflow='visible'\n                            fill='#64d0da'\n                            strokeWidth='6.016'\n                            strokeLinecap='round'\n                            strokeLinejoin='round'\n                        />\n                        <path\n                            id='path7041'\n                            d='m 392.87565,219.47284 1.33665,12.84698 -12.94218,0.70939'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                        <path\n                            d='m 386.23855,213.86735 1.33664,12.84698 -12.94218,0.70939'\n                            id='path7043'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                    </g>\n                    <g id='blocked_to_deprecated' style={this.highLightMe('blocked_to_deprecated')}>\n                        <path\n                            style={{ isolation: 'auto', mixBlendMode: 'normal' }}\n                            d='m 427.85405,225.05409 0,-68.24164 9.52539,-9.89949 9.40863,9.89949 0,68.24164 -9.76218,-9.54594 z'\n                            id='path7045'\n                            color='#000'\n                            overflow='visible'\n                            fill='#5c5c5c'\n                            strokeWidth='6.016'\n                            strokeLinecap='round'\n                            strokeLinejoin='round'\n                        />\n                        <path\n                            d='m 428.37098,165.32904 8.95242,-9.31051 8.89273,9.42988'\n                            id='path7047'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                        <path\n                            id='path7049'\n                            d='m 428.37098,174.01654 8.95242,-9.31051 8.89273,9.42988'\n                            fill='none'\n                            fillRule='evenodd'\n                            stroke='#fff'\n                            strokeWidth='.955'\n                        />\n                    </g>\n                </g>\n            </svg>\n        );\n    }\n}\nLifeCycleImage.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    lifeCycleStatus: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles)(LifeCycleImage);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Link } from 'react-router-dom';\nimport Paper from '@material-ui/core/Paper';\nimport CloseIcon from '@material-ui/icons/Close';\nimport CheckIcon from '@material-ui/icons/Check';\nimport green from '@material-ui/core/colors/green';\nimport yellow from '@material-ui/core/colors/yellow';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nconst useStyles = makeStyles((theme) => ({\n    stateButton: {\n        marginRight: theme.spacing(),\n    },\n    paperCenter: {\n        padding: theme.spacing(2),\n        display: 'block',\n        alignItems: 'left',\n        justifyContent: 'center',\n    },\n    iconTrue: {\n        color: green[500],\n        marginRight: theme.spacing(1),\n        display: 'block',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n    },\n    iconFalse: {\n        color: theme.palette.grey[500],\n        marginRight: theme.spacing(1),\n        display: 'block',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n    },\n    iconWarn: {\n        color: yellow[700],\n        marginRight: theme.spacing(1),\n        display: 'block',\n        justifyContent: 'flex-start',\n        alignItems: 'center',\n    },\n    grid: {\n        marginTop: theme.spacing(2),\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'left',\n        alignItems: 'left',\n    },\n    labelsGrid: {\n        fontWeight: 600,\n        marginTop: theme.spacing(3),\n    },\n}));\n/**\n * This component renders the requirements list\n * @param {*} props\n */\nexport default function CheckboxLabels(props) {\n    const classes = useStyles();\n    const {\n        api, isMutualSSLEnabled, isCertAvailable, isAppLayerSecurityMandatory, isBusinessPlanAvailable,\n    } = props;\n    const isEndpointAvailable = api.endpointConfig !== null && !api.endpointConfig.implementation_status;\n    const isPrototypedAvailable = (api.endpointConfig !== null\n        && api.endpointConfig.implementation_status === 'prototyped')\n        || api.endpointImplementationType === 'INLINE';\n\n    return (\n        <Paper className={classes.paperCenter}>\n            <Grid xs={12}>\n                <Typography variant='h6'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.Configuration.requirements'\n                        defaultMessage='Requirements'\n                    />\n                </Typography>\n                <Typography variant='caption'>\n                    <FormattedMessage\n                        id='Apis.Details.Configuration.Configuration.requirements.state.transition'\n                        defaultMessage='Requirements for next state transition'\n                    />\n                </Typography>\n            </Grid>\n            {(api.lifeCycleStatus === 'CREATED' || api.lifeCycleStatus === 'PROTOTYPED') && (\n                <>\n                    <Grid xs={12} className={classes.labelsGrid}>\n                        <Typography variant='subtitle2'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Configuration.publisher'\n                                defaultMessage='Publish'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid xs={12}>\n                        {api.type !== 'WEBSUB' && (\n                            <Grid xs={12} className={classes.grid}>\n                                {isEndpointAvailable ? (\n                                    <CheckIcon className={classes.iconTrue} />\n                                ) : (\n                                    <CloseIcon className={classes.iconFalse} />\n                                )}\n                                <Typography>\n                                    <FormattedMessage\n                                        id='Apis.Details.LifeCycle.CheckboxLabels.endpoints.provided'\n                                        defaultMessage='Endpoint provided'\n                                    />\n                                </Typography>\n                                <Link to={'/apis/' + api.id + '/endpoints'}>\n                                    <LaunchIcon style={{ marginLeft: '2px' }} color='primary' fontSize='small' />\n                                </Link>\n                            </Grid>\n                        )}\n                        <>\n                            {isAppLayerSecurityMandatory && (\n                                <Grid xs={12} className={classes.grid}>\n                                    {isBusinessPlanAvailable ? (\n                                        <CheckIcon className={classes.iconTrue} />\n                                    ) : (\n                                        <CloseIcon className={classes.iconFalse} />\n                                    )}\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.LifeCycle.CheckboxLabels.business.plans.selected'\n                                            defaultMessage='Business Plan(s) selected'\n                                        />\n                                    </Typography>\n                                    <Link to={'/apis/' + api.id + '/subscriptions'}>\n                                        <LaunchIcon style={{ marginLeft: '2px' }} color='primary' fontSize='small' />\n                                    </Link>\n                                </Grid>\n                            )}\n                            {isMutualSSLEnabled && (\n                                <Grid xs={12} className={classes.grid}>\n                                    {isCertAvailable ? (\n                                        <CheckIcon className={classes.iconTrue} />\n                                    ) : (\n                                        <CloseIcon className={classes.iconFalse} />\n                                    )}\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.LifeCycle.CheckboxLabels.cert.provided'\n                                            defaultMessage='Certificate provided'\n                                        />\n                                    </Typography>\n                                    <Link to={'/apis/' + api.id + '/runtime-configuration'}>\n                                        <LaunchIcon style={{ marginLeft: '2px' }} color='primary' fontSize='small' />\n                                    </Link>\n                                </Grid>\n                            ) }\n                        </>\n                    </Grid>\n                    { api.type !== 'GRAPHQL' && (\n                        <>\n                            <Grid xs={12} className={classes.labelsGrid}>\n                                <Typography variant='subtitle2'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Configuration.Configuration.prototype'\n                                        defaultMessage='Deploy as a Prototype'\n                                    />\n                                </Typography>\n                            </Grid>\n                            <Grid xs={12}>\n                                {api.type !== 'WEBSUB' && (\n                                    <Grid xs={12} className={classes.grid}>\n                                        {isPrototypedAvailable ? (\n                                            <CheckIcon className={classes.iconTrue} />\n                                        ) : (\n                                            <CloseIcon className={classes.iconFalse} />\n                                        )}\n                                        <Typography>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Configuration.Configuration.prototype.endpoints'\n                                                    + '.provided'}\n                                                defaultMessage='Prototype Endpoint provided'\n                                            />\n                                        </Typography>\n                                        <Link to={'/apis/' + api.id + '/endpoints'}>\n                                            <LaunchIcon\n                                                style={{ marginLeft: '2px' }}\n                                                color='primary'\n                                                fontSize='small'\n                                            />\n                                        </Link>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </>\n                    )}\n                </>\n            )}\n            {api.lifeCycleStatus === 'PUBLISHED' && (\n                <>\n                    <Grid xs={12} className={classes.labelsGrid}>\n                        <Typography variant='subtitle2'>\n                            <FormattedMessage\n                                id='Apis.Details.Configuration.Configuration.prototype'\n                                defaultMessage='Deploy as a Prototype'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid xs={12}>\n                        <Grid xs={12} className={classes.grid}>\n                            {isPrototypedAvailable ? (\n                                <CheckIcon className={classes.iconTrue} />\n                            ) : (\n                                <CloseIcon className={classes.iconFalse} />\n                            )}\n                            <Typography>\n                                <FormattedMessage\n                                    id='Apis.Details.Configuration.Configuration.prototype.endpoints.provided'\n                                    defaultMessage='Prototype Endpoint provided'\n                                />\n                            </Typography>\n                            <Link to={'/apis/' + api.id + '/endpoints'}>\n                                <LaunchIcon style={{ marginLeft: '2px' }} color='primary' fontSize='small' />\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </>\n            )}\n        </Paper>\n    );\n}\n\nCheckboxLabels.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Box from '@material-ui/core/Box';\nimport PropTypes from 'prop-types';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport Alert from 'AppComponents/Shared/Alert';\nimport {\n    Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,\n} from '@material-ui/core/';\nimport Slide from '@material-ui/core/Slide';\n\nconst lifecyclePending = (props) => {\n    const { currentState } = props;\n    const intl = useIntl();\n    const [isOpen, setOpen] = useState(false);\n    const [api, updateAPI] = useAPI();\n    const deleteTask = () => {\n        const { id } = api;\n        api.cleanupPendingTask(id)\n            .then(() => {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.success',\n                    defaultMessage: 'Lifecycle task deleted successfully',\n                }));\n                updateAPI();\n            })\n            .catch((errorResponse) => {\n                console.error(errorResponse);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.error',\n                    defaultMessage: 'Error while deleting task',\n                }));\n            });\n    };\n    return (\n        <Paper>\n            <Box display='block' p={2} mt={2}>\n                <Box display='block'>\n                    <Typography variant='h6'>\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.pending'\n                            defaultMessage='Pending lifecycle state change.'\n                        />\n                    </Typography>\n                </Box>\n                <Box display='block' mt={0.5}>\n                    <Typography variant='subtitle2'>\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.current.state'\n                            defaultMessage='Current state is'\n                        />\n                        {' '}\n                        {currentState}\n                    </Typography>\n                </Box>\n                <Box display='flex' mt={2}>\n                    <Button\n                        size='small'\n                        variant='contained'\n                        color='primary'\n                        onClick={() => setOpen(true)}\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.delete.task'\n                            defaultMessage='Delete Task'\n                        />\n                    </Button>\n\n                </Box>\n            </Box>\n            <Dialog open={isOpen} transition={Slide}>\n                <DialogTitle>\n                    <FormattedMessage\n                        id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.dialog.title'\n                        defaultMessage='Delete Task'\n                    />\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.dialog.text.description'\n                            defaultMessage='The life cycle task will be removed'\n                        />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button dense onClick={() => setOpen(false)}>\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.dialog.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='text'\n                        color='primary'\n                        onClick={deleteTask}\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.LifeCycle.LifeCycleUpdate.LifecyclePending.dialog,delete'\n                            defaultMessage='Delete'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Paper>\n    );\n};\nlifecyclePending.propTypes = {\n    currentState: PropTypes.string.isRequired,\n};\nexport default lifecyclePending;\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Person from '@material-ui/icons/Person';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { FormattedMessage } from 'react-intl';\n\nconst styles = (theme) => ({\n    firstCol: {\n        width: 100,\n    },\n    personIcon: {\n        fontSize: theme.typography.fontSize,\n    },\n    avatar: {\n        width: 25,\n        height: 25,\n    },\n});\nconst LifeCycleHistory = (props) => {\n    const { classes } = props;\n    return (\n        <Paper>\n            <Table className={classes.table}>\n                <TableHead>\n                    <TableRow>\n                        <TableCell className={classes.firstCol}>\n                            <FormattedMessage id='Apis.Details.LifeCycle.LifeCycleHistory.user' defaultMessage='User' />\n                        </TableCell>\n                        <TableCell>\n                            <FormattedMessage\n                                id='Apis.Details.LifeCycle.LifeCycleHistory.action'\n                                defaultMessage='Action'\n                            />\n                        </TableCell>\n                        <TableCell>\n                            <FormattedMessage id='Apis.Details.LifeCycle.LifeCycleHistory.time' defaultMessage='Time' />\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.lcHistory.reverse().map((entry) => entry.previousState && (\n                        <TableRow key={entry.postState}>\n                            <TableCell component='th' scope='row'>\n                                <Avatar className={classes.avatar}>\n                                    <Person className={classes.personIcon} />\n                                </Avatar>\n                                <div>{entry.user}</div>\n                            </TableCell>\n                            <TableCell>\n                                <FormattedMessage\n                                    id='Apis.Details.LifeCycle.LifeCycleHistory.lifecycle.state.history'\n                                    defaultMessage='LC has changed from {previous} to {post}'\n                                    values={{ previous: entry.previousState, post: entry.postState }}\n                                />\n                            </TableCell>\n                            <TableCell>{moment(entry.updatedTime).fromNow()}</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </Paper>\n    );\n};\nLifeCycleHistory.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    lcHistory: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n};\nexport default withStyles(styles)(LifeCycleHistory);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { Route, Switch } from 'react-router-dom';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Listing from './Listing';\nimport View from './View';\nimport Edit from './Edit';\nimport EditContent from './EditContent';\nimport DocCreate from './Create';\n\nconst Documents = (props) => {\n    const { isAPIProduct } = useContext(APIContext);\n    const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n    return (\n        <div>\n            <Switch>\n                <Route exact path={'/' + urlPrefix + '/:apiUUID/documents'} component={Listing} />\n                <Route exact path={'/' + urlPrefix + '/:apiUUID/documents/:documentId/details'} component={View} />\n                <Route exact path={'/' + urlPrefix + '/:apiUUID/documents/:documentId/edit'} component={Edit} />\n                <Route\n                    exact\n                    path={'/' + urlPrefix + '/:apiUUID/documents/:documentId/edit-content'}\n                    component={EditContent} />\n                <Route exact path={'/' + urlPrefix + '/:apiUUID/documents/create'} component={DocCreate} />\n                <Route component={ResourceNotFound} />\n            </Switch>\n        </div>\n    );\n};\n\nDocuments.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n};\n\nexport default Documents;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Suspense, lazy } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport MUIDataTable from 'mui-datatables';\nimport API from 'AppData/api.js';\nimport APIProduct from 'AppData/APIProduct';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport Icon from '@material-ui/core/Icon';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Progress from 'AppComponents/Shared/Progress';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { isRestricted } from 'AppData/AuthManager';\nimport Create from './Create';\nimport MarkdownEditor from './MarkdownEditor';\nimport Edit from './Edit';\nimport Delete from './Delete';\nimport DeleteMultiple from './DeleteMultiple';\nimport Download from './Download';\n\nconst TextEditor = lazy(() => import('./TextEditor' /* webpackChunkName: \"ListingTextEditor\" */));\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    addNewWrapper: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px ' + theme.palette.grey['300'],\n        borderRadius: theme.shape.borderRadius,\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    addNewHeader: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.grey['300'],\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n    addNewOther: {\n        padding: theme.spacing(2),\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(2),\n    },\n    mainTitle: {\n        paddingRight: 10,\n    },\n    actionTable: {\n        '& td': {\n            width: 50,\n        },\n        '& td:first-child': {\n            width: 130,\n        },\n    },\n    messageBox: {\n        marginTop: 20,\n    },\n    actions: {\n        padding: '20px 0',\n        '& button': {\n            marginLeft: 0,\n        },\n    },\n    head: {\n        fontWeight: 200,\n        marginBottom: 20,\n    },\n    buttonIcon: {\n        marginRight: theme.spacing(1),\n    },\n});\nfunction LinkGenerator(props) {\n    return props.apiType === 'APIProduct' ? (\n        <Link to={'/api-products/' + props.apiId + '/documents/' + props.docId + '/details'}>{props.docName}</Link>\n    ) : (\n        <Link to={'/apis/' + props.apiId + '/documents/' + props.docId + '/details'}>{props.docName}</Link>\n    );\n}\nclass Listing extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            docs: null,\n            showAddDocs: false,\n            docsToDelete: null,\n        };\n        this.apiId = props.api.id;\n        this.toggleAddDocs = this.toggleAddDocs.bind(this);\n        this.getDocumentsList = this.getDocumentsList.bind(this);\n    }\n    /**\n     * @inheritDoc\n     * @memberof Listing\n     */\n    componentDidMount() {\n        this.getDocumentsList();\n    }\n\n    /*\n     Get the document list attached to current API and set it to the state\n     */\n    getDocumentsList() {\n        const { api, intl } = this.props;\n        const  getSortOrder = (prop) => {    \n            return function(a, b) {    \n                if (a[prop] > b[prop]) {    \n                    return 1;    \n                } else if (a[prop] < b[prop]) {    \n                    return -1;    \n                }    \n                return 0;    \n            }    \n        }  \n        if (api.apiType === API.CONSTS.APIProduct) {\n            const apiProduct = new APIProduct();\n            const docs = apiProduct.getDocuments(api.id);\n            docs.then((response) => {\n                const documentList = response.body.list.filter((item) => item.otherTypeName !== '_overview');\n                documentList.sort(getSortOrder('name'));\n                this.setState({ docs: documentList });\n            }).catch((errorResponse) => {\n                const errorData = JSON.parse(errorResponse.message);\n                const messageTxt =\n                    'Error[' + errorData.code + ']: ' + errorData.description + ' | ' + errorData.message + '.';\n                console.error(messageTxt);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Documents.Listing.documents.listing.fetching.error.message.api.product',\n                    defaultMessage: 'Error in fetching documents list of the API Product',\n                }));\n            });\n        } else {\n            const newApi = new API();\n            const docs = newApi.getDocuments(this.props.api.id);\n            docs.then((response) => {\n                const documentList = response.body.list.filter((item) => item.otherTypeName !== '_overview');\n                documentList.sort(getSortOrder('name'));\n                this.setState({ docs: documentList });\n            }).catch((errorResponse) => {\n                const errorData = JSON.parse(errorResponse.message);\n                const messageTxt =\n                    'Error[' + errorData.code + ']: ' + errorData.description + ' | ' + errorData.message + '.';\n                console.error(messageTxt);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Documents.Listing.documents.listing.fetching.error.message',\n                    defaultMessage: 'Error in fetching documents list of the API',\n                }));\n            });\n        }\n    }\n    toggleAddDocs() {\n        this.setState((oldState) => {\n            return { showAddDocs: !oldState.showAddDocs };\n        });\n    }\n    render() {\n        const { classes, api, isAPIProduct } = this.props;\n        const { docs, showAddDocs, docsToDelete } = this.state;\n        const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n        const url = `/${urlPrefix}/${api.id}/documents/create`;\n        const showActionsColumn = isRestricted(['apim:api_publish', 'apim:api_create'], api) ? 'excluded' : true;\n        const options = {\n            title: false,\n            filter: false,\n            print: false,\n            download: false,\n            viewColumns: false,\n            customToolbar: false,\n            search: false,\n            onRowsDelete: (rowData, rowMeta, that = this) => {\n                that.setState({ docsToDelete: rowData });\n                return false;\n            },\n        };\n        const columns = [\n            {\n                name: 'documentId',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                },\n            },\n            {\n                name: 'name',\n                options: {\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const docName = tableMeta.rowData[1];\n                            const docId = tableMeta.rowData[0];\n                            return (\n                                <LinkGenerator\n                                    docName={docName}\n                                    docId={docId}\n                                    apiId={this.apiId}\n                                    apiType={api.apiType}\n                                />\n                            );\n                        }\n                        return null;\n                    },\n                    filter: false,\n                    sort: false,\n                    label: (\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Listing.column.header.name'\n                            defaultMessage='name'\n                        />\n                    ),\n                },\n            },\n            {\n                name: 'sourceType',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Listing.column.header.source.type'\n                        defaultMessage='sourceType'\n                    />\n                ),\n                options: {\n                    sort: false,\n                },\n            },\n            {\n                name: 'type',\n                label: (\n                    <FormattedMessage id='Apis.Details.Documents.Listing.column.header.type' defaultMessage='type' />\n                ),\n                options: {\n                    sort: false,\n                },\n            },\n            {\n                name: 'sourceUrl',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'action',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Listing.column.header.action'\n                        defaultMessage='action'\n                    />\n                ),\n                options: {\n                    display: showActionsColumn,\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const docName = tableMeta.rowData[1];\n                            const docId = tableMeta.rowData[0];\n                            const sourceType = tableMeta.rowData[2];\n                            const sourceUrl = tableMeta.rowData[4];\n                            if (sourceType === 'MARKDOWN') {\n                                return (\n                                    <table className={classes.actionTable}>\n                                        <tr>\n                                            <td>\n                                                <MarkdownEditor docName={docName} docId={docId} apiId={this.apiId} />\n                                            </td>\n                                            <td>\n                                                <Edit\n                                                    apiType={api.apiType}\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    api\n                                                />\n                                            </td>\n                                            <td>\n                                                <Delete\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    apiType={api.apiType}\n                                                    api\n                                                />\n                                            </td>\n                                        </tr>\n                                    </table>\n                                );\n                            } else if (sourceType === 'INLINE') {\n                                return (\n                                    <table className={classes.actionTable}>\n                                        <tr>\n                                            <td>\n                                                <Suspense\n                                                    fallback={\n                                                        <FormattedMessage\n                                                            id='Apis.Details.Documents.Listing.loading'\n                                                            defaultMessage='Loading...'\n                                                        />\n                                                    }\n                                                >\n                                                    <TextEditor\n                                                        docName={docName}\n                                                        docId={docId}\n                                                        apiId={this.apiId}\n                                                        apiType={api.apiType}\n                                                    />\n                                                </Suspense>\n                                            </td>\n                                            <td>\n                                                <Edit\n                                                    apiType={api.apiType}\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    api\n                                                />\n                                            </td>\n                                            <td>\n                                                <Delete\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    apiType={api.apiType}\n                                                    api\n                                                />\n                                            </td>\n                                        </tr>\n                                    </table>\n                                );\n                            } else if (sourceType === 'URL') {\n                                return (\n                                    <table className={classes.actionTable}>\n                                        <tr>\n                                            <td>\n                                                <a href={sourceUrl}>\n                                                <Button>\n                                                    <Icon>open_in_new</Icon>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Documents.Listing.documents.open'\n                                                        defaultMessage='Open'\n                                                    />\n                                                </Button>\n                                               </a>  \n                                            </td>\n                                            <td>\n                                                <Edit\n                                                    apiType={api.apiType}\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    api\n                                                />\n                                            </td>\n                                            <td>\n                                                <Delete\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    apiType={api.apiType}\n                                                    api\n                                                />\n                                            </td>\n                                        </tr>\n                                    </table>\n                                );\n                            } else if (sourceType === 'FILE') {\n                                return (\n                                    <table className={classes.actionTable}>\n                                        <tr>\n                                            <td>\n                                                <Download docId={docId} apiId={this.apiId} />\n                                            </td>\n                                            <td>\n                                                <Edit\n                                                    apiType={api.apiType}\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    api\n                                                />\n                                            </td>\n                                            <td>\n                                                <Delete\n                                                    docName={docName}\n                                                    docId={docId}\n                                                    apiId={this.apiId}\n                                                    getDocumentsList={this.getDocumentsList}\n                                                    apiType={api.apiType}\n                                                    api\n                                                />\n                                            </td>\n                                        </tr>\n                                    </table>\n                                );\n                            } else {\n                                return <span />;\n                            }\n                        }\n                        return null;\n                    },\n                    filter: false,\n                    sort: false,\n                },\n            },\n        ];\n        if(!docs){\n            return (<Progress />);\n        }\n        return (\n            <React.Fragment>\n                {docsToDelete && (\n                    <DeleteMultiple getDocumentsList={this.getDocumentsList} docsToDelete={docsToDelete} docs={docs} />\n                )}\n                <div className={classes.titleWrapper}>\n                    <Typography id='itest-api-details-documents-head' variant='h4' className={classes.mainTitle}>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Listing.documents.listing.title'\n                            defaultMessage='Documents'\n                        />\n                    </Typography>\n                    {docs && docs.length > 0 && (\n                        <Link to={!isRestricted(['apim:api_create', 'apim:api_publish'], api) && !api.isRevision && url}>\n                            <Button\n                                size='small'\n                                className={classes.button}\n                                disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api) || api.isRevision}\n                            >\n                                <AddCircle className={classes.buttonIcon} />\n                                <FormattedMessage\n                                    id='Apis.Details.Documents.Listing.add.new.document.button'\n                                    defaultMessage='Add New Document'\n                                />\n                            </Button>\n                        </Link>\n                    )}\n                </div>\n                <div>\n                    {showAddDocs && (\n                        <Create\n                            toggleAddDocs={this.toggleAddDocs}\n                            getDocumentsList={this.getDocumentsList}\n                            apiType={api.apiType}\n                        />\n                    )}\n\n                    {docs && docs.length > 0 ? (\n                        <MUIDataTable title='' data={docs} columns={columns} options={options} />\n                    ) : (\n                        <InlineMessage type='info' height={140}>\n                            <div className={classes.contentWrapper}>\n                                <Typography variant='h5' component='h3' className={classes.head}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Documents.Listing.add.new.msg.title'\n                                        defaultMessage='Create Documents'\n                                    />\n                                </Typography>\n                                {api.apiType === API.CONSTS.APIProduct\n                                    ? \n                                <Typography component='p' className={classes.content}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Documents.Listing.APIProduct.add.new.msg.content'\n                                        defaultMessage={\n                                            'You can add different types of documents to an API.' +\n                                            ' Proper documentation helps API publishers to market their ' +\n                                            ' APIs better and sustain competition. '\n                                        }\n                                    />\n                                </Typography>\n                                    : \n                                <Typography component='p' className={classes.content}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Documents.Listing.add.new.msg.content'\n                                        defaultMessage={\n                                            'You can add different types of documents to an API.' +\n                                            ' Proper documentation helps API publishers to market their ' +\n                                            ' APIs better and sustain competition. '\n                                        }\n                                    />\n                                </Typography>\n                                }\n                                <div className={classes.actions}>\n                                    <Link to={!isRestricted(['apim:api_create', 'apim:api_publish'], api) && !api.isRevision && url}>\n                                        <Button\n                                            variant='contained'\n                                            color='primary'\n                                            className={classes.button}\n                                            disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api) || api.isRevision}\n                                        >\n                                            <FormattedMessage\n                                                id='Apis.Details.Documents.Listing.add.new.msg.button'\n                                                defaultMessage='Add New Document'\n                                            />\n                                        </Button>\n                                    </Link>\n                                </div>\n                            </div>\n                        </InlineMessage>\n                    )}\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nListing.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n        apiType: PropTypes.oneOf([API.CONSTS.API, API.CONSTS.APIProduct]),\n    }).isRequired,\n};\n\nexport default injectIntl(withAPI(withStyles(styles)(Listing)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { FormattedMessage } from 'react-intl';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\n\nfunction GoToEdit(props) {\n    const { doc } = props;\n    const [open, setOpen] = React.useState(true);\n    const { api, isAPIProduct } = useContext(APIContext);\n    const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n    const listingPath = `/${urlPrefix}/${api.id}/documents`;\n    let docContentEditPath = null;\n    if (doc && doc.body && doc.body.documentId) {\n        docContentEditPath = `/${urlPrefix}/${api.id}/documents/${doc.body.documentId}/edit-content`;\n    }\n\n    let displayAddContent;\n    if (doc.body.sourceType === 'INLINE'  || doc.body.sourceType === 'MARKDOWN') {\n        displayAddContent = true;\n    } else {\n        displayAddContent= false;\n    }\n\n    console.info('printing doc', doc);\n    function handleClose() {\n        setOpen(false);\n    }\n\n    return (\n        <Dialog\n            open={open}\n            onClose={handleClose}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle id='alert-dialog-title'>\n                {' '}\n                <FormattedMessage\n                    id='Apis.Details.Documents.GoToEdit.title'\n                    defaultMessage='Document Created Successfully'\n                />\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText id='alert-dialog-description'>\n                    {displayAddContent ? (\n                    <FormattedMessage\n                        id='Apis.Details.Documents.GoToEdit.description.content'\n                        defaultMessage= 'You can add content to the document or go back to the document listing page.'\n                    />\n                    ) : (\n                    <FormattedMessage\n                        id='Apis.Details.Documents.GoToEdit.description.file'\n                        defaultMessage= {'You can go back to the document listing page and upload' + \n                        ' the file by editing the document.'}\n                    />\n                    )}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                {displayAddContent && (<Link\n                    to={{\n                        pathname: docContentEditPath,\n                        state: { doc: doc.body },\n                    }}\n                >\n                    <Button color='primary'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.GoToEdit.add.content'\n                            defaultMessage='Add Content'\n                        />\n                    </Button>\n                </Link>)}\n                <Link to={listingPath}>\n                    <Button color='primary' autoFocus>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.GoToEdit.back.to.listing'\n                            defaultMessage='Back to Listing'\n                        />\n                    </Button>\n                </Link>\n            </DialogActions>\n        </Dialog>\n    );\n}\nGoToEdit.propTypes = {\n    doc: PropTypes.shape({}).isRequired,\n};\nexport default GoToEdit;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext, useState } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport API from 'AppData/api.js';\nimport APIProduct from 'AppData/APIProduct';\nimport Icon from '@material-ui/core/Icon';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\n\nfunction Delete(props) {\n    const { intl } = props;\n    const [open, setOpen] = useState(false);\n    const { api } = useContext(APIContext);\n\n    const runAction = (action) => {\n        if (action === 'yes') {\n            deleteDoc();\n        } else {\n            setOpen(!open);\n        }\n    };\n    const toggleOpen = () => {\n        setOpen(!open);\n    };\n    const deleteDoc = () => {\n        const {\n            apiId, docId, getDocumentsList, apiType,\n        } = props;\n        const restApi = apiType === API.CONSTS.APIProduct ? new APIProduct() : new API();\n        const docPromise = restApi.deleteDocument(apiId, docId);\n        docPromise\n            .then(() => {\n                Alert.info(`${intl.formatMessage({\n                    id: 'Apis.Details.Documents.Delete.document.delete.successfully',\n                    defaultMessage: 'deleted successfully.',\n                })}`);\n                setOpen(!open);\n                getDocumentsList();\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ apiNotFound: true });\n                }\n            });\n    };\n\n    const { apiName } = props;\n    return (\n        <div>\n            <Button onClick={toggleOpen} disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api) || api.isRevision}>\n                <Icon>delete_forever</Icon>\n                <FormattedMessage id='Apis.Details.Documents.Delete.document.delete' defaultMessage='Delete' />\n            </Button>\n            <Dialog\n                open={open}\n                onClose={toggleOpen}\n                aria-labelledby='alert-dialog-title'\n                aria-describedby='alert-dialog-description'\n            >\n                <DialogTitle id='alert-dialog-title'>\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.delete.confirm.title'\n                        defaultMessage='Delete Document'\n                    />\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id='alert-dialog-description'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Delete.document.listing.delete.confirm.body'\n                            defaultMessage={\n                                'Selected document will be deleted from the API.' +\n                                'You will not be able to undo this action.'\n                            }\n                        />\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => runAction('no')} color='default'>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Delete.document.listing.delete.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button onClick={() => runAction('yes')} color='primary' autoFocus>\n                        <FormattedMessage\n                            id='Apis.Details.Documents.Delete.document.listing.delete'\n                            defaultMessage='Yes. Delete'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\nDelete.propTypes = {\n    apiId: PropTypes.shape({}).isRequired,\n    apiType: PropTypes.string.isRequired,\n    docId: PropTypes.shape({}).isRequired,\n    getDocumentsList: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n        apiType: PropTypes.oneOf([API.CONSTS.API, API.CONSTS.APIProduct]),\n    }).isRequired,\n};\n\nexport default injectIntl(Delete);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport API from 'AppData/api.js';\nimport APIProduct from 'AppData/APIProduct';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Alert from 'AppComponents/Shared/Alert';\n\nfunction DeleteMultiple(props) {\n    const {\n        intl, docsToDelete, docs, getDocumentsList,\n    } = props;\n    const { api, isAPIProduct } = useContext(APIContext);\n    const restApi = isAPIProduct ? new APIProduct() : new API();\n\n    const [open, setOpen] = useState(true);\n\n    const runAction = (action) => {\n        if (action === 'yes') {\n            deleteDocs();\n        } else {\n            setOpen(!open);\n        }\n    };\n    const toggleOpen = () => {\n        setOpen(!open);\n    };\n    const deleteDocs = () => {\n        const docPromises = [];\n\n        docsToDelete.data.map((docIndexObj) => {\n            const doc = docs[docIndexObj.index];\n            docPromises.push(restApi.deleteDocument(api.id, doc.documentId));\n        });\n        Promise.all(docPromises)\n            .then((values) => {\n                console.log(values);\n                Alert.info(`${intl.formatMessage({\n                    id: 'Apis.Details.Documents.Delete.document.delete.successfully',\n                    defaultMessage: 'deleted successfully.',\n                })}`);\n                setOpen(!open);\n                getDocumentsList();\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(`${intl.formatMessage({\n                        id: 'Apis.Details.Documents.Delete.document.delete.error',\n                        defaultMessage: 'Error while deleting documents!',\n                    })}`);\n                }\n            });\n    };\n    useEffect(() => {\n        setOpen(true);\n    }, [docsToDelete]);\n\n    return (\n        <Dialog\n            open={open}\n            onClose={toggleOpen}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle id='alert-dialog-title'>\n                <FormattedMessage\n                    id='Apis.Details.Documents.Delete.selected.document.listing.delete.confirm.title'\n                    defaultMessage='Delete Selected Documents'\n                />\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText id='alert-dialog-description'>\n                    <strong>{api.name}</strong>\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.selected.document.listing.delete.confirm.body'\n                        defaultMessage={\n                            'Selected documents will be deleted from the API.' +\n                            ' You will not be able to undo this action.'\n                        }\n                    />\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => runAction('no')} color='default'>\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.delete.cancel'\n                        defaultMessage='Cancel'\n                    />\n                </Button>\n                <Button onClick={() => runAction('yes')} color='primary' autoFocus>\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.delete.yes'\n                        defaultMessage='Delete'\n                    />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\nDeleteMultiple.propTypes = {\n    docs: PropTypes.instanceOf(Array).isRequired,\n    getDocumentsList: PropTypes.func.isRequired,\n    docsToDelete: PropTypes.instanceOf(Array).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(DeleteMultiple);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {useState, useEffect} from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Api from 'AppData/api';\nimport Utils from 'AppData/Utils';\n\nfunction Download(props) {\n    const { intl } = props;\n\n    const { docId, apiId } = props;\n    const [isFileAvailable, setIsFileAvailable] = useState(false);\n    const [isSuccessful, setIsSuccessful] = useState(false);\n\n    useEffect(() => {\n        const api = new Api();\n        const promised_get_content = api.getFileForDocument(apiId, docId);\n        promised_get_content\n            .then((done) => {\n                setIsSuccessful(true);\n                setIsFileAvailable(true);\n            })\n            .catch((error) => {\n                setIsSuccessful(true);\n                setIsFileAvailable(false);\n            });\n    }, []);\n    const handleDownload = () => {\n        const api = new Api();\n        const promised_get_content = api.getFileForDocument(apiId, docId);\n        promised_get_content\n            .then((response) => {\n                Utils.forceDownload(response);\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(intl.formatMessage({\n                        id:'Apis.Details.Documents.Download.documents.markdown.editor.download.error',\n                        defaultMessage: 'Error downloading the file',\n                    }));\n                }\n            });\n    };\n\n    return (\n        isSuccessful &&\n        <Button onClick={handleDownload} disabled={!isFileAvailable}>\n            <Icon>arrow_downward</Icon>\n            <FormattedMessage\n                id='Apis.Details.Documents.Download.documents.listing.download'\n                defaultMessage='Download'\n            />\n        </Button>\n    );\n}\nDownload.propTypes = {\n    apiId: PropTypes.shape({}).isRequired,\n    docId: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(Download);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useContext, Suspense, lazy } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Icon from '@material-ui/core/Icon';\nimport Button from '@material-ui/core/Button';\nimport ReactSafeHtml from 'react-safe-html';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport TableRow from '@material-ui/core/TableRow';\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Utils from 'AppData/Utils';\n\nconst ReactMarkdown = lazy(() => import('react-markdown' /* webpackChunkName: \"ViewReactMD\" */));\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    titleLink: {\n        color: theme.palette.primary.main,\n    },\n    docTitle: {\n        fontWeight: 100,\n        fontSize: 50,\n        color: theme.palette.grey[500],\n    },\n    docBadge: {\n        padding: theme.spacing(1),\n        background: theme.palette.primary.main,\n        position: 'absolute',\n        top: 0,\n        marginTop: -22,\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n    button: {\n        padding: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    displayURL: {\n        padding: theme.spacing(2),\n        marginTop: theme.spacing(2),\n        background: theme.palette.grey[200],\n        color: theme.palette.getContrastText(theme.palette.grey[200]),\n        display: 'flex',\n    },\n    displayURLLink: {\n        paddingLeft: theme.spacing(2),\n    },\n    paper: {\n        marginTop: 20,\n        padding: theme.spacing(2),\n        height: '100%',\n    },\n    leftCell: {\n        width: 150,\n    },\n    summaryView: {\n        'word-break': 'break-word',\n    },\n});\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nfunction View(props) {\n    const {\n        classes,\n        fullScreen,\n        intl,\n        match: {\n            params: { documentId },\n        },\n    } = props;\n    const { api, isAPIProduct } = useContext(APIContext);\n\n    const [code, setCode] = useState('');\n    const [doc, setDoc] = useState(null);\n    const restAPI = isAPIProduct ? new APIProduct() : new API();\n\n    useEffect(() => {\n        const docPromise = restAPI.getDocument(api.id, documentId);\n        docPromise\n            .then(doc => {\n                const { body } = doc;\n                setDoc(body);\n                if (body.sourceType === 'MARKDOWN' || body.sourceType === 'INLINE') loadContentForDoc();\n            })\n            .catch(error => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n            });\n    }, [documentId]);\n\n    const loadContentForDoc = () => {\n        const docPromise = restAPI.getInlineContentOfDocument(api.id, documentId);\n        docPromise\n            .then(doc => {\n                setCode(doc.text);\n            })\n            .catch(error => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n            });\n    };\n\n    const handleDownload = () => {\n        const promised_get_content = restAPI.getFileForDocument(api.id, documentId);\n        promised_get_content\n            .then(response => {\n                Utils.forceDownload(response);\n            })\n            .catch(error => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                    Alert.error(\n                        intl.formatMessage({\n                            id: 'Apis.Details.Documents.View.error.downloading',\n                            defaultMessage: 'Error downloading the file',\n                        }),\n                    );\n                }\n            });\n    };\n    const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n    const listingPath = `/${urlPrefix}/${api.id}/documents`;\n    return (\n        doc && (\n            <React.Fragment>\n                <div className={classes.root}>\n                    <div className={classes.titleWrapper}>\n                        <Link to={listingPath} className={classes.titleLink}>\n                            <Typography variant=\"h5\" align=\"left\" className={classes.mainTitle}>\n                                <FormattedMessage id=\"Apis.Details.Documents.View.heading\" defaultMessage=\"Documents\" />\n                            </Typography>\n                        </Link>\n                        <Icon>keyboard_arrow_right</Icon>\n                        <Typography variant=\"h5\">{doc.name}</Typography>\n                    </div>\n                    <Paper className={classes.paper}>\n                        <Table className={classes.table}>\n                            <TableBody>\n                                <TableRow>\n                                    <TableCell className={classes.leftCell}>\n                                        <Typography variant=\"body1\">\n                                            <FormattedMessage\n                                                id=\"Apis.Details.Documents.View.meta.name\"\n                                                defaultMessage=\"Name\"\n                                            />\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography variant=\"body1\">{doc.name}</Typography>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell>\n                                        <Typography variant=\"body1\">\n                                            <FormattedMessage\n                                                id=\"Apis.Details.Documents.View.meta.summary\"\n                                                defaultMessage=\"Summary\"\n                                            />\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell className={classes.summaryView}>\n                                        <Typography variant=\"body1\">{doc.summary}</Typography>\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell>\n                                        <Typography variant=\"body1\">\n                                            <FormattedMessage\n                                                id=\"Apis.Details.Documents.View.meta.catogery\"\n                                                defaultMessage=\"Categorized as\"\n                                            />\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography variant=\"body1\">\n                                            {doc.type === 'OTHER' ? doc.otherTypeName : doc.type}\n                                        </Typography>{' '}\n                                    </TableCell>\n                                </TableRow>\n                                <TableRow>\n                                    <TableCell>\n                                        <Typography variant=\"body1\">\n                                            <FormattedMessage\n                                                id=\"Apis.Details.Documents.View.meta.source\"\n                                                defaultMessage=\"Source Type\"\n                                            />\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <Typography variant=\"body1\">{doc.sourceType}</Typography>{' '}\n                                    </TableCell>\n                                </TableRow>\n                            </TableBody>\n                        </Table>\n                    </Paper>\n\n                    <Paper className={classes.paper}>\n                        {doc.sourceType === 'MARKDOWN' && (\n                            <Suspense fallback={<CircularProgress />}>\n                                <ReactMarkdown escapeHtml source={code} />\n                            </Suspense>\n                        )}\n                        {doc.sourceType === 'INLINE' && <ReactSafeHtml html={code} />}\n                        {doc.sourceType === 'URL' && (\n                            <a className={classes.displayURL} href={doc.sourceUrl} target=\"_blank\">\n                                {doc.sourceUrl}\n                                <Icon className={classes.displayURLLink}>open_in_new</Icon>\n                            </a>\n                        )}\n                        {doc.sourceType === 'FILE' && (\n                            <Button\n                                variant=\"contained\"\n                                color=\"default\"\n                                className={classes.button}\n                                onClick={handleDownload}\n                            >\n                                <FormattedMessage\n                                    id=\"Apis.Details.Documents.View.btn.download\"\n                                    defaultMessage=\"Download\"\n                                />\n\n                                <Icon>arrow_downward</Icon>\n                            </Button>\n                        )}\n                    </Paper>\n                </div>\n            </React.Fragment>\n        )\n    );\n}\n\nView.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    doc: PropTypes.shape({}).isRequired,\n    apiId: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n    fullScreen: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(View));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState, Suspense, lazy } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport isEmpty from 'lodash.isempty';\nimport MarkdownEditor from './MarkdownEditor';\nimport { FormattedMessage } from 'react-intl';\nimport { Progress } from 'AppComponents/Shared';\n\nconst TextEditor = lazy(() => import('./TextEditor' /* webpackChunkName: \"EditContentTextEditor\" */));\n\nfunction EditContent(props) {\n    const [doc, setDoc] = useState(null);\n    const {\n        history: {\n            location: { state, pathname },\n            replace,\n        },\n    } = props;\n    useEffect(() => {\n        // Check if we want to show the add content screen in the case of coming from GoToEdit.jsx with history -> state props\n\n        if (!isEmpty(state)) {\n            const { doc } = state;\n            if (doc) {\n                setDoc(doc);\n            }\n        }\n    }, []);\n    return (\n        <React.Fragment>\n            {doc && doc.sourceType === 'MARKDOWN' && (\n                <MarkdownEditor docName={doc.name} docId={doc.documentId} showAtOnce />\n            )}\n            {doc && doc.sourceType === 'INLINE' && (\n                <Suspense\n                    fallback={<Progress />}\n                >\n                    <TextEditor docName={doc.name} docId={doc.documentId} showAtOnce />\n                </Suspense>\n            )}\n        </React.Fragment>\n    );\n}\nexport default withRouter(EditContent);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Box from '@material-ui/core/Box';\nimport TextField from '@material-ui/core/TextField';\nimport Api from 'AppData/api';\nimport { Progress } from 'AppComponents/Shared';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport APIRateLimiting from '../Resources/components/APIRateLimiting';\nimport Operation from './Operation';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 400,\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    scopes: {\n        width: 400,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    button: {\n        marginLeft: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n    buttonMain: {\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n        marginRight: theme.spacing(1),\n    },\n    addNewWrapper: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px ' + theme.palette.grey['300'],\n        borderRadius: theme.shape.borderRadius,\n        marginTop: theme.spacing(2),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    addNewHeader: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.grey['300'],\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n    addNewOther: {\n        padding: theme.spacing(2),\n    },\n    radioGroup: {\n        display: 'flex',\n        flexDirection: 'row',\n        width: 300,\n    },\n    addResource: {\n        width: 600,\n        marginTop: 0,\n    },\n    buttonIcon: {\n        marginRight: 10,\n    },\n    expansionPanel: {\n        marginBottom: theme.spacing(1),\n    },\n    expansionPanelDetails: {\n        flexDirection: 'column',\n    },\n});\n\n/**\n * This class defined for operation List\n */\nclass Operations extends React.Component {\n    /**\n     *\n     * @param {*} props the props parameters\n     */\n    constructor(props) {\n        super(props);\n        const { api } = props;\n        const { operations } = api;\n        const operationCopy = [...operations];\n        operationCopy.sort((a, b) => ((a.target + a.verb > b.target + b.verb) ? 1 : -1));\n        this.state = {\n            notFound: false,\n            apiPolicies: [],\n            operations: operationCopy,\n            apiThrottlingPolicy: api.apiThrottlingPolicy,\n            filterKeyWord: '',\n            isSaving: false,\n            sharedScopes: [],\n            apiScopesByName: {},\n            sharedScopesByName: {},\n        };\n\n        this.newApi = new Api();\n        this.handleUpdateList = this.handleUpdateList.bind(this);\n        this.handleApiThrottlePolicy = this.handleApiThrottlePolicy.bind(this);\n        this.updateOperations = this.updateOperations.bind(this);\n    }\n\n    /**\n     *\n     */\n    componentDidMount() {\n        const { api } = this.props;\n        const apiScopesByNameList = {};\n        const promisedResPolicies = Api.policies('api');\n        promisedResPolicies\n            .then((policies) => {\n                this.setState({ apiPolicies: policies.obj.list });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error.status;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n\n        for (const scopeObject of api.scopes) {\n            const modifiedScope = {};\n            modifiedScope.scope = scopeObject.scope;\n            modifiedScope.shared = scopeObject.shared;\n            apiScopesByNameList[scopeObject.scope.name] = modifiedScope;\n        }\n        this.setState({ apiScopesByName: apiScopesByNameList });\n        this.getAllSharedScopes();\n    }\n\n    /**\n     *\n     * @param {*} event\n     */\n    setFilterByKeyWord(event) {\n        this.setState({ filterKeyWord: event.target.value.toLowerCase() });\n    }\n\n    /**\n     * @memberof Operations\n     */\n    getAllSharedScopes() {\n        Api.getAllScopes()\n            .then((response) => {\n                if (response.body && response.body.list) {\n                    const sharedScopesList = [];\n                    const sharedScopesByNameList = {};\n                    const shared = true;\n                    for (const scope of response.body.list) {\n                        const modifiedScope = {};\n                        modifiedScope.scope = scope;\n                        modifiedScope.shared = shared;\n                        sharedScopesList.push(modifiedScope);\n                        sharedScopesByNameList[scope.name] = modifiedScope;\n                    }\n                    this.setState({ sharedScopesByName: sharedScopesByNameList });\n                    this.setState({ sharedScopes: sharedScopesList });\n                }\n            });\n    }\n\n    /**\n     *\n     *\n     * @param {*} throttlePolicy\n     * @memberof Operations\n     */\n    handleApiThrottlePolicy(apiThrottlingPolicy) {\n        this.setState({ apiThrottlingPolicy });\n    }\n\n    /**\n     *\n     * @param {*} newOperation\n     */\n    handleUpdateList(newOperation) {\n        const { operations, sharedScopesByName, apiScopesByName } = this.state;\n        const updatedList = operations.map(\n            (operation) => ((operation.target === newOperation.target && operation.verb === newOperation.verb)\n                ? newOperation : operation),\n        );\n\n        for (const selectedScope of newOperation.scopes) {\n            if (selectedScope\n                && !apiScopesByName[selectedScope]\n                && apiScopesByName[selectedScope] !== '') {\n                if (selectedScope in sharedScopesByName) {\n                    apiScopesByName[selectedScope] = sharedScopesByName[selectedScope];\n                }\n            }\n        }\n        this.setState({ apiScopesByName });\n        this.setState({ operations: updatedList });\n    }\n\n    /**\n     *\n     */\n    updateOperations() {\n        const { operations, apiThrottlingPolicy, apiScopesByName } = this.state;\n        const { updateAPI } = this.props;\n        this.setState({ isSaving: true });\n        this.updateApiScopes(operations);\n        const scopes = Object.keys(apiScopesByName).map((key) => { return apiScopesByName[key]; });\n        updateAPI({ operations, apiThrottlingPolicy, scopes }).finally(() => this.setState({ isSaving: false }));\n    }\n\n    /**\n     *\n     * This method modifies the security definition scopes by removing the scopes which are not present\n     * in operations and which are shared scopes\n     * @param {Array} apiOperations Operations list\n     */\n    updateApiScopes(apiOperations) {\n        const { apiScopesByName, sharedScopesByName } = this.state;\n        Object.keys(apiScopesByName).forEach((key) => {\n            let isScopeExistsInOperation = false;\n            for (const operation of apiOperations) {\n                // Checking if the scope resides in the operation\n                if (operation.scopes.includes(key)) {\n                    isScopeExistsInOperation = true;\n                    break;\n                }\n            }\n            // Checking if the scope exists in operation and is a shared scope\n            if (!isScopeExistsInOperation && (key in sharedScopesByName)) {\n                delete apiScopesByName[key];\n            }\n        });\n        this.setState({ apiScopesByName });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const { api, resourceNotFoundMessage } = this.props;\n        const {\n            operations, apiPolicies, apiThrottlingPolicy, isSaving, filterKeyWord, notFound, sharedScopes,\n        } = this.state;\n        if (notFound) {\n            return <ResourceNotFound message={resourceNotFoundMessage} />;\n        }\n        if (!operations && apiPolicies.length === 0) {\n            return <Progress />;\n        }\n        const { classes } = this.props;\n        return (\n            <>\n                <Box pb={3}>\n                    <Typography variant='h5'>\n                        <FormattedMessage\n                            id='Apis.Details.Operations.Operations.title'\n                            defaultMessage='Operations'\n                        />\n                    </Typography>\n                </Box>\n\n                <Grid container spacing={2}>\n                    <Grid item md={12}>\n                        <APIRateLimiting\n                            operationRateLimits={apiPolicies}\n                            api={api}\n                            value={apiThrottlingPolicy}\n                            onChange={this.handleApiThrottlePolicy}\n                        />\n                    </Grid>\n                    <Grid item md={2}>\n                        <Box mt={4} pb={2}>\n                            <div className={classes.searchWrapper}>\n                                <TextField\n                                    id='outlined-full-width'\n                                    label='Operation'\n                                    placeholder='Filter Operations'\n                                    onChange={(e) => this.setFilterByKeyWord(e, api.operations)}\n                                    fullWidth\n                                    variant='outlined'\n                                    InputLabelProps={{\n                                        shrink: true,\n                                    }}\n                                />\n                            </div>\n                        </Box>\n                    </Grid>\n                    <Grid item md={12}>\n                        <Table>\n                            <TableRow>\n                                <TableCell>\n                                    <Typography variant='subtitle2'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Operations.operation.operationName'\n                                            defaultMessage='Operation'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography variant='subtitle2'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Operations.Operation.OperationType'\n                                            defaultMessage='Operation Type'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography variant='subtitle2'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Operations.Operation.throttling.policy'\n                                            defaultMessage='Rate Limiting'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography variant='subtitle2'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Operations.Operation.scopes'\n                                            defaultMessage='Scope'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography variant='subtitle2'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Operations.Operation.authType'\n                                            defaultMessage='Security Enabled'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                            </TableRow>\n                            {operations.filter(\n                                (operation) => operation.target.toLowerCase().includes(filterKeyWord),\n                            ).map((item) => {\n                                return (\n                                    <Operation\n                                        operation={item}\n                                        handleUpdateList={this.handleUpdateList}\n                                        scopes={api.scopes}\n                                        sharedScopes={sharedScopes}\n                                        isOperationRateLimiting={!apiThrottlingPolicy}\n                                        apiPolicies={apiPolicies}\n                                    />\n                                );\n                            })}\n                        </Table>\n                    </Grid>\n                    <Grid item>\n                        <Button\n                            variant='contained'\n                            color='primary'\n                            disabled={isSaving || api.isRevision}\n                            className={classes.buttonMain}\n                            onClick={this.updateOperations}\n                        >\n                            {isSaving && <CircularProgress size={20} />}\n                            <FormattedMessage\n                                id='Apis.Details.Operations.Operation.save'\n                                defaultMessage='Save'\n                            />\n                        </Button>\n                        <Link to={'/apis/' + api.id + '/overview'}>\n                            <Button>\n                                <FormattedMessage\n                                    id='Apis.Details.Operations.Operation.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Button>\n                        </Link>\n                    </Grid>\n                </Grid>\n            </>\n        );\n    }\n}\n\nOperations.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        operations: PropTypes.arrayOf(PropTypes.shape({})),\n        scopes: PropTypes.arrayOf(PropTypes.string),\n        updateOperations: PropTypes.func,\n        policies: PropTypes.func,\n        id: PropTypes.string,\n    }).isRequired,\n    resourceNotFoundMessage: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n    updateAPI: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(Operations));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport Select from '@material-ui/core/Select';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Chip from '@material-ui/core/Chip';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\nimport Switch from '@material-ui/core/Switch';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    textField: {\n        marginLeft: theme.spacing(),\n        marginRight: theme.spacing(),\n        width: 400,\n    },\n    mainTitle: {\n        paddingLeft: 20,\n    },\n    scopes: {\n        width: 400,\n    },\n    dropDown: {\n        width: theme.spacing(11.25),\n    },\n    divider: {\n        marginTop: 20,\n        marginBottom: 20,\n    },\n    chip: {\n        margin: theme.spacing(),\n        color: theme.palette.text.secondary,\n        minWidth: 100,\n    },\n    chipActive: {\n        margin: theme.spacing(),\n        color: theme.palette.text.secondary,\n        background: theme.palette.background.active,\n        minWidth: 100,\n        borderRadius: theme.shape.borderRadius,\n    },\n    paper: {\n        padding: 20,\n    },\n    link: {\n        cursor: 'pointer',\n    },\n    listItem: {\n        paddingLeft: 0,\n        display: 'flex',\n        alignItems: 'center',\n    },\n    formControl: {\n        paddingRight: 0,\n        marginRight: 0,\n    },\n    resourceRoot: {\n        background: theme.palette.grey['100'],\n        paddingLeft: theme.spacing(),\n        paddingRight: theme.spacing(),\n        borderRadius: theme.shape.borderRadius,\n        marginBottom: theme.spacing(),\n    },\n    deleteButton: {\n        marginLeft: 'auto',\n    },\n    pathDisplay: {\n        marginRight: theme.spacing(2),\n        marginLeft: theme.spacing(2),\n    },\n    descriptionWrapper: {\n        paddingTop: theme.spacing(),\n        paddingBottom: theme.spacing(),\n    },\n    scopeSelect: {\n        width: '100%',\n    },\n    descriptionWrapperUp: {\n        paddingBottom: '0 !important',\n    },\n    addParamRow: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    propsForm: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    deleteLink: {\n        cursor: 'pointer',\n    },\n    row: {\n        '& td': {\n            borderBottom: 'none',\n            verticalAlign: 'bottom',\n            width: '33%',\n            paddingLeft: 0,\n        },\n    },\n});\n\n/**\n *\n */\nclass Operation extends React.Component {\n    /**\n     *\n     * @param {any} props @inheritdoc\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSecurity: false,\n        };\n        this.handleScopeChange = this.handleScopeChange.bind(this);\n        this.handlePolicyChange = this.handlePolicyChange.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    /**\n     *\n     * @param {*} operationAction event triggered for handle  Scope Change\n     */\n    handleScopeChange(operationAction) {\n        const { operation } = this.props;\n        const { data } = operationAction;\n        const { value } = data || {};\n        const defValue = value[0];\n        const newoperation = {\n            ...operation,\n            scopes: [...operation.scopes],\n        };\n        newoperation.scopes = defValue;\n        this.props.handleUpdateList(newoperation);\n    }\n\n    /**\n     *\n     * @param {*} e event triggered for handle  policy Change\n     */\n    handlePolicyChange(e) {\n        const { operation } = this.props;\n        const newoperation = { ...operation };\n        newoperation.throttlingPolicy = e.target.value;\n        this.props.handleUpdateList(newoperation);\n    }\n\n    /**\n     * @param {*} event event triggered for handle  policy Change\n     */\n    handleChange(event) {\n        const { operation } = this.props;\n        const newoperation = { ...operation };\n        const { checked } = event.target;\n        if (checked) {\n            newoperation.authType = 'Any';\n        } else {\n            newoperation.authType = 'None';\n        }\n        this.setState({\n            isSecurity: checked,\n        });\n        this.props.handleUpdateList(newoperation);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            operation, theme, classes, apiPolicies, scopes, isOperationRateLimiting, sharedScopes, intl,\n        } = this.props;\n        const dropdownScopes = [...scopes];\n        const { isSecurity } = this.state;\n        const filteredApiScopes = dropdownScopes.filter((sharedScope) => !sharedScope.shared);\n        let chipColor = theme.custom.operationChipColor\n            ? theme.custom.operationChipColor[operation.verb.toLowerCase()]\n            : null;\n        let chipTextColor = '#000000';\n        if (!chipColor) {\n            console.log('Check the theme settings. The resourceChipColors is not populated properlly');\n            chipColor = '#cccccc';\n        } else {\n            chipTextColor = theme.palette.getContrastText(\n                theme.custom.operationChipColor[operation.verb.toLowerCase()],\n            );\n        }\n        return (\n            <TableRow style={{ borderStyle: 'hidden' }}>\n                <TableCell>\n                    <Typography variant='body1'>\n                        {operation.target}\n                    </Typography>\n                </TableCell>\n                <TableCell>\n                    <Chip\n                        label={operation.verb}\n                        style={{\n                            backgroundColor: chipColor, color: chipTextColor, height: 20, width: 40, fontSize: 9,\n                        }}\n                        className={classes.chipActive}\n                    />\n                </TableCell>\n                <TableCell>\n                    <Select\n                        className={classes.dropDown}\n                        value={isOperationRateLimiting ? operation.throttlingPolicy : ''}\n                        disabled={!isOperationRateLimiting}\n                        onChange={this.handlePolicyChange}\n                        fieldName='Throttling Policy'\n                    >\n                        {apiPolicies.map((policy) => (\n                            <MenuItem\n                                key={policy.name}\n                                value={policy.name}\n                            >\n                                {policy.displayName}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </TableCell>\n                <TableCell>\n                    <TextField\n                        id='operation_scope'\n                        select\n                        SelectProps={{\n                            multiple: true,\n                            renderValue: (selected) => (Array.isArray(selected) ? selected.join(', ') : selected),\n                        }}\n                        fullWidth\n                        label={dropdownScopes.length !== 0 || sharedScopes ? intl.formatMessage({\n                            id: 'Apis.Details.Operations.Operation.operation.scope.label.default',\n                            defaultMessage: 'Operation scope',\n                        }) : intl.formatMessage({\n                            id: 'Apis.Details.Operations.Operation.operation.scope.label.notAvailable',\n                            defaultMessage: 'No scope available',\n                        })}\n                        value={operation.scopes}\n                        onChange={({ target: { value } }) => this.handleScopeChange({\n                            data: { value: value ? [value] : [] },\n                        })}\n                        helperText={(\n                            <FormattedMessage\n                                id='Apis.Details.Operations.Operation.operation.scope.helperText'\n                                defaultMessage='Select a scope to control permissions to this operation'\n                            />\n                        )}\n                        margin='dense'\n                        variant='outlined'\n                    >\n                        <ListSubheader>\n                            <FormattedMessage\n                                id='Apis.Details.Operations.Operation.operation.scope.select.local'\n                                defaultMessage='API Scopes'\n                            />\n                        </ListSubheader>\n                        {filteredApiScopes.length !== 0 ? filteredApiScopes.map((apiScope) => (\n                            <MenuItem\n                                key={apiScope.scope.name}\n                                value={apiScope.scope.name}\n                                dense\n                            >\n                                <Checkbox checked={operation.scopes.includes(apiScope.scope.name)} color='primary' />\n                                {apiScope.scope.name}\n                            </MenuItem>\n                        )) : (\n                            <MenuItem\n                                value=''\n                                disabled\n                            >\n                                <em>\n                                    <FormattedMessage\n                                        id='Apis.Details.Operations.Operation.operation.no.api.scope.available'\n                                        defaultMessage='No API scopes available'\n                                    />\n                                </em>\n                            </MenuItem>\n                        )}\n                        <ListSubheader>\n                            <FormattedMessage\n                                id='Apis.Details.Operations.Operation.operation.scope.select.shared'\n                                defaultMessage='Shared Scopes'\n                            />\n                        </ListSubheader>\n                        {sharedScopes && sharedScopes.length !== 0 ? sharedScopes.map((sharedScope) => (\n                            <MenuItem\n                                key={sharedScope.scope.name}\n                                value={sharedScope.scope.name}\n                                dense\n                            >\n                                <Checkbox checked={operation.scopes.includes(sharedScope.scope.name)} color='primary' />\n                                {sharedScope.scope.name}\n                            </MenuItem>\n                        )) : (\n                            <MenuItem\n                                value=''\n                                disabled\n                            >\n                                <em>\n                                    <FormattedMessage\n                                        id='Apis.Details.Operations.Operation.operation.no.sharedpi.scope.available'\n                                        defaultMessage='No shared scopes available'\n                                    />\n                                </em>\n                            </MenuItem>\n                        )}\n                    </TextField>\n                </TableCell>\n                <TableCell>\n                    <Switch\n                        checked={(() => {\n                            if (operation.authType === 'None') {\n                                return false;\n                            }\n                            return true;\n                        })()}\n                        onChange={this.handleChange}\n                        value={isSecurity}\n                        color='primary'\n                    />\n                </TableCell>\n            </TableRow>\n        );\n    }\n}\n\nOperation.propTypes = {\n    classes: PropTypes.shape({\n    }).isRequired,\n    operation: PropTypes.shape({\n        target: PropTypes.string,\n        verb: PropTypes.string,\n        throttlingPolicy: PropTypes.string,\n        auth: PropTypes.string,\n    }).isRequired,\n    apiPolicies: PropTypes.shape({\n    }).isRequired,\n    isOperationRateLimiting: PropTypes.shape({\n    }).isRequired,\n    scopes: PropTypes.shape({\n    }).isRequired,\n    handleUpdateList: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n    sharedScopes: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Operation));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { FormattedMessage } from 'react-intl';\n\nimport Resources from './Resources';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function APIOperations() {\n    return (\n        <>\n            <Box mb={4}>\n                <Typography id='itest-api-details-resources-head' variant='h4' gutterBottom>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.APIOperations.title'\n                        defaultMessage='Resources'\n                    />\n                </Typography>\n            </Box>\n            <Resources />\n        </>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Divider from '@material-ui/core/Divider';\nimport Button from '@material-ui/core/Button';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Utils from 'AppData/Utils';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport Badge from '@material-ui/core/Badge';\nimport ReportProblemOutlinedIcon from '@material-ui/icons/ReportProblemOutlined';\n// spliced operation components\n\nimport { FormattedMessage } from 'react-intl';\nimport DescriptionAndSummary from './operationComponents/DescriptionAndSummary';\nimport OperationGovernance from './operationComponents/OperationGovernance';\nimport AWSLambdaSettings from './operationComponents/AWSLambdaSettings';\nimport Parameters from './operationComponents/Parameters';\nimport SOAPToRESTListing from './operationComponents/SOAPToREST/SOAPToRESTListing';\nimport { getOperationScopes } from '../operationUtils';\n\n/**\n *\n * Handle the operation UI\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nfunction Operation(props) {\n    const {\n        operation,\n        operationsDispatcher,\n        highlight,\n        operationRateLimits,\n        api,\n        disableDelete,\n        disableUpdate,\n        onMarkAsDelete,\n        markAsDelete,\n        hideParameters,\n        spec,\n        resourcePolicy,\n        resourcePoliciesDispatcher,\n        target,\n        verb,\n        arns,\n        resolvedSpec,\n        sharedScopes,\n        setFocusOperationLevel,\n    } = props;\n    const [isExpanded, setIsExpanded] = useState(false);\n    const useStyles = makeStyles((theme) => {\n        const backgroundColor = theme.custom.resourceChipColors[verb];\n        return {\n            customButton: {\n                '&:hover': { backgroundColor },\n                backgroundColor,\n                width: theme.spacing(12),\n            },\n            paperStyles: {\n                border: `1px solid ${backgroundColor}`,\n                borderBottom: '',\n            },\n            customDivider: {\n                backgroundColor,\n            },\n            linearProgress: {\n                height: '2px',\n            },\n            highlightSelected: {\n                backgroundColor: Utils.hexToRGBA(backgroundColor, 0.1),\n            },\n            contentNoMargin: {\n                margin: theme.spacing(0),\n            },\n            overlayUnmarkDelete: {\n                position: 'absolute',\n                zIndex: theme.zIndex.operationDeleteUndo,\n                right: '10%',\n            },\n        };\n    });\n    const apiOperation = api.operations[target] && api.operations[target][verb.toUpperCase()];\n    const isUsedInAPIProduct = apiOperation && Array.isArray(\n        apiOperation.usedProductIds,\n    ) && apiOperation.usedProductIds.length;\n\n    /**\n     *\n     *\n     * @param {*} event\n     */\n    function toggleDelete(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        setIsExpanded(false);\n        onMarkAsDelete({ verb, target }, !markAsDelete);\n    }\n\n    /**\n     *\n     *\n     * @param {*} event\n     * @param {*} expanded\n     */\n    function handleExpansion(event, expanded) {\n        setIsExpanded(expanded);\n    }\n    const classes = useStyles();\n    return (\n        <>\n            {markAsDelete && (\n                <Box className={classes.overlayUnmarkDelete}>\n                    <Tooltip title='Marked for delete' aria-label='Marked for delete'>\n                        <Button onClick={toggleDelete} variant='outlined' style={{ marginTop: '10px' }}>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.Operation.undo.delete'\n                                defaultMessage='Undo Delete'\n                            />\n                        </Button>\n                    </Tooltip>\n                </Box>\n            )}\n            <ExpansionPanel\n                expanded={isExpanded}\n                onChange={handleExpansion}\n                disabled={markAsDelete}\n                className={classes.paperStyles}\n            >\n                <ExpansionPanelSummary\n                    className={highlight ? classes.highlightSelected : ''}\n                    disableRipple\n                    disableTouchRipple\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls='panel2a-content'\n                    id='panel2a-header'\n                    classes={{ content: classes.contentNoMargin }}\n                >\n                    <Grid container direction='row' justify='space-between' alignItems='center' spacing={0}>\n                        <Grid item md={4}>\n                            <Badge invisible={!operation['x-wso2-new']} color='error' variant='dot'>\n                                <Button\n                                    disableFocusRipple\n                                    variant='contained'\n                                    size='small'\n                                    className={classes.customButton}\n                                >\n                                    {verb}\n                                </Button>\n                            </Badge>\n                            <Typography display='inline' style={{ margin: '0px 30px' }} variant='h6' gutterBottom>\n                                {target}\n                                <Typography\n                                    display='inline'\n                                    style={{ margin: '0px 30px' }}\n                                    variant='caption'\n                                    gutterBottom\n                                >\n                                    {operation.summary}\n                                </Typography>\n                            </Typography>\n                        </Grid>\n                        {(isUsedInAPIProduct) ? (\n                            <Grid item md={3}>\n                                <Box display='flex' justifyContent='center'>\n                                    <ReportProblemOutlinedIcon fontSize='small' />\n                                    <Box display='flex' ml={1} mt={1 / 4} fontSize='caption.fontSize'>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Resources.components.Operation.this.operation.'\n                                            + 'used.in.products'}\n                                            defaultMessage={'This operation is used in {isUsedInAPIProduct} API '\n                                            + 'product(s)'}\n                                            values={{ isUsedInAPIProduct }}\n                                        />\n                                    </Box>\n                                </Box>\n                            </Grid>\n                        ) : (\n                            <Grid item md={3} />\n                        )}\n                        <Grid item md={4}>\n                            <Typography\n                                display='inline'\n                                style={{ margin: '0px 30px' }}\n                                variant='caption'\n                                gutterBottom\n                            >\n                                <b>{ getOperationScopes(operation, spec) != null && 'Scope : ' }</b>\n                                { getOperationScopes(operation, spec) != null\n                                    && getOperationScopes(operation, spec).join(', ') }\n                            </Typography>\n                        </Grid>\n                        {!(disableDelete || markAsDelete) && (\n                            <Grid item md={1} justify='flex-end' container>\n                                <Tooltip\n                                    title={\n                                        isUsedInAPIProduct\n                                            ? (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Resources.components.Operation.cannot.delete'\n                                                    + '.when.used.in.api.products'}\n                                                    defaultMessage='Cannot delete operation when used in an API product'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Resources.components.Operation.Delete'\n                                                    defaultMessage='Delete'\n                                                />\n                                            )\n                                    }\n                                    aria-label={(\n                                        <FormattedMessage\n                                            id='Apis.Details.Resources.components.Operation.delete.operation'\n                                            defaultMessage='Delete operation'\n                                        />\n                                    )}\n                                >\n                                    <div>\n                                        <IconButton\n                                            disabled={Boolean(isUsedInAPIProduct) || disableUpdate}\n                                            onClick={toggleDelete}\n                                            aria-label='delete'\n                                        >\n                                            <DeleteIcon fontSize='small' />\n                                        </IconButton>\n                                    </div>\n                                </Tooltip>\n                            </Grid>\n                        )}\n                    </Grid>\n                </ExpansionPanelSummary>\n                <Divider light className={classes.customDivider} />\n                <ExpansionPanelDetails>\n                    <Grid spacing={2} container direction='row' justify='flex-start' alignItems='flex-start'>\n                        <DescriptionAndSummary\n                            operation={operation}\n                            operationsDispatcher={operationsDispatcher}\n                            disableUpdate={disableUpdate}\n                            target={target}\n                            verb={verb}\n                        />\n                        <OperationGovernance\n                            operation={operation}\n                            operationsDispatcher={operationsDispatcher}\n                            operationRateLimits={operationRateLimits}\n                            api={api}\n                            disableUpdate={disableUpdate}\n                            spec={spec}\n                            target={target}\n                            verb={verb}\n                            sharedScopes={sharedScopes}\n                            setFocusOperationLevel={setFocusOperationLevel}\n                        />\n                        {!hideParameters && (\n                            <Parameters\n                                operation={operation}\n                                operationsDispatcher={operationsDispatcher}\n                                operationRateLimits={operationRateLimits}\n                                api={api}\n                                disableUpdate={disableUpdate}\n                                spec={spec}\n                                target={target}\n                                verb={verb}\n                                resolvedSpec={resolvedSpec}\n                            />\n                        )}\n                        {resourcePolicy && (\n                            <SOAPToRESTListing\n                                operation={operation}\n                                operationsDispatcher={operationsDispatcher}\n                                operationRateLimits={operationRateLimits}\n                                resourcePolicy={resourcePolicy}\n                                resourcePoliciesDispatcher={resourcePoliciesDispatcher}\n                                disableUpdate={disableUpdate}\n                                spec={spec}\n                                target={target}\n                                verb={verb}\n                            />\n                        )}\n                        {\n                            api.endpointConfig\n                            && api.endpointConfig.endpoint_type\n                            && api.endpointConfig.endpoint_type === 'awslambda'\n                            && (\n                                <AWSLambdaSettings\n                                    operation={operation}\n                                    operationsDispatcher={operationsDispatcher}\n                                    target={target}\n                                    verb={verb}\n                                    arns={arns}\n                                />\n                            )\n                        }\n                    </Grid>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        </>\n    );\n}\nOperation.defaultProps = {\n    highlight: false,\n    disableUpdate: false,\n    hideParameters: false,\n    disableDelete: false,\n    onMarkAsDelete: () => {},\n    markAsDelete: false,\n    operationRateLimits: [], // Response body.list from apis policies for `api` throttling policies type\n};\nOperation.propTypes = {\n    api: PropTypes.shape({ scopes: PropTypes.arrayOf(PropTypes.shape({})), resourcePolicies: PropTypes.shape({}) })\n        .isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    onMarkAsDelete: PropTypes.func,\n    resourcePoliciesDispatcher: PropTypes.func.isRequired,\n    markAsDelete: PropTypes.bool,\n    disableDelete: PropTypes.bool,\n    disableUpdate: PropTypes.bool,\n    hideParameters: PropTypes.bool,\n    resourcePolicy: PropTypes.shape({}).isRequired,\n    operation: PropTypes.shape({\n        'x-wso2-new': PropTypes.bool,\n        summary: PropTypes.string,\n    }).isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    highlight: PropTypes.bool,\n    operationRateLimits: PropTypes.arrayOf(PropTypes.shape({})),\n    arns: PropTypes.shape([]).isRequired,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n    sharedScopes: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n};\n\nexport default React.memo(Operation);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\n/**\n *\n * Renders the operation summary and description sections\n * @export\n * @param {*} props\n * @returns\n */\nexport default function DescriptionAndSummary(props) {\n    const {\n        operation, operationsDispatcher, disableUpdate, target, verb,\n    } = props;\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Summary\n                    {' '}\n                    {'&'}\n                    {' '}\n                    Description\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={5}>\n                <TextField\n                    margin='dense'\n                    fullWidth\n                    label='Description'\n                    multiline\n                    disabled={disableUpdate}\n                    rows='4'\n                    value={operation.description}\n                    variant='outlined'\n                    onChange={\n                        ({ target: { value } }) => operationsDispatcher(\n                            { action: 'description', data: { target, verb, value } },\n                        )\n                    }\n                />\n            </Grid>\n            <Grid item md={5}>\n                <TextField\n                    id='operation_summary'\n                    label='Summary'\n                    margin='dense'\n                    variant='outlined'\n                    fullWidth\n                    disabled={disableUpdate}\n                    multiline\n                    rows='4'\n                    value={operation.summary}\n                    onChange={({ target: { value } }) => operationsDispatcher(\n                        { action: 'summary', data: { target, verb, value } },\n                    )}\n                />\n            </Grid>\n            <Grid item md={1} />\n        </>\n    );\n}\n\nDescriptionAndSummary.propTypes = {\n    disableUpdate: PropTypes.bool,\n    operation: PropTypes.shape({\n        target: PropTypes.string.isRequired,\n        verb: PropTypes.string.isRequired,\n        spec: PropTypes.shape({}).isRequired,\n    }).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n};\n\nDescriptionAndSummary.defaultProps = {\n    disableUpdate: false,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { Link } from 'react-router-dom';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ExpandLessIcon from '@material-ui/icons/ExpandLess';\nimport { useIntl, FormattedMessage } from 'react-intl';\nimport { getOperationScopes } from '../../operationUtils';\n\n/**\n *\n * Renders the security , throttling policies and scopes selection section in the operation collapsed page\n * @export\n * @param {*} props\n * @returns\n */\nexport default function OperationGovernance(props) {\n    const {\n        operation, operationsDispatcher, operationRateLimits, api, disableUpdate, spec, target, verb, sharedScopes,\n        setFocusOperationLevel,\n    } = props;\n    const operationScopes = getOperationScopes(operation, spec);\n    const isOperationRateLimiting = api.apiThrottlingPolicy === null;\n    const filteredApiScopes = api.scopes.filter((sharedScope) => !sharedScope.shared);\n    const intl = useIntl();\n    const scrollToTop = () => {\n        setFocusOperationLevel(true);\n        document.querySelector('#react-root').scrollTop = 195;\n    };\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography gutterBottom variant='subtitle1'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.OperationGovernance.title'\n                        defaultMessage='Operation Governance'\n                    />\n                    <Typography style={{ marginLeft: '10px' }} gutterBottom variant='caption'>\n                        <FormattedMessage\n                            id='Apis.Details.Resources.components.operationComponents.OperationGovernance.subTitle'\n                            defaultMessage='(Security, Rate Limiting & Scopes)'\n                        />\n                    </Typography>\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item xs={1} />\n            <Grid item xs={11}>\n                <FormControl disabled={disableUpdate} component='fieldset'>\n                    <FormControlLabel\n                        control={(\n                            <Switch\n                                checked={operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none'}\n                                onChange={({ target: { checked } }) => operationsDispatcher({\n                                    action: 'authType',\n                                    data: { target, verb, value: checked },\n                                })}\n                                size='small'\n                                color='primary'\n                            />\n                        )}\n                        label='Security'\n                        labelPlacement='start'\n                    />\n                </FormControl>\n                <sup style={{ marginLeft: '10px' }}>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.OperationGovernance.Security'\n                                + '.tooltip'}\n                                defaultMessage='This will enable/disable Application Level securities defined in the\n                                Runtime Configurations page.'\n                            />\n                        )}\n                        fontSize='small'\n                        aria-label='Operation security'\n                        placement='right-end'\n                        interactive\n                    >\n                        <HelpOutline />\n                    </Tooltip>\n                </sup>\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={5}>\n                <Box display='flex' flexDirection='row' alignItems='flex-start'>\n                    <TextField\n                        id='operation_rate_limiting_policy'\n                        select\n                        fullWidth={!isOperationRateLimiting}\n                        SelectProps={{\n                            autoWidth: true,\n                            IconComponent: isOperationRateLimiting ? ArrowDropDownIcon : 'span',\n                        }}\n                        disabled={disableUpdate || !isOperationRateLimiting}\n                        label={\n                            isOperationRateLimiting\n                                ? intl.formatMessage({\n                                    id: 'Apis.Details.Resources.components.operationComponents.'\n                                + 'OperationGovernance.rate.limiting.policy',\n                                    defaultMessage: 'Rate limiting policy',\n                                })\n                                : (\n                                    <div>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.governed.by'}\n                                            defaultMessage='Rate limiting is governed by '\n                                        />\n                                        <Box\n                                            fontWeight='fontWeightBold'\n                                            display='inline'\n                                            color='primary.main'\n                                            cursor='pointer'\n                                        >\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.API.level'}\n                                                defaultMessage='API Level'\n                                            />\n                                        </Box>\n                                    </div>\n                                )\n                        }\n                        value={\n                            isOperationRateLimiting\n                            && operation['x-throttling-tier']\n                                ? operation['x-throttling-tier']\n                                : ''\n                        }\n                        onChange={({ target: { value } }) => operationsDispatcher({\n                            action: 'throttlingPolicy',\n                            data: { target, verb, value },\n                        })}\n                        helperText={\n                            isOperationRateLimiting\n                                ? intl.formatMessage({\n                                    id: 'Apis.Details.Resources.components.operationComponents.'\n                                + 'OperationGovernance.rate.limiting.policy.select',\n                                    defaultMessage: 'Select a rate limit policy for this operation',\n                                })\n                                : (\n                                    <span>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.helperText.section1'}\n                                            defaultMessage='Use '\n                                        />\n                                        <Box fontWeight='fontWeightBold' display='inline' color='primary.main'>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.helperText.section2'}\n                                                defaultMessage='Operation Level'\n                                            />\n                                        </Box>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.helperText.section3'}\n                                            defaultMessage=' rate limiting to '\n                                        />\n                                        <b>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.helperText.section4'}\n                                                defaultMessage='enable'\n                                            />\n                                        </b>\n                                        <FormattedMessage\n                                            id={'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.rate.limiting.helperText.section5'}\n                                            defaultMessage=' rate limiting per operation'\n                                        />\n                                    </span>\n                                )\n                        }\n                        margin='dense'\n                        variant='outlined'\n                    >\n                        {operationRateLimits.map((rateLimit) => (\n                            <MenuItem key={rateLimit.name} value={rateLimit.name}>\n                                {rateLimit.displayName}\n                            </MenuItem>\n                        ))}\n                    </TextField>\n                    {!isOperationRateLimiting && (\n                        <Button onClick={scrollToTop}>\n                            <FormattedMessage\n                                id={\n                                    'Apis.Details.Resources.components.operationComponents.'\n                                    + 'OperationGovernance.rate.limiting.button.text'\n                                }\n                                defaultMessage='Change rate limiting level'\n                            />\n                            <ExpandLessIcon />\n                        </Button>\n                    )}\n                </Box>\n            </Grid>\n            <Grid item md={6} />\n            <Grid item md={1} />\n            <Grid item md={5}>\n                { operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none' ? (\n                    <TextField\n                        id='operation_scope'\n                        select\n                        SelectProps={{\n                            multiple: true,\n                            renderValue: (selected) => (Array.isArray(selected) ? selected.join(', ') : selected),\n                        }}\n                        disabled={disableUpdate}\n                        fullWidth\n                        label={api.scopes.length !== 0 || sharedScopes ? intl.formatMessage({\n                            id: 'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.operation.scope.label.default',\n                            defaultMessage: 'Operation scope',\n                        }) : intl.formatMessage({\n                            id: 'Apis.Details.Resources.components.operationComponents.'\n                            + 'OperationGovernance.operation.scope.label.notAvailable',\n                            defaultMessage: 'No scope available',\n                        })}\n                        value={operationScopes}\n                        onChange={({ target: { value } }) => operationsDispatcher({\n                            action: 'scopes',\n                            data: { target, verb, value: value ? [value] : [] },\n                        })}\n                        helperText={(\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.'\n                                + 'OperationGovernance.operation.scope.helperText'}\n                                defaultMessage='Select a scope to control permissions to this operation'\n                            />\n                        )}\n                        margin='dense'\n                        variant='outlined'\n                    >\n                        <ListSubheader>\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.'\n                                + 'OperationGovernance.operation.scope.select.local'}\n                                defaultMessage='API Scopes'\n                            />\n                        </ListSubheader>\n                        {filteredApiScopes.length !== 0 ? filteredApiScopes.map((apiScope) => (\n                            <MenuItem\n                                key={apiScope.scope.name}\n                                value={apiScope.scope.name}\n                                dense\n                            >\n                                <Checkbox checked={operationScopes.includes(apiScope.scope.name)} color='primary' />\n                                {apiScope.scope.name}\n                            </MenuItem>\n                        )) : (\n                            <MenuItem\n                                value=''\n                                disabled\n                            >\n                                <em>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Resources.components.operationComponents.'\n                                    + 'OperationGovernance.operation.no.api.scope.available'}\n                                        defaultMessage='No API scopes available'\n                                    />\n                                </em>\n                            </MenuItem>\n                        )}\n                        <ListSubheader>\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.'\n                                + 'OperationGovernance.operation.scope.select.shared'}\n                                defaultMessage='Shared Scopes'\n                            />\n                        </ListSubheader>\n                        {sharedScopes && sharedScopes.length !== 0 ? sharedScopes.map((sharedScope) => (\n                            <MenuItem\n                                key={sharedScope.scope.name}\n                                value={sharedScope.scope.name}\n                                dense\n                            >\n                                <Checkbox checked={operationScopes.includes(sharedScope.scope.name)} color='primary' />\n                                {sharedScope.scope.name}\n                            </MenuItem>\n                        )) : (\n                            <MenuItem\n                                value=''\n                                disabled\n                            >\n                                <em>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Resources.components.operationComponents.'\n                                    + 'OperationGovernance.operation.no.sharedpi.scope.available'}\n                                        defaultMessage='No shared scopes available'\n                                    />\n                                </em>\n                            </MenuItem>\n                        )}\n                    </TextField>\n                ) : null }\n            </Grid>\n            <Grid item md={5} style={{ marginTop: '14px' }}>\n                { operation['x-auth-type'] && operation['x-auth-type'].toLowerCase() !== 'none' ? !disableUpdate && (\n                    <Link to={`/apis/${api.id}/scopes/create`} target='_blank'>\n                        <Typography style={{ marginLeft: '10px' }} color='primary' display='inline' variant='caption'>\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.'\n                                + 'OperationGovernance.operation.scope.create.new.scope'}\n                                defaultMessage='Create New Scope'\n                            />\n                            <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                        </Typography>\n                    </Link>\n                ) : null}\n            </Grid>\n            <Grid item md={1} />\n        </>\n    );\n}\n\nOperationGovernance.propTypes = {\n    disableUpdate: PropTypes.bool,\n    operation: PropTypes.shape({\n        target: PropTypes.string.isRequired,\n        verb: PropTypes.string.isRequired,\n    }).isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    operationRateLimits: PropTypes.arrayOf(PropTypes.shape({})),\n    api: PropTypes.shape({ scopes: PropTypes.arrayOf(PropTypes.shape({})) }),\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    sharedScopes: PropTypes.arrayOf(PropTypes.shape({})),\n};\n\nOperationGovernance.defaultProps = {\n    operationRateLimits: [],\n    api: { scopes: [] },\n    sharedScopes: [],\n    disableUpdate: false,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport deburr from 'lodash/deburr';\nimport Downshift from 'downshift';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Icon from '@material-ui/core/Icon';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * The renderInput function.\n * @param {any} inputProps The props that are being passed to the function.\n * @returns {any} HTML view of the inputs.\n */\nfunction renderInput(inputProps) {\n    const {\n        InputProps, classes, ref, ...other\n    } = inputProps;\n    return (\n        <TextField\n            InputProps={{\n                inputRef: ref,\n                classes: {\n                    root: classes.inputRoot,\n                    input: classes.inputInput,\n                },\n                ...InputProps,\n            }}\n            {...other}\n        />\n    );\n}\n\nrenderInput.propTypes = {\n    // eslint-disable-next-line react/forbid-prop-types\n    classes: PropTypes.shape({}).isRequired,\n    // eslint-disable-next-line react/forbid-prop-types, react/require-default-props\n    InputProps: PropTypes.shape({}),\n};\n\n/**\n * The renderSuggestion function.\n * @param {any} suggestionProps The props that are being passed to the function.\n * @returns {any} HTML view of the suggestions.\n */\nfunction renderSuggestion(suggestionProps) {\n    const {\n        suggestion, index, itemProps, highlightedIndex, selectedItem,\n    } = suggestionProps;\n    const isHighlighted = highlightedIndex === index;\n    const isSelected = (selectedItem || '').indexOf(suggestion) > -1;\n\n    return (\n        <MenuItem\n            {...itemProps}\n            key={suggestion}\n            selected={isHighlighted}\n            component='div'\n            style={{\n                fontWeight: isSelected ? 500 : 400,\n            }}\n        >\n            {suggestion}\n        </MenuItem>\n    );\n}\n\nrenderSuggestion.propTypes = {\n    highlightedIndex: PropTypes.oneOfType([PropTypes.oneOf([null]), PropTypes.number]).isRequired,\n    index: PropTypes.number.isRequired,\n    // eslint-disable-next-line react/forbid-prop-types\n    itemProps: PropTypes.shape({}).isRequired,\n    selectedItem: PropTypes.string.isRequired,\n    suggestion: PropTypes.shape('').isRequired,\n};\n\n/**\n * The getSuggestions function.\n * @param {any} value The value that are being passed to the function.\n * @param {any} arns The arns that are being passed to the function.\n * @returns {any} suggestion values.\n */\nfunction getSuggestions(value, { showEmpty = false } = {}, arns) {\n    const inputValue = deburr(value.trim()).toLowerCase();\n    const inputLength = inputValue.length;\n    let count = 0;\n    return inputLength === 0 && !showEmpty\n        ? []\n        : arns.filter((suggestion) => {\n            const keep = count < 5 && suggestion.slice(0, inputLength).toLowerCase() === inputValue;\n            if (keep) {\n                count += 1;\n            }\n            return keep;\n        });\n}\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    container: {\n        flexGrow: 1,\n        position: 'relative',\n    },\n    paper: {\n        position: 'absolute',\n        zIndex: 1000,\n        marginTop: theme.spacing(-2),\n        left: 0,\n        right: 0,\n    },\n    chip: {\n        margin: theme.spacing(0.5, 0.25),\n    },\n    inputRoot: {\n        flexWrap: 'wrap',\n    },\n    inputInput: {\n        width: 'auto',\n        flexGrow: 1,\n    },\n}));\n\n/**\n * The autocomplete component. This component lists the ARNs of a specific user role.\n * @returns {any} HTML view of the autocomplete component.\n * @param {any} props The input parameters.\n */\nexport default function IntegrationDownshift(props) {\n    const classes = useStyles();\n    const {\n        operation,\n        operationsDispatcher,\n        target,\n        verb,\n        arns,\n    } = props;\n    const [timeout, setTimeout] = useState(50000);\n    useEffect(() => {\n        if (operation['x-amzn-resource-timeout']) {\n            setTimeout(operation['x-amzn-resource-timeout']);\n        }\n    }, []);\n    const handleTimeoutMin = (event) => {\n        if (event.target.value !== '') {\n            const minutes = parseInt(event.target.value, 10);\n            const seconds = (timeout / 1000) % 60;\n            const milliSeconds = (minutes * 60 + seconds) * 1000;\n            let newTimeout = 0;\n            if (milliSeconds > 900000) {\n                newTimeout = 900000;\n            } else if (milliSeconds < 1000) {\n                newTimeout = 1000;\n            } else {\n                newTimeout = milliSeconds;\n            }\n            setTimeout(newTimeout);\n            operationsDispatcher({\n                action: 'amznResourceTimeout',\n                data: { target, verb, value: newTimeout },\n            });\n        }\n    };\n    const handleTimeoutSec = (event) => {\n        if (event.target.value !== '') {\n            const minutes = Math.floor((timeout / 1000) / 60);\n            const seconds = parseInt(event.target.value, 10);\n            const milliSeconds = (minutes * 60 + seconds) * 1000;\n            let newTimeout = 0;\n            if (milliSeconds > 900000) {\n                newTimeout = 900000;\n            } else if (milliSeconds < 1000) {\n                newTimeout = 1000;\n            } else {\n                newTimeout = milliSeconds;\n            }\n            setTimeout(newTimeout);\n            operationsDispatcher({\n                action: 'amznResourceTimeout',\n                data: { target, verb, value: newTimeout },\n            });\n        }\n    };\n    return (\n        <>\n            <Grid item md={12} xs={12}>\n                <Typography variant='subtitle1'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.AWSLambdaSettings.Title'\n                        defaultMessage='AWS Lambda Settings'\n                    />\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item md={1} xs={1} />\n            <Grid item md={7} xs={7}>\n                <Downshift\n                    id='downshift-options'\n                    onSelect={(changes) => {\n                        if (changes !== null) {\n                            operationsDispatcher({\n                                action: 'amznResourceName',\n                                data: { target, verb, value: changes },\n                            });\n                        }\n                    }}\n                >\n                    {({\n                        clearSelection,\n                        getInputProps,\n                        getItemProps,\n                        getLabelProps,\n                        getMenuProps,\n                        highlightedIndex,\n                        inputValue,\n                        isOpen,\n                        openMenu,\n                        selectedItem,\n                    }) => {\n                        const {\n                            onBlur, onChange, onFocus, ...inputProps\n                        } = getInputProps({\n                            onChange: (event) => {\n                                operationsDispatcher({\n                                    action: 'amznResourceName',\n                                    data: { target, verb, value: event.target.value },\n                                });\n                                if (event.target.value === '') {\n                                    clearSelection();\n                                }\n                            },\n                            onBlur: () => {\n                                clearSelection();\n                            },\n                            value: operation['x-amzn-resource-name'],\n                            onFocus: openMenu,\n                            placeholder: 'Select or type an ARN',\n                        });\n                        return (\n                            <div className={classes.container}>\n                                {renderInput({\n                                    variant: 'outlined',\n                                    required: true,\n                                    fullWidth: true,\n                                    classes,\n                                    InputLabelProps: getLabelProps({ shrink: true }),\n                                    label: 'Amazon Resource Name (ARN)',\n                                    helperText: 'Select or type an ARN',\n                                    InputProps: {\n                                        onBlur,\n                                        onChange,\n                                        onFocus,\n                                        endAdornment: (\n                                            <InputAdornment position='end'>\n                                                <Icon className={classes.helpIcon}>keyboard_arrow_down</Icon>\n                                            </InputAdornment>\n                                        ),\n                                    },\n                                    inputProps,\n                                })}\n\n                                <div {...getMenuProps()}>\n                                    {isOpen ? (\n                                        <Paper className={classes.paper} square>\n                                            {getSuggestions(inputValue, { showEmpty: true }, arns)\n                                                .map((suggestion, index) => renderSuggestion({\n                                                    suggestion,\n                                                    index,\n                                                    itemProps: getItemProps({ item: suggestion }),\n                                                    highlightedIndex,\n                                                    selectedItem,\n                                                }))}\n                                        </Paper>\n                                    ) : null}\n                                </div>\n                            </div>\n                        );\n                    }}\n                </Downshift>\n            </Grid>\n            <Grid item md={1} xs={1} />\n            <Grid item md={1} xs={1}>\n                <TextField\n                    id='timeout-min'\n                    label='min'\n                    variant='outlined'\n                    helperText='Set Timeout'\n                    type='number'\n                    inputProps={{\n                        min: 0,\n                        max: 15,\n                        step: 1,\n                    }}\n                    value={Math.floor((timeout / 1000) / 60)}\n                    onChange={(event) => {\n                        handleTimeoutMin(event);\n                    }}\n                />\n            </Grid>\n            <Grid item md={1} xs={1}>\n                <TextField\n                    id='timeout-sec'\n                    label='sec'\n                    variant='outlined'\n                    type='number'\n                    inputProps={{\n                        min: 0,\n                        max: 59,\n                        step: 1,\n                    }}\n                    value={(timeout / 1000) % 60}\n                    onChange={(event) => {\n                        handleTimeoutSec(event);\n                    }}\n                />\n            </Grid>\n            <Grid item md={1} xs={1} />\n        </>\n    );\n}\n\nIntegrationDownshift.propTypes = {\n    operation: PropTypes.isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    arns: PropTypes.shape([]).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport { getVersion } from 'AppComponents/Apis/Details/Resources/operationUtils';\nimport AddParameter from './AddParameter';\nimport ListParameters from './ListParameters';\n\n/**\n * Renders the operation parameters section\n * @export\n * @param {*} props\n * @returns\n */\nexport default function Parameters(props) {\n    const {\n        operation, spec, target, verb, operationsDispatcher, disableUpdate, resolvedSpec,\n    } = props;\n    const specVersion = getVersion(spec);\n    const haveParameters = (operation.parameters && operation.parameters.length !== 0) || operation.requestBody;\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Parameters\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item xs={1} />\n            <Grid item xs={11}>\n                {!disableUpdate && (\n                    <AddParameter\n                        target={target}\n                        verb={verb}\n                        operationsDispatcher={operationsDispatcher}\n                        operation={operation}\n                        specVersion={specVersion}\n                    />\n                )}\n            </Grid>\n            <Grid item md={1} />\n            <Grid item md={11}>\n                {haveParameters && (\n                    <ListParameters\n                        disableUpdate={disableUpdate}\n                        target={target}\n                        verb={verb}\n                        operationsDispatcher={operationsDispatcher}\n                        operation={operation}\n                        spec={spec}\n                        specVersion={specVersion}\n                        resolvedSpec={resolvedSpec}\n                    />\n                )}\n            </Grid>\n        </>\n    );\n}\n\nParameters.propTypes = {\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    operation: PropTypes.shape({}).isRequired,\n    disableUpdate: PropTypes.bool,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n};\n\nParameters.defaultProps = {\n    disableUpdate: false,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useRef, useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { capitalizeFirstLetter } from 'AppData/stringFormatter';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport {\n    iff,\n    getParameter,\n    getParameterTypes,\n    getSupportedDataTypes,\n} from 'AppComponents/Apis/Details/Resources/components/operationComponents/parameterUtils';\n\nconst useStyles = makeStyles(() => ({\n    formControl: {\n        minWidth: 120,\n    },\n    parameterContainer: {\n        alignItems: 'center',\n        justifyContent: 'space-between',\n    },\n    checkBox: {\n        color: '#7c7c7c',\n    },\n}));\n\n/**\n *\n * Add resource parameter according to swagger spec\n * A unique parameter is defined by a combination of a name and param type and schema or content is required\n * OpenAPI 3.0 spec: https://swagger.io/specification/#parameterObject\n *\n * @export\n * @param {*} props\n * @returns\n */\nfunction AddParameter(props) {\n    const {\n        operation, operationsDispatcher, target, verb, specVersion, intl,\n    } = props;\n    const inputLabel = useRef(null);\n    const [labelWidth, setLabelWidth] = useState(0);\n    const initParameter = getParameter(specVersion);\n\n    /**\n     *\n     *\n     * @param {*} state\n     * @param {*} action\n     * @returns\n     */\n    function newParameterReducer(state, action) {\n        const { type, value } = action;\n        switch (type) {\n            case 'in':\n            case 'name':\n            case 'required':\n                return { ...state, [type]: value };\n            case 'type': {\n                if (specVersion === '2.0') {\n                    return { ...state, [type]: value };\n                } else {\n                    return { ...state, schema: { [type]: value } };\n                }\n            }\n            case 'clear':\n                return initParameter;\n            default:\n                return state;\n        }\n    }\n    const [newParameter, newParameterDispatcher] = useReducer(newParameterReducer, initParameter);\n    React.useEffect(() => {\n        setLabelWidth(inputLabel.current.offsetWidth);\n    }, []);\n\n    let isParameterExist = false;\n    const isParameterExistValue = operation.parameters && operation.parameters.map(\n        (operations) => (operations.in === newParameter.in && operations.name === newParameter.name),\n    );\n\n    if (isParameterExistValue && isParameterExistValue.includes(true)) {\n        isParameterExist = true;\n    } else {\n        isParameterExist = false;\n    }\n\n    const classes = useStyles();\n\n    /**\n     *\n     *\n     */\n    function clearInputs() {\n        newParameterDispatcher({ type: 'clear' });\n    }\n    /**\n     *\n     *\n     */\n    function addNewParameter() {\n        if (newParameter.in === 'body') {\n            operationsDispatcher(specVersion === '2.0'\n                ? {\n                    action: 'parameter',\n                    data: {\n                        target,\n                        verb,\n                        value: {\n                            name: newParameter.name,\n                            description: '',\n                            required: newParameter.required,\n                            in: newParameter.in,\n                            schema: {\n                                type: newParameter.type,\n                            },\n                        },\n                    },\n                }\n                : {\n                    action: 'requestBody',\n                    data: {\n                        target,\n                        verb,\n                        value: {\n                            description: '',\n                            required: newParameter.required,\n                            content: { [newParameter.name]: { schema: { type: 'object' } } },\n                        },\n                    },\n                });\n        } else {\n            operationsDispatcher({ action: 'parameter', data: { target, verb, value: newParameter } });\n        }\n        clearInputs();\n    }\n\n    function isDisabled() {\n        if (specVersion === '2.0') {\n            return (!newParameter.name || !newParameter.type || !newParameter.in || isParameterExist);\n        }\n        return (!newParameter.name || !newParameter.schema.type || !newParameter.in || isParameterExist);\n    }\n\n    function getParameterNameHelperText(paramIn) {\n        if (isParameterExist) {\n            return intl.formatMessage({\n                id: 'Apis.Details.Resources.components.operationComponents.AddParameter.parameter.name.already.exists',\n                defaultMessage: 'Parameter name already exists',\n            });\n        }\n        if (paramIn === 'body') {\n            if (specVersion !== '2.0') {\n                return intl.formatMessage({\n                    id: 'Apis.Details.Resources.components.operationComponents.AddParameter.enter.content.type',\n                    defaultMessage: 'Enter Content Type',\n                });\n            }\n        }\n        return intl.formatMessage({\n            id: 'Apis.Details.Resources.components.operationComponents.AddParameter.enter.parameter.name',\n            defaultMessage: 'Enter Parameter Name',\n        });\n    }\n\n    return (\n        <Grid container direction='row' spacing={1} className={classes.parameterContainer}>\n            <Grid item xs={2} md={2}>\n                <FormControl margin='dense' variant='outlined' className={classes.formControl}>\n                    <InputLabel ref={inputLabel} htmlFor='param-in' error={isParameterExist}>\n                        Parameter Type\n                    </InputLabel>\n\n                    <Select\n                        value={newParameter.in}\n                        onChange={({ target: { name, value } }) => newParameterDispatcher({ type: name, value })}\n                        labelWidth={labelWidth}\n                        inputProps={{\n                            name: 'in',\n                            id: 'param-in',\n                        }}\n                        MenuProps={{\n                            getContentAnchorEl: null,\n                            anchorOrigin: {\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            },\n                        }}\n                        error={isParameterExist}\n                    >\n                        {getParameterTypes(specVersion).map((paramType) => {\n                            if ((paramType === 'body' || paramType === 'formData')\n                                && !['post', 'put', 'patch'].includes(verb)) {\n                                return null;\n                            }\n                            return (\n                                <MenuItem value={paramType} dense>\n                                    {capitalizeFirstLetter(paramType)}\n                                </MenuItem>\n                            );\n                        })}\n                    </Select>\n                    {isParameterExist\n                        ? (\n                            <FormHelperText id='my-helper-text' error>\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.parameter.name.exists'\n                                    defaultMessage='Parameter type already exists'\n                                />\n                            </FormHelperText>\n                        )\n                        : (\n                            <FormHelperText id='my-helper-text'>\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.select.parameter.type'\n                                    defaultMessage='Select the parameter type'\n                                />\n                            </FormHelperText>\n                        )}\n                </FormControl>\n            </Grid>\n            <Grid item xs={2} md={2}>\n                <TextField\n                    id='parameter-name'\n                    label={newParameter.in === 'body'\n                        ? iff(specVersion === '2.0',\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.parameter.name'\n                                defaultMessage='Parameter Name'\n                            />,\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.content.type'\n                                defaultMessage='Content Type'\n                            />)\n                        : (\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.parameter.name'\n                                defaultMessage='Parameter Name'\n                            />\n                        )}\n                    name='name'\n                    value={newParameter.name}\n                    onChange={({ target: { name, value } }) => newParameterDispatcher({ type: name, value })}\n                    helperText={getParameterNameHelperText(newParameter.in)}\n                    margin='dense'\n                    variant='outlined'\n                    onKeyPress={(event) => {\n                        if (event.key === 'Enter') {\n                            // key code 13 is for `Enter` key\n                            event.preventDefault(); // To prevent form submissions\n                            addNewParameter();\n                        }\n                    }}\n                    error={isParameterExist}\n                />\n            </Grid>\n            <Grid item xs={2} md={2}>\n                <FormControl margin='dense' variant='outlined' className={classes.formControl}>\n                    <InputLabel ref={inputLabel} htmlFor='data-type' error={isParameterExist}>\n                        <FormattedMessage\n                            id='Apis.Details.Resources.components.operationComponents.data.type'\n                            defaultMessage='Data Type'\n                        />\n                    </InputLabel>\n\n                    <Select\n                        value={newParameter.schema !== undefined ? newParameter.schema.type : newParameter.type}\n                        onChange={({ target: { name, value } }) => newParameterDispatcher({ type: name, value })}\n                        labelWidth={labelWidth}\n                        inputProps={{\n                            name: 'type',\n                            id: 'data-type',\n                        }}\n                        MenuProps={{\n                            getContentAnchorEl: null,\n                            anchorOrigin: {\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            },\n                        }}\n                        error={isParameterExist}\n                    >\n                        {getSupportedDataTypes(specVersion, newParameter.in).map((paramType) => {\n                            return (\n                                <MenuItem value={paramType} dense>\n                                    {capitalizeFirstLetter(paramType)}\n                                </MenuItem>\n                            );\n                        })}\n                    </Select>\n                    <FormHelperText id='my-helper-text'>Select the data type</FormHelperText>\n                </FormControl>\n            </Grid>\n            <Grid item xs={2} md={2}>\n                <FormControl component='fieldset' className={classes.formControl}>\n                    <FormControlLabel\n                        className={classes.checkBox}\n                        control={(\n                            <Checkbox\n                                checked={newParameter.required}\n                                onChange={\n                                    ({\n                                        target: { name, value },\n                                    }) => newParameterDispatcher({ type: name, value: !value })\n                                }\n                                value={newParameter.required}\n                                inputProps={{\n                                    name: 'required',\n                                }}\n                            />\n                        )}\n                        label={(\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.required'\n                                defaultMessage='Required'\n                            />\n                        )}\n                    />\n                    <FormHelperText>\n                        <FormattedMessage\n                            id='Apis.Details.Resources.components.operationComponents.required.helper.text'\n                            defaultMessage='Check whether the parameter is required.'\n                        />\n                    </FormHelperText>\n                </FormControl>\n            </Grid>\n            <Grid item xs={2} md={2}>\n                <Tooltip\n                    title={(\n                        <FormattedMessage\n                            id='Apis.Details.Resources.components.operationComponents.AddParameter.add.tooltip'\n                            defaultMessage='Add new parameter'\n                        />\n                    )}\n                    aria-label='AddParameter'\n                    placement='bottom'\n                    interactive\n                >\n                    <span>\n                        <Button\n                            style={{ marginLeft: '20px', marginBottom: '15px', marginRight: '20px' }}\n                            disabled={isDisabled()}\n                            size='small'\n                            variant='outlined'\n                            aria-label='add'\n                            color='primary'\n                            onClick={addNewParameter}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.AddParameter.add'\n                                defaultMessage='Add'\n                            />\n                        </Button>\n                    </span>\n                </Tooltip>\n                <sup>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.AddParameter.clear.inputs.tooltip'\n                                defaultMessage='Clear inputs'\n                            />\n                        )}\n                        aria-label='clear-inputs'\n                        placement='bottom'\n                        interactive\n                    >\n                        <span>\n                            <IconButton onClick={clearInputs} size='small'>\n                                <ClearIcon />\n                            </IconButton>\n                        </span>\n                    </Tooltip>\n                </sup>\n            </Grid>\n        </Grid>\n    );\n}\n\nAddParameter.propTypes = {\n    operation: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    specVersion: PropTypes.string.isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default React.memo(injectIntl(AddParameter));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { makeStyles } from '@material-ui/core/styles';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { capitalizeFirstLetter } from 'AppData/stringFormatter';\nimport { FormattedMessage } from 'react-intl';\nimport { isRef } from 'AppComponents/Apis/Details/Resources/operationUtils';\nimport RequestBody from 'AppComponents/Apis/Details/Resources/components/operationComponents/RequestBody';\nimport Banner from 'AppComponents/Shared/Banner';\nimport EditParameter from './EditParameter';\n\nconst useStyles = makeStyles({\n    root: {\n        width: '100%',\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 650,\n    },\n});\n\n/**\n *\n * Renders the operation parameters section\n * @export\n * @param {*} props\n * @returns\n */\nexport default function ListParameters(props) {\n    const {\n        operation, operationsDispatcher, target, verb, disableUpdate, hideParameterEdit, specVersion, resolvedSpec,\n    } = props;\n    const classes = useStyles();\n    const [editingParameter, setEditingParameter] = useState(null);\n    if (!resolvedSpec) {\n        return (\n            <Banner\n                disableActions\n                dense\n                type='error'\n                message={(\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.ListParameter.parameter.spec.error'\n                        defaultMessage='Error in resolving the definition!'\n                    />\n                )}\n            />\n        );\n    }\n    return (\n        <>\n            {editingParameter !== null && (\n                <EditParameter\n                    operationsDispatcher={operationsDispatcher}\n                    target={target}\n                    verb={verb}\n                    editingParameter={editingParameter}\n                    setEditingParameter={setEditingParameter}\n                    version={specVersion}\n                />\n            )}\n            <Table className={classes.table} aria-label='parameters list'>\n                <TableHead>\n                    <TableRow>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.ListParameter.parameter.type'\n                                defaultMessage='Parameter Type'\n                            />\n                        </TableCell>\n                        <TableCell>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.ListParameter.parameter.name'\n                                defaultMessage='Name/Content Type'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.ListParameter.data.type'\n                                defaultMessage='Data Type'\n                            />\n                        </TableCell>\n                        <TableCell align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.Resources.components.operationComponents.ListParameter.required'\n                                defaultMessage='Required'\n                            />\n                        </TableCell>\n                        {!disableUpdate && (\n                            <TableCell align='left'>\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.ListParameter.actions'\n                                    defaultMessage='Actions'\n                                />\n                            </TableCell>\n                        )}\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {operation.parameters\n                        && operation.parameters.map((parameter, index) => {\n                            const isRefParam = isRef(parameter);\n                            const paramCopy = isRefParam\n                                ? resolvedSpec.paths[target][verb].parameters[index] : parameter;\n                            return (\n                                <TableRow key={paramCopy.name}>\n                                    <TableCell align='left'>{capitalizeFirstLetter(paramCopy.in)}</TableCell>\n                                    <TableCell align='left'>{paramCopy.name}</TableCell>\n                                    <TableCell align='left'>\n                                        {capitalizeFirstLetter(paramCopy.schema\n                                            ? paramCopy.schema.type : paramCopy.type)}\n                                    </TableCell>\n                                    <TableCell align='left'>\n                                        {paramCopy.required\n                                            ? (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Resources.components.operationComponents'\n                                                        + '.ListParameter.yes'}\n                                                    defaultMessage='Yes'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Resources.components.operationComponents'\n                                                        + '.ListParameter.no'}\n                                                    defaultMessage='No'\n                                                />\n                                            )}\n                                    </TableCell>\n                                    {!disableUpdate && (\n                                        <TableCell align='left'>\n                                            {!isRefParam && (\n                                                <Tooltip title={(\n                                                    <FormattedMessage\n                                                        id={'Apis.Details.Resources.components.operationComponents.'\n                                                            + 'ListParameter.edit'}\n                                                        defaultMessage='Edit'\n                                                    />\n                                                )}\n                                                >\n                                                    <IconButton\n                                                        onClick={() => setEditingParameter(parameter)}\n                                                        fontSize='small'\n                                                    >\n                                                        <EditIcon fontSize='small' />\n                                                    </IconButton>\n                                                </Tooltip>\n                                            )}\n                                            <Tooltip title={(\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Resources.components.operationComponents'\n                                                        + '.ListParameter.delete'}\n                                                    defaultMessage='Delete'\n                                                />\n                                            )}\n                                            >\n                                                <IconButton\n                                                    disabled={disableUpdate}\n                                                    onClick={() => operationsDispatcher({\n                                                        action: 'deleteParameter',\n                                                        data: { target, verb, value: paramCopy },\n                                                    })}\n                                                    fontSize='small'\n                                                >\n                                                    <DeleteIcon fontSize='small' />\n                                                </IconButton>\n                                            </Tooltip>\n                                        </TableCell>\n                                    )}\n                                </TableRow>\n                            );\n                        })}\n                    {operation.requestBody && (isRef(operation.requestBody)\n                        ? Object.entries(resolvedSpec.paths[target][verb].requestBody.content).map(\n                            ([contentType, content]) => {\n                                return (\n                                    <RequestBody\n                                        contentType={contentType}\n                                        content={content}\n                                        operation={operation}\n                                        disableUpdate={disableUpdate}\n                                        hideParameterEdit={hideParameterEdit}\n                                        operationsDispatcher={operationsDispatcher}\n                                        target={target}\n                                        verb={verb}\n                                    />\n                                );\n                            },\n                        ) : Object.entries(operation.requestBody.content).map(([contentType, content]) => {\n                            return (\n                                <RequestBody\n                                    contentType={contentType}\n                                    content={content}\n                                    operation={operation}\n                                    disableUpdate={disableUpdate}\n                                    hideParameterEdit={hideParameterEdit}\n                                    operationsDispatcher={operationsDispatcher}\n                                    target={target}\n                                    verb={verb}\n                                />\n                            );\n                        }))}\n                </TableBody>\n            </Table>\n        </>\n    );\n}\n\nListParameters.defaultProps = {\n    hideParameterEdit: false,\n    disableUpdate: false,\n};\nListParameters.propTypes = {\n    operation: PropTypes.shape({}).isRequired,\n    spec: PropTypes.shape({}).isRequired,\n    hideParameterEdit: PropTypes.bool,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    disableUpdate: PropTypes.bool,\n    specVersion: PropTypes.string.isRequired,\n    resolvedSpec: PropTypes.shape({}).isRequired,\n};\n","/*\n *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport TableCell from '@material-ui/core/TableCell';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport TableRow from '@material-ui/core/TableRow';\n\n/**\n * Component to render the Request b\n *\n * */\nfunction RequestBody(props) {\n    const {\n        contentType, content, operation, disableUpdate, hideParameterEdit, operationsDispatcher, target, verb,\n    } = props;\n    return (\n        <TableRow key={contentType}>\n            <TableCell align='left'>\n                <FormattedMessage\n                    id='Apis.Details.Resources.components.operationComponents.ListParameter.body'\n                    defaultMessage='Body'\n                />\n            </TableCell>\n            <TableCell>{contentType}</TableCell>\n            <TableCell align='left'>{content.schema.type}</TableCell>\n            <TableCell align='left'>\n                {operation.requestBody.required\n                    ? (\n                        <FormattedMessage\n                            id={'Apis.Details.Resources.components.operationComponents'\n                            + '.ListParameter.yes'}\n                            defaultMessage='Yes'\n                        />\n                    )\n                    : (\n                        <FormattedMessage\n                            id={'Apis.Details.Resources.components.operationComponents'\n                            + '.ListParameter.no'}\n                            defaultMessage='No'\n                        />\n                    )}\n            </TableCell>\n            {!disableUpdate && (\n                <TableCell align='left'>\n                    {hideParameterEdit && (\n                        <Tooltip title='Edit'>\n                            <IconButton onClick={() => {}} fontSize='small'>\n                                <EditIcon fontSize='small' />\n                            </IconButton>\n                        </Tooltip>\n                    )}\n                    <Tooltip title={(\n                        <FormattedMessage\n                            id={'Apis.Details.Resources.components.operationComponents'\n                            + '.ListParameter.delete'}\n                            defaultMessage='Delete'\n                        />\n                    )}\n                    >\n                        <IconButton\n                            disabled={disableUpdate}\n                            onClick={() => {\n                                operationsDispatcher({\n                                    action: 'requestBody',\n                                    data: {\n                                        target,\n                                        verb,\n                                        value: {\n                                            description: '',\n                                            required: false,\n                                            content: {},\n                                        },\n                                    },\n                                });\n                            }}\n                            fontSize='small'\n                        >\n                            <DeleteIcon fontSize='small' />\n                        </IconButton>\n                    </Tooltip>\n                </TableCell>\n            )}\n        </TableRow>\n    );\n}\n\nRequestBody.propTypes = {\n    contentType: PropTypes.string.isRequired,\n    content: PropTypes.shape({}).isRequired,\n    operation: PropTypes.shape({}).isRequired,\n    disableUpdate: PropTypes.bool.isRequired,\n    hideParameterEdit: PropTypes.bool.isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n};\n\nexport default RequestBody;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useReducer } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Select from '@material-ui/core/Select';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { capitalizeFirstLetter } from 'AppData/stringFormatter';\nimport {\n    getSupportedDataTypes,\n    getDataFormats,\n    iff,\n} from 'AppComponents/Apis/Details/Resources/components/operationComponents/parameterUtils';\nimport { FormattedMessage } from 'react-intl';\n\nconst useStyles = makeStyles((theme) => ({\n    form: {\n        display: 'flex',\n        flexDirection: 'column',\n        margin: 'auto',\n        width: 'fit-content',\n    },\n    formControl: {\n        marginTop: theme.spacing(2),\n        minWidth: 120,\n    },\n    formControlLabel: {\n        marginTop: theme.spacing(1),\n    },\n    subtleText: {\n        color: theme.palette.grey[400],\n    },\n}));\n\n/**\n *\n *\n * @export\n * @returns\n */\nexport default function EditParameter(props) {\n    const {\n        operationsDispatcher, target, verb, editingParameter, setEditingParameter, version,\n    } = props;\n    /**\n     *\n     *\n     * @param {*} currentParameter\n     * @param {*} paramAction\n     */\n    function parameterActionReducer(currentParameter, paramAction) {\n        const { action, value } = paramAction;\n        const nextParameter = currentParameter.schema\n            ? { ...currentParameter, schema: { ...currentParameter.schema } } : { ...currentParameter };\n        switch (action) {\n            case 'description':\n            case 'required':\n                nextParameter[action] = value;\n                break;\n            case 'type':\n                if (nextParameter.schema) {\n                    nextParameter.schema[action] = value;\n                } else {\n                    nextParameter[action] = value;\n                }\n                break;\n            case 'format':\n                if (nextParameter.schema) {\n                    if (value) {\n                        nextParameter.schema[action] = value;\n                    } else {\n                        delete nextParameter.schema[action];\n                    }\n                } else if (value) {\n                    nextParameter[action] = value;\n                } else {\n                    delete nextParameter[action];\n                }\n                break;\n            default:\n                break;\n        }\n        return nextParameter;\n    }\n    const [parameter, parameterActionDispatcher] = useReducer(parameterActionReducer, editingParameter);\n    const classes = useStyles();\n\n    const handleClose = () => {\n        setEditingParameter(null);\n    };\n\n    /**\n     *\n     *\n     */\n    function handelDone() {\n        operationsDispatcher({ action: 'parameter', data: { target, verb, value: parameter } });\n        handleClose();\n    }\n    const isEditing = parameter !== null;\n    if (!isEditing) {\n        return null;\n    }\n    return (\n        <Dialog fullWidth maxWidth='md' open={isEditing} onClose={handleClose} aria-labelledby='edit-parameter'>\n            <DialogTitle disableTypography id='edit-parameter'>\n                <Typography variant='h6'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditParameter.title'\n                        defaultMessage='Edit'\n                    />\n                    {' '}\n                    <Typography display='inline' variant='subtitle1'>\n                        {capitalizeFirstLetter(parameter.in)}\n                        {' '}\n                        :\n                        {parameter.name}\n                    </Typography>\n                </Typography>\n            </DialogTitle>\n            <DialogContent>\n                <Grid container direction='row' spacing={2} justify='flex-start' alignItems='center'>\n                    <Grid item md={6}>\n                        <TextField\n                            value={capitalizeFirstLetter(parameter.in)}\n                            disabled\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.type'\n                                    defaultMessage='Parameter Type'\n                                />\n                            )}\n                            margin='dense'\n                            variant='outlined'\n                        />\n                    </Grid>\n                    <Grid item md={6}>\n                        <TextField\n                            value={parameter.name}\n                            disabled\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.name'\n                                    defaultMessage='Name'\n                                />\n                            )}\n                            margin='dense'\n                            variant='outlined'\n                        />\n                    </Grid>\n                    <Grid item md={12}>\n                        <TextField\n                            value={parameter.description}\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.description'\n                                    defaultMessage='Description'\n                                />\n                            )}\n                            multiline\n                            rows='4'\n                            name='description'\n                            margin='normal'\n                            variant='outlined'\n                            onChange={({ target: { name, value } }) => {\n                                parameterActionDispatcher({ action: name, value });\n                            }}\n                        />\n                    </Grid>\n                    <Grid item md={6}>\n                        <FormControl\n                            required\n                            fullWidth\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.formControl}\n                        >\n                            <InputLabel required id='edit-parameter-type'>\n                                <FormattedMessage\n                                    id='Apis.Details.Resources.components.operationComponents.EditParameter.data.type'\n                                    defaultMessage='Data Type'\n                                />\n                            </InputLabel>\n\n                            <Select\n                                value={parameter.schema ? parameter.schema.type : parameter.type}\n                                onChange={\n                                    ({ target: { name, value } }) => parameterActionDispatcher({ action: name, value })\n                                }\n                                inputProps={{\n                                    name: 'type',\n                                    id: 'edit-parameter-type',\n                                }}\n                                MenuProps={{\n                                    getContentAnchorEl: null,\n                                    anchorOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    },\n                                }}\n                            >\n                                {getSupportedDataTypes(version, parameter.in).map((dataType) => (\n                                    <MenuItem value={dataType} dense>\n                                        {capitalizeFirstLetter(dataType)}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                        + 'select.schema.data.type'}\n                                    defaultMessage='Select the Schema Type'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Grid item md={6}>\n                        <FormControl\n                            fullWidth\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.formControl}\n                            disabled={parameter.schema\n                                ? iff(\n                                    parameter.schema.type === 'boolean' || parameter.schema.type === 'object',\n                                    true,\n                                    false,\n                                )\n                                : iff(\n                                    parameter.type === 'boolean' || parameter.type === 'object',\n                                    true,\n                                    false,\n                                )}\n                        >\n                            <InputLabel id='edit-parameter-format'>\n                                <FormattedMessage\n                                    id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                        + 'data.format'}\n                                    defaultMessage='Data Format'\n                                />\n                            </InputLabel>\n                            <Select\n                                value={parameter.schema ? parameter.schema.format : parameter.format}\n                                onChange={\n                                    ({ target: { name, value } }) => parameterActionDispatcher({ action: name, value })\n                                }\n                                inputProps={{\n                                    name: 'format',\n                                    id: 'edit-parameter-format',\n                                }}\n                                MenuProps={{\n                                    getContentAnchorEl: null,\n                                    anchorOrigin: {\n                                        vertical: 'bottom',\n                                        horizontal: 'left',\n                                    },\n                                }}\n                            >\n                                <MenuItem value='' dense className={classes.subtleText}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                            + 'select.format.of.data.type.none.option'}\n                                        defaultMessage='No Data Type'\n                                    />\n                                </MenuItem>\n                                {getDataFormats(\n                                    parameter.schema ? parameter.schema.type : parameter.type,\n                                ).map((dataType) => (\n                                    <MenuItem value={dataType} dense>\n                                        {capitalizeFirstLetter(dataType)}\n                                    </MenuItem>\n                                ))}\n                            </Select>\n                            <FormHelperText>\n                                <FormattedMessage\n                                    id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                        + 'select.format.of.data.type'}\n                                    defaultMessage='Select the Format of Data Type'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    </Grid>\n                    <Grid item>\n                        <FormControl component='fieldset'>\n                            <FormControlLabel\n                                control={(\n                                    <Checkbox\n                                        checked={parameter.required}\n                                        onChange={(\n                                            { target: { name, checked } },\n                                        ) => parameterActionDispatcher({ action: name, value: checked })}\n                                        value={parameter.required}\n                                        inputProps={{\n                                            name: 'required',\n                                        }}\n                                    />\n                                )}\n                                label={(\n                                    <FormattedMessage\n                                        id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                            + 'required'}\n                                        defaultMessage='Required'\n                                    />\n                                )}\n                            />\n                        </FormControl>\n                    </Grid>\n                    <Grid container direction='row' justify='flex-end' alignItems='center'>\n                        <DialogContentText>\n                            <FormattedMessage\n                                id={'Apis.Details.Resources.components.operationComponents.EditParameter.'\n                                    + 'use.done.button.to.persist.changes'}\n                                defaultMessage='Use DONE button in the page to persist changes'\n                            />\n                        </DialogContentText>\n                    </Grid>\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button size='small' onClick={handleClose} color='primary'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditParameter.close'\n                        defaultMessage='Close'\n                    />\n                </Button>\n                <Button size='small' onClick={handelDone} variant='contained' color='primary'>\n                    <FormattedMessage\n                        id='Apis.Details.Resources.components.operationComponents.EditParameter.done'\n                        defaultMessage='Done'\n                    />\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nEditParameter.propTypes = {\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    editingParameter: PropTypes.shape({}).isRequired,\n    setEditingParameter: PropTypes.func.isRequired,\n    version: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useState, Suspense, lazy, useEffect,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Button from '@material-ui/core/Button';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Paper from '@material-ui/core/Paper';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Box from '@material-ui/core/Box';\n\nimport PolicyEditor from './PolicyEditor';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"SOAPToRESTMonaco\" */));\n\n/**\n *\n * Renders the operation parameters section\n * @export\n * @param {*} props\n * @returns\n */\nexport default function SOAPToRESTListing(props) {\n    const { resourcePolicy, resourcePoliciesDispatcher } = props;\n    const [resourcePolicyIn, setResourcePolicyIn] = useState(resourcePolicy.in);\n    const [resourcePolicyOut, setResourcePolicyOut] = useState(resourcePolicy.out);\n    useEffect(() => {\n        setResourcePolicyIn(resourcePolicy.in);\n        setResourcePolicyOut(resourcePolicy.out);\n    }, [resourcePolicy]);\n    // Get use preference from OS https://material-ui.com/customization/palette/#user-preference\n    const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n    const [openEditor, setOpenEditor] = useState(false);\n    const [selectedTab, setTabIndex] = useState('in');\n    const editorOptions = {\n        selectOnLineNumbers: true,\n        readOnly: true,\n        smoothScrolling: true,\n        wordWrap: 'on',\n    };\n    const selectedPolicy = selectedTab === 'in' ? resourcePolicyIn : resourcePolicyOut;\n    const editorProps = {\n        language: 'xml',\n        height: 'calc(50vh)',\n        theme: prefersDarkMode ? 'vs-dark' : 'vs',\n        value: selectedPolicy.content,\n        options: editorOptions,\n    };\n\n    /**\n     *\n     *\n     * @param {*} content\n     */\n    function setPolicyContent(content) {\n        if (selectedTab === 'in') {\n            setResourcePolicyIn({ ...resourcePolicyIn, content });\n        } else {\n            setResourcePolicyOut({ ...resourcePolicyOut, content });\n        }\n    }\n    return (\n        <>\n            <Grid item xs={12} md={12}>\n                <Typography variant='subtitle1'>\n                    Mediation\n                    <Divider variant='middle' />\n                </Typography>\n            </Grid>\n            <Grid item xs={12}>\n                <Tabs\n                    value={selectedTab}\n                    indicatorColor='primary'\n                    textColor='primary'\n                    onChange={(event, tab) => setTabIndex(tab)}\n                    aria-label='Resource mediation in/out tabs'\n                >\n                    <Tab value='in' label='In' />\n                    <Tab value='out' label='Out' />\n                </Tabs>\n                <Box p={1}>\n                    <Button onClick={() => setOpenEditor(true)} variant='outlined' size='small' color='primary'>\n                        Edit\n                        {' '}\n                        <EditIcon />\n                    </Button>\n                    {!openEditor && (\n                        <Paper elevation={4}>\n                            <Suspense fallback={<CircularProgress disableShrink />}>\n                                <MonacoEditor {...editorProps} />\n                            </Suspense>\n                        </Paper>\n                    )}\n                </Box>\n            </Grid>\n            <PolicyEditor\n                resourcePoliciesDispatcher={resourcePoliciesDispatcher}\n                setPolicyContent={setPolicyContent}\n                selectedPolicy={selectedPolicy}\n                originalResourcePolicy={resourcePolicy[selectedTab]}\n                direction={selectedTab}\n                prefersDarkMode={prefersDarkMode}\n                onClose={() => setOpenEditor(false)}\n                open={openEditor}\n            />\n        </>\n    );\n}\n\nSOAPToRESTListing.defaultProps = {\n    disableUpdate: false,\n};\nSOAPToRESTListing.propTypes = {\n    resourcePoliciesDispatcher: PropTypes.func.isRequired,\n    resourcePolicy: PropTypes.shape({}).isRequired,\n    operationsDispatcher: PropTypes.func.isRequired,\n    target: PropTypes.string.isRequired,\n    verb: PropTypes.string.isRequired,\n    disableUpdate: PropTypes.bool,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { Suspense, lazy, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Fade from '@material-ui/core/Fade';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Banner from 'AppComponents/Shared/Banner';\nimport CloseConfirmation from './CloseConfirmation';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"PolicyEditorMonaco\" */));\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        // position: 'relative',\n        top: 'auto',\n        bottom: 0,\n    },\n    title: {\n        marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n}));\n\nconst Transition = React.forwardRef((props, ref) => {\n    return <Fade in ref={ref} {...props} />;\n});\n\n/**\n *\n *\n * @export\n * @returns\n */\nexport default function PolicyEditor(props) {\n    const classes = useStyles();\n    const [api] = useAPI();\n    const {\n        open,\n        onClose,\n        prefersDarkMode,\n        originalResourcePolicy,\n        selectedPolicy,\n        setPolicyContent,\n        resourcePoliciesDispatcher,\n        direction,\n    } = props;\n    const [pageError, setPageError] = useState(null);\n    const [openConfirmation, setOpenConfirmation] = useState(false);\n    const [saving, setSaving] = useState(false);\n\n    const editorOptions = {\n        selectOnLineNumbers: true,\n        readOnly: saving,\n        smoothScrolling: true,\n        wordWrap: 'on',\n    };\n    const editorProps = {\n        language: 'xml',\n        height: 'calc(100vh)',\n        theme: prefersDarkMode ? 'vs-dark' : 'vs',\n        value: selectedPolicy.content,\n        options: editorOptions,\n        onChange: setPolicyContent,\n    };\n\n    /**\n     *\n     *\n     */\n    function confirmAndClose() {\n        // No need to confirm if user have not done any changes\n        if (selectedPolicy.content !== originalResourcePolicy.content) {\n            setOpenConfirmation(true);\n        } else {\n            onClose();\n        }\n    }\n    /**\n     *\n     *\n     */\n    function save() {\n        setSaving(true);\n        api.updateResourcePolicy(selectedPolicy)\n            .then((response) => {\n                Alert.success('Resource policy updated successfully');\n                resourcePoliciesDispatcher({ action: 'update', data: { value: response.body, direction } });\n                onClose();\n            })\n            .catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                    setPageError(error.response.body);\n                } else {\n                    // TODO add i18n ~tmkb\n                    const message = error.message || 'Something went wrong while updating resource policy!';\n                    Alert.error(message);\n                    setPageError(message);\n                }\n                console.error(error);\n            })\n            .finally(() => setSaving(false));\n    }\n\n    return (\n        <Dialog fullScreen open={open} onClose={onClose} TransitionComponent={Transition}>\n            <AppBar position='fixed' color='default' className={classes.appBar}>\n                <Toolbar variant='dense'>\n                    <Grid container direction='row' justify='flex-start' alignItems='flex-start'>\n                        <Grid item>\n                            <Button\n                                disabled={saving}\n                                variant='outlined'\n                                color='primary'\n                                className={classes.title}\n                                onClick={save}\n                            >\n                                save & close\n                                {saving && <CircularProgress size={18} />}\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Button color='inherit' className={classes.title} onClick={confirmAndClose}>\n                                close\n                            </Button>\n                        </Grid>\n                    </Grid>\n                </Toolbar>\n            </AppBar>\n            <Grid container direction='row' justify='center' alignItems='center'>\n                {pageError && (\n                    <Grid item xs={12}>\n                        <Banner\n                            onClose={() => setPageError(null)}\n                            disableActions\n                            dense\n                            paperProps={{ elevation: 1 }}\n                            type='error'\n                            message={pageError}\n                        />\n                    </Grid>\n                )}\n            </Grid>\n            <Grid item xs={12}>\n                <Suspense fallback={<CircularProgress disableShrink />}>\n                    <MonacoEditor {...editorProps} />\n                </Suspense>\n            </Grid>\n            <CloseConfirmation\n                open={openConfirmation}\n                onClose={() => {\n                    setPolicyContent(originalResourcePolicy.content);\n                    setOpenConfirmation(false);\n                }}\n                closeEditor={onClose}\n            />\n        </Dialog>\n    );\n}\nPolicyEditor.defaultProps = {\n    open: false,\n    onClose: () => {},\n    prefersDarkMode: false,\n\n};\nPolicyEditor.propTypes = {\n    open: PropTypes.bool,\n    onClose: PropTypes.func,\n    prefersDarkMode: PropTypes.bool,\n    originalResourcePolicy: PropTypes.shape({}).isRequired,\n    selectedPolicy: PropTypes.shape({}).isRequired,\n    setPolicyContent: PropTypes.func.isRequired,\n    resourcePoliciesDispatcher: PropTypes.func.isRequired,\n    direction: PropTypes.oneOf(['in', 'out']).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n/**\n *\n *\n * @export\n * @returns\n */\nexport default function CloseConfirmation(props) {\n    const { open, onClose, closeEditor } = props;\n\n    return (\n        <Dialog\n            open={open}\n            onClose={onClose}\n            aria-labelledby='alert-dialog-title'\n            aria-describedby='alert-dialog-description'\n        >\n            <DialogTitle id='alert-dialog-title'>Discard changes and Close</DialogTitle>\n            <DialogContent>\n                <DialogContentText id='alert-dialog-description'>\n                    All the unsaved changes will be lost\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={onClose} color='primary'>\n                    Cancel\n                </Button>\n                <Button\n                    onClick={() => {\n                        onClose();\n                        closeEditor();\n                    }}\n                    color='primary'\n                    autoFocus\n                >\n                    Close\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n\nCloseConfirmation.propTypes = {\n    open: PropTypes.bool.isRequired,\n    onClose: PropTypes.func.isRequired,\n    closeEditor: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport PropTypes from 'prop-types';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Typography from '@material-ui/core/Typography';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n/**\n *\n * Return a group container , User should provide the operations list as the child component\n * @export\n * @param {*} props\n * @returns {React.Component} @inheritdoc\n */\nexport default function GroupOfOperations(props) {\n    const { openAPI, children, tag } = props;\n    const currentTagInfo = openAPI.tags && openAPI.tags.find((tagInfo) => tagInfo.name === tag);\n    return (\n        <ExpansionPanel defaultExpanded>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />} aria-controls='panel1a-content' id='panel1a-header'>\n                <Typography variant='h4'>\n                    {tag}\n                    {currentTagInfo && (\n                        <Typography style={{ margin: '0px 30px' }} variant='caption'>\n                            {currentTagInfo.description}\n                        </Typography>\n                    )}\n                </Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>{children}</ExpansionPanelDetails>\n        </ExpansionPanel>\n    );\n}\n\nGroupOfOperations.propTypes = {\n    children: PropTypes.element.isRequired,\n    openAPI: PropTypes.shape({ tags: PropTypes.arrayOf(PropTypes.string) }).isRequired,\n    tag: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Dialog from '@material-ui/core/Dialog';\nimport IconButton from '@material-ui/core/IconButton';\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport PropTypes from 'prop-types';\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function SpecErrors(props) {\n    const { specErrors } = props;\n    const [open, setOpen] = useState(false);\n    if (specErrors.length === 0) {\n        return null;\n    }\n    return (\n        <>\n            <sup>\n                <Tooltip title='Show errors'>\n                    <IconButton onClick={() => setOpen(true)} color='secondary' aria-label='Errors in spec'>\n                        <ErrorOutlineIcon color='error' />\n                    </IconButton>\n                </Tooltip>\n            </sup>\n            <Dialog maxWidth='md' aria-labelledby='confirmation-dialog-title' open={open}>\n                <DialogTitle id='confirmation-dialog-title'>\n                    <Typography display='inline' color='textPrimary' variant='h6'>\n                        Errors\n                        <Typography display='inline' variant='subtitle2'>\n                            {' '}\n                            in OpenAPI definition\n                        </Typography>\n                    </Typography>\n                </DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        {specErrors.map((error, index) => (\n                            <>\n                                {index % 2 !== 0 && <Divider light variant='inset' />}\n                                <ListItem>\n                                    <ListItemText\n                                        primary={error.message}\n                                        primaryTypographyProps={{\n                                            color: 'error',\n                                        }}\n                                        inset\n                                    />\n                                </ListItem>\n                            </>\n                        ))}\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => setOpen(false)} color='primary'>\n                        Ok\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n\nSpecErrors.propTypes = {\n    specErrors: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { Link } from 'react-router-dom';\nimport Typography from '@material-ui/core/Typography';\n\n/**\n *\n * Simply reders the edit api definition link in the bottom of the resources listing\n * @export\n * @param {*} props\n * @returns\n */\nexport default function GoToDefinitionLink(props) {\n    const { api, message } = props;\n    return (\n        <Box m={1}>\n            <Link to={`/apis/${api.id}/api definition`}>\n                <Typography style={{ marginLeft: '10px' }} color='primary' display='inline' variant='caption'>\n                    {message}\n                    <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                </Typography>\n            </Link>\n        </Box>\n    );\n}\nGoToDefinitionLink.defaultProps = {\n    message: 'Edit API Definition',\n};\nGoToDefinitionLink.propTypes = {\n    api: PropTypes.shape({ id: PropTypes.string }).isRequired,\n    message: PropTypes.string,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport DeleteSweepIcon from '@material-ui/icons/DeleteSweep';\nimport isEmpty from 'lodash.isempty';\nimport IconButton from '@material-ui/core/IconButton';\nimport ClearAllIcon from '@material-ui/icons/ClearAll';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\n/**\n *\n *\n * @param {*} props\n * @returns\n */\nexport default function OperationsSelector(props) {\n    const { selectedOperations, setSelectedOperation, operations } = props;\n    const [apiFromContext] = useAPI();\n\n    // TODO: Following logic introduce a limitation in showing `indeterminate` icon state if user\n    // select all -> unchecked one operation -> recheck same operation again ~tmkb\n    const isIndeterminate = !isEmpty(selectedOperations);\n    /**\n     *\n     *\n     * @param {*} event\n     */\n    function handleSelector() {\n        setSelectedOperation(isIndeterminate ? {} : operations);\n    }\n    return (\n        <Grid container direction='row' justify='space-between' alignItems='center'>\n            <Grid item />\n            <Grid item>\n                <Box mr={17.25}>\n                    <Tooltip title={isIndeterminate ? 'Clear selections' : 'Mark all for delete'}>\n                        <div>\n                            <IconButton\n                                disabled={isRestricted(['apim:api_create'], apiFromContext)}\n                                onClick={handleSelector}\n                                aria-label='delete all'\n                                size='large'\n                            >\n                                {isIndeterminate ? <ClearAllIcon /> : <DeleteSweepIcon />}\n                            </IconButton>\n                        </div>\n                    </Tooltip>\n                </Box>\n            </Grid>\n        </Grid>\n    );\n}\n\nOperationsSelector.defaultProps = {};\n\nOperationsSelector.propTypes = {\n    selectedOperations: PropTypes.shape({}).isRequired,\n    setSelectedOperation: PropTypes.func.isRequired,\n    operations: PropTypes.shape({}).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { FormattedMessage } from 'react-intl';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport Box from '@material-ui/core/Box';\nimport API from 'AppData/api';\nimport { isRestricted } from 'AppData/AuthManager';\n\nimport Resources from 'AppComponents/Apis/Details/Resources/Resources';\nimport APIRateLimiting from '../Resources/components/APIRateLimiting';\n\n/**\n *\n *\n * @export\n * @param {*} props\n * @returns\n */\nexport default function APIProductOperations() {\n    const [api, updateAPI] = useAPI();\n    const [apiThrottlingPolicy, setApiThrottlingPolicy] = useState(api.apiThrottlingPolicy);\n    const [operationRateLimits, setOperationRateLimits] = useState([]);\n    const [isSaving, setIsSaving] = useState(false);\n    useEffect(() => {\n        // Fetch API level throttling policies only when the page get mounted for the first time `componentDidMount`\n        API.policies('api').then((response) => {\n            setOperationRateLimits(response.body.list);\n        });\n        // TODO: need to handle the error cases through catch ~tmkb\n    }, []);\n\n    useEffect(() => {\n        setApiThrottlingPolicy(api.apiThrottlingPolicy);\n    }, [api.apiThrottlingPolicy]);\n\n    /**\n     *\n     *\n     */\n    function saveChanges() {\n        setIsSaving(true);\n        updateAPI({ apiThrottlingPolicy }).finally(() => setIsSaving(false));\n    }\n    return (\n        <Grid container spacing={4}>\n            <Grid item md={12}>\n                <Typography variant='h4' gutterBottom>\n                    Product Resources\n                </Typography>\n                <Box component='div' display='inline'>\n                    <Link to={'/api-products/' + api.id + '/resources/edit'}>\n                        <Button\n                            variant='contained'\n                            color='primary'\n                        >\n                            <EditIcon />\n                            <FormattedMessage\n                                id='Apis.Details.Resources.Resources.edit.resources.button'\n                                defaultMessage='Edit Resources'\n                            />\n                        </Button>\n                    </Link>\n                </Box>\n            </Grid>\n            <Grid item md={12}>\n                <APIRateLimiting\n                    operationRateLimits={operationRateLimits}\n                    api={api}\n                    isAPIProduct\n                    value={apiThrottlingPolicy}\n                    onChange={setApiThrottlingPolicy}\n                />\n            </Grid>\n            {!isRestricted(['apim:api_create'], api) && (\n                <Grid item md={12}>\n                    <Box ml={1}>\n                        <Button\n                            onClick={saveChanges}\n                            disabled={api.isRevision}\n                            variant='contained'\n                            size='small'\n                            color='primary'\n                        >\n                            Save\n                            {isSaving && <CircularProgress size={24} />}\n                        </Button>\n                        <Box display='inline' ml={1}>\n                            <Button\n                                size='small'\n                                variant='outlined'\n                                onClick={() => setApiThrottlingPolicy(api.apiThrottlingPolicy)}\n                            >\n                                Reset\n                            </Button>\n                        </Box>\n                    </Box>\n                </Grid>\n            )}\n\n            <Grid item md={12}>\n                <Resources\n                    hideAPIDefinitionLink\n                    disableUpdate\n                    disableRateLimiting\n                    operationProps={{ disableDelete: true }}\n                    disableMultiSelect\n                    disableAddOperation\n                />\n            </Grid>\n        </Grid>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint-disable array-callback-return */\n/* eslint no-param-reassign: [\"error\", { \"props\": true, \"ignorePropertyModificationsFor\": [\"operationObj\"] }] */\n\nimport React, { useState, useContext } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport cloneDeep from 'lodash.clonedeep';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport ProductResourcesEditWorkspace from './ProductResourcesEditWorkspace';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        paddingBottom: theme.spacing(2),\n    },\n    buttonWrapper: {\n        marginTop: theme.spacing(4),\n    },\n}));\n\n/**\n *\n *\n * @returns\n */\nfunction ProductResourcesEdit() {\n    const classes = useStyles();\n\n    // Get the current api product object from the context\n    const { api, updateAPI } = useContext(APIContext);\n    const apiCopy = cloneDeep(api);\n    const history = useHistory();\n    const { apis } = apiCopy;\n\n    // Define states\n    const [apiResources, setApiResources] = useState(apis);\n    const [isUpdating, setUpdating] = useState(false);\n    // Initialize the rest api libraries\n\n    const handleSave = () => {\n        setUpdating(true);\n\n        const updatePromise = updateAPI({ apis: apiResources }, true);\n        updatePromise\n            .then(() => {\n                setUpdating(false);\n            })\n            .catch((error) => {\n                setUpdating(false);\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    };\n\n    const handleSaveAndDeploy = () => {\n        setUpdating(true);\n\n        const updatePromise = updateAPI({ apis: apiResources }, true);\n        updatePromise\n            .then(() => {\n                setUpdating(false);\n            })\n            .catch((error) => {\n                setUpdating(false);\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 401) {\n                    doRedirectToLogin();\n                }\n            }).finally(() => history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            }));\n    };\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.titleWrapper}>\n                <Typography variant='h4' align='left' className={classes.mainTitle}>\n                    <FormattedMessage\n                        id='Apis.Details.ProductResources.ProductResourcesEdit.title'\n                        defaultMessage='Manage Resources'\n                    />\n                </Typography>\n            </div>\n            <div className={classes.contentWrapper}>\n                <ProductResourcesEditWorkspace\n                    apiResources={apiResources}\n                    setApiResources={setApiResources}\n                    api={api}\n                />\n                <div className={classes.buttonWrapper}>\n                    <Grid container direction='row' alignItems='flex-start' spacing={1}>\n                        <Grid item>\n                            <div>\n                                <CustomSplitButton\n                                    handleSave={handleSave}\n                                    handleSaveAndDeploy={handleSaveAndDeploy}\n                                    isUpdating={isUpdating}\n                                />\n                            </div>\n                        </Grid>\n                        <Grid item>\n                            <Link to={'/apis/' + api.id + '/overview'}>\n                                <Button>\n                                    <FormattedMessage\n                                        id='Apis.Details.ProductResources.ProductResourcesEdit.cancel'\n                                        defaultMessage='Cancel'\n                                    />\n                                </Button>\n                            </Link>\n                        </Grid>\n                    </Grid>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ProductResourcesEdit;\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n    useContext, useEffect, useState, useReducer,\n} from 'react';\nimport { Grid } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport { Link, withRouter } from 'react-router-dom';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport NewEndpointCreate from 'AppComponents/Apis/Details/Endpoints/NewEndpointCreate';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport cloneDeep from 'lodash.clonedeep';\nimport { isRestricted } from 'AppData/AuthManager';\nimport EndpointOverview from './EndpointOverview';\nimport { createEndpointConfig, getEndpointTemplateByType } from './endpointUtils';\n\nconst styles = (theme) => ({\n    endpointTypesWrapper: {\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'row',\n        margin: '2px',\n    },\n    root: {\n        flexGrow: 1,\n        paddingRight: '10px',\n    },\n    buttonSection: {\n        marginTop: theme.spacing(2),\n    },\n    radioGroup: {\n        display: 'flex',\n        flexDirection: 'row',\n        marginLeft: theme.spacing(2),\n    },\n    endpointValidityMessage: {\n        color: theme.palette.error.main,\n    },\n    errorMessageContainer: {\n        marginTop: theme.spacing(1),\n    },\n    implSelectRadio: {\n        padding: theme.spacing(1) / 2,\n    },\n});\n\nconst defaultSwagger = { paths: {} };\n\n/**\n * The base component of the endpoints view.\n * @param {any} props The props passed to the layout\n * @returns {any} HTML representation.\n */\nfunction Endpoints(props) {\n    const { classes, intl, history } = props;\n    const { api, updateAPI } = useContext(APIContext);\n    const [swagger, setSwagger] = useState(defaultSwagger);\n    const [endpointValidity, setAPIEndpointsValid] = useState({ isValid: true, message: '' });\n    const [isUpdating, setUpdating] = useState(false);\n\n    const apiReducer = (initState, configAction) => {\n        const tmpEndpointConfig = cloneDeep(initState.endpointConfig);\n        const { action, value } = configAction;\n        switch (action) {\n            case 'production_endpoints':\n            case 'sandbox_endpoints': {\n                if (value) {\n                    return { ...initState, endpointConfig: { ...tmpEndpointConfig, [action]: value } };\n                }\n                delete tmpEndpointConfig[action];\n                return { ...initState, endpointConfig: { ...tmpEndpointConfig } };\n            }\n            case 'select_endpoint_category': {\n                return { ...initState, endpointConfig: { ...value } };\n            }\n            case 'set_lb_config': {\n                return { ...initState, endpointConfig: { ...value } };\n            }\n            case 'add_endpoint': {\n                return { ...initState, endpointConfig: { ...value } };\n            }\n            case 'set_advance_config': {\n                return { ...initState, endpointConfig: { ...value } };\n            }\n            case 'remove_endpoint': {\n                return { ...initState, endpointConfig: { ...value } };\n            }\n            case 'endpointImplementationType': { // set implementation status\n                const { endpointType, implementationType } = value;\n                const config = createEndpointConfig(endpointType);\n                if (endpointType === 'prototyped') {\n                    if (implementationType === 'mock') {\n                        api.generateMockScripts(api.id).then((res) => { // generates mock/sample payloads\n                            setSwagger(res.obj);\n                        });\n                        return { ...initState, endpointConfig: config, endpointImplementationType: 'INLINE' };\n                    }\n                    return { ...initState, endpointConfig: config, endpointImplementationType: 'ENDPOINT' };\n                }\n                return { ...initState, endpointConfig: config };\n            }\n            case 'endpointSecurity': { // set endpoint security\n                const config = cloneDeep(initState.endpointConfig);\n                const tmpSecurityInfo = cloneDeep(value);\n                return { ...initState, endpointConfig: { ...config, endpoint_security: tmpSecurityInfo } };\n            }\n            case 'endpoint_type': { // set endpoint type\n                const config = getEndpointTemplateByType(\n                    value.category,\n                    value.endpointType === 'address',\n                    tmpEndpointConfig,\n                );\n                return { ...initState, endpointConfig: { ...config } };\n            }\n            case 'set_inline': {\n                const { endpointImplementationType, endpointConfig } = value;\n                api.generateMockScripts(api.id).then((res) => { // generates mock/sample payloads\n                    setSwagger(res.obj);\n                });\n                return { ...initState, endpointConfig, endpointImplementationType };\n            }\n            case 'set_prototyped': {\n                const { endpointImplementationType, endpointConfig } = value;\n                return {\n                    ...initState,\n                    endpointImplementationType,\n                    endpointConfig,\n                };\n            }\n            case 'set_awsCredentials': {\n                return { ...initState, endpointConfig: { ...value } };\n            }\n            case 'select_endpoint_type': {\n                const { endpointImplementationType, endpointConfig } = value;\n                let { endpointSecurity } = initState;\n                if (endpointSecurity && (endpointSecurity.username === '')) {\n                    endpointSecurity = null;\n                }\n                return {\n                    ...initState,\n                    endpointConfig,\n                    endpointImplementationType,\n                    endpointSecurity: null,\n                };\n            }\n            default: {\n                return initState;\n            }\n        }\n    };\n    const [apiObject, apiDispatcher] = useReducer(apiReducer, api.toJSON());\n\n    /**\n     * Method to update the api.\n     *\n     * @param {boolean} isRedirect Used for dynamic endpoints to redirect to the runtime config page.\n     */\n    const handleSave = (isRedirect) => {\n        const { endpointConfig, endpointImplementationType, endpointSecurity } = apiObject;\n        setUpdating(true);\n        if (endpointImplementationType === 'INLINE') {\n            api.updateSwagger(swagger).then((resp) => {\n                setSwagger(resp.obj);\n            }).then(() => {\n                updateAPI({ endpointConfig, endpointImplementationType, endpointSecurity });\n            }).finally(() => {\n                setUpdating(false);\n                if (isRedirect) {\n                    history.push('/apis/' + api.id + '/runtime-configuration');\n                }\n            });\n        } else {\n            updateAPI(apiObject).finally(() => {\n                setUpdating(false);\n                if (isRedirect) {\n                    history.push('/apis/' + api.id + '/runtime-configuration');\n                }\n            });\n        }\n    };\n\n    const handleSaveAndDeploy = () => {\n        const { endpointConfig, endpointImplementationType, endpointSecurity } = apiObject;\n        setUpdating(true);\n        if (endpointImplementationType === 'INLINE') {\n            api.updateSwagger(swagger).then((resp) => {\n                setSwagger(resp.obj);\n            }).then(() => {\n                updateAPI({ endpointConfig, endpointImplementationType, endpointSecurity });\n            }).finally(() => history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            }));\n        } else {\n            updateAPI(apiObject).finally(() => history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            }));\n        }\n    };\n\n    /**\n     * Validate the provided endpoint config object.\n     *\n     * @param {any} endpointConfig The provided endpoint config for validation.\n     * @param {string} implementationType The api implementation type (INLINE/ ENDPOINT)\n     * @return {{isValid: boolean, message: string}} The endpoint validity information.\n     * */\n    const validate = (implementationType) => {\n        const { endpointConfig, endpointSecurity } = apiObject;\n        if (endpointSecurity) {\n            if (endpointSecurity.type === 'OAUTH') {\n                if (endpointSecurity.grantType === 'PASSWORD') {\n                    if (endpointSecurity.tokenUrl === null\n                        || endpointSecurity.apiKey === null\n                        || endpointSecurity.apiSecret === null\n                        || endpointSecurity.username === null\n                        || endpointSecurity.password === null) {\n                        return {\n                            isValid: false,\n                            message: intl.formatMessage({\n                                id: 'Apis.Details.Endpoints.Endpoints.missing.security.oauth.password.error',\n                                defaultMessage: 'Endpoint Security Token URL'\n                                        + '/API Key/API Secret/Username/Password should not be empty',\n                            }),\n                        };\n                    }\n                } else if (endpointSecurity.grantType === 'CLIENT_CREDENTIALS') {\n                    if (endpointSecurity.tokenUrl === null\n                        || endpointSecurity.apiKey === null\n                        || endpointSecurity.apiSecret === null) {\n                        return {\n                            isValid: false,\n                            message: intl.formatMessage({\n                                id: 'Apis.Details.Endpoints.Endpoints.missing.security.oauth.client.error',\n                                defaultMessage: 'Endpoint Security Token URL'\n                                        + '/API Key/API Secret should not be empty',\n                            }),\n                        };\n                    }\n                }\n            } else if (endpointSecurity.username === '' || endpointSecurity.password === null) {\n                return {\n                    isValid: false,\n                    message: intl.formatMessage({\n                        id: 'Apis.Details.Endpoints.Endpoints.missing.security.username.error',\n                        defaultMessage: 'Endpoint Security User Name/ Password should not be empty',\n                    }),\n                };\n            }\n        }\n        if (endpointConfig === null) {\n            return { isValid: true, message: '' };\n        }\n        const endpointType = endpointConfig.endpoint_type;\n        if (endpointType === 'awslambda') {\n            if (endpointConfig.access_method === 'stored') {\n                if (endpointConfig.amznAccessKey === '' || endpointConfig.amznSecretKey === ''\n                || endpointConfig.amznRegion === '') {\n                    return {\n                        isValid: false,\n                        message: intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.Endpoints.missing.accessKey.secretKey.error',\n                            defaultMessage: 'Access Key, Secret Key and Region should not be empty',\n                        }),\n                    };\n                }\n            }\n            if (endpointConfig.amznAccessKey !== '' && endpointConfig.amznSecretKey === 'AWS_SECRET_KEY') {\n                return {\n                    isValid: false,\n                    message: '',\n                };\n            }\n        } else if (endpointType === 'load_balance') {\n            /**\n             * Checklist:\n             *  production/ sandbox endpoints should be an array.\n             *  production/ sandbox endpoint [0] must be present.\n             * */\n            if (endpointConfig.production_endpoints && endpointConfig.production_endpoints.length > 0) {\n                if (!endpointConfig.production_endpoints[0].url\n                    || (endpointConfig.production_endpoints[0].url\n                        && endpointConfig.production_endpoints[0].url === '')) {\n                    return {\n                        isValid: false,\n                        message: intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.Endpoints.missing.prod.endpoint.loadbalance',\n                            defaultMessage: 'Default Production Endpoint should not be empty',\n                        }),\n                    };\n                }\n            }\n            if (endpointConfig.sandbox_endpoints && endpointConfig.sandbox_endpoints.length > 0) {\n                if (!endpointConfig.sandbox_endpoints[0].url\n                    || (endpointConfig.sandbox_endpoints[0].url && endpointConfig.sandbox_endpoints[0].url === '')) {\n                    return {\n                        isValid: false,\n                        message: intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.Endpoints.missing.sandbox.endpoint.loadbalance',\n                            defaultMessage: 'Default Sandbox Endpoint should not be empty',\n                        }),\n                    };\n                }\n            }\n        } else {\n            let isValidEndpoint = false;\n            if (endpointConfig.implementation_status === 'prototyped') {\n                if (implementationType === 'ENDPOINT') {\n                    if (endpointConfig.production_endpoints && endpointConfig.production_endpoints.url === '') {\n                        return {\n                            isValid: false,\n                            message: intl.formatMessage({\n                                id: 'Apis.Details.Endpoints.Endpoints.missing.prototype.url',\n                                defaultMessage: 'Prototype Endpoint URL should not be empty',\n                            }),\n                        };\n                    }\n                }\n                isValidEndpoint = true;\n            } else if (endpointConfig.production_endpoints && !endpointConfig.sandbox_endpoints) {\n                isValidEndpoint = endpointConfig.production_endpoints.url !== '';\n            } else if (endpointConfig.sandbox_endpoints && !endpointConfig.production_endpoints) {\n                isValidEndpoint = endpointConfig.sandbox_endpoints.url !== '';\n            } else if (!endpointConfig.sandbox_endpoints && !endpointConfig.production_endpoints) {\n                isValidEndpoint = false;\n            } else {\n                isValidEndpoint = endpointConfig.sandbox_endpoints.url !== ''\n                        || endpointConfig.production_endpoints.url !== '';\n            }\n            if (endpointConfig.sandbox_endpoints) {\n                isValidEndpoint &&= endpointConfig.sandbox_endpoints.url !== '';\n            }\n            if (endpointConfig.production_endpoints) {\n                isValidEndpoint &&= endpointConfig.production_endpoints.url !== '';\n            }\n            return !isValidEndpoint ? {\n                isValid: false,\n                message: intl.formatMessage({\n                    id: 'Apis.Details.Endpoints.Endpoints.missing.endpoint.error',\n                    defaultMessage: 'Either one of Production or Sandbox Endpoints should be added.',\n                }),\n            } : { isValid: true, message: '' };\n        }\n        return {\n            isValid: true,\n            message: '',\n        };\n    };\n\n    useEffect(() => {\n        if (api.type !== 'WS') {\n            api.getSwagger(apiObject.id).then((resp) => {\n                setSwagger(resp.obj);\n            }).catch((err) => {\n                console.err(err);\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        setAPIEndpointsValid(validate(apiObject.endpointImplementationType));\n    }, [apiObject]);\n\n    const saveAndRedirect = () => {\n        handleSave(true);\n    };\n    /**\n     * Method to update the swagger object.\n     *\n     * @param {any} swaggerObj The updated swagger object.\n     * */\n    const changeSwagger = (swaggerObj) => {\n        setSwagger(swaggerObj);\n    };\n\n    /**\n     * Generate endpoint configuration based on the selected endpoint type and set to the api object.\n     *\n     * @param {string} endpointType The endpoint type.\n     * @param {string} implementationType The endpoint implementationType. (Required only for prototype endpoints)\n     * */\n    const generateEndpointConfig = (endpointType, implementationType) => {\n        apiDispatcher({ action: 'endpointImplementationType', value: { endpointType, implementationType } });\n    };\n\n    return (\n        <>\n            {/* Since the api is set to the state in component did mount, check both the api and the apiObject. */}\n            {(api.endpointConfig === null && apiObject.endpointConfig === null)\n                ? <NewEndpointCreate generateEndpointConfig={generateEndpointConfig} apiType={apiObject.type} />\n                : (\n                    <div className={classes.root}>\n                        <Typography id='itest-api-details-endpoints-head' variant='h4' align='left' gutterBottom>\n                            <FormattedMessage\n                                id='Apis.Details.Endpoints.Endpoints.endpoints.header'\n                                defaultMessage='Endpoints'\n                            />\n                        </Typography>\n                        <div>\n                            <Grid container>\n                                <Grid item xs={12} className={classes.endpointsContainer}>\n                                    <EndpointOverview\n                                        swaggerDef={swagger}\n                                        updateSwagger={changeSwagger}\n                                        api={apiObject}\n                                        onChangeAPI={apiDispatcher}\n                                        endpointsDispatcher={apiDispatcher}\n                                        saveAndRedirect={saveAndRedirect}\n                                    />\n                                </Grid>\n                            </Grid>\n                            {\n                                endpointValidity.isValid\n                                    ? <div />\n                                    : (\n                                        <Grid item className={classes.errorMessageContainer}>\n                                            <Typography className={classes.endpointValidityMessage}>\n                                                {endpointValidity.message}\n                                            </Typography>\n                                        </Grid>\n                                    )\n                            }\n                            <Grid\n                                container\n                                direction='row'\n                                alignItems='flex-start'\n                                spacing={1}\n                                className={classes.buttonSection}\n                            >\n                                <Grid item>\n                                    {api.isRevision || !endpointValidity.isValid\n                                        || isRestricted(['apim:api_create'], api) ? (\n                                            <Button\n                                                disabled\n                                                type='submit'\n                                                variant='contained'\n                                                color='primary'\n                                            >\n                                                <FormattedMessage\n                                                    id='Apis.Details.Configuration.Configuration.save'\n                                                    defaultMessage='Save'\n                                                />\n                                            </Button>\n                                        ) : (\n                                            <CustomSplitButton\n                                                handleSave={handleSave}\n                                                handleSaveAndDeploy={handleSaveAndDeploy}\n                                                isUpdating={isUpdating}\n                                            />\n                                        )}\n                                </Grid>\n                                <Grid item>\n                                    <Link to={'/apis/' + api.id + '/overview'}>\n                                        <Button>\n                                            <FormattedMessage\n                                                id='Apis.Details.Endpoints.Endpoints.cancel'\n                                                defaultMessage='Cancel'\n                                            />\n                                        </Button>\n                                    </Link>\n                                </Grid>\n                                {isRestricted(['apim:api_create'], api)\n                                && (\n                                    <Grid item>\n                                        <Typography variant='body2' color='primary'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Endpoints.Endpoints.update.not.allowed'\n                                                defaultMessage={'*You are not authorized to update endpoints of'\n                                                + ' the API due to insufficient permissions'}\n                                            />\n                                        </Typography>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </div>\n                    </div>\n                )}\n        </>\n\n    );\n}\n\nEndpoints.propTypes = {\n    classes: PropTypes.shape({\n        root: PropTypes.shape({}),\n        buttonSection: PropTypes.shape({}),\n        endpointTypesWrapper: PropTypes.shape({}),\n        mainTitle: PropTypes.shape({}),\n    }).isRequired,\n    api: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    history: PropTypes.shape({}).isRequired,\n};\n\nexport default withRouter(injectIntl(withStyles(styles)(Endpoints)));\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React, { useState } from 'react';\nimport {\n    Typography,\n    Grid,\n    withStyles,\n    RadioGroup,\n    FormControlLabel,\n    Radio,\n    FormControl,\n    Divider,\n    Button,\n    Card,\n    CardContent,\n    CardActions,\n} from '@material-ui/core';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\n\nconst styles = (theme) => ({\n    inlineMessageContainer: {\n        marginBottom: theme.spacing(1),\n    },\n    endpointTypeCard: {\n        margin: theme.spacing(1),\n        maxWidth: theme.spacing(30),\n        transition: 'box-shadow 0.3s ease-in-out',\n        height: theme.spacing(40),\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    cardContent: {\n        height: theme.spacing(40),\n    },\n    content: {\n        marginTop: theme.spacing(1),\n    },\n    cardActions: {\n        justifyContent: 'flex-end',\n        borderTop: 'solid #e0e0e0 thin',\n    },\n});\n\n/**\n * Component to create new endpoint.\n * This component will render if the api object does not have an endpoint configuration, letting users to create a\n * new endpoint configuration based on their requirement.\n * Following endpoint types are supported.\n * 1. HTTP/ SOAP endpoints\n * 2. Prototyped/ Mock endpoints\n * 3. AWS Lambda endpoints\n * 4. Dynamic Endpoints\n *\n * @param {any} props The input props.\n * @return {any} The HTML representation of the component.\n * */\nfunction NewEndpointCreate(props) {\n    const {\n        classes,\n        intl,\n        generateEndpointConfig,\n        apiType,\n    } = props;\n    const [endpointImplType, setImplType] = useState('mock');\n    const endpointTypes = [\n        {\n            type: 'http',\n            name: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.http.endpoint',\n                defaultMessage: 'HTTP/ REST Endpoint',\n            }),\n            description: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.http.endpoint.description',\n                defaultMessage: 'A REST API endpoint based on a URI template.',\n            }),\n            options: null,\n            disabled: ['SOAPTOREST'],\n        },\n        {\n            type: 'address',\n            name: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.soap.endpoint',\n                defaultMessage: 'HTTP/ SOAP Endpoint',\n            }),\n            description: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.soap.endpoint.description',\n                defaultMessage: 'The direct URI of the web service.',\n            }),\n            options: null,\n            disabled: ['GRAPHQL', 'SSE'],\n        },\n        {\n            type: 'prototyped',\n            name: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.prototype.endpoint',\n                defaultMessage: 'Prototype Endpoint',\n            }),\n            description: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.prototype.endpoint.description',\n                defaultMessage: 'Use the inbuilt JavaScript engine to prototype the API or provide an endpoint'\n                    + ' to a prototype API. The inbuilt JavaScript engine does support prototype SOAP APIs',\n            }),\n            options: [\n                {\n                    type: 'mock',\n                    name: intl.formatMessage({\n                        id: 'Apis.Details.Endpoints.NewEndpointCreate.prototype.implementation',\n                        defaultMessage: 'Prototype Implementation',\n                    }),\n                    disabled: ['SOAP', 'SOAPTOREST', 'SSE'],\n                },\n                {\n                    type: 'prototyped',\n                    name: intl.formatMessage({\n                        id: 'Apis.Details.Endpoints.NewEndpointCreate.default.prototype.endpoints',\n                        defaultMessage: 'Prototype Endpoint',\n                    }),\n                    disabled: [],\n                },\n            ],\n            disabled: ['GRAPHQL', 'SSE'],\n        },\n        {\n            type: 'dynamic',\n            name: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.dynamic.endpoint',\n                defaultMessage: 'Dynamic Endpoint',\n            }),\n            description: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.dynamic.endpoint.description',\n                defaultMessage: 'If you need to send the request to the URI specified in the TO header.',\n            }),\n            options: null,\n            disabled: ['SSE'],\n        },\n        {\n            type: 'awslambda',\n            name: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.awslambda.endpoint',\n                defaultMessage: 'AWS Lambda Endpoint',\n            }),\n            description: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.NewEndpointCreate.create.awslambda.endpoint.description',\n                defaultMessage: 'If you need to invoke AWS Lambda functions through API gateway.',\n            }),\n            options: null,\n            disabled: ['SOAPTOREST', 'GRAPHQL', 'SSE'],\n        },\n    ];\n\n    const eligibleTypes = endpointTypes.filter((type) => !type.disabled.includes(apiType)).map((type) => {\n        return type;\n    });\n\n    return (\n        <>\n            <Typography variant='h4' align='left' className={classes.titleWrapper}>\n                <FormattedMessage\n                    id='Apis.Details.Endpoints.NewEndpointCreate.add.endpoints.header'\n                    defaultMessage='Select an Endpoint Type to Add'\n                />\n            </Typography>\n            <Grid container justify='flex-start' spacing={2}>\n                {eligibleTypes.map(((type) => {\n                    return (\n                        <Grid item className={classes.inlineMessageContainer}>\n                            <Card className={classes.endpointTypeCard}>\n                                <CardContent className={classes.cardContent}>\n                                    <Typography variant='h5' component='h3' className={classes.head}>\n                                        {type.name}\n                                    </Typography>\n                                    <Divider />\n                                    <Typography component='p' className={classes.content}>\n                                        {type.description}\n                                    </Typography>\n                                    {type.options\n                                        ? (\n                                            <div>\n                                                <FormControl component='fieldset' className={classes.formControl}>\n                                                    <RadioGroup\n                                                        aria-label='EndpointType'\n                                                        name='endpointType'\n                                                        className={classes.radioGroup}\n                                                        value={endpointImplType}\n                                                        onChange={(event) => { setImplType(event.target.value); }}\n                                                    >\n                                                        {type.options.filter((types) => !types.disabled\n                                                            .includes(apiType)).map(((option) => {\n                                                            return (\n                                                                <FormControlLabel\n                                                                    value={option.type}\n                                                                    control={<Radio color='primary' />}\n                                                                    label={option.name}\n                                                                />\n                                                            );\n                                                        }))}\n                                                    </RadioGroup>\n                                                </FormControl>\n                                            </div>\n                                        )\n                                        : <div /> }\n                                </CardContent>\n                                <CardActions className={classes.cardActions}>\n                                    <Button\n                                        color='primary'\n                                        className={classes.button}\n                                        onClick={() => generateEndpointConfig(type.type, endpointImplType)}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Endpoints.NewEndpointCreate.create.button'\n                                            defaultMessage='Add'\n                                        />\n                                    </Button>\n                                </CardActions>\n                            </Card>\n                        </Grid>\n                    );\n                }))}\n            </Grid>\n        </>\n    );\n}\n\nNewEndpointCreate.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n    generateEndpointConfig: PropTypes.func.isRequired,\n    apiType: PropTypes.string.isRequired,\n};\n\nexport default withStyles(styles)(injectIntl(NewEndpointCreate));\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, {\n    useEffect, useState, useCallback,\n} from 'react';\nimport {\n    FormControl,\n    Grid,\n    Paper,\n    Typography,\n    withStyles,\n    Radio,\n    FormControlLabel,\n    Collapse,\n    RadioGroup, Checkbox, Dialog, DialogTitle, DialogContent, IconButton, Button, DialogActions, Icon,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { Progress } from 'AppComponents/Shared';\n\nimport cloneDeep from 'lodash.clonedeep';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport InlineEndpoints from 'AppComponents/Apis/Details/Endpoints/Prototype/InlineEndpoints';\nimport {\n    getEndpointTypeProperty,\n    createEndpointConfig,\n    getEndpointTemplate,\n} from './endpointUtils';\nimport GeneralConfiguration from './GeneralConfiguration';\nimport LoadbalanceFailoverConfig from './LoadbalanceFailoverConfig';\nimport GenericEndpoint from './GenericEndpoint';\nimport AdvanceEndpointConfig from './AdvancedConfig/AdvanceEndpointConfig';\nimport EndpointSecurity from './GeneralConfiguration/EndpointSecurity';\nimport Credentials from './AWSLambda/Credentials.jsx';\n\nconst styles = (theme) => ({\n    listing: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n    endpointContainer: {\n        paddingLeft: theme.spacing(2),\n        padding: theme.spacing(1),\n    },\n    endpointName: {\n        paddingLeft: theme.spacing(1),\n        fontSize: '1rem',\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n    },\n    endpointTypesWrapper: {\n        padding: theme.spacing(3),\n        marginTop: theme.spacing(2),\n    },\n    sandboxHeading: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    radioGroup: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    endpointsWrapperLeft: {\n        padding: theme.spacing(1),\n        borderRight: '#c4c4c4',\n        borderRightStyle: 'solid',\n        borderRightWidth: 'thin',\n    },\n    endpointsWrapperRight: {\n        padding: theme.spacing(1),\n    },\n    endpointsTypeSelectWrapper: {\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        padding: theme.spacing(1),\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    endpointTypesSelectWrapper: {\n        display: 'flex',\n    },\n    defaultEndpointWrapper: {\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    configDialogHeader: {\n        fontWeight: '600',\n    },\n    addLabel: {\n        padding: theme.spacing(2),\n    },\n    buttonIcon: {\n        marginRight: theme.spacing(1),\n    },\n    button: {\n        textTransform: 'none',\n    },\n});\n\nconst endpointTypes = [\n    { key: 'http', value: 'HTTP/REST Endpoint' },\n    { key: 'default', value: 'Dynamic Endpoints' },\n    { key: 'address', value: 'HTTP/SOAP Endpoint' },\n    { key: 'prototyped', value: 'Prototype Endpoint' },\n    { key: 'INLINE', value: 'Prototype Implementation' },\n    { key: 'awslambda', value: 'AWS Lambda' },\n];\n\n/**\n * The endpoint overview component. This component holds the views of endpoint creation and configuration.\n * @param {any} props The props that are being passed to the component.\n * @returns {any} HTML view of the endpoints overview.\n */\nfunction EndpointOverview(props) {\n    const {\n        classes,\n        api,\n        endpointsDispatcher,\n        swaggerDef,\n        updateSwagger,\n        saveAndRedirect,\n    } = props;\n    const { endpointConfig } = api;\n    const [endpointType, setEndpointType] = useState(endpointTypes[0]);\n    const [supportedEnpointTypes, setSupportedEndpointType] = useState([]);\n\n    const [epConfig, setEpConfig] = useState(endpointConfig);\n    const [endpointSecurityInfo, setEndpointSecurityInfo] = useState(null);\n    const [advanceConfigOptions, setAdvancedConfigOptions] = useState({\n        open: false,\n        index: 0,\n        type: '',\n        category: '',\n        config: undefined,\n    });\n    const [endpointSecurityConfig, setEndpointSecurityConfig] = useState({\n        open: false,\n        type: '',\n        category: '',\n        config: undefined,\n    });\n    const [endpointCategory, setEndpointCategory] = useState({ sandbox: false, prod: false });\n    const [typeChangeConfirmation, setTypeChangeConfirmation] = useState({ openDialog: false });\n\n    const handleToggleEndpointSecurity = () => {\n        const tmpSecurityInfo = !endpointSecurityInfo ? {\n            production: {\n                enabled: false,\n                type: null,\n                username: null,\n                password: null,\n                grantType: null,\n                tokenUrl: null,\n                clientId: null,\n                clientSecret: null,\n                customParameters: {},\n            },\n            sandbox: {\n                enabled: false,\n                type: null,\n                username: null,\n                password: null,\n                grantType: null,\n                tokenUrl: null,\n                clientId: null,\n                clientSecret: null,\n                customParameters: {},\n            },\n        } : endpointSecurityInfo;\n        setEndpointSecurityInfo(tmpSecurityInfo);\n    };\n\n    /**\n     * Method to get the type of the endpoint. (HTTP/REST or HTTP/SOAP)\n     * In failover/ loadbalance cases, the endpoint type is presented in the endpoints list. Therefore that property\n     * needs to be extracted separately.\n     *\n     * @param {Object} apiObject  The representative type of the endpoint.\n     * @return {string} The type of the endpoint.\n     * */\n    const getEndpointType = (apiObject) => {\n        const type = apiObject.endpointConfig && apiObject.endpointConfig.endpoint_type;\n        if (apiObject.endpointImplementationType === 'INLINE') {\n            return endpointTypes[4];\n        } else if (apiObject.endpointImplementationType === 'ENDPOINT'\n            && apiObject.endpointConfig.implementation_status === 'prototyped') {\n            return endpointTypes[3];\n        } else if (type === 'http') {\n            return endpointTypes[0];\n        } else if (type === 'default') {\n            return endpointTypes[1];\n        } else if (type === 'address') {\n            return endpointTypes[2];\n        } else if (type === 'awslambda') {\n            return endpointTypes[5];\n        } else {\n            const availableEndpoints = (endpointConfig.production_endpoints && endpointConfig.production_endpoints)\n                || (endpointConfig.sandbox_endpoints && endpointConfig.sandbox_endpoints);\n            // Handle the all endpoints de-select condition... Rollback to http.\n            if (!availableEndpoints) {\n                return endpointTypes[0];\n            }\n            if (Array.isArray(availableEndpoints)) {\n                return availableEndpoints[0].endpoint_type !== undefined\n                    ? endpointTypes[2] : endpointTypes[0];\n            }\n            return availableEndpoints.endpoint_type !== undefined\n                ? endpointTypes[2] : endpointTypes[0];\n        }\n    };\n\n    /**\n     * Method to get the supported endpoint types by api type.\n     *\n     * @param {Object} apiObject  The representative type of the endpoint.\n     * @return {string} The supported endpoint types.\n     * */\n    const getSupportedType = (apiObject) => {\n        const { type } = apiObject;\n        let supportedEndpointTypes = [];\n        if (type === 'GRAPHQL') {\n            supportedEndpointTypes = [\n                { key: 'http', value: 'HTTP/REST Endpoint' },\n                { key: 'default', value: 'Dynamic Endpoints' },\n            ];\n        } else if (type === 'SOAP' || type === 'SOAPTOREST') {\n            supportedEndpointTypes = [\n                { key: 'address', value: 'HTTP/SOAP Endpoint' },\n                { key: 'default', value: 'Dynamic Endpoints' },\n                { key: 'prototyped', value: 'Prototype Endpoint' },\n            ];\n        } else if (type === 'SSE') {\n            supportedEndpointTypes = [\n                { key: 'http', value: 'HTTP/REST Endpoint' },\n            ];\n        } else {\n            supportedEndpointTypes = [\n                { key: 'http', value: 'HTTP/REST Endpoint' },\n                { key: 'address', value: 'HTTP/SOAP Endpoint' },\n                { key: 'default', value: 'Dynamic Endpoints' },\n                { key: 'prototyped', value: 'Prototype Endpoint' },\n                { key: 'INLINE', value: 'Prototype Implementation' },\n                { key: 'awslambda', value: 'AWS Lambda' },\n            ];\n        }\n        return supportedEndpointTypes;\n    };\n\n    useEffect(() => {\n        const supportedTypeLists = getSupportedType(api);\n        const epType = getEndpointType(api);\n        if (epType.key !== 'INLINE') {\n            setEndpointCategory({\n                prod: !!endpointConfig.production_endpoints,\n                sandbox: !!endpointConfig.sandbox_endpoints,\n            });\n        }\n        setSupportedEndpointType(supportedTypeLists);\n        setEpConfig(endpointConfig);\n        setEndpointType(epType);\n        setEndpointSecurityInfo(endpointConfig.endpoint_security);\n    }, [props]);\n\n\n    const getEndpoints = (type) => {\n        if (epConfig[type]) {\n            return epConfig[type].length > 0\n                ? epConfig[type][0].url : epConfig[type].url;\n        }\n        return '';\n    };\n\n    const handleOnChangeEndpointCategoryChange = (category) => {\n        let endpointConfigCopy = cloneDeep(endpointConfig);\n        if (category === 'prod') {\n            const endpointProp = 'production_endpoints';\n            if (endpointCategory[category]) {\n                delete endpointConfigCopy[endpointProp];\n                if (endpointConfigCopy.endpointType === 'failover') {\n                    delete endpointConfigCopy.production_failovers;\n                }\n            } else if (endpointConfigCopy.endpointType === 'load_balance') {\n                endpointConfigCopy[endpointProp] = [getEndpointTemplate(endpointType.key)];\n            } else if (endpointConfigCopy.endpointType === 'failover') {\n                endpointConfigCopy[endpointProp] = getEndpointTemplate(endpointType.key);\n                endpointConfigCopy.production_failovers = [];\n            } else {\n                endpointConfigCopy[endpointProp] = getEndpointTemplate(endpointType.key);\n            }\n        } else {\n            const endpointProp = 'sandbox_endpoints';\n            if (endpointCategory[category]) {\n                delete endpointConfigCopy[endpointProp];\n                if (endpointConfigCopy.endpointType === 'failover') {\n                    delete endpointConfigCopy.sandbox_failovers;\n                }\n            } else if (endpointConfigCopy.endpointType === 'load_balance') {\n                endpointConfigCopy[endpointProp] = [getEndpointTemplate(endpointType.key)];\n            } else if (endpointConfigCopy.endpointType === 'failover') {\n                endpointConfigCopy[endpointProp] = getEndpointTemplate(endpointType.key);\n                endpointConfigCopy.sandbox_failovers = [];\n            } else {\n                endpointConfigCopy[endpointProp] = getEndpointTemplate(endpointType.key);\n            }\n        }\n        // Check whether, config has either prod/ sandbox endpoints. If not, reSet the endpoint type to http\n        if (!endpointConfigCopy.production_endpoints && !endpointConfigCopy.sandbox_endpoints) {\n            endpointConfigCopy = createEndpointConfig('http');\n        }\n        endpointsDispatcher({ action: 'select_endpoint_category', value: endpointConfigCopy });\n    };\n\n    /**\n     * Method to modify the endpoint represented by the given parameters.\n     *\n     * If url is null, remove the endpoint from the endpoint config.\n     *\n     * @param {number} index The index of the endpoint in the listing.\n     * @param {string} category The endpoint category. (production/ sand box)\n     * @param {string} url The new endpoint url.\n     * */\n    const editEndpoint = (index, category, url) => {\n        let modifiedEndpoint = null;\n        // Make a copy of the endpoint config.\n        const endpointConfigCopy = cloneDeep(epConfig);\n        /*\n        * If the index > 0, it means that the endpoint is load balance or fail over.\n        * Otherwise it is the default endpoint. (index = 0)\n        * */\n        if (index > 0) {\n            const endpointTypeProperty = getEndpointTypeProperty(endpointConfigCopy.endpoint_type, category);\n            modifiedEndpoint = endpointConfigCopy[endpointTypeProperty];\n            /*\n            * In failover case, the failover endpoints are a separate object. But in endpoint listing, since we\n            *  consider all the endpoints as a single list, to get the real index of the failover endpoint we use\n            *  index - 1.\n            * */\n            if (endpointConfigCopy.endpoint_type === 'failover') {\n                modifiedEndpoint[index - 1].url = url.trim();\n            } else {\n                modifiedEndpoint[index].url = url.trim();\n            }\n            endpointConfigCopy[endpointTypeProperty] = modifiedEndpoint;\n        } else if (url !== '') {\n            modifiedEndpoint = endpointConfigCopy[category];\n\n            /*\n            * In this case, we are editing the default endpoint.\n            * If the endpoint type is load balance, the production_endpoints or the sandbox_endpoint object is an\n            *  array. Otherwise, in failover mode, the default endpoint is an object.\n            *\n            * So, we check whether the endpoints is an array or an object.\n            *\n            * If This is the first time a user creating an endpoint endpoint config object does not have\n            *  production_endpoints or sandbox_endpoints object.\n            * Therefore create new object and add to the endpoint config.\n            * */\n            if (!modifiedEndpoint) {\n                modifiedEndpoint = getEndpointTemplate(endpointConfigCopy.endpoint_type);\n                modifiedEndpoint.url = url.trim();\n            } else if (Array.isArray(modifiedEndpoint)) {\n                if (url === '') {\n                    modifiedEndpoint.splice(0, 1);\n                } else {\n                    modifiedEndpoint[0].url = url.trim();\n                }\n            } else {\n                modifiedEndpoint.url = url.trim();\n            }\n            endpointConfigCopy[category] = modifiedEndpoint;\n        } else {\n            /*\n            * If the url is empty, delete the respective endpoint object.\n            * */\n            delete endpointConfigCopy[category];\n        }\n        endpointsDispatcher({ action: category, value: modifiedEndpoint });\n    };\n\n    const handleEndpointCategorySelect = (event) => {\n        endpointsDispatcher({\n            action: 'endpoint_type',\n            value: { category: event.target.value, endpointType: endpointType.key },\n        });\n    };\n\n    /**\n     * Handles the endpoint type change functionality.\n     *\n     * @param {string} value The selected endpoint type.\n     * */\n    const changeEndpointType = (value) => {\n        setTypeChangeConfirmation({ openDialog: false });\n        const selectedKey = typeChangeConfirmation.type || value;\n        if (selectedKey === 'INLINE') {\n            const tmpConfig = createEndpointConfig('prototyped');\n            endpointsDispatcher({\n                action: 'set_inline',\n                value: {\n                    endpointConfig: tmpConfig,\n                    endpointImplementationType: 'INLINE',\n                },\n            });\n        } else if (selectedKey === 'prototyped') {\n            const tmpConfig = createEndpointConfig(selectedKey);\n            endpointsDispatcher({\n                action: 'set_prototyped',\n                value: {\n                    endpointImplementationType: 'ENDPOINT',\n                    endpointConfig: tmpConfig,\n                },\n            });\n        } else if (selectedKey === 'awslambda') {\n            const generatedEndpointConfig = createEndpointConfig(selectedKey);\n            endpointsDispatcher({\n                action: 'select_endpoint_type',\n                value: {\n                    endpointImplementationType: 'ENDPOINT',\n                    endpointConfig: { ...generatedEndpointConfig },\n                },\n            });\n        } else {\n            const generatedEndpointConfig = createEndpointConfig(selectedKey);\n            endpointsDispatcher({\n                action: 'select_endpoint_type',\n                value: {\n                    endpointImplementationType: 'ENDPOINT',\n                    endpointConfig: { ...generatedEndpointConfig },\n                },\n            });\n        }\n    };\n\n    /**\n     * Handles the endpoint type select event. If endpoint config has existing values, show confirmation dialog.\n     * @param {any} event The select event.\n     * */\n    const handleEndpointTypeSelect = (event) => {\n        // Check whether the endpoint Config has values.\n        if (epConfig.production_endpoints || epConfig.sandbox_endpoints) {\n            // Show confirmation dialog\n            setTypeChangeConfirmation({ type: event.target.value, openDialog: true });\n        } else {\n            changeEndpointType(event.target.value);\n        }\n    };\n\n    /**\n     * Method to get the advance configuration from the selected endpoint.\n     *\n     * @param {number} index The selected endpoint index\n     * @param {string} epType The type of the endpoint. (loadbalance/ failover)\n     * @param {string} category The endpoint category (Production/ sandbox)\n     * @return {object} The advance config object of the endpoint.\n     * */\n    const getAdvanceConfig = (index, epType, category) => {\n        const endpointTypeProperty = getEndpointTypeProperty(epType, category);\n        let advanceConfig = {};\n        if (index > 0) {\n            if (epConfig.endpoint_type === 'failover') {\n                advanceConfig = epConfig[endpointTypeProperty][index - 1].config;\n            } else {\n                advanceConfig = epConfig[endpointTypeProperty][index].config;\n            }\n        } else {\n            const endpointInfo = epConfig[endpointTypeProperty];\n            if (Array.isArray(endpointInfo)) {\n                advanceConfig = endpointInfo[0].config;\n            } else {\n                advanceConfig = endpointInfo.config;\n            }\n        }\n        return advanceConfig;\n    };\n\n    /**\n     * Method to open/ close the advance configuration dialog. This method also sets some information about the\n     * seleted endpoint type/ category and index.\n     *\n     * @param {number} index The index of the selected endpoint.\n     * @param {string} type The endpoint type\n     * @param {string} category The endpoint category.\n     * */\n    const toggleAdvanceConfig = (index, type, category) => {\n        const advanceEPConfig = getAdvanceConfig(index, type, category);\n        setAdvancedConfigOptions(() => {\n            return ({\n                open: !advanceConfigOptions.open,\n                index,\n                type,\n                category,\n                config: advanceEPConfig === undefined ? {} : advanceEPConfig,\n            });\n        });\n    };\n\n    const toggleEndpointSecurityConfig = (type, category) => {\n        handleToggleEndpointSecurity();\n        setEndpointSecurityConfig(() => {\n            return ({\n                open: !endpointSecurityConfig.open,\n                type,\n                category,\n                config: endpointSecurityInfo === undefined ? {} : endpointSecurityInfo,\n            });\n        });\n    };\n\n    /**\n     * Method to handle the endpoint security changes.\n     * @param {string} value The value\n     * @param {string} type The security property that is being modified.\n     * */\n    const handleEndpointSecurityChange = (value, type) => {\n        endpointsDispatcher({\n            action: 'endpointSecurity',\n            value: { ...endpointSecurityInfo, [type]: value },\n        });\n    };\n\n    const saveEndpointSecurityConfig = (endpointSecurityObj, enType) => {\n        endpointsDispatcher({\n            action: 'endpointSecurity',\n            value: {\n                ...endpointSecurityInfo,\n                [enType]: {\n                    ...endpointSecurityInfo[enType],\n                    enabled: endpointSecurityObj.type !== 'NONE'\n                        ? endpointSecurityInfo[enType].enabled = true : endpointSecurityInfo[enType].enabled = false,\n                },\n            },\n        });\n        setEndpointSecurityConfig({ open: false });\n    };\n\n    const closeEndpointSecurityConfig = () => {\n        setEndpointSecurityConfig({ open: false });\n    };\n\n    /**\n     * Method to save the advance configurations.\n     *\n     * @param {object} advanceConfig The advance configuration object.\n     * */\n    const saveAdvanceConfig = (advanceConfig) => {\n        const config = cloneDeep(epConfig);\n        const endpointConfigProperty = getEndpointTypeProperty(\n            advanceConfigOptions.type, advanceConfigOptions.category,\n        );\n        const selectedEndpoints = config[endpointConfigProperty];\n        if (Array.isArray(selectedEndpoints)) {\n            if (advanceConfigOptions.type === 'failover') {\n                selectedEndpoints[advanceConfigOptions.index - 1].config = advanceConfig;\n            } else {\n                selectedEndpoints[advanceConfigOptions.index].config = advanceConfig;\n            }\n        } else {\n            selectedEndpoints.config = advanceConfig;\n        }\n        setAdvancedConfigOptions({ open: false });\n        endpointsDispatcher({\n            action: 'set_advance_config',\n            value: { ...config, [endpointConfigProperty]: selectedEndpoints },\n        });\n    };\n\n    /**\n     * Method to close the advance configuration dialog box.\n     * */\n    const closeAdvanceConfig = () => {\n        setAdvancedConfigOptions({ open: false });\n    };\n\n    /**\n     * Method to update the resource paths object in the swagger.\n     * @param {any} paths The updated paths object.\n     * */\n    const updatePaths = useCallback(\n        (paths) => {\n            updateSwagger({ ...swaggerDef, paths });\n        },\n        [swaggerDef],\n    );\n\n    const iff = (condition, then, otherwise) => (condition ? then : otherwise);\n\n    /**\n     *\n     *\n     * @param {*} event\n     */\n    function epCategoryOnChangeHandler(event) {\n        handleOnChangeEndpointCategoryChange('prod', event);\n    }\n\n    return (\n        <div className={classes.overviewWrapper}>\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    {api.type === 'WS' ? <div /> : (\n                        <FormControl component='fieldset' className={classes.formControl}>\n                            <RadioGroup\n                                aria-label='EndpointType'\n                                name='endpointType'\n                                className={classes.radioGroup}\n                                value={endpointType.key}\n                                onChange={handleEndpointTypeSelect}\n                            >\n                                {supportedEnpointTypes.map((endpoint) => {\n                                    if (api.lifeCycleStatus === 'CREATED') {\n                                        return (\n                                            <FormControlLabel\n                                                value={endpoint.key}\n                                                control={(\n                                                    <Radio\n                                                        disabled={(isRestricted(['apim:api_create'], api))}\n                                                        color='primary'\n                                                    />\n                                                )}\n                                                label={endpoint.value}\n                                            />\n                                        );\n                                    } else if (api.lifeCycleStatus === 'PROTOTYPED') {\n                                        if (endpoint.key === 'prototyped' || endpoint.key === 'INLINE') {\n                                            return (\n                                                <FormControlLabel\n                                                    value={endpoint.key}\n                                                    control={(\n                                                        <Radio\n                                                            disabled={(isRestricted(['apim:api_create'], api))}\n                                                            color='primary'\n                                                        />\n                                                    )}\n                                                    label={endpoint.value}\n                                                />\n                                            );\n                                        }\n                                    } else if (endpoint.key !== 'prototyped' && endpoint.key !== 'INLINE') {\n                                        return (\n                                            <FormControlLabel\n                                                value={endpoint.key}\n                                                control={(\n                                                    <Radio\n                                                        disabled={(isRestricted(['apim:api_create'], api))}\n                                                        color='primary'\n                                                    />\n                                                )}\n                                                label={endpoint.value}\n                                            />\n                                        );\n                                    }\n                                    return <div />;\n                                })}\n                            </RadioGroup>\n                        </FormControl>\n                    )}\n                </Grid>\n                <Grid item xs={12}>\n                    {endpointType.key === 'INLINE' ? iff(Object.keys(swaggerDef.paths).length !== 0,\n                        <InlineEndpoints paths={swaggerDef.paths} updatePaths={updatePaths} />, <Progress />)\n                        : (\n                            <Paper className={classes.endpointContainer}>\n                                {endpointType.key === 'awslambda'\n                                    ? (\n                                        <Credentials\n                                            apiId={api.id}\n                                            endpointConfig={endpointConfig}\n                                            endpointsDispatcher={endpointsDispatcher}\n                                        />\n                                    )\n                                    : (\n                                        <>\n                                            {endpointType.key === 'prototyped'\n                                                ? (\n                                                    <Typography>\n                                                        <FormattedMessage\n                                                            id={'Apis.Details.Endpoints.'\n                                                                + 'EndpointOverview.prototype.endpoint'\n                                                                + '.prototype.label'}\n                                                            defaultMessage='Prototype Endpoint'\n                                                        />\n                                                    </Typography>\n                                                )\n                                                : (\n                                                    <FormControlLabel\n                                                        control={(\n                                                            <Checkbox\n                                                                disabled={isRestricted(['apim:api_create'], api)}\n                                                                checked={endpointCategory.prod}\n                                                                value='prod'\n                                                                color='primary'\n                                                                onChange={epCategoryOnChangeHandler}\n                                                            />\n                                                        )}\n                                                        label={(\n                                                            <Typography>\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.'\n                                                                        + 'Endpoints.EndpointOverview'\n                                                                        + '.production.endpoint.production.label'}\n                                                                    defaultMessage='Production Endpoint'\n                                                                />\n                                                            </Typography>\n                                                        )}\n                                                    />\n                                                )}\n                                            <Collapse in={endpointCategory.prod}>\n                                                {endpointType.key === 'default'\n                                                    ? (\n\n                                                        <InlineMessage>\n                                                            <div className={classes.contentWrapper}>\n                                                                <Typography component='p' className={classes.content}>\n                                                                    <FormattedMessage\n                                                                        id={'Apis.Details.Endpoints.EndpointOverview'\n                                                                            + '.upload.mediation.message'}\n                                                                        defaultMessage={\n                                                                            'Please upload a mediation'\n                                                                            + ' sequence file to'\n                                                                            + ' Message Mediation Policies,'\n                                                                            + ' which sets the endpoints.'\n                                                                        }\n                                                                    />\n                                                                    <IconButton\n                                                                        onClick={saveAndRedirect}\n                                                                    >\n                                                                        <LaunchIcon\n                                                                            style={{ marginLeft: '2px' }}\n                                                                            fontSize='small'\n                                                                            color='primary'\n                                                                        />\n                                                                    </IconButton>\n                                                                </Typography>\n                                                            </div>\n                                                            <Button\n                                                                className={classes.button}\n                                                                aria-label='Settings'\n                                                                onClick={() => toggleAdvanceConfig(\n                                                                    0, '', 'production_endpoints',\n                                                                )}\n                                                                disabled={\n                                                                    (isRestricted(\n                                                                        ['apim:api_create'], api,\n                                                                    )\n                                                                    )\n                                                                }\n                                                                variant='outlined'\n                                                            >\n                                                                <Icon\n                                                                    className={classes.buttonIcon}\n                                                                >\n                                                                    settings\n                                                                </Icon>\n                                                                <Typography>\n                                                                    <FormattedMessage\n                                                                        id={'Apis.Details.Endpoints.EndpointOverview'\n                                                                            + '.advance.endpoint.configuration'}\n                                                                        defaultMessage='Advanced Configurations'\n                                                                    />\n                                                                </Typography>\n                                                            </Button>\n                                                            <Button\n                                                                className={classes.button}\n                                                                aria-label='Settings'\n                                                                onClick={() => toggleEndpointSecurityConfig(\n                                                                    '', 'production',\n                                                                )}\n                                                                disabled={\n                                                                    (isRestricted(\n                                                                        ['apim:api_create'], api,\n                                                                    )\n                                                                    )\n                                                                }\n                                                                variant='outlined'\n                                                            >\n                                                                <Icon\n                                                                    className={classes.buttonIcon}\n                                                                >\n                                                                    security\n                                                                </Icon>\n                                                                <Typography>\n                                                                    <FormattedMessage\n                                                                        id={'Apis.Details.Endpoints.EndpointOverview'\n                                                                            + '.endpoint.security.configuration'}\n                                                                        defaultMessage={'Endpoint '\n                                                                        + 'Security Configurations'}\n                                                                    />\n                                                                </Typography>\n                                                            </Button>\n                                                        </InlineMessage>\n                                                    )\n                                                    : (\n                                                        <GenericEndpoint\n                                                            autoFocus\n                                                            name={endpointType.key === 'prototyped'\n                                                                ? (\n                                                                    <FormattedMessage\n                                                                        id={'Apis.Details.Endpoints.'\n                                                                            + 'EndpointOverview.prototype'\n                                                                            + '.endpoint.prototype.header'}\n                                                                        defaultMessage='Prototype Endpoint'\n                                                                    />\n                                                                ) : (\n                                                                    <FormattedMessage\n                                                                        id={'Apis.Details.Endpoints.'\n                                                                            + 'EndpointOverview.production'\n                                                                            + '.endpoint.production.header'}\n                                                                        defaultMessage='Production Endpoint'\n                                                                    />\n                                                                )}\n                                                            className={classes.defaultEndpointWrapper}\n                                                            endpointURL={getEndpoints('production_endpoints')}\n                                                            type=''\n                                                            index={0}\n                                                            category='production_endpoints'\n                                                            editEndpoint={editEndpoint}\n                                                            setAdvancedConfigOpen={toggleAdvanceConfig}\n                                                            esCategory='production'\n                                                            setESConfigOpen={toggleEndpointSecurityConfig}\n                                                            apiId={api.id}\n                                                        />\n                                                    )}\n                                            </Collapse>\n                                            {endpointType.key === 'prototyped' ? <div />\n                                                : (\n                                                    <div>\n                                                        <FormControlLabel\n                                                            control={(\n                                                                <Checkbox\n                                                                    disabled={isRestricted(['apim:api_create'], api)}\n                                                                    checked={endpointCategory.sandbox}\n                                                                    value='sandbox'\n                                                                    color='primary'\n                                                                    onChange={(event) => (\n                                                                        handleOnChangeEndpointCategoryChange(\n                                                                            'sandbox', event,\n                                                                        ))}\n                                                                />\n                                                            )}\n                                                            label={(\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.Endpoints.'\n                                                                        + 'EndpointOverview.sandbox.endpoint'}\n                                                                    defaultMessage='Sandbox Endpoint'\n                                                                />\n                                                            )}\n                                                        />\n                                                        <Collapse in={endpointCategory.sandbox}>\n                                                            {endpointType.key === 'default'\n                                                                ? (\n                                                                    <InlineMessage>\n                                                                        <div className={classes.contentWrapper}>\n                                                                            <Typography\n                                                                                component='p'\n                                                                                className={classes.content}\n                                                                            >\n                                                                                <FormattedMessage\n                                                                                    id={'Apis.Details.Endpoints'\n                                                                                        + '.EndpointOverview.upload'\n                                                                                        + '.mediation.message'}\n                                                                                    defaultMessage={\n                                                                                        'Please upload a mediation'\n                                                                                        + ' sequence file to'\n                                                                                        + ' Message Mediation Policies,'\n                                                                                        + ' which sets the endpoints.'\n                                                                                    }\n                                                                                />\n                                                                                <IconButton\n                                                                                    onClick={saveAndRedirect}\n                                                                                >\n                                                                                    <LaunchIcon\n                                                                                        style={{ marginLeft: '2px' }}\n                                                                                        fontSize='small'\n                                                                                        color='primary'\n                                                                                    />\n                                                                                </IconButton>\n                                                                            </Typography>\n                                                                        </div>\n                                                                        <Button\n                                                                            className={classes.button}\n                                                                            aria-label='Settings'\n                                                                            onClick={() => toggleAdvanceConfig(\n                                                                                0, '', 'sandbox_endpoints',\n                                                                            )}\n                                                                            disabled={\n                                                                                (isRestricted(\n                                                                                    ['apim:api_create'], api,\n                                                                                )\n                                                                                )\n                                                                            }\n                                                                            variant='outlined'\n                                                                        >\n                                                                            <Icon\n                                                                                className={classes.buttonIcon}\n                                                                            >\n                                                                                settings\n                                                                            </Icon>\n                                                                            <Typography>\n                                                                                <FormattedMessage\n                                                                                    id={'Apis.Details.Endpoints'\n                                                                                        + '.EndpointOverview.advance'\n                                                                                        + '.endpoint.configuration'}\n                                                                                    defaultMessage={'Advanced '\n                                                                                        + 'Configurations'}\n                                                                                />\n                                                                            </Typography>\n                                                                        </Button>\n                                                                    </InlineMessage>\n                                                                )\n                                                                : (\n                                                                    <GenericEndpoint\n                                                                        autoFocus\n                                                                        name='Sandbox Endpoint'\n                                                                        className={classes.defaultEndpointWrapper}\n                                                                        endpointURL={getEndpoints('sandbox_endpoints')}\n                                                                        type=''\n                                                                        index={0}\n                                                                        category='sandbox_endpoints'\n                                                                        editEndpoint={editEndpoint}\n                                                                        esCategory='sandbox'\n                                                                        setAdvancedConfigOpen={toggleAdvanceConfig}\n                                                                        setESConfigOpen={toggleEndpointSecurityConfig}\n                                                                        apiId={api.id}\n                                                                    />\n                                                                )}\n\n                                                        </Collapse>\n                                                    </div>\n                                                )}\n                                        </>\n                                    )}\n                            </Paper>\n                        )}\n                </Grid>\n                {endpointType.key === 'INLINE' || endpointType.key === 'prototyped' || endpointType.key === 'awslambda'\n                    || api.type === 'WS'\n                    ? <div />\n                    : (\n                        <Grid item xs={12}>\n                            <Typography variant='h4' align='left' className={classes.titleWrapper} gutterBottom>\n                                <FormattedMessage\n                                    id='Apis.Details.Endpoints.EndpointOverview.general.config.header'\n                                    defaultMessage='General Endpoint Configurations'\n                                />\n                            </Typography>\n                            <GeneralConfiguration\n                                epConfig={(cloneDeep(epConfig))}\n                                endpointType={endpointType}\n                                endpointsDispatcher={endpointsDispatcher}\n                            />\n                        </Grid>\n                    )}\n                {\n                    endpointType.key === 'INLINE'\n                        || endpointType.key === 'default'\n                        || endpointType.key === 'prototyped'\n                        || api.type === 'WS'\n                        || endpointType.key === 'awslambda'\n                        ? <div />\n                        : (\n                            <Grid item xs={12}>\n                                <Typography\n                                    variant='h4'\n                                    align='left'\n                                    className={classes.titleWrapper}\n                                    gutterBottom\n                                >\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.'\n                                            + 'EndpointOverview.lb.failover.endpoints.header'}\n                                        defaultMessage='Load balance and Failover Configurations'\n                                    />\n                                </Typography>\n                                <LoadbalanceFailoverConfig\n                                    handleEndpointCategorySelect={handleEndpointCategorySelect}\n                                    toggleAdvanceConfig={toggleAdvanceConfig}\n                                    toggleESConfig={toggleEndpointSecurityConfig}\n                                    endpointsDispatcher={endpointsDispatcher}\n                                    epConfig={(cloneDeep(epConfig))}\n                                    endpointSecurityInfo={endpointSecurityInfo}\n                                    handleEndpointTypeSelect={handleEndpointTypeSelect}\n                                    globalEpType={endpointType}\n                                    apiType={api.type}\n                                />\n                            </Grid>\n                        )\n                }\n            </Grid>\n            <Dialog open={advanceConfigOptions.open}>\n                <DialogTitle>\n                    <Typography className={classes.configDialogHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.EndpointOverview.advance.endpoint.configuration'\n                            defaultMessage='Advanced Configurations'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <AdvanceEndpointConfig\n                        isSOAPEndpoint={endpointType.key === 'address'}\n                        advanceConfig={advanceConfigOptions.config}\n                        onSaveAdvanceConfig={saveAdvanceConfig}\n                        onCancel={closeAdvanceConfig}\n                    />\n                </DialogContent>\n            </Dialog>\n            <Dialog open={endpointSecurityConfig.open}>\n                <DialogTitle>\n                    <Typography className={classes.configDialogHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.EndpointOverview.endpoint.security.configuration'\n                            defaultMessage='Endpoint Security Configurations'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    {endpointSecurityConfig.category === 'production' ? (\n                        <EndpointSecurity\n                            securityInfo={endpointSecurityInfo\n                                            && (endpointSecurityInfo.production\n                                                ? endpointSecurityInfo.production : endpointSecurityInfo)}\n                            onChangeEndpointAuth={handleEndpointSecurityChange}\n                            saveEndpointSecurityConfig={saveEndpointSecurityConfig}\n                            closeEndpointSecurityConfig={closeEndpointSecurityConfig}\n                            isProduction\n                        />\n                    ) : (\n                        <EndpointSecurity\n                            securityInfo={endpointSecurityInfo\n                                            && (endpointSecurityInfo.sandbox\n                                                ? endpointSecurityInfo.sandbox : endpointSecurityInfo)}\n                            onChangeEndpointAuth={handleEndpointSecurityChange}\n                            saveEndpointSecurityConfig={saveEndpointSecurityConfig}\n                            closeEndpointSecurityConfig={closeEndpointSecurityConfig}\n                        />\n                    )}\n                </DialogContent>\n            </Dialog>\n            <Dialog open={typeChangeConfirmation.openDialog}>\n                <DialogTitle>\n                    <Typography className={classes.configDialogHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.EndpointOverview.endpoint.type.change.confirmation'\n                            defaultMessage='Change Endpoint Type'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <Typography>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.EndpointOverview.endpoint.type.change.confirmation.message'\n                            defaultMessage='Your current endpoint configuration will be lost.'\n                        />\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button\n                        onClick={() => { setTypeChangeConfirmation({ openDialog: false }); }}\n                        color='primary'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.EndpointOverview.change.type.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </Button>\n                    <Button\n                        onClick={() => { changeEndpointType(typeChangeConfirmation.type); }}\n                        color='primary'\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints..EndpointOverview.change.type.proceed'\n                            defaultMessage='Proceed'\n                        />\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n\nEndpointOverview.propTypes = {\n    classes: PropTypes.shape({\n        overviewWrapper: PropTypes.shape({}),\n        endpointTypesWrapper: PropTypes.shape({}),\n        endpointName: PropTypes.shape({}),\n    }).isRequired,\n    api: PropTypes.shape({}).isRequired,\n    endpointsDispatcher: PropTypes.func.isRequired,\n    swaggerDef: PropTypes.shape({}).isRequired,\n    updateSwagger: PropTypes.func.isRequired,\n    saveAndRedirect: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(EndpointOverview));\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React, {\n    useState, useEffect, useContext, useCallback,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid } from '@material-ui/core';\nimport GenericResource from 'AppComponents/Apis/Details/Endpoints/Prototype/GenericResource';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst xMediationScriptProperty = 'x-mediation-script';\n\nconst defaultScript = '/* mc.setProperty(\\'CONTENT_TYPE\\', \\'application/json\\');\\n\\t'\n    + 'mc.setPayloadJSON(\\'{ \"data\" : \"sample JSON\"}\\');*/\\n'\n    + '/*Uncomment the above comment block to send a sample response.*/';\n\n/**\n * The inline endpoints component.\n * This component lists the api resources to add custom mediation scripts.\n *\n * @param {any} props The input props.\n * @return {any} The HTML representation of the component.\n * */\nfunction InlineEndpoints(props) {\n    const { api } = useContext(APIContext);\n    const {\n        paths, updatePaths,\n    } = props;\n    const [mockValueDetails, setMockValueDetails] = useState({ resourcePath: '', resourceMethod: '' });\n\n    /**\n     * Handles the onChange event of the script editor.\n     *\n     * @param {string} value The editor content\n     * @param {string} path The path value of the resource.\n     * @param {string} method The resource method.\n     * */\n    const onScriptChange = useCallback(\n        (value, path, method) => {\n            const tmpPaths = JSON.parse(JSON.stringify(paths));\n            tmpPaths[path][method][xMediationScriptProperty] = value;\n            updatePaths(tmpPaths);\n        },\n        [mockValueDetails.resourcePath, mockValueDetails.resourceMethod],\n    );\n\n    const [mockScripts, setMockScripts] = useState([]);\n\n    useEffect(() => {\n        const promisedResponse = api.getGeneratedMockScriptsOfAPI(api.id);\n        promisedResponse.then((response) => {\n            setMockScripts(response.obj.list);\n        });\n    }, []);\n\n    function getGeneratedMockScriptOfAPI(resourcePath, resourceMethod) {\n        for (let i = 0; i < mockScripts.length; i++) {\n            if (mockScripts[i].verb.toLowerCase() === resourceMethod.toLowerCase()\n                && mockScripts[i].path === resourcePath) {\n                return mockScripts[i].content;\n            }\n        }\n        return null;\n    }\n\n    return (\n        <>\n            <Grid container spacing={1} direction='column'>\n                {Object.keys(paths).map((path) => {\n                    return (\n                        Object.keys(paths[path]).map((method) => {\n                            const mediationScript = paths[path][method][xMediationScriptProperty];\n                            const script = mediationScript === undefined ? defaultScript : mediationScript;\n                            const originalScript = getGeneratedMockScriptOfAPI(path, method);\n                            return (\n                                <GenericResource\n                                    resourcePath={path}\n                                    resourceMethod={method}\n                                    onChange={onScriptChange}\n                                    scriptContent={script}\n                                    originalScript={originalScript}\n                                    setMockValueDetails={setMockValueDetails}\n                                />\n                            );\n                        })\n                    );\n                })}\n            </Grid>\n        </>\n    );\n}\n\nInlineEndpoints.propTypes = {\n    paths: PropTypes.shape({}).isRequired,\n    updatePaths: PropTypes.func.isRequired,\n};\n\nexport default React.memo(InlineEndpoints);\n","/*\n *  Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React, {\n    useContext,\n    lazy,\n    Suspense,\n    useState,\n} from 'react';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport {\n    Chip,\n    ExpansionPanel,\n    ExpansionPanelDetails,\n    ExpansionPanelSummary,\n    Grid,\n    Typography,\n    makeStyles,\n    Button,\n} from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport Utils from 'AppData/Utils';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"GenResourceMonaco\" */));\n\n/**\n * The generic resource component.\n *\n * @param {any} props The input props\n * @return {any} The HTML representation of the component.\n * */\nfunction GenericResource(props) {\n    const {\n        resourcePath, resourceMethod, scriptContent, onChange, originalScript, setMockValueDetails,\n    } = props;\n    const { api } = useContext(APIContext);\n    const [showReset, setShowReset] = useState(false);\n\n    const useStyles = makeStyles((theme) => {\n        let chipColor = theme.custom.resourceChipColors ? theme.custom.resourceChipColors[resourceMethod] : null;\n        let chipTextColor = '#000000';\n        if (!chipColor) {\n            console.log('Check the theme settings. The resourceChipColors is not populated properlly');\n            chipColor = '#cccccc';\n        } else {\n            chipTextColor = theme.palette.getContrastText(theme.custom.resourceChipColors[resourceMethod]);\n        }\n\n        return {\n            editor: {\n                width: '100%',\n                height: '500px',\n            },\n            chipActive: {\n                borderRadius: '5px',\n                width: '80%',\n                backgroundColor: chipColor,\n                color: chipTextColor,\n                ...theme.typography.button,\n            },\n            resourcePathContainer: {\n                paddingTop: theme.spacing(1),\n            },\n            prototypeResourceHeader: {\n                borderBottom: `${chipColor} 1px solid`,\n            },\n            chipExpansionPanel: {\n                backgroundColor: Utils.hexToRGBA(chipColor, 0.1),\n                border: `${chipColor} 1px solid`,\n            },\n            scriptResetButton: {\n                display: 'flex',\n                justifyContent: 'space-between',\n                marginBottom: '10px',\n            },\n\n        };\n    });\n\n    const classes = useStyles();\n\n    return (\n        <Grid item>\n            <ExpansionPanel className={classes.chipExpansionPanel}>\n                <ExpansionPanelSummary className={classes.prototypeResourceHeader} expandIcon={<ExpandMoreIcon />}>\n                    <Grid container spacing={12}>\n                        <Grid xs={1}>\n                            <Chip label={resourceMethod} className={classes.chipActive} />\n                        </Grid>\n                        <Grid xs className={classes.resourcePathContainer}>\n                            <Typography>{resourcePath}</Typography>\n                        </Grid>\n                    </Grid>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.genericResourceContent}>\n                    <Grid container direction='column'>\n                        <Grid item className={classes.scriptResetButton}>\n                            <Typography variant='subtitle2'>\n                                <FormattedMessage\n                                    id='Apis.Details.Endpoints.Prototype.InlineEndpoints.script'\n                                    defaultMessage='Script'\n                                />\n                            </Typography>\n                            {showReset\n                            && (\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => {\n                                        setShowReset(false);\n                                        setMockValueDetails({ resourcePath, resourceMethod });\n                                        onChange(originalScript, resourcePath, resourceMethod);\n                                    }}\n                                >\n                                    Reset\n                                </Button>\n                            )}\n                        </Grid>\n                        <Grid item>\n                            <Suspense fallback={<CircularProgress />}>\n                                <MonacoEditor\n                                    height='50vh'\n                                    width='100%'\n                                    theme='vs-dark'\n                                    value={scriptContent}\n                                    options={{\n                                        selectOnLineNumbers: true,\n                                        readOnly: `${isRestricted(['apim:api_create'], api)}`,\n                                    }}\n                                    language='javascript'\n                                    onChange={(content) => {\n                                        setShowReset(true);\n                                        setMockValueDetails({ resourcePath, resourceMethod });\n                                        onChange(content, resourcePath, resourceMethod);\n                                    }}\n                                />\n                            </Suspense>\n                        </Grid>\n                    </Grid>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        </Grid>\n    );\n}\n\nGenericResource.propTypes = {\n    resourcePath: PropTypes.string.isRequired,\n    resourceMethod: PropTypes.string.isRequired,\n    scriptContent: PropTypes.string.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nexport default React.memo(GenericResource);\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport {\n    ExpansionPanel,\n    ExpansionPanelDetails,\n    ExpansionPanelSummary,\n    Grid,\n    Typography,\n    withStyles,\n    Box,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Certificates from './GeneralConfiguration/Certificates';\nimport API from '../../../../data/api'; // TODO: Use webpack aliases instead of relative paths ~tmkb\nimport Alert from '../../../Shared/Alert';\nimport { endpointsToList } from './endpointUtils';\n\nconst styles = (theme) => ({\n    configHeaderContainer: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    generalConfigContent: {\n        boxShadow: 'inset -1px 2px 3px 0px #c3c3c3',\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n        display: 'flex',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        flexBasis: '33.33%',\n        flexShrink: 0,\n        fontWeight: '900',\n    },\n    endpointConfigSection: {\n        padding: '10px',\n    },\n    generalConfigPanel: {\n        width: '100%',\n    },\n    securityHeading: {\n        fontWeight: 600,\n    },\n    sandboxEndpointSwitch: {\n        marginLeft: theme.spacing(2),\n    },\n});\n\n/**\n * The component which holds the general configurations of the endpoints.\n *\n * @param {any} props The input properties to the component\n * @returns {any} The HTML representation of the component.\n * */\nfunction GeneralConfiguration(props) {\n    const {\n        intl,\n        epConfig,\n        endpointType,\n        classes,\n    } = props;\n    const [isConfigExpanded, setConfigExpand] = useState(false);\n    const [endpointCertificates, setEndpointCertificates] = useState([]);\n    const [aliasList, setAliasList] = useState([]);\n\n    /**\n     * Method to upload the certificate content by calling the rest api.\n     * */\n    const saveCertificate = (certificate, endpoint, alias) => {\n        return API.addCertificate(certificate, endpoint, alias)\n            .then((resp) => {\n                if (resp.status === 201) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificate.add.success',\n                        defaultMessage: 'Certificate added successfully',\n                    }));\n                    const tmpCertificates = [...endpointCertificates];\n                    tmpCertificates.push({\n                        alias: resp.obj.alias,\n                        endpoint: resp.obj.endpoint,\n                    });\n                    setEndpointCertificates(tmpCertificates);\n                }\n            })\n            .catch((err) => {\n                console.error(err.message);\n                if (err.message === 'Conflict') {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificate.alias.exist',\n                        defaultMessage: 'Adding Certificate Failed. Certificate Alias Exists.',\n                    }));\n                } else if (err.response) {\n                    Alert.error(err.response.body.description);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificate.error',\n                        defaultMessage: 'Something went wrong while adding the certificate.',\n                    }));\n                }\n            });\n    };\n    /**\n     * Method to delete the selected certificate.\n     *\n     * @param {string} alias The alias of the certificate to be deleted.\n     * */\n    const deleteCertificate = (alias) => {\n        return API.deleteEndpointCertificate(alias)\n            .then((resp) => {\n                setEndpointCertificates(() => {\n                    if (resp.status === 200) {\n                        return endpointCertificates.filter((cert) => {\n                            return cert.alias !== alias;\n                        });\n                    } else {\n                        return -1;\n                    }\n                });\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificate.delete.success',\n                    defaultMessage: 'Certificate Deleted Successfully',\n                }));\n            })\n            .catch((err) => {\n                console.log(err);\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Endpoints.GeneralConfiguration.Certificates.certificate.delete.error',\n                    defaultMessage: 'Error Deleting Certificate',\n                }));\n            });\n    };\n\n    // Get the certificates from backend.\n    useEffect(() => {\n        if (!isRestricted(['apim:ep_certificates_view'])) {\n            const endpointCertificatesList = [];\n            const aliases = [];\n\n            let endpoints = endpointsToList(epConfig);\n            const filteredEndpoints = [];\n            const epLookup = [];\n            for (const ep of endpoints) {\n                if (ep) {\n                    if (!epLookup.includes(ep.url)) {\n                        filteredEndpoints.push(ep);\n                        epLookup.push(ep.url);\n                    }\n                }\n            }\n            endpoints = filteredEndpoints;\n\n            for (const ep of endpoints) {\n                if (ep && ep.url) {\n                    const params = {};\n                    params.endpoint = ep.url;\n                    API.getEndpointCertificates(params)\n                        .then((response) => {\n                            const { certificates } = response.obj;\n                            for (const cert of certificates) {\n                                endpointCertificatesList.push(cert);\n                                aliases.push(cert.alias);\n                            }\n                        })\n                        .catch((err) => {\n                            console.error(err);\n                        });\n                }\n            }\n            setEndpointCertificates(endpointCertificatesList);\n            setAliasList(aliases);\n        } else {\n            setEndpointCertificates([]);\n        }\n    }, []);\n\n    return (\n        <>\n            <ExpansionPanel\n                expanded={isConfigExpanded}\n                onChange={() => setConfigExpand(!isConfigExpanded)}\n                className={classes.generalConfigPanel}\n                disabled={isRestricted(['apim:ep_certificates_view'])}\n            >\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls='panel1bh-content'\n                    id='panel1bh-header'\n                    className={classes.configHeaderContainer}\n                >\n                    {endpointType.key === 'awslambda' ? (\n                        <div />\n                    ) : (\n                        <Typography\n                            className={classes.secondaryHeading}\n                            hidden={endpointType.key === 'awslambda'}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Endpoints.GeneralConfiguration.certificates.sub.heading'\n                                defaultMessage='Certificates'\n                            />\n                            :\n                            {' '}\n                            {endpointCertificates.length}\n                            {isRestricted(['apim:ep_certificates_view']) && (\n                                <Box ml={2}>\n                                    <Typography variant='body2' color='primary'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Endpoints.GeneralConfiguration.not.allowed'\n                                            defaultMessage={'*You are not authorized to view certificates'\n                                        + ' due to insufficient permissions'}\n                                        />\n                                    </Typography>\n                                </Box>\n                            )}\n                        </Typography>\n                    )}\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.generalConfigContent}>\n                    <Grid\n                        container\n                        className={classes.endpointConfigSection}\n                        hidden={endpointType.key === 'default' || endpointType.key === 'awslambda'}\n                    >\n                        <Certificates\n                            endpoints={endpointsToList(epConfig)}\n                            certificates={endpointCertificates}\n                            uploadCertificate={saveCertificate}\n                            deleteCertificate={deleteCertificate}\n                            aliasList={aliasList}\n                        />\n                    </Grid>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        </>\n    );\n}\n\nGeneralConfiguration.propTypes = {\n    epConfig: PropTypes.shape({}).isRequired,\n    endpointType: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(GeneralConfiguration));\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport {\n    Dialog,\n    DialogContent,\n    DialogTitle,\n    ExpansionPanel,\n    ExpansionPanelDetails,\n    ExpansionPanelSummary,\n    Grid,\n    Icon,\n    IconButton,\n    MenuItem,\n    TextField,\n    Typography,\n    withStyles,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport cloneDeep from 'lodash.clonedeep';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport EndpointListing from 'AppComponents/Apis/Details/Endpoints/EndpointListing';\nimport LoadBalanceConfig from 'AppComponents/Apis/Details/Endpoints/LoadBalanceConfig';\nimport Collapse from '@material-ui/core/Collapse';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { getEndpointTypeProperty } from './endpointUtils';\n\nconst styles = (theme) => ({\n    endpointTypeSelect: {\n        width: '50%',\n        marginTop: theme.spacing(1),\n    },\n    configHeaderContainer: {\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    generalConfigContent: {\n        boxShadow: 'inset -1px 2px 3px 0px #c3c3c3',\n    },\n    secondaryHeading: {\n        fontSize: theme.typography.pxToRem(15),\n        color: theme.palette.text.secondary,\n        display: 'flex',\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        flexBasis: '33.33%',\n        flexShrink: 0,\n        fontWeight: '900',\n    },\n    endpointConfigSection: {\n        padding: '10px',\n    },\n    generalConfigPanel: {\n        width: '100%',\n    },\n    endpointsTypeSelectWrapper: {\n        display: 'flex',\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    lbConfigBtn: {\n        position: 'relative',\n        top: '10px',\n    },\n    endpointName: {\n        fontWeight: 600,\n    },\n    wrapper: {\n        width: '100%',\n    },\n});\n\nconst endpointTypes = [\n    { key: 'none', value: 'None' },\n    { key: 'failover', value: 'Failover' },\n    { key: 'load_balance', value: 'Load Balanced' },\n];\n\n/**\n * The component which holds the load balance and failover configuration.\n *\n * @param {any} props The input properties to the component\n * @returns {any} The HTML representation of the component.\n * */\nfunction LoadbalanceFailoverConfig(props) {\n    const {\n        epConfig,\n        classes,\n        endpointsDispatcher,\n        toggleAdvanceConfig,\n        toggleESConfig,\n        globalEpType,\n        handleEndpointCategorySelect,\n    } = props;\n    const { api } = useContext(APIContext);\n    const [isConfigExpanded, setConfigExpand] = useState(false);\n    const [endpointType, setEndpointType] = useState(props);\n    const [isLBConfigOpen, setLBConfigOpen] = useState(false);\n\n    useEffect(() => {\n        const epType = epConfig.endpoint_type;\n        if (epType === 'http' || epType === 'address') {\n            setEndpointType('none');\n        } else {\n            setEndpointType(epType);\n        }\n    }, [props]);\n\n    /**\n     * Method to add new loadbalance/ failover endpoint to the existing endpoints.\n     *\n     * @param {string} category The endpoint category (production/ sandbox)\n     * @param {string} type The endpoint type. (load_balance/ failover)\n     * @param {string} newURL The url of the new endpoint.\n     * */\n    const addEndpoint = (category, type, newURL) => {\n        const endpointConfigCopy = cloneDeep(epConfig);\n        const endpointTemplate = {\n            endpoint_type: globalEpType.key,\n            template_not_supported: false,\n            url: newURL,\n        };\n        const epConfigProperty = getEndpointTypeProperty(type, category);\n        let endpointList = endpointConfigCopy[epConfigProperty];\n        /**\n         * Check whether we have existing endpoints added.\n         * */\n        if (endpointList) {\n            if (!Array.isArray(endpointList)) {\n                endpointList = [endpointList].concat(endpointTemplate);\n            } else {\n                endpointList = endpointList.concat(endpointTemplate);\n            }\n        } else {\n            endpointList = [endpointTemplate];\n        }\n        endpointConfigCopy[epConfigProperty] = endpointList;\n        endpointsDispatcher({ action: 'add_endpoint', value: endpointConfigCopy });\n    };\n\n    /**\n     * Method to handle the loadbalance configuration changes.\n     *\n     * @param {object} lbConfig The modified loadbalance configuration.\n     * */\n    const handleLBConfigChange = (lbConfig) => {\n        endpointsDispatcher({ action: 'set_lb_config', value: { ...epConfig, ...lbConfig } });\n        setLBConfigOpen(false);\n    };\n\n    const getEndpointTypeHeading = () => {\n        switch (endpointType) {\n            case 'none':\n                return (\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.LoadbalanceFailoverConfig.none.heading'\n                        defaultMessage='Not Configured'\n                    />\n                );\n            case 'failover':\n                return (\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.LoadbalanceFailoverConfig.failover.heading'\n                        defaultMessage='Failover Endpoints'\n                    />\n                );\n            default:\n                return (\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.LoadbalanceFailoverConfig.loadbalance.heading'\n                        defaultMessage='Load Balanced Endpoints'\n                    />\n                );\n        }\n    };\n\n    /**\n     * Method to remove the selected endpoint from the endpoints list.\n     *\n     * @param {number} index The selected endpoint index\n     * @param {string} epType The type of the endpoint. (loadbalance/ failover)\n     * @param {string} category The endpoint category (production/ sandbox)\n     * */\n    const removeEndpoint = (index, epType, category) => {\n        const tmpEndpointConfig = cloneDeep(epConfig);\n        const endpointConfigProperty = getEndpointTypeProperty(epType, category);\n        const indexToRemove = epType === 'failover' ? index - 1 : index;\n        const tmpEndpoints = tmpEndpointConfig[endpointConfigProperty];\n        tmpEndpoints.splice(indexToRemove, 1);\n        endpointsDispatcher({\n            action: 'remove_endpoint',\n            value: { ...epConfig, [endpointConfigProperty]: tmpEndpoints },\n        });\n    };\n\n    const editEndpoint = () => {};\n    const handleEndpointTypeSelect = (event) => {\n        setEndpointType(event.target.value);\n        handleEndpointCategorySelect(event);\n    };\n\n    return (\n        <>\n            <ExpansionPanel\n                expanded={isConfigExpanded || endpointType === 'load_balance' || endpointType === 'failover'}\n                onChange={() => setConfigExpand(!isConfigExpanded)}\n                className={classes.generalConfigPanel}\n            >\n                <ExpansionPanelSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls='panel1bh-content'\n                    id='panel1bh-header'\n                    className={classes.configHeaderContainer}\n                >\n                    <Typography className={classes.secondaryHeading}>\n                        {getEndpointTypeHeading()}\n                    </Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.generalConfigContent}>\n                    {(!epConfig.production_endpoints && !epConfig.sandbox_endpoints)\n                        ? (\n                            <InlineMessage>\n                                <div className={classes.contentWrapper}>\n                                    <Typography component='p' className={classes.content}>\n                                        <FormattedMessage\n                                            id='Apis.Details.Endpoints.LoadbalanceFailoverConfig.no.endpoints.message'\n                                            defaultMessage='Add Production/ Sandbox endpoints to configure.'\n                                        />\n                                    </Typography>\n                                </div>\n                            </InlineMessage>\n                        )\n                        : (\n                            <Grid container item xs={12}>\n                                <Grid xs={12} className={classes.endpointsTypeSelectWrapper}>\n                                    <TextField\n                                        disabled={isRestricted(['apim:api_create'], api)}\n                                        id='certificateEndpoint'\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.Endpoints.LoadbalanceFailoverConfig.endpoint.type'\n                                                defaultMessage='Endpoint Type'\n                                            />\n                                        )}\n                                        value={endpointType}\n                                        placeholder='Endpoint'\n                                        onChange={handleEndpointTypeSelect}\n                                        margin='normal'\n                                        variant='outlined'\n                                        select\n                                        className={classes.endpointTypeSelect}\n                                    >\n                                        {endpointTypes.map((type) => {\n                                            return <MenuItem value={type.key}>{type.value}</MenuItem>;\n                                        })}\n                                    </TextField>\n                                    <div className={classes.lpConfigWrapper}>\n                                        <IconButton\n                                            className={classes.lbConfigBtn}\n                                            disabled={epConfig.endpoint_type !== 'load_balance'}\n                                            aria-label='Delete'\n                                            onClick={() => setLBConfigOpen(true)}\n                                        >\n                                            <Icon>\n                                                settings\n                                            </Icon>\n                                        </IconButton>\n                                    </div>\n                                </Grid>\n                                <Grid xs={12} container spacing={2}>\n                                    <Collapse className={classes.wrapper} in={endpointType !== 'none'}>\n                                        {epConfig.production_endpoints\n                                    && (\n                                        <Grid xs={12} className={classes.endpointsWrapperLeft}>\n                                            <Typography className={classes.endpointName}>\n                                                {epConfig.endpoint_type === 'failover'\n                                                    ? (\n                                                        <FormattedMessage\n                                                            id={'Apis.Details.Endpoints.'\n                                                            + 'LoadbalanceFailoverConfig.production.'\n                                                            + 'failover.endpoint'}\n                                                            defaultMessage='Production Failover Endpoints'\n                                                        />\n                                                    )\n                                                    : (\n                                                        <FormattedMessage\n                                                            id={'Apis.Details.Endpoints.LoadbalanceFailoverConfig.'\n                                                    + 'production.loadbalance.endpoint'}\n                                                            defaultMessage='Production Loadbalanced Endpoints'\n                                                        />\n                                                    )}\n                                            </Typography>\n                                            <EndpointListing\n                                                apiEndpoints={epConfig.production_endpoints}\n                                                failOvers={epConfig.production_failovers}\n                                                epType={epConfig.endpoint_type}\n                                                addNewEndpoint={addEndpoint}\n                                                removeEndpoint={removeEndpoint}\n                                                editEndpoint={editEndpoint}\n                                                setAdvancedConfigOpen={toggleAdvanceConfig}\n                                                setESConfigOpen={toggleESConfig}\n                                                category='production_endpoints'\n                                                apiId={api.id}\n                                            />\n                                        </Grid>\n                                    )}\n                                        {epConfig.sandbox_endpoints\n                                    && (\n                                        <Grid xs={12} className={classes.endpointsWrapperRight}>\n                                            <Typography className={classes.endpointName}>\n                                                {epConfig.endpoint_type === 'failover'\n                                                    ? (\n                                                        <FormattedMessage\n                                                            id={'Apis.Details.Endpoints.'\n                                                            + 'LoadbalanceFailoverConfig.sandbox.'\n                                                            + 'failover.endpoint'}\n                                                            defaultMessage='Sandbox Failover Endpoints'\n                                                        />\n                                                    )\n                                                    : (\n                                                        <FormattedMessage\n                                                            id={'Apis.Details.Endpoints.LoadbalanceFailoverConfig.'\n                                                    + 'sandbox.loadbalance.endpoint'}\n                                                            defaultMessage='Sandbox Loadbalanced Endpoints'\n                                                        />\n                                                    )}\n                                            </Typography>\n                                            <EndpointListing\n                                                apiEndpoints={epConfig.sandbox_endpoints}\n                                                failOvers={epConfig.sandbox_failovers}\n                                                epType={epConfig.endpoint_type}\n                                                addNewEndpoint={addEndpoint}\n                                                removeEndpoint={removeEndpoint}\n                                                editEndpoint={editEndpoint}\n                                                setAdvancedConfigOpen={toggleAdvanceConfig}\n                                                setESConfigOpen={toggleESConfig}\n                                                category='sandbox_endpoints'\n                                                apiId={api.id}\n                                            />\n                                        </Grid>\n                                    )}\n                                    </Collapse>\n                                </Grid>\n                            </Grid>\n                        )}\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n            <Dialog open={isLBConfigOpen}>\n                <DialogTitle>\n                    <Typography className={classes.configDialogHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.LoadbalanceFailoverConfig.load.balance.configuration.title'\n                            defaultMessage='Load Balance Configurations'\n                        />\n                    </Typography>\n                </DialogTitle>\n                <DialogContent>\n                    <LoadBalanceConfig\n                        handleLBConfigChange={handleLBConfigChange}\n                        closeLBConfigDialog={() => setLBConfigOpen(false)}\n                        algoCombo={epConfig.algoCombo}\n                        algoClassName={epConfig.algoClassName}\n                        sessionTimeOut={epConfig.sessionTimeOut}\n                        failOver={epConfig.failOver}\n                        sessionManagement={epConfig.sessionManagement}\n                    />\n                </DialogContent>\n            </Dialog>\n        </>\n    );\n}\n\nLoadbalanceFailoverConfig.propTypes = {\n    epConfig: PropTypes.shape({}).isRequired,\n    endpointSecurityInfo: PropTypes.shape({}).isRequired,\n    endpointType: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    endpointsDispatcher: PropTypes.func.isRequired,\n    toggleAdvanceConfig: PropTypes.func.isRequired,\n    toggleESConfig: PropTypes.func.isRequired,\n    handleEndpointCategorySelect: PropTypes.func.isRequired,\n    globalEpType: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(LoadbalanceFailoverConfig));\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Grid, withStyles } from '@material-ui/core';\nimport { injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport GenericEndpoint from './GenericEndpoint';\nimport GenericEndpointAdd from './GenericEndpointAdd';\n\nconst styles = (theme) => ({\n    endpointInputWrapper: {\n        display: 'flex',\n    },\n    epInput: {\n        width: '100%',\n    },\n    epTypeWrapper: {\n        display: 'flex',\n        padding: '5px',\n    },\n    epTypeName: {\n        paddingTop: '10px',\n        fontWeight: 600,\n    },\n    epConfig: {\n        justifyContent: 'flex-end',\n    },\n    leftArrow: {\n        paddingTop: '6px',\n    },\n    leftArrowLight: {\n        color: '#c5c5c5',\n        paddingTop: '6px',\n    },\n    dialogHeader: {\n        fontWeight: 600,\n    },\n    listItemOdd: {\n        background: '#ececec',\n        borderRadius: '5px',\n        '&:hover': {\n            backgroundColor: theme.palette.grey[300],\n        },\n        '&:focus': {\n            backgroundColor: theme.palette.grey[400],\n        },\n    },\n    listItem: {\n        borderRadius: '5px',\n        '&:hover': {\n            backgroundColor: theme.palette.grey[300],\n        },\n        '&:focus': {\n            backgroundColor: theme.palette.grey[400],\n        },\n    },\n});\n\n/**\n * The Component for endpoint listing.\n * @param {*} props The props that are being passed to the component.\n * @returns {any} The HTML view of the ep listing component.\n */\nfunction EndpointListing(props) {\n    const {\n        classes,\n        category,\n        apiEndpoints,\n        epType,\n        failOvers,\n        editEndpoint,\n        addNewEndpoint,\n        removeEndpoint,\n        setAdvancedConfigOpen,\n        setESConfigOpen,\n        apiId,\n    } = props;\n    const [endpointType, setEndpointType] = useState(epType);\n    const [endpoints, setEndpoints] = useState([{ url: 'http://myservice/endpoint' }]);\n    const selectedRef = useRef(null);\n\n    /**\n     * Method to add a new endpoint.\n     *\n     * @param {string} url The url of the endpoint that needs to be added.\n     * */\n    const addEndpoint = (url) => {\n        addNewEndpoint(category, epType, url);\n    };\n\n    useEffect(() => {\n        setEndpointType(epType);\n        setEndpoints(() => {\n            if (apiEndpoints !== null && epType === 'failover') {\n                return ([apiEndpoints].concat(failOvers));\n            } else {\n                if (apiEndpoints !== undefined) {\n                    return Array.isArray(apiEndpoints) ? apiEndpoints : [apiEndpoints];\n                }\n                return [{ url: 'http://myservice/' }];\n            }\n        });\n    }, [props]);\n\n    return (\n        <div className={classes.listingWrapper} ref={selectedRef}>\n            <Grid container xs={12}>\n                <Grid xs={12}>\n                    {(endpointType === 'failover' || endpointType === 'load_balance')\n                        ? <GenericEndpointAdd addEndpoint={addEndpoint} /> : <div />}\n                </Grid>\n                <Grid xs={12}>\n                    {\n                        (endpoints.map((ep, index) => {\n                            if (index > 0) {\n                                return (\n                                    <GenericEndpoint\n                                        readOnly\n                                        endpointURL={endpoints[index] ? endpoints[index].url : ''}\n                                        type={endpointType}\n                                        index={index}\n                                        category={category}\n                                        editEndpoint={editEndpoint}\n                                        deleteEndpoint={removeEndpoint}\n                                        setAdvancedConfigOpen={setAdvancedConfigOpen}\n                                        setESConfigOpen={setESConfigOpen}\n                                        apiId={apiId}\n                                    />\n                                );\n                            }\n                            return (<div />);\n                        }))\n                    }\n                </Grid>\n            </Grid>\n        </div>\n    );\n}\n\nEndpointListing.propTypes = {\n    classes: PropTypes.shape({\n        epTypeWrapper: PropTypes.shape({}),\n        epTypeName: PropTypes.shape({}),\n        listingWrapper: PropTypes.shape({}),\n        epConfig: PropTypes.shape({}),\n    }).isRequired,\n    epType: PropTypes.string.isRequired,\n    category: PropTypes.string.isRequired,\n    apiEndpoints: PropTypes.shape({}).isRequired,\n    failOvers: PropTypes.shape({}).isRequired,\n    addNewEndpoint: PropTypes.func.isRequired,\n    removeEndpoint: PropTypes.func.isRequired,\n    editEndpoint: PropTypes.func.isRequired,\n    setAdvancedConfigOpen: PropTypes.func.isRequired,\n    setESConfigOpen: PropTypes.func.isRequired,\n    apiId: PropTypes.string.isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(EndpointListing));\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useState, useContext } from 'react';\n\nimport {\n    Icon,\n    IconButton,\n    InputAdornment,\n    TextField,\n    withStyles,\n} from '@material-ui/core';\nimport { FormattedMessage } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst styles = (theme) => ({\n    endpointInputWrapper: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    textField: {\n        width: '100%',\n    },\n    input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    iconButton: {\n        padding: theme.spacing(1),\n    },\n});\n\n/**\n * This component represents the view and functions of endpoint add.\n *\n * @param {any} props The input props.\n * @returns {any} HTML representation of the component.\n * */\nfunction GenericEndpointAdd(props) {\n    const {\n        classes,\n        addEndpoint,\n    } = props;\n    const [serviceUrl, setServiceUrl] = useState('');\n    const { api } = useContext(APIContext);\n\n    /**\n     * The method to handle endpoint add button click action.\n     * */\n    const onAddEndpoint = () => {\n        setServiceUrl('');\n        addEndpoint(serviceUrl);\n    };\n\n    return (\n        <div className={classes.endpointInputWrapper}>\n            <TextField\n                label={(\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GenericEndpoint.service.url.input'\n                        defaultMessage='Service URL'\n                    />\n                )}\n                disabled={isRestricted(['apim:api_create'], api)}\n                className={classes.textField}\n                value={serviceUrl}\n                fullWidth\n                onChange={(event) => setServiceUrl(event.target.value)}\n                variant='outlined'\n                margin='normal'\n                placeholder='Enter the Endpoint URL and press + button'\n                InputProps={{\n                    endAdornment: (\n                        <InputAdornment position='end'>\n                            <IconButton\n                                onClick={onAddEndpoint}\n                                color='green'\n                                className={classes.iconButton}\n                                aria-label='Search'\n                                disabled={serviceUrl === ''}\n                            >\n                                <Icon>\n                                    add\n                                </Icon>\n                            </IconButton>\n                        </InputAdornment>\n                    ),\n                }}\n            />\n        </div>\n    );\n}\n\nGenericEndpointAdd.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    addEndpoint: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(GenericEndpointAdd);\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport {\n    TextField, MenuItem, Grid, Button, withStyles,\n} from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst algorithms = [\n    {\n        key: 'org.apache.synapse.endpoints.algorithms.RoundRobin',\n        value: 'Round-Robin',\n    },\n    { key: 'other', value: 'Other' },\n];\nconst sessionManagementOps = [\n    { key: 'http', value: 'Transport' },\n    { key: 'soap', value: 'SOAP' },\n    { key: 'simpleClientSession', value: 'Client Id' },\n    { key: 'none', value: 'None' },\n];\n\nconst defaultTemplateObj = {\n    algoClassName: algorithms[0].key,\n    algoCombo: algorithms[0].key,\n    sessionManagement: sessionManagementOps[0].key,\n    sessionTimeOut: 300,\n    failOver: false,\n};\n\nconst styles = (theme) => ({\n    configButtonContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: theme.spacing(1),\n    },\n});\n\n/**\n * The component for loadbalance endpoint configuration.\n * @param {any} props The props that are being passed.\n * @returns {any} The HTML contents of the Configuration component.\n */\nfunction LoadBalanceConfig(props) {\n    const {\n        algoClassName,\n        algoCombo,\n        sessionManagement,\n        sessionTimeOut,\n        failOver,\n        handleLBConfigChange,\n        closeLBConfigDialog,\n        classes,\n    } = props;\n    const [lbConfig, setLbConfigObject] = useState(defaultTemplateObj);\n    const [algoClassNameError, setAlgoClassNameError] = useState(false);\n    const { api } = useContext(APIContext);\n\n    useEffect(() => {\n        setLbConfigObject(() => {\n            const tmpLBConfig = { ...defaultTemplateObj };\n            if (algoCombo) {\n                tmpLBConfig.algoCombo = algoCombo;\n            }\n            if (sessionManagement) {\n                tmpLBConfig.sessionManagement = sessionManagement;\n            }\n            if (algoClassName) {\n                tmpLBConfig.algoClassName = algoClassName;\n            }\n            if (sessionTimeOut) {\n                tmpLBConfig.sessionTimeOut = sessionTimeOut;\n            }\n            if (failOver) {\n                tmpLBConfig.failOver = failOver;\n            }\n            return tmpLBConfig;\n        });\n    }, [props]);\n\n    /**\n     * Method to capture the alogrithm select changes.\n     *\n     * @param {any} event The event triggered by the element.\n     * */\n    const handleAlgorithmChange = (event) => {\n        const { value } = event.target;\n        setLbConfigObject({\n            ...lbConfig,\n            algoCombo: value,\n            algoClassName: value === 'other' ? '' : defaultTemplateObj.algoClassName,\n        });\n    };\n\n    /**\n     * Method to capture the onChange event of the elements.\n     *\n     * @param {any} event The event triggered by the element.\n     * @param {string} field The respective field which is being changed.\n     * */\n    const handleFieldChange = (event, field) => {\n        setLbConfigObject({ ...lbConfig, [field]: event.target.value });\n    };\n\n    /**\n     * Method to capture the onChange event of the elements.\n     *\n     * @param {any} event The event triggered by the element.\n     * @param {string} field The respective field which is being changed.\n     * */\n    const handleFailoverFieldChange = (event, field) => {\n        setLbConfigObject({ ...lbConfig, [field]: event.target.checked });\n    };\n\n    /**\n     * Method to set the configuration changes to the original endpoints config object.\n     * */\n    const submitConfiguration = () => {\n        handleLBConfigChange(lbConfig);\n    };\n\n    return (\n        <>\n            <Grid container direction='column'>\n                <TextField\n                    id='algorithmSelect'\n                    select\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.LoadBalanceConfig.algorithm'\n                            defaultMessage='Algorithm'\n                        />\n                    )}\n                    value={lbConfig.algoCombo}\n                    onChange={handleAlgorithmChange}\n                    helperText='Please select the Loadbalance Algorithm.'\n                    margin='normal'\n                    disabled={isRestricted(['apim:api_create'], api)}\n                >\n                    {algorithms.map((algo) => (\n                        <MenuItem key={algo.key} value={algo.key} selected={lbConfig.algoCombo}>\n                            {algo.value}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                {(lbConfig.algoCombo === 'other')\n                    ? (\n                        <TextField\n                            id='customAlgoInput'\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Endpoints.LoadBalanceConfig.class.name.for.algorithm'\n                                    defaultMessage='Class Name for Algorithm'\n                                />\n                            )}\n                            required\n                            error={algoClassNameError}\n                            value={lbConfig.algoClassName}\n                            onChange={(event) => handleFieldChange(event, 'algoClassName')}\n                            onBlur={() => setAlgoClassNameError(lbConfig.algoClassName === '')}\n                            helperText='Enter the class name of the loadbalance algorithm'\n                            disabled={isRestricted(['apim:api_create'], api)}\n                            margin='normal'\n                        />\n                    ) : <div /> }\n                <TextField\n                    id='sessionMgtSelect'\n                    select\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.LoadBalanceConfig.session.management'\n                            defaultMessage='Session Management'\n                        />\n                    )}\n                    value={lbConfig.sessionManagement}\n                    onChange={(event) => handleFieldChange(event, 'sessionManagement')}\n                    helperText='Please select the Session Management mechanism.'\n                    margin='normal'\n                    disabled={isRestricted(['apim:api_create'], api)}\n                >\n                    {sessionManagementOps.map((option) => (\n                        <MenuItem key={option.key} value={option.key}>\n                            {option.value}\n                        </MenuItem>\n                    ))}\n                </TextField>\n                <TextField\n                    id='sessionTimeout'\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.LoadBalanceConfig.session.timeout'\n                            defaultMessage='Session Timeout (Millis)'\n                        />\n                    )}\n                    value={lbConfig.sessionTimeOut}\n                    onChange={(event) => handleFieldChange(event, 'sessionTimeOut')}\n                    type='number'\n                    placeholder='300'\n                    margin='normal'\n                    disabled={isRestricted(['apim:api_create'], api)}\n                />\n                <FormControlLabel\n                    control={(\n                        <Checkbox\n                            id='failOver'\n                            checked={lbConfig.failOver}\n                            onChange={(event) => handleFailoverFieldChange(event, 'failOver')}\n                            margin='normal'\n                            disabled={isRestricted(['apim:api_create'], api)}\n                        />\n                    )}\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.LoadBalanceConfig.failover'\n                            defaultMessage='Enable Failover'\n                        />\n                    )}\n                />\n            </Grid>\n            <Grid className={classes.configButtonContainer}>\n                <Button\n                    color='primary'\n                    variant='contained'\n                    autoFocus\n                    onClick={submitConfiguration}\n                    disabled={lbConfig.algoClassName === '' || isRestricted(['apim:api_create'], api)}\n                    style={{ marginRight: '10px' }}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.EndpointOverview.loadbalance.config.save.button'\n                        defaultMessage='Save'\n                    />\n                </Button>\n                <Button\n                    onClick={closeLBConfigDialog}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.EndpointOverview.loadbalance.config.cancel.button'\n                        defaultMessage='Close'\n                    />\n                </Button>\n            </Grid>\n        </>\n    );\n}\n\nLoadBalanceConfig.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    algoClassName: PropTypes.string.isRequired,\n    algoCombo: PropTypes.string.isRequired,\n    sessionManagement: PropTypes.string.isRequired,\n    sessionTimeOut: PropTypes.string.isRequired,\n    failOver: PropTypes.bool.isRequired,\n    handleLBConfigChange: PropTypes.func.isRequired,\n    closeLBConfigDialog: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(LoadBalanceConfig));\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport {\n    Divider,\n    FormControl,\n    Grid,\n    Input,\n    InputLabel,\n    MenuItem,\n    Select,\n    TextField,\n    Typography,\n    Button,\n    withStyles,\n} from '@material-ui/core';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst itemHeight = 48;\nconst itemPaddingTop = 8;\nconst MenuProps = {\n    PaperProps: {\n        style: {\n            maxHeight: (itemHeight * 4.5) + itemPaddingTop, width: 250,\n        },\n    },\n};\nconst styles = (theme) => ({\n    formControl: {\n        width: '500px',\n    },\n    subTitle: {\n        fontSize: '1rem',\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    configContainer: {\n        paddingTop: '10px',\n    },\n    configSubContainer: {\n        paddingBottom: '10px',\n        marginTop: '5px',\n        padding: '5px',\n    },\n    textField: {\n        marginRight: theme.spacing(1),\n        width: '45%',\n    },\n    advanceDialogActions: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n});\n\n/**\n * The component for advanced endpoint configurations.\n * @param {any} props The input props\n * @returns {any} The HTML representation of the compoenent.\n */\nfunction AdvanceEndpointConfig(props) {\n    const { api } = useContext(APIContext);\n    const {\n        classes,\n        intl,\n        advanceConfig,\n        isSOAPEndpoint,\n        onSaveAdvanceConfig,\n        onCancel,\n    } = props;\n    const [advanceConfigObj, setAdvanceConfig] = useState(() => {\n        const config = {};\n        if (isSOAPEndpoint) {\n            config.format = 'soap11';\n            config.optimize = 'SWA';\n        }\n        config.actionDuration = '30000';\n        config.actionSelect = 'fault';\n        config.factor = '';\n        config.retryDelay = '';\n        config.retryErroCode = [];\n        config.retryTimeOut = '';\n        config.suspendDuration = '';\n        config.suspendErrorCode = [];\n        config.suspendMaxDuration = '';\n        return config;\n    });\n\n    /**\n     * The error codes definition.\n     * */\n    const errorCodes = [\n        {\n            key: '101001',\n            value: '101001 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.receiver.io.error.receiving',\n                defaultMessage: 'Receiver IO error Receiving',\n            }),\n        },\n        {\n            key: '101500',\n            value: '101500 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.sender.io.error.sending',\n                defaultMessage: 'Sender IO Error Sending',\n            }),\n        },\n        {\n            key: '101000',\n            value: '101000 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.receiver.io.error.sending',\n                defaultMessage: 'Retriever IO Error Sending',\n            }),\n        },\n        {\n            key: '101501',\n            value: '101501 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.sender.io.error.receiving',\n                defaultMessage: 'Sender IO Error Receiving',\n            }),\n        },\n        {\n            key: '101503',\n            value: '101503 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.connection.failed',\n                defaultMessage: 'Connection Failed',\n            }),\n        },\n        {\n            key: '101504',\n            value: '101504 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.connection.timed.out',\n                defaultMessage: 'Connection Timed Out',\n            }),\n        },\n        {\n            key: '101505',\n            value: '101505 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.connection.closed',\n                defaultMessage: 'Connection Closed',\n            }),\n        },\n        {\n            key: '101506',\n            value: '101506 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.tpp.protocol.violation',\n                defaultMessage: 'TTP Protocol Violation',\n            }),\n        },\n        {\n            key: '101507',\n            value: '101507 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.connect.cancel',\n                defaultMessage: 'Connect Cancel',\n            }),\n        },\n        {\n            key: '101508',\n            value: '101508 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.connect.timeout',\n                defaultMessage: 'Connect Timeout',\n            }),\n        },\n        {\n            key: '101509',\n            value: '101509 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.send.abort',\n                defaultMessage: 'Send Abort',\n            }),\n        },\n        {\n            key: '101510',\n            value: '101510 : ' + intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.response.processing.failure',\n                defaultMessage: 'Response Processing Failure',\n            }),\n        }];\n\n    /**\n     * Supported action items.\n     * */\n    const actionItems = [\n        {\n            key: 'fault',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.execute.fault.sequence',\n                defaultMessage: 'Execute Fault Sequence',\n            }),\n        },\n        {\n            key: 'discard',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.discard.message',\n                defaultMessage: 'Discard Message',\n            }),\n        },\n    ];\n\n    /**\n     * Message types for the address endpoint type.\n     * */\n    const messageTypes = [\n        { key: 'soap11', value: 'SOAP 1.1' },\n        { key: 'soap12', value: 'SOAP 1.2' },\n        {\n            key: 'POX',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.plain.old.xml',\n                defaultMessage: 'Plain Old XML (POX)',\n            }),\n        },\n        {\n            key: 'REST',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.representational.state.transfer',\n                defaultMessage: 'Representational State Transfer (REST)',\n            }),\n        },\n        {\n            key: 'GET',\n            value: 'GET',\n        },\n        {\n            key: 'leave-as-is',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.leave.as.is',\n                defaultMessage: 'Leave As-Is',\n            }),\n        },\n    ];\n\n    /**\n     * Address endpoint message optimizations.\n     * */\n    const optimizeOptions = [\n        { key: 'SWA', value: 'SWA' },\n        { key: 'MTOM', value: 'MTOM' },\n        {\n            key: 'leave-as-is',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.leave.as.is',\n                defaultMessage: 'Leave As-Is',\n            }),\n        },\n    ];\n\n    useEffect(() => {\n        setAdvanceConfig(() => {\n            if (advanceConfig === {}) {\n                return { ...advanceConfigObj };\n            }\n            return { ...advanceConfigObj, ...advanceConfig };\n        });\n    }, [props]);\n\n    /**\n     * Method to handle the advance endpoint field change. In each change, the advance config object is getting updated.\n     *\n     * @param {any} event The HTML event triggered by the element.\n     * @param {string} field The HTML element that is being changed.\n     * */\n    const handleConfigFieldChange = (event, field) => {\n        const di = { ...advanceConfigObj, [field]: event.target.value };\n        setAdvanceConfig(di);\n    };\n\n    return (\n        <Grid container direction='column' className={classes.configContainer}>\n            {(isSOAPEndpoint) ? (\n                <Grid item container className={classes.configSubContainer}>\n                    <Typography className={classes.subTitle}>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.message.content'\n                            defaultMessage='Message Content'\n                        />\n                    </Typography>\n                    <FormControl className={classes.formControl}>\n                        <InputLabel htmlFor='err-code-select'>\n                            <FormattedMessage\n                                id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.format.select'\n                                defaultMessage='Format'\n                            />\n                        </InputLabel>\n                        <Select\n                            autoWidth={false}\n                            value={advanceConfigObj.format}\n                            onChange={(event) => handleConfigFieldChange(event, 'format')}\n                            input={<Input id='err-code-select' />}\n                            MenuProps={MenuProps}\n                        >\n                            {messageTypes.map((messageType) => (\n                                <MenuItem key={messageType.key} value={messageType.key}>\n                                    {messageType.value}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                    <FormControl className={classes.formControl}>\n                        <InputLabel htmlFor='err-code-select'>\n                            <FormattedMessage\n                                id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.optimize.select'\n                                defaultMessage='Optimize'\n                            />\n                        </InputLabel>\n                        <Select\n                            autoWidth={false}\n                            value={advanceConfigObj.optimize}\n                            onChange={(event) => handleConfigFieldChange(event, 'optimize')}\n                            input={<Input id='err-code-select' />}\n                            MenuProps={MenuProps}\n                        >\n                            {optimizeOptions.map((option) => (\n                                <MenuItem key={option.key} value={option.key}>\n                                    {option.value}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                    <Divider />\n                </Grid>\n            ) : (<div />)}\n            <Grid item container className={classes.configSubContainer}>\n                <Typography className={classes.subTitle}>\n                    <FormattedMessage id='Endpoint.Suspension.State' defaultMessage='Endpoint Suspension State' />\n                </Typography>\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor='err-code-select'>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.error.code'\n                            defaultMessage='Error Code'\n                        />\n                    </InputLabel>\n                    <Select\n                        multiple\n                        autoWidth={false}\n                        value={advanceConfigObj.suspendErrorCode}\n                        onChange={(event) => handleConfigFieldChange(event, 'suspendErrorCode')}\n                        input={<Input id='err-code-select' />}\n                        MenuProps={MenuProps}\n                        variant='outlined'\n                    >\n                        {errorCodes.map((code) => (\n                            <MenuItem key={code.key} value={code.key}>\n                                {code.value}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n                <TextField\n                    className={classes.textField}\n                    id='initial-duration-input'\n                    value={advanceConfigObj.suspendDuration}\n                    onChange={(event) => handleConfigFieldChange(event, 'suspendDuration')}\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.initial.duration.ms'\n                            defaultMessage='Initial Duration (ms)'\n                        />\n                    )}\n                    margin='normal'\n                    type='number'\n                />\n                <TextField\n                    className={classes.textField}\n                    id='max-duration-input'\n                    value={advanceConfigObj.suspendMaxDuration}\n                    onChange={(event) => handleConfigFieldChange(event, 'suspendMaxDuration')}\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.max.duration.ms'\n                            defaultMessage='Max Duration (ms)'\n                        />\n                    )}\n                    margin='normal'\n                    type='number'\n                />\n                <TextField\n                    className={classes.textField}\n                    value={advanceConfigObj.factor}\n                    onChange={(event) => handleConfigFieldChange(event, 'factor')}\n                    id='factor-input'\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.factor'\n                            defaultMessage='Factor'\n                        />\n                    )}\n                    margin='normal'\n                />\n            </Grid>\n            <Divider />\n            <Grid item container className={classes.configSubContainer}>\n                <Typography className={classes.subTitle}>\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.endpoint.timeout.state'\n                        defaultMessage='Endpoint Timeout State'\n                    />\n                </Typography>\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor='err-code-select'>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.error.code'\n                            defaultMessage='Error Code'\n                        />\n                    </InputLabel>\n                    <Select\n                        multiple\n                        autoWidth={false}\n                        value={advanceConfigObj.retryErroCode}\n                        onChange={(event) => handleConfigFieldChange(event, 'retryErroCode')}\n                        input={<Input id='err-code-select' />}\n                        MenuProps={MenuProps}\n                    >\n                        {errorCodes.map((code) => (\n                            <MenuItem key={code.key} value={code.key}>\n                                {code.value}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n                <TextField\n                    className={classes.textField}\n                    id='retries-input'\n                    value={advanceConfigObj.retryTimeOut}\n                    onChange={(event) => handleConfigFieldChange(event, 'retryTimeOut')}\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.retries.before.suspension'\n                            defaultMessage='Retries Before Suspension'\n                        />\n                    )}\n                    type='number'\n                    margin='normal'\n                />\n                <TextField\n                    className={classes.textField}\n                    id='retry-delay-input'\n                    value={advanceConfigObj.retryDelay}\n                    onChange={(event) => handleConfigFieldChange(event, 'retryDelay')}\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.retry.delay.ms'\n                            defaultMessage='Retry Delay (ms)'\n                        />\n                    )}\n                    type='number'\n                    margin='normal'\n                />\n            </Grid>\n            <Divider />\n            <Grid item container className={classes.configSubContainer}>\n                <Typography className={classes.subTitle}>\n                    <FormattedMessage id='Connection.Timeout' defaultMessage='Connection Timeout' />\n                </Typography>\n                <FormControl className={classes.formControl}>\n                    <InputLabel htmlFor='err-code-select'>\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.action'\n                            defaultMessage='Action'\n                        />\n                    </InputLabel>\n                    <Select\n                        autoWidth={false}\n                        value={advanceConfigObj.actionSelect}\n                        onChange={(event) => handleConfigFieldChange(event, 'actionSelect')}\n                        input={<Input id='err-code-select' />}\n                        MenuProps={MenuProps}\n                    >\n                        {actionItems.map((item) => (\n                            <MenuItem key={item.key} value={item.key}>\n                                {item.value}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n                <TextField\n                    className={classes.textField}\n                    id='duration-input'\n                    value={advanceConfigObj.actionDuration}\n                    onChange={(event) => handleConfigFieldChange(event, 'actionDuration')}\n                    label={(\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.duration.ms'\n                            defaultMessage='Duration (ms)'\n                        />\n                    )}\n                    type='number'\n                    margin='normal'\n                />\n            </Grid>\n            <Grid className={classes.advanceDialogActions}>\n                <Button\n                    onClick={() => onSaveAdvanceConfig(advanceConfigObj)}\n                    color='primary'\n                    autoFocus\n                    disabled={isRestricted(['apim:api_create'], api)}\n                    variant='contained'\n                    style={{ marginRight: '10px' }}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.config.save.button'\n                        defaultMessage='Save'\n                    />\n                </Button>\n                <Button onClick={onCancel}>\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.AdvancedConfig.AdvanceEndpointConfig.cancel.button'\n                        defaultMessage='Close'\n                    />\n                </Button>\n            </Grid>\n        </Grid>\n    );\n}\n\nAdvanceEndpointConfig.propTypes = {\n    classes: PropTypes.shape({\n        configContainer: PropTypes.shape({}),\n        configSubContainer: PropTypes.shape({}),\n        subTitle: PropTypes.shape({}),\n        formControl: PropTypes.shape({}),\n\n    }).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n    advanceConfig: PropTypes.shape({}).isRequired,\n    isSOAPEndpoint: PropTypes.bool.isRequired,\n    onSaveAdvanceConfig: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(AdvanceEndpointConfig));\n","/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Grid, TextField, MenuItem, InputAdornment,\n    Icon,\n    ListItem,\n    ListItemAvatar,\n    ListItemText,\n} from '@material-ui/core';\nimport { RemoveRedEye } from '@material-ui/icons';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport Button from '@material-ui/core/Button';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport isEmpty from 'lodash.isempty';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport APIValidation from 'AppData/APIValidation';\nimport Alert from 'AppComponents/Shared/Alert';\nimport EditableParameterRow from './EditableParameterRow';\n\nconst styles = () => ({\n    FormControl: {\n        padding: 0,\n        width: '100%',\n    },\n    radioWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    addParameter: {\n        marginRight: '16px',\n    },\n    marginRight: {\n        marginRight: '8px',\n    },\n    buttonIcon: {\n        marginRight: '16px',\n    },\n    button: {\n        marginTop: '5px',\n    },\n    listItem: {\n        marginTop: '25px',\n    },\n    eye: {\n        cursor: 'pointer',\n    },\n});\n\n/**\n * The base component for advanced endpoint configurations.\n * @param {any} props The props that are being passed\n * @returns {any} The html representation of the component.\n */\nfunction EndpointSecurity(props) {\n    const { api } = useContext(APIContext);\n    const {\n        intl, securityInfo, onChangeEndpointAuth, classes, isProduction,\n        saveEndpointSecurityConfig,\n        closeEndpointSecurityConfig,\n    } = props;\n    const [endpointSecurityInfo, setEndpointSecurityInfo] = useState({\n        type: '',\n        username: '',\n        password: '',\n        grantType: '',\n        tokenUrl: '',\n        clientId: '',\n        clientSecret: '',\n        customParameters: {},\n    });\n    const [securityValidity, setSecurityValidity] = useState();\n\n    const [showAddParameter, setShowAddParameter] = useState(false);\n    const [clientSecretIsMasked, setClientSecretIsMasked] = useState(true);\n    // Implementation of useState variables for parameter name and value\n    const [parameterName, setParameterName] = useState(null);\n    const [parameterValue, setParameterValue] = useState(null);\n    const endpointType = isProduction ? 'production' : 'sandbox';\n\n    const authTypes = [\n        {\n            key: 'NONE',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.none',\n                defaultMessage: 'None',\n            }),\n        },\n        {\n            key: 'BASIC',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.basic',\n                defaultMessage: 'Basic Auth',\n            }),\n        },\n        {\n            key: 'DIGEST',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.digest.auth',\n                defaultMessage: 'Digest Auth',\n            }),\n        },\n        {\n            key: 'OAUTH',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.oauth',\n                defaultMessage: 'OAuth 2.0',\n            }),\n        },\n    ];\n    const grantTypes = [\n        {\n            key: 'CLIENT_CREDENTIALS',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.oauth.grant.type.client',\n                defaultMessage: 'Client Credentials',\n            }),\n        },\n        {\n            key: 'PASSWORD',\n            value: intl.formatMessage({\n                id: 'Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.oauth.grant.type.password',\n                defaultMessage: 'Resource Owner Password',\n            }),\n        },\n    ];\n    useEffect(() => {\n        let tmpSecurity = {};\n        if (securityInfo) {\n            tmpSecurity = { ...securityInfo };\n            const {\n                type, username, password, grantType, tokenUrl, clientId, clientSecret, customParameters,\n            } = securityInfo;\n            tmpSecurity.type = type === null ? 'NONE' : type;\n            tmpSecurity.username = username;\n            tmpSecurity.password = password === '' ? '**********' : password;\n            tmpSecurity.grantType = grantType;\n            tmpSecurity.tokenUrl = tokenUrl;\n            tmpSecurity.clientId = clientId === '' ? '********' : clientId;\n            tmpSecurity.clientSecret = clientSecret === '' ? '********' : clientSecret;\n            tmpSecurity.customParameters = customParameters;\n        }\n        setEndpointSecurityInfo(tmpSecurity);\n    }, [securityInfo]);\n\n    /**\n     * Validating whether token url is in a proper format\n     * @param {*} value value of the field\n     * @returns {*} boolean value\n     */\n    const validateTokenUrl = (value) => {\n        const state = APIValidation.url.required().validate(value).error;\n        if (state === null) {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    /**\n     * Validate Security Info properties\n     * @param {*} field value of the field\n     */\n    const validateAndUpdateSecurityInfo = (field) => {\n        if (!endpointSecurityInfo[field]) {\n            setSecurityValidity({ ...securityValidity, [field]: false });\n        } else {\n            let validity = true;\n            if (field === 'tokenUrl') {\n                validity = validateTokenUrl(endpointSecurityInfo[field]);\n            }\n            setSecurityValidity({ ...securityValidity, [field]: validity });\n        }\n        const type = isProduction ? 'production' : 'sandbox';\n        onChangeEndpointAuth(endpointSecurityInfo, type);\n    };\n\n    /**\n     * Show or hide the Add Parameter component\n     */\n    const toggleAddParameter = () => {\n        setShowAddParameter(!showAddParameter);\n    };\n\n    /**\n     * Show or hide the Client Secret\n     */\n    const toggleClientSecretMask = () => {\n        setClientSecretIsMasked(!clientSecretIsMasked);\n    };\n\n    /**\n     * Set the custom parameter name or value property\n     * @param {*} name name of the field edited\n     * @returns {*} fills the parameter name or parameter value states\n     */\n    const handleParameterChange = (name) => (event) => {\n        const { value } = event.target;\n        if (name === 'parameterName') {\n            setParameterName(value);\n        } else if (name === 'parameterValue') {\n            setParameterValue(value);\n        }\n    };\n\n    /**\n     * Check if the field is empty or not\n     * @param {*} itemValue value of the field\n     * @returns {*} boolean value\n     */\n    const validateEmpty = (itemValue) => {\n        if (itemValue === null) {\n            return false;\n        } else if (itemValue === '') {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    /**\n     * Add new custom parameter\n     */\n    const handleAddToList = () => {\n        const customParametersCopy = endpointSecurityInfo.customParameters;\n\n        if (customParametersCopy !== null\n            && Object.prototype.hasOwnProperty.call(customParametersCopy, parameterName)) {\n            Alert.warning('Parameter name: ' + parameterName + ' already exists');\n        } else {\n            customParametersCopy[parameterName] = parameterValue;\n            setParameterName(null);\n            setParameterValue(null);\n        }\n        setEndpointSecurityInfo({ ...endpointSecurityInfo, customParameters: customParametersCopy });\n        onChangeEndpointAuth(endpointSecurityInfo, endpointType);\n    };\n\n    /**\n     * Update existing custom parameter name-value pair\n     * @param {*} oldRow previous name-value pair\n     * @param {*} newRow new name-value pair\n     */\n    const handleUpdateList = (oldRow, newRow) => {\n        const customParametersCopy = endpointSecurityInfo.customParameters;\n        const { oldName, oldValue } = oldRow;\n        const { newName, newValue } = newRow;\n        if (customParametersCopy !== null\n            && Object.prototype.hasOwnProperty.call(customParametersCopy, newName) && oldName === newName) {\n            // Only the value is updated\n            if (newValue && oldValue !== newValue) {\n                customParametersCopy[oldName] = newValue;\n            }\n        } else {\n            delete customParametersCopy[oldName];\n            customParametersCopy[newName] = newValue;\n        }\n        setEndpointSecurityInfo({ ...endpointSecurityInfo, customParameters: customParametersCopy });\n        onChangeEndpointAuth(endpointSecurityInfo, endpointType);\n    };\n\n    /**\n     * Delete existing custom parameter name-value pair\n     * @param {*} oldName name property of the name-value pair to be removed\n     */\n    const handleDelete = (oldName) => {\n        const customParametersCopy = endpointSecurityInfo.customParameters;\n        if (customParametersCopy !== null && Object.prototype.hasOwnProperty.call(customParametersCopy, oldName)) {\n            delete customParametersCopy[oldName];\n        }\n        setEndpointSecurityInfo({ ...endpointSecurityInfo, customParameters: customParametersCopy });\n        onChangeEndpointAuth(endpointSecurityInfo, endpointType);\n    };\n\n    /**\n     * Keyboard shortcut to execute adding custom parameters when pressing the Enter key\n     * @param {*} event event containing the key that was pressed\n     */\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            handleAddToList();\n        }\n    };\n\n    /**\n     * Render the custom parameters component\n     * @returns {*} list of items added\n     */\n    const renderCustomParameters = () => {\n        const items = [];\n        for (const name in endpointSecurityInfo.customParameters) {\n            if (Object.prototype.hasOwnProperty.call(endpointSecurityInfo.customParameters, name)) {\n                items.push(<EditableParameterRow\n                    oldName={name}\n                    oldValue={endpointSecurityInfo.customParameters[name]}\n                    handleUpdateList={handleUpdateList}\n                    handleDelete={handleDelete}\n                    customParameters={endpointSecurityInfo.customParameters}\n                    {...props}\n                    isRestricted={isRestricted}\n                    api={api}\n                />);\n            }\n        }\n        return items;\n    };\n\n    return (\n        <Grid container direction='row' spacing={2}>\n            <Grid item xs={6}>\n                <TextField\n                    disabled={isRestricted(['apim:api_create'], api)}\n                    fullWidth\n                    select\n                    value={endpointSecurityInfo && endpointSecurityInfo.type}\n                    variant='outlined'\n                    onChange={(event) => {\n                        setEndpointSecurityInfo({\n                            ...endpointSecurityInfo,\n                            type: event.target.value,\n                        });\n                    }}\n                    inputProps={{\n                        name: 'key',\n                        id: 'auth-type-select',\n                    }}\n                    onBlur={() => validateAndUpdateSecurityInfo(isProduction)}\n                >\n                    {authTypes.map((type) => (\n                        <MenuItem value={type.key}>{type.value}</MenuItem>\n                    ))}\n                </TextField>\n            </Grid>\n            <Grid item xs={6} />\n\n            {(endpointSecurityInfo.type === 'OAUTH')\n                && (\n                    <>\n                        <Grid item xs={6}>\n                            <TextField\n                                disabled={isRestricted(['apim:api_create'], api)}\n                                required\n                                fullWidth\n                                select\n                                label={(\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration'\n                                        + '.EndpointSecurity.grant.type.input'}\n                                        defaultMessage='Grant Type'\n                                    />\n                                )}\n                                variant='outlined'\n                                onChange={(event) => setEndpointSecurityInfo(\n                                    { ...endpointSecurityInfo, grantType: event.target.value },\n                                )}\n                                value={endpointSecurityInfo.grantType}\n                                inputProps={{\n                                    name: 'key',\n                                    id: 'grant-type-select',\n                                }}\n                                onBlur={() => validateAndUpdateSecurityInfo('grantType')}\n                            >\n                                {grantTypes.map((type) => (\n                                    <MenuItem value={type.key}>{type.value}</MenuItem>\n                                ))}\n                            </TextField>\n                        </Grid>\n\n                        {(endpointSecurityInfo.grantType === 'CLIENT_CREDENTIALS'\n                        || endpointSecurityInfo.grantType === 'PASSWORD') && (\n                            <>\n                                <Grid item xs={6}>\n                                    <TextField\n                                        disabled={isRestricted(['apim:api_create'], api)}\n                                        required\n                                        fullWidth\n                                        error={securityValidity && securityValidity.tokenUrl === false}\n                                        helperText={\n                                            securityValidity && securityValidity.tokenUrl === false ? (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Endpoints.GeneralConfiguration'\n                                            + '.EndpointSecurity.no.tokenUrl.error'}\n                                                    defaultMessage={'Token URL should not be empty'\n                                                    + ' or formatted incorrectly'}\n                                                />\n                                            ) : (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                            + 'EndpointSecurity.tokenUrl.message'}\n                                                    defaultMessage='Enter Token URL'\n                                                />\n                                            )\n                                        }\n                                        variant='outlined'\n                                        id='auth-tokenUrl'\n                                        label={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                                + 'EndpointSecurity.token.url.input'}\n                                                defaultMessage='Token URL'\n                                            />\n                                        )}\n                                        onChange={(event) => setEndpointSecurityInfo(\n                                            { ...endpointSecurityInfo, tokenUrl: event.target.value },\n                                        )}\n                                        value={endpointSecurityInfo.tokenUrl}\n                                        onBlur={() => validateAndUpdateSecurityInfo('tokenUrl')}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={6}>\n                                    <TextField\n                                        disabled={isRestricted(['apim:api_create'], api)}\n                                        required\n                                        fullWidth\n                                        error={securityValidity && securityValidity.clientId === false}\n                                        helperText={\n                                            securityValidity && securityValidity.clientId === false ? (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                            + 'EndpointSecurity.no.clientId.error'}\n                                                    defaultMessage='Client ID should not be empty'\n                                                />\n                                            ) : (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                                    + 'EndpointSecurity.clientId.message'}\n                                                    defaultMessage='Enter Client ID'\n                                                />\n                                            )\n                                        }\n                                        variant='outlined'\n                                        id='auth-clientId'\n                                        label={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                                + 'EndpointSecurity.clientId.input'}\n                                                defaultMessage='Client ID'\n                                            />\n                                        )}\n                                        onChange={(event) => setEndpointSecurityInfo(\n                                            { ...endpointSecurityInfo, clientId: event.target.value },\n                                        )}\n                                        value={endpointSecurityInfo.clientId}\n                                        onBlur={() => validateAndUpdateSecurityInfo('clientId')}\n                                        InputProps={{\n                                            autoComplete: 'new-password',\n                                        }}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={6}>\n                                    <TextField\n                                        disabled={isRestricted(['apim:api_create'], api)}\n                                        required\n                                        fullWidth\n                                        error={securityValidity && securityValidity.clientSecret === false}\n                                        helperText={\n                                            securityValidity && securityValidity.clientSecret === false ? (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                            + 'EndpointSecurity.no.clientSecret.error'}\n                                                    defaultMessage='Client Secret should not be empty'\n                                                />\n                                            ) : (\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                            + 'EndpointSecurity.clientSecret.message'}\n                                                    defaultMessage='Enter Client Secret'\n                                                />\n                                            )\n                                        }\n                                        variant='outlined'\n                                        id='auth-clientSecret'\n                                        type={clientSecretIsMasked ? 'password' : 'text'}\n                                        label={(\n                                            <FormattedMessage\n                                                id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                                + 'EndpointSecurity.clientSecret.input'}\n                                                defaultMessage='Client Secret'\n                                            />\n                                        )}\n                                        onChange={(event) => setEndpointSecurityInfo(\n                                            { ...endpointSecurityInfo, clientSecret: event.target.value },\n                                        )}\n                                        value={endpointSecurityInfo.clientSecret}\n                                        onBlur={() => validateAndUpdateSecurityInfo('clientSecret')}\n                                        InputProps={{\n                                            autoComplete: 'new-password',\n                                            endAdornment: (\n                                                <InputAdornment position='end'>\n                                                    <RemoveRedEye\n                                                        className={classes.eye}\n                                                        onClick={toggleClientSecretMask}\n                                                    />\n                                                </InputAdornment>\n                                            ),\n                                        }}\n                                    />\n                                </Grid>\n                            </>\n                        )}\n                    </>\n                )}\n\n            {(endpointSecurityInfo.type === 'BASIC'\n                || endpointSecurityInfo.type === 'DIGEST'\n                || endpointSecurityInfo.grantType === 'PASSWORD') && (\n                <>\n                    <Grid item xs={6}>\n                        <TextField\n                            disabled={isRestricted(['apim:api_create'], api)}\n                            required\n                            fullWidth\n                            error={securityValidity && securityValidity.username === false}\n                            helperText={\n                                securityValidity && securityValidity.username === false ? (\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                        + 'EndpointSecurity.no.username.error'}\n                                        defaultMessage='Username should not be empty'\n                                    />\n                                ) : (\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                        + 'EndpointSecurity.username.message'}\n                                        defaultMessage='Enter Username'\n                                    />\n                                )\n                            }\n                            variant='outlined'\n                            id='auth-userName'\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.user.name.input'\n                                    defaultMessage='Username'\n                                />\n                            )}\n                            onChange={(event) => setEndpointSecurityInfo(\n                                { ...endpointSecurityInfo, username: event.target.value },\n                            )}\n                            value={endpointSecurityInfo.username}\n                            onBlur={() => validateAndUpdateSecurityInfo('username')}\n                        />\n                    </Grid>\n\n                    <Grid item xs={6}>\n                        <TextField\n                            disabled={isRestricted(['apim:api_create'], api)}\n                            required\n                            fullWidth\n                            error={securityValidity && securityValidity.password === false}\n                            helperText={\n                                securityValidity && securityValidity.password === false ? (\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                        + 'EndpointSecurity.no.password.error'}\n                                        defaultMessage='Password should not be empty'\n                                    />\n                                ) : (\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration.'\n                                        + 'EndpointSecurity.password.message'}\n                                        defaultMessage='Enter Password'\n                                    />\n                                )\n                            }\n                            variant='outlined'\n                            type='password'\n                            id='auth-password'\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.password.input'\n                                    defaultMessage='Password'\n                                />\n                            )}\n                            value={endpointSecurityInfo.password}\n                            onChange={(event) => setEndpointSecurityInfo(\n                                { ...endpointSecurityInfo, password: event.target.value },\n                            )}\n                            onBlur={() => validateAndUpdateSecurityInfo('password')}\n                            InputProps={{\n                                autoComplete: 'new-password',\n                            }}\n                        />\n                    </Grid>\n                </>\n            )}\n\n            {endpointSecurityInfo.type === 'OAUTH' && (endpointSecurityInfo.grantType === 'CLIENT_CREDENTIALS'\n            || endpointSecurityInfo.grantType === 'PASSWORD')\n            && (\n                <Grid item xs={12}>\n                    <ListItem\n                        className={classes.listItem}\n                    >\n                        <ListItemAvatar>\n                            <Icon color='primary'>info</Icon>\n                        </ListItemAvatar>\n                        <ListItemText>\n                            <FormattedMessage\n                                id='Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.add.new.parameter.info'\n                                defaultMessage={'You can add any additional payload parameters'\n                                + ' required for the endpoint below'}\n                            />\n                        </ListItemText>\n                    </ListItem>\n                    <Button\n                        size='medium'\n                        className={classes.button}\n                        onClick={toggleAddParameter}\n                        disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                    >\n                        <AddCircle className={classes.buttonIcon} />\n                        <FormattedMessage\n                            id='Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurity.add.new.parameter'\n                            defaultMessage='Add New Parameter'\n                        />\n                    </Button>\n                </Grid>\n            )}\n\n            <Grid item xs={12} />\n\n            {(endpointSecurityInfo.type === 'OAUTH')\n            && (!isEmpty(endpointSecurityInfo.customParameters) || showAddParameter) && (\n                <Grid item xs={12}>\n                    <Table className={classes.table}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration'\n                                            + '.EndpointSecurity.label.parameter.name'}\n                                        defaultMessage='Parameter Name'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Endpoints.GeneralConfiguration'\n                                            + '.EndpointSecurity.label.parameter.value'}\n                                        defaultMessage='Parameter Value'\n                                    />\n                                </TableCell>\n                                <TableCell />\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {showAddParameter\n                            && (\n                                <>\n                                    <TableRow>\n                                        <TableCell>\n                                            <TextField\n                                                fullWidth\n                                                required\n                                                id='outlined-required'\n                                                label={intl.formatMessage({\n                                                    id: 'Apis.Details.Endpoints.GeneralConfiguration'\n                                                    + '.EndpointSecurity.input.parameter.name',\n                                                    defaultMessage: 'Parameter Name',\n                                                })}\n                                                margin='normal'\n                                                variant='outlined'\n                                                className={classes.addParameter}\n                                                value={parameterName === null ? '' : parameterName}\n                                                onChange={handleParameterChange('parameterName')}\n                                                onKeyDown={handleKeyDown('parameterName')}\n                                                helperText={validateEmpty(parameterName)\n                                                    ? 'Invalid parameter name' : ''}\n                                                error={validateEmpty(parameterName)}\n                                                disabled={isRestricted(\n                                                    ['apim:api_create', 'apim:api_publish'],\n                                                    api,\n                                                )}\n                                            />\n                                        </TableCell>\n                                        <TableCell>\n                                            <TextField\n                                                fullWidth\n                                                required\n                                                id='outlined-required'\n                                                label={intl.formatMessage({\n                                                    id: 'Apis.Details.Endpoints.GeneralConfiguration'\n                                                        + '.EndpointSecurity.input.parameter.value',\n                                                    defaultMessage: 'Parameter Value',\n                                                })}\n                                                margin='normal'\n                                                variant='outlined'\n                                                className={classes.addParameter}\n                                                value={parameterValue === null ? '' : parameterValue}\n                                                onChange={handleParameterChange('parameterValue')}\n                                                onKeyDown={handleKeyDown('parameterValue')}\n                                                error={validateEmpty(parameterValue)}\n                                                disabled={isRestricted(\n                                                    ['apim:api_create', 'apim:api_publish'],\n                                                    api,\n                                                )}\n                                            />\n                                        </TableCell>\n                                        <TableCell align='right'>\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                disabled={\n                                                    !parameterValue\n                                                            || !parameterName\n                                                            || isRestricted(\n                                                                ['apim:api_create', 'apim:api_publish'], api,\n                                                            )\n                                                }\n                                                onClick={handleAddToList}\n                                                className={classes.marginRight}\n                                            >\n                                                <FormattedMessage\n                                                    id='Apis.Details.Properties.Properties.add'\n                                                    defaultMessage='Add'\n                                                />\n                                            </Button>\n\n                                            <Button onClick={toggleAddParameter}>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Properties.Properties.cancel'\n                                                    defaultMessage='Cancel'\n                                                />\n                                            </Button>\n                                        </TableCell>\n                                    </TableRow>\n                                </>\n                            )}\n                            {((endpointType === 'production') || (endpointType === 'sandbox')) && (\n                                renderCustomParameters()\n                            )}\n                        </TableBody>\n                    </Table>\n                </Grid>\n            )}\n            <Grid className={classes.advanceDialogActions}>\n                <Button\n                    onClick={() => saveEndpointSecurityConfig(endpointSecurityInfo, endpointType)}\n                    color='primary'\n                    autoFocus\n                    variant='contained'\n                    style={{ marginTop: '10px', marginRight: '10px', marginBottom: '10px' }}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurityConfig.config.save.button'\n                        defaultMessage='Submit'\n                    />\n                </Button>\n                <Button\n                    onClick={closeEndpointSecurityConfig}\n                    style={{ marginTop: '10px', marginBottom: '10px' }}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.Endpoints.GeneralConfiguration.EndpointSecurityConfig.cancel.button'\n                        defaultMessage='Close'\n                    />\n                </Button>\n            </Grid>\n        </Grid>\n    );\n}\n\nEndpointSecurity.propTypes = {\n    intl: PropTypes.shape({}).isRequired,\n    securityInfo: PropTypes.shape({}).isRequired,\n    onChangeEndpointAuth: PropTypes.func.isRequired,\n};\n\nexport default withStyles(styles)(injectIntl(EndpointSecurity));\n","/* eslint-disable react/jsx-no-bind */\n/**\n * Copyright (c)  WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport React, { useState } from 'react';\nimport { injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport EditIcon from '@material-ui/icons/Edit';\nimport SaveIcon from '@material-ui/icons/Save';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport IconButton from '@material-ui/core/IconButton';\n\nconst useStyles = makeStyles(() => ({\n    link: {\n        cursor: 'pointer',\n    },\n}));\n\n/**\n * EditableParameterRow for OAuth Endpoint Security\n * @param {*} props properties\n * @returns {*} EditableParameterRow component\n */\nfunction EditableParameterRow(props) {\n    const {\n        oldName, oldValue,\n        handleUpdateList, handleDelete,\n        intl, isRestricted, api,\n    } = props;\n    const [newName, setName] = useState(oldName);\n    const [newValue, setValue] = useState(oldValue);\n    const [editMode, setEditMode] = useState(false);\n\n    /**\n     * Set edit mode\n     */\n    const updateEditMode = () => {\n        setEditMode(!editMode);\n    };\n\n    /**\n     * Update name field\n     * @param {*} event value entered for name field\n     */\n    const handleKeyChange = (event) => {\n        const { value } = event.target;\n        setName(value);\n    };\n\n    /**\n     * Update value field\n     * @param {*} event value entered for the value field\n     */\n    const handleValueChange = (event) => {\n        const { value } = event.target;\n        setValue(value);\n    };\n\n    /**\n     * Validate if the field is empty\n     * @param {*} itemValue value of the field\n     * @returns {*} boolean value\n     */\n    const validateEmpty = (itemValue) => {\n        if (itemValue === null) {\n            return false;\n        } else if (itemValue === '') {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    /**\n     * Save the updated values in the custom parameters object\n     */\n    const saveRow = () => {\n        const oldRow = { oldName, oldValue };\n        const newRow = { newName: newName || oldName, newValue: newValue || oldValue };\n        handleUpdateList(oldRow, newRow);\n        setEditMode(false);\n    };\n\n    /**\n     * Delete name-value pair in the custom parameters object\n     */\n    const deleteRow = () => {\n        handleDelete(oldName);\n    };\n\n    /**\n     * Keyboard event listener to save the name-value pair on Enter\n     * @param {*} e event containing the key that was pressed\n     */\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            saveRow();\n        }\n    };\n\n    // Styles definition\n    const classes = useStyles();\n\n    return (\n        <TableRow>\n            {editMode ? (\n                <TableCell>\n                    <TextField\n                        fullWidth\n                        required\n                        id='outlined-required'\n                        label={intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.GeneralConfiguration.EditableParameterRow.Parameter.Name',\n                            defaultMessage: 'Parameter Name',\n                        })}\n                        margin='normal'\n                        variant='outlined'\n                        className={classes.addProperty}\n                        value={newName}\n                        onChange={handleKeyChange}\n                        onKeyDown={handleKeyDown}\n                        error={validateEmpty(newName)}\n                    />\n                </TableCell>\n            ) : (\n                <TableCell>{oldName}</TableCell>\n            )}\n            {editMode ? (\n                <TableCell>\n                    <TextField\n                        fullWidth\n                        required\n                        id='outlined-required'\n                        label={intl.formatMessage({\n                            id: 'Apis.Details.Endpoints.GeneralConfiguration.EditableParameterRow.Parameter.Value',\n                            defaultMessage: 'Parameter Value',\n                        })}\n                        margin='normal'\n                        variant='outlined'\n                        className={classes.addProperty}\n                        value={newValue}\n                        onChange={handleValueChange}\n                        onKeyDown={handleKeyDown}\n                        error={validateEmpty(newValue)}\n                    />\n                </TableCell>\n            ) : (\n                <TableCell>{oldValue}</TableCell>\n            )}\n            <TableCell align='right'>\n                {editMode ? (\n                    <>\n                        <IconButton\n                            className={classes.link}\n                            aria-label='save'\n                            onClick={saveRow}\n                            onKeyDown={() => {}}\n                            disabled={validateEmpty(newName) || validateEmpty(newValue)}\n                            color='inherit'\n                        >\n                            <SaveIcon className={classes.buttonIcon} />\n                        </IconButton>\n                    </>\n                ) : (\n                    <IconButton\n                        className={classes.link}\n                        aria-label='edit'\n                        onClick={updateEditMode}\n                        onKeyDown={() => {}}\n                        color='inherit'\n                        disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                    >\n                        <EditIcon className={classes.buttonIcon} />\n                    </IconButton>\n                )}\n                <IconButton\n                    className={classes.link}\n                    aria-label='remove'\n                    onClick={deleteRow}\n                    onKeyDown={() => {}}\n                    color='inherit'\n                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                >\n                    <DeleteForeverIcon className={classes.buttonIcon} />\n                </IconButton>\n            </TableCell>\n        </TableRow>\n    );\n}\n\nEditableParameterRow.propTypes = {\n    oldName: PropTypes.string.isRequired,\n    oldValue: PropTypes.string.isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    handleUpdateList: PropTypes.func.isRequired,\n    handleDelete: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(EditableParameterRow);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n    Grid,\n    TextField,\n    makeStyles,\n    Typography,\n    Tooltip,\n    RadioGroup,\n    FormControl,\n    FormControlLabel,\n    MenuItem,\n    InputLabel,\n    Select,\n    Radio,\n} from '@material-ui/core';\nimport Icon from '@material-ui/core/Icon';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport { FormattedMessage } from 'react-intl';\nimport { Link } from 'react-router-dom';\nimport API from 'AppData/api';\nimport Configurations from 'Config';\nimport Banner from 'AppComponents/Shared/Banner';\n\nconst useStyles = makeStyles((theme) => ({\n    typography: {\n        display: 'inline-block',\n    },\n    textField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 300,\n    },\n    selectField: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        width: 300,\n    },\n    helpIcon: {\n        fontSize: 20,\n    },\n    banner: {\n        marginLeft: theme.spacing(1),\n        marginRight: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n}));\n\n/**\n * The credentials component. This component holds the access and secret key pair.\n * @param {any} props The parameters to credentials component.\n * @returns {any} HTML view of the credentials component.\n */\nexport default function Credentials(props) {\n    const {\n        apiId,\n        endpointConfig,\n        endpointsDispatcher,\n    } = props;\n    const classes = useStyles();\n    const [pageError, setPageError] = useState(null);\n    const inputLabel = useRef(null);\n    const handleChange = (event) => {\n        const newEndpointConfig = { ...endpointConfig };\n        newEndpointConfig.access_method = event.target.value;\n        newEndpointConfig.amznAccessKey = '';\n        newEndpointConfig.amznSecretKey = '';\n        newEndpointConfig.amznRegion = '';\n        endpointsDispatcher({ action: 'set_awsCredentials', value: newEndpointConfig });\n        setPageError(null);\n    };\n    const { regions } = Configurations.apis.endpoint.aws;\n    useEffect(() => {\n        API.getAmznResourceNames(apiId)\n            .catch((error) => {\n                setPageError(error.response.body.error);\n            });\n    }, []);\n    return (\n        <>\n            <Typography className={classes.typography}>\n                <FormattedMessage\n                    id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                    + '.endpoint.accessMethod'}\n                    defaultMessage='Access Method'\n                />\n            </Typography>\n            <RadioGroup\n                aria-label='accessMethod'\n                name='accessMethod'\n                value={endpointConfig.access_method}\n                onChange={handleChange}\n            >\n                <div>\n                    <FormControlLabel\n                        value='role-supplied'\n                        control={<Radio color='primary' />}\n                        label={\n                            (\n                                <FormattedMessage\n                                    id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                                    + '.endpoint.accessMethod.roleSupplied'}\n                                    defaultMessage='Using IAM role-supplied temporary AWS credentials'\n                                />\n                            )\n                        }\n                    />\n                    <Tooltip\n                        title={\n                            (\n                                <FormattedMessage\n                                    id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                                    + '.endpoint.tooltip'}\n                                    defaultMessage={'You can and should use an IAM role to manage temporary '\n                                    + 'credentials for applications that run on an EC2 instance'}\n                                />\n                            )\n                        }\n                    >\n                        <Icon className={classes.helpIcon}>help_outline</Icon>\n                    </Tooltip>\n                </div>\n                <div>\n                    <FormControlLabel\n                        value='stored'\n                        control={<Radio color='primary' />}\n                        label={\n                            (\n                                <FormattedMessage\n                                    id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                                    + '.endpoint.accessMethod.stored'}\n                                    defaultMessage='Using stored AWS credentials'\n                                />\n                            )\n                        }\n                    />\n                </div>\n            </RadioGroup>\n            <Grid item>\n                <TextField\n                    required\n                    disabled={endpointConfig.access_method === 'role-supplied'}\n                    id='outlined-required'\n                    label={\n                        (\n                            <FormattedMessage\n                                id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                                + '.endpoint.accessKey'}\n                                defaultMessage='Access Key'\n                            />\n                        )\n                    }\n                    margin='normal'\n                    variant='outlined'\n                    className={classes.textField}\n                    value={endpointConfig.amznAccessKey}\n                    onChange={(event) => {\n                        const newEndpointConfig = { ...endpointConfig };\n                        newEndpointConfig.amznAccessKey = event.target.value;\n                        endpointsDispatcher({ action: 'set_awsCredentials', value: newEndpointConfig });\n                    }}\n                />\n                <TextField\n                    required\n                    disabled={endpointConfig.access_method === 'role-supplied'}\n                    id='outlined-password-input-required'\n                    label={\n                        (\n                            <FormattedMessage\n                                id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                                + '.endpoint.secretKey'}\n                                defaultMessage='Secret Key'\n                            />\n                        )\n                    }\n                    type='password'\n                    margin='normal'\n                    variant='outlined'\n                    className={classes.textField}\n                    value={endpointConfig.amznSecretKey}\n                    onChange={(event) => {\n                        const newEndpointConfig = { ...endpointConfig };\n                        newEndpointConfig.amznSecretKey = event.target.value;\n                        endpointsDispatcher({ action: 'set_awsCredentials', value: newEndpointConfig });\n                    }}\n                />\n                <FormControl\n                    required\n                    margin='normal'\n                    variant='outlined'\n                    disabled={endpointConfig.access_method === 'role-supplied'}\n                >\n                    <InputLabel ref={inputLabel}>\n                        <FormattedMessage\n                            id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                            + '.endpoint.region'}\n                            defaultMessage='Region'\n                        />\n                    </InputLabel>\n                    <Select\n                        labelId='region-label'\n                        autoWidth={false}\n                        className={classes.selectField}\n                        onChange={(event) => {\n                            const newEndpointConfig = { ...endpointConfig };\n                            newEndpointConfig.amznRegion = event.target.value;\n                            endpointsDispatcher({ action: 'set_awsCredentials', value: newEndpointConfig });\n                        }}\n                        value={endpointConfig.amznRegion}\n                        MenuProps={{\n                            anchorOrigin: {\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            },\n                            getContentAnchorEl: null,\n                            keepMounted: true,\n                            PaperProps: {\n                                style: {\n                                    maxHeight: 300,\n                                },\n                            },\n                        }}\n                    >\n                        {Object.entries(regions).map(([key, value]) => ((\n                            <MenuItem key={key} value={key}>\n                                {value}\n                            </MenuItem>\n                        )))}\n                    </Select>\n                </FormControl>\n            </Grid>\n            <Grid item>\n                <Link to={`/apis/${apiId}/resources`}>\n                    <Typography style={{ marginLeft: '10px' }} color='primary' display='inline' variant='caption'>\n                        <FormattedMessage\n                            id={'Apis.Details.Endpoints.EndpointOverview.awslambda'\n                            + '.endpoint.linkToResources'}\n                            defaultMessage='Go to Resources to map ARNs'\n                        />\n                        <LaunchIcon style={{ marginLeft: '2px' }} fontSize='small' />\n                    </Typography>\n                </Link>\n            </Grid>\n            {pageError\n                && (\n                    <Grid item className={classes.banner}>\n                        <Banner\n                            disableActions\n                            dense\n                            paperProps={{ elevation: 1 }}\n                            type='warning'\n                            message={pageError}\n                        />\n                    </Grid>\n                )}\n        </>\n    );\n}\n\nCredentials.propTypes = {\n    apiId: PropTypes.shape('').isRequired,\n    endpointConfig: PropTypes.shape({}).isRequired,\n    endpointsDispatcher: PropTypes.func.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext, useState } from 'react';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\nimport 'react-tagsinput/react-tagsinput.css';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { useHistory } from 'react-router-dom';\nimport Typography from '@material-ui/core/Typography';\nimport { isRestricted } from 'AppData/AuthManager';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Popover from '@material-ui/core/Popover';\nimport moment from 'moment';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport clsx from 'clsx';\nimport TableRow from '@material-ui/core/TableRow';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Chip from '@material-ui/core/Chip';\nimport { makeStyles } from '@material-ui/core/styles';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport Configurations from 'Config';\nimport Card from '@material-ui/core/Card';\nimport AddIcon from '@material-ui/icons/Add';\nimport CardContent from '@material-ui/core/CardContent';\nimport IconButton from '@material-ui/core/IconButton';\nimport APIProduct from 'AppData/APIProduct';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport TextField from '@material-ui/core/TextField';\nimport RestoreIcon from '@material-ui/icons/Restore';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport API from 'AppData/api';\nimport { ConfirmDialog } from 'AppComponents/Shared/index';\nimport { useRevisionContext } from 'AppComponents/Shared/RevisionContext';\nimport Utils from 'AppData/Utils';\nimport DisplayDevportal from './DisplayDevportal';\nimport DeploymentOnbording from './DeploymentOnbording';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    saveButton: {\n        marginTop: theme.spacing(3),\n    },\n    shapeRec: {\n        backgroundColor: 'black',\n        alignSelf: 'center',\n        width: 120,\n        height: 3,\n    },\n    shapeCircaleBack: {\n        backgroundColor: '#E2E2E2',\n        width: 63,\n        height: 63,\n    },\n    shapeInnerComplete: {\n        backgroundColor: '#095677',\n        width: 50,\n        height: 50,\n        marginTop: 6,\n        marginLeft: 6.5,\n        placeSelf: 'middle',\n    },\n    shapeInnerInactive: {\n        backgroundColor: '#BFBFBF',\n        width: 50,\n        height: 50,\n        marginTop: 6,\n        marginLeft: 6,\n        placeSelf: 'middle',\n    },\n    shapeDottedEnd: {\n        backgroundColor: '#BFBFBF',\n        border: '1px dashed #707070',\n        width: 47,\n        height: 47,\n        marginTop: 7,\n        marginLeft: 7,\n        placeSelf: 'middle',\n    },\n    shapeDottedStart: {\n        backgroundColor: '#1CB1BF',\n        border: '2px solid #ffffff',\n        width: 47,\n        height: 47,\n        marginTop: 6,\n        marginLeft: 6,\n        placeSelf: 'middle',\n    },\n    plusIconStyle: {\n        marginTop: 8,\n        marginLeft: 8,\n    },\n    shapeDottedStart1: {\n        backgroundColor: '#1CB1BF',\n        width: 50,\n        height: 50,\n        marginTop: 6,\n        marginLeft: 6.5,\n        placeSelf: 'middle',\n    },\n    textShape: {\n        marginTop: 5.5,\n        marginLeft: 6.5,\n    },\n    textShape2: {\n        marginTop: 8,\n        marginLeft: 115,\n        height: '18px',\n        fontFamily: 'sans-serif',\n    },\n    textPadding: {\n        height: '25px',\n        paddingBottom: '2px',\n    },\n    textDelete: {\n        marginTop: 8,\n        marginLeft: 120,\n        fontFamily: 'sans-serif',\n        fontSize: 'small',\n    },\n    textShape3: {\n        color: '#38536c',\n        marginLeft: 70,\n    },\n    textShape7: {\n        color: '#38536c',\n    },\n    primaryEndpoint: {\n        color: '#006E9C',\n    },\n    secondaryEndpoint: {\n        color: '#415A85',\n    },\n    textShape4: {\n        marginTop: 55,\n    },\n    textShape8: {\n        marginTop: 80,\n    },\n    textShape5: {\n        marginTop: 10,\n        marginLeft: 85,\n        marginBottom: 10,\n    },\n    textShape6: {\n        color: '#1B3A57',\n    },\n    button1: {\n        color: '#1B3A57',\n        marginLeft: 7,\n    },\n    button2: {\n        color: '#1B3A57',\n        marginLeft: 7,\n        marginTop: 10,\n    },\n    shapeRecBack: {\n        backgroundColor: 'black',\n        alignSelf: 'center',\n        width: 40,\n        height: 3,\n    },\n    shapeCircle: {\n        borderRadius: '50%',\n    },\n    shapeCircleBlack: {\n        backgroundColor: '#000000',\n        alignSelf: 'center',\n        paddingLeft: '15px',\n        width: 15,\n        height: 15,\n    },\n    changeCard: {\n        boxShadow: 15,\n        borderRadius: '10px',\n        backgroundColor: theme.palette.secondary.highlight,\n    },\n    noChangeCard: {\n        boxShadow: 15,\n        borderRadius: '10px',\n    },\n    cardHeight: {\n        boxShadow: 1,\n        height: '90%',\n    },\n    cardContentHeight: {\n        boxShadow: 1,\n        height: '50%',\n    },\n    cardActionHeight: {\n        boxShadow: 1,\n        height: '25%',\n    },\n    dialogContent: {\n        overflow: 'auto',\n        height: '90%',\n    },\n    textOverlay: {\n        overflow: 'hidden',\n        maxHeight: '100%',\n        maxWidth: '100%',\n        cursor: 'pointer',\n        '&:hover': { overflow: 'visible' },\n    },\n    gridOverflow: {\n        overflow: 'scroll',\n        width: '100%',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 130,\n    },\n    dialogPaper: {\n        width: '800px',\n        height: '500px',\n    },\n    createRevisionDialogStyle: {\n        width: '800px',\n    },\n    sectionTitle: {\n        marginBottom: theme.spacing(2),\n    },\n    deployNewRevButtonStyle: {\n        marginRight: theme.spacing(3),\n        marginBottom: theme.spacing(3),\n        marginTop: theme.spacing(3),\n    },\n    popover: {\n        pointerEvents: 'none',\n    },\n    paper: {\n        padding: theme.spacing(1),\n        maxWidth: '300px',\n    },\n    timePaddingStyle: {\n        marginTop: theme.spacing(1),\n    },\n    labelSpace: {\n        paddingLeft: theme.spacing(1),\n    },\n    labelSpacingDown: {\n        marginBottom: theme.spacing(2),\n    },\n    warningText: {\n        color: '#ff0000',\n    },\n    tableCellVhostSelect: {\n        paddingTop: theme.spacing(0),\n        paddingBottom: theme.spacing(0),\n    },\n    vhostSelect: {\n        marginTop: theme.spacing(3),\n    },\n    textCount: {\n        marginTop: theme.spacing(-2.5),\n    },\n    containerInline: {\n        display: 'inline-flex',\n    },\n    containerOverflow: {\n        display: 'grid',\n        gridGap: '16px',\n        paddingLeft: '48px',\n        gridTemplateColumns: 'repeat(auto-fill,minmax(160px,1fr))',\n        gridAutoFlow: 'column',\n        gridAutoColumns: 'minmax(160px,1fr)',\n        overflowX: 'auto',\n    },\n}));\n\n/**\n * Renders an Environments list\n * @class Environments\n * @extends {React.Component}\n */\nexport default function Environments() {\n    const classes = useStyles();\n    const maxCommentLength = '255';\n    const intl = useIntl();\n    const { api } = useContext(APIContext);\n    const history = useHistory();\n    const { settings } = useAppContext();\n    const {\n        allRevisions, getRevision, allEnvRevision, getDeployedEnv,\n    } = useRevisionContext();\n    let revisionCount;\n    if (Configurations.app.revisionCount) {\n        revisionCount = Configurations.app.revisionCount;\n    } else {\n        revisionCount = 5;\n    }\n    const restApi = new API();\n    const restProductApi = new APIProduct();\n    const [selectedRevision, setRevision] = useState([]);\n    const defaultVhosts = settings.environment.map(\n        (e) => (e.vhosts && e.vhosts.length > 0 ? { env: e.name, vhost: e.vhosts[0].host } : undefined),\n    );\n    const [selectedVhosts, setVhosts] = useState(defaultVhosts);\n    const [selectedVhostDeploy, setVhostsDeploy] = useState(defaultVhosts);\n    const [extraRevisionToDelete, setExtraRevisionToDelete] = useState(null);\n    const [description, setDescription] = useState('');\n    const [SelectedEnvironment, setSelectedEnvironment] = useState([]);\n    const [open, setOpen] = useState(false);\n    const [confirmDeleteOpen, setConfirmDeleteOpen] = useState(false);\n    const [revisionToDelete, setRevisionToDelete] = useState([]);\n    const [confirmRestoreOpen, setConfirmRestoreOpen] = useState(false);\n    const [revisionToRestore, setRevisionToRestore] = useState([]);\n    const [currentLength, setCurrentLength] = useState(0);\n    const [openDeployPopup, setOpenDeployPopup] = useState(history.location.state === 'deploy');\n\n    // allEnvDeployments represents all deployments of the API with mapping\n    // environment -> {revision deployed to env, vhost deployed to env with revision}\n    const allEnvDeployments = Utils.getAllEnvironmentDeployments(settings.environment, allEnvRevision);\n\n    const toggleOpenConfirmDelete = (revisionName, revisionId) => {\n        setRevisionToDelete([revisionName, revisionId]);\n        setConfirmDeleteOpen(!confirmDeleteOpen);\n    };\n\n    const toggleOpenConfirmRestore = (revisionName, revisionId) => {\n        setRevisionToRestore([revisionName, revisionId]);\n        setConfirmRestoreOpen(!confirmRestoreOpen);\n    };\n\n    const toggleDeployRevisionPopup = () => {\n        setOpenDeployPopup(!openDeployPopup);\n    };\n\n    const handleCloseDeployPopup = () => {\n        history.replace();\n        setOpenDeployPopup(false);\n        setExtraRevisionToDelete(null);\n    };\n\n    const handleClickOpen = () => {\n        if (!isRestricted(['apim:api_create', 'apim:api_publish'], api)) {\n            setOpen(true);\n        }\n    };\n\n    const handleDeleteSelect = (event) => {\n        setExtraRevisionToDelete([event.target.value, event.target.name]);\n    };\n\n    const handleSelect = (event) => {\n        const revisions = selectedRevision.filter((r) => r.env !== event.target.name);\n        const oldRevision = selectedRevision.find((r) => r.env === event.target.name);\n        let displayOnDevPortal = true;\n        if (oldRevision) {\n            displayOnDevPortal = oldRevision.displayOnDevPortal;\n        }\n        revisions.push({ env: event.target.name, revision: event.target.value, displayOnDevPortal });\n        setRevision(revisions);\n    };\n\n    const handleVhostSelect = (event) => {\n        const vhosts = selectedVhosts.filter((v) => v.env !== event.target.name);\n        vhosts.push({ env: event.target.name, vhost: event.target.value });\n        setVhosts(vhosts);\n    };\n\n    const handleVhostDeploySelect = (event) => {\n        const vhosts = selectedVhostDeploy.filter((v) => v.env !== event.target.name);\n        vhosts.push({ env: event.target.name, vhost: event.target.value });\n        setVhostsDeploy(vhosts);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n        setExtraRevisionToDelete(null);\n    };\n\n    const handleChange = (event) => {\n        if (event.target.checked) {\n            setSelectedEnvironment([...SelectedEnvironment, event.target.value]);\n        } else {\n            setSelectedEnvironment(\n                SelectedEnvironment.filter((env) => env !== event.target.value),\n            );\n        }\n        if (event.target.name === 'description') {\n            setDescription(event.target.value);\n            setCurrentLength(event.target.value.length);\n        }\n    };\n\n    /**\n     * Handles deleting a revision\n     * @param {Object} revisionId the revision Id\n     * @returns {Object} promised delete\n     */\n    function deleteRevision(revisionId) {\n        let promiseDelete;\n        if (api.apiType === API.CONSTS.APIProduct) {\n            promiseDelete = restProductApi.deleteProductRevision(api.id, revisionId)\n                .then(() => {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Revision Deleted Successfully',\n                        id: 'Apis.Details.Environments.Environments.revision.delete.success',\n                    }));\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error(intl.formatMessage({\n                            defaultMessage: 'Something went wrong while deleting the revision',\n                            id: 'Apis.Details.Environments.Environments.revision.delete.error',\n                        }));\n                    }\n                }).finally(() => {\n                    history.replace();\n                    getRevision();\n                });\n        } else {\n            promiseDelete = restApi.deleteRevision(api.id, revisionId)\n                .then(() => {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Revision Deleted Successfully',\n                        id: 'Apis.Details.Environments.Environments.revision.delete.success',\n                    }));\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error(intl.formatMessage({\n                            defaultMessage: 'Something went wrong while deleting the revision',\n                            id: 'Apis.Details.Environments.Environments.revision.delete.error',\n                        }));\n                    }\n                }).finally(() => {\n                    history.replace();\n                    getRevision();\n                });\n        }\n        return promiseDelete;\n    }\n\n    /**\n     * Handles creating a new revision\n     * @param {Object} body the request body\n     * @returns {Object} promised create\n     */\n    function createRevision(body) {\n        if (api.apiType === API.CONSTS.APIProduct) {\n            restProductApi.createProductRevision(api.id, body)\n                .then(() => {\n                    Alert.info('Revision Created Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while creating the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                });\n        } else {\n            api.createRevision(api.id, body)\n                .then(() => {\n                    Alert.info('Revision Created Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while creating the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                });\n        }\n    }\n\n    /**\n      * Handles adding a new revision\n      * @memberof Revisions\n      */\n    function handleClickAddRevision() {\n        const body = {\n            description,\n        };\n        if (extraRevisionToDelete) {\n            deleteRevision(extraRevisionToDelete[0])\n                .then(() => {\n                    createRevision(body);\n                }).finally(() => setExtraRevisionToDelete(null));\n        } else {\n            createRevision(body);\n        }\n        setOpen(false);\n        setDescription('');\n        setExtraRevisionToDelete(null);\n    }\n\n    const runActionDelete = (confirm, revisionId) => {\n        if (confirm) {\n            deleteRevision(revisionId);\n        }\n        setConfirmDeleteOpen(!confirmDeleteOpen);\n        setRevisionToDelete([]);\n    };\n\n    /**\n      * Handles restore revision\n      * @memberof Revisions\n      */\n    function restoreRevision(revisionId) {\n        if (api.apiType !== API.CONSTS.APIProduct) {\n            restApi.restoreRevision(api.id, revisionId)\n                .then(() => {\n                    Alert.info('Revision Restored Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while restoring the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                    getDeployedEnv();\n                });\n        } else {\n            restProductApi.restoreProductRevision(api.id, revisionId)\n                .then(() => {\n                    Alert.info('Revision Restored Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while restoring the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                    getDeployedEnv();\n                });\n        }\n    }\n\n    const runActionRestore = (confirm, revisionId) => {\n        if (confirm) {\n            restoreRevision(revisionId);\n        }\n        setConfirmRestoreOpen(!confirmRestoreOpen);\n        setRevisionToRestore([]);\n    };\n\n    /**\n      * Handles undeploy a revision\n      * @memberof Revisions\n      */\n    function undeployRevision(revisionId, envName) {\n        const body = [{\n            name: envName,\n            displayOnDevportal: false,\n        }];\n        if (api.apiType !== API.CONSTS.APIProduct) {\n            restApi.undeployRevision(api.id, revisionId, body)\n                .then(() => {\n                    Alert.info('Revision Undeployed Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while undeploying the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                    getDeployedEnv();\n                });\n        } else {\n            restProductApi.undeployProductRevision(api.id, revisionId, body)\n                .then(() => {\n                    Alert.info('Revision Undeployed Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while undeploying the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                    getDeployedEnv();\n                });\n        }\n    }\n\n    /**\n      * Handles deploy a revision\n      * @memberof Revisions\n      */\n    function deployRevision(revisionId, envName, vhost, displayOnDevportal) {\n        const body = [{\n            name: envName,\n            displayOnDevportal,\n            vhost,\n        }];\n        if (api.apiType !== API.CONSTS.APIProduct) {\n            restApi.deployRevision(api.id, revisionId, body)\n                .then(() => {\n                    Alert.info('Deploy revision Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while deploy the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                    getDeployedEnv();\n                });\n        } else {\n            restProductApi.deployProductRevision(api.id, revisionId, body)\n                .then(() => {\n                    Alert.info('Deploy revision Successfully');\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while deploy the revision');\n                    }\n                    console.error(error);\n                }).finally(() => {\n                    getRevision();\n                    getDeployedEnv();\n                });\n        }\n    }\n\n    /**\n      * Handles adding a new revision and deploy\n      * @memberof Revisions\n      */\n    function createDeployRevision(envList, vhostList) {\n        const body = {\n            description,\n        };\n        if (api.apiType !== API.CONSTS.APIProduct) {\n            restApi.createRevision(api.id, body)\n                .then((response) => {\n                    Alert.info('Revision Created Successfully');\n                    const body1 = [];\n                    for (let i = 0; i < envList.length; i++) {\n                        body1.push({\n                            name: envList[i],\n                            vhost: vhostList.find((v) => v.env === envList[i]).vhost,\n                            displayOnDevportal: true,\n                        });\n                    }\n                    restApi.deployRevision(api.id, response.body.id, body1)\n                        .then(() => {\n                            Alert.info('Revision Deployed Successfully');\n                        })\n                        .catch((error) => {\n                            if (error.response) {\n                                Alert.error(error.response.body.description);\n                            } else {\n                                Alert.error('Something went wrong while deploying the revision');\n                            }\n                            console.error(error);\n                        }).finally(() => {\n                            history.replace();\n                            getRevision();\n                            getDeployedEnv();\n                        });\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while creating the revision');\n                    }\n                    console.error(error);\n                });\n            setOpenDeployPopup(false);\n        } else {\n            restProductApi.createProductRevision(api.id, body)\n                .then((response) => {\n                    Alert.info('Revision Created Successfully');\n                    const body1 = [];\n                    for (let i = 0; i < envList.length; i++) {\n                        body1.push({\n                            name: envList[i],\n                            vhost: vhostList.find((v) => v.env === envList[i]).vhost,\n                            displayOnDevportal: true,\n                        });\n                    }\n                    restProductApi.deployProductRevision(api.id, response.body.id, body1)\n                        .then(() => {\n                            Alert.info('Revision Deployed Successfully');\n                        })\n                        .catch((error) => {\n                            if (error.response) {\n                                Alert.error(error.response.body.description);\n                            } else {\n                                Alert.error('Something went wrong while deploying the revision');\n                            }\n                            console.error(error);\n                        }).finally(() => {\n                            history.replace();\n                            getRevision();\n                            getDeployedEnv();\n                        });\n                })\n                .catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error('Something went wrong while creating the revision');\n                    }\n                    console.error(error);\n                });\n            setOpenDeployPopup(false);\n        }\n    }\n\n    /**\n     * Handles creating and deploying a new revision\n     * @param {Object} envList the environment list\n     * @param {Array} vhostList the vhost list\n     * @param {Object} length the length of the list\n     */\n    function handleCreateAndDeployRevision(envList, vhostList) {\n        if (extraRevisionToDelete) {\n            deleteRevision(extraRevisionToDelete[0])\n                .then(() => {\n                    createDeployRevision(envList, vhostList);\n                }).finally(() => {\n                    setExtraRevisionToDelete(null);\n                });\n        } else {\n            createDeployRevision(envList, vhostList);\n        }\n    }\n\n    const confirmDeleteDialog = (\n        <ConfirmDialog\n            key='key-dialog'\n            labelCancel={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.delete.cancel'\n                    defaultMessage='Cancel'\n                />\n            )}\n            title={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.delete.confirm.title'\n                    defaultMessage='Confirm Delete'\n                />\n            )}\n            message={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.delete.confirm.message'\n                    defaultMessage='Are you sure you want to delete {revision} ?'\n                    values={{ revision: revisionToDelete[0] }}\n                />\n            )}\n            labelOk={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.delete.confirm.ok'\n                    defaultMessage='Yes'\n                />\n            )}\n            callback={(e) => runActionDelete(e, revisionToDelete[1])}\n            open={confirmDeleteOpen}\n        />\n    );\n\n    const confirmRestoreDialog = (\n        <ConfirmDialog\n            key='key-dialog-restore'\n            labelCancel={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.restore.cancel'\n                    defaultMessage='Cancel'\n                />\n            )}\n            title={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.restore.confirm.title'\n                    defaultMessage='Confirm Restore'\n                />\n            )}\n            message={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.restore.confirm.message'\n                    defaultMessage='Are you sure you want to restore {revision} (To Current API)?'\n                    values={{ revision: revisionToRestore[0] }}\n                />\n            )}\n            labelOk={(\n                <FormattedMessage\n                    id='Apis.Details.Environments.Environments.revision.restore.confirm.ok'\n                    defaultMessage='Yes'\n                />\n            )}\n            callback={(e) => runActionRestore(e, revisionToRestore[1])}\n            open={confirmRestoreOpen}\n        />\n    );\n\n    let item1;\n    /**\n     * Returns modified item1\n     * @param {*} revDescription The description of the revision\n     * @returns {Object} Returns the item1\n     */\n    function ReturnItem1({ revDescription, revName, revCreatedTime }) {\n        const [anchorEl, setAnchorEl] = useState(null);\n\n        const handlePopoverOpen = (event) => {\n            setAnchorEl(event.currentTarget);\n        };\n\n        const handlePopoverClose = () => {\n            setAnchorEl(null);\n        };\n\n        const openPopover = Boolean(anchorEl);\n        item1 = (\n            <Grid\n                className={classes.containerInline}\n            >\n                <Grid item className={classes.shapeRec} />\n                <Grid item className={clsx(classes.shapeCircaleBack, classes.shapeCircle)}>\n                    <Grid\n                        className={clsx(classes.shapeInnerComplete, classes.shapeCircle)}\n                        onMouseEnter={handlePopoverOpen}\n                        onMouseLeave={handlePopoverClose}\n                    />\n                    <Popover\n                        id='mouse-over-popover'\n                        className={classes.popover}\n                        classes={{\n                            paper: classes.paper,\n\n                        }}\n                        open={openPopover}\n                        anchorEl={anchorEl}\n                        anchorOrigin={{\n                            vertical: 'top',\n                            horizontal: 'right',\n                        }}\n                        transformOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'left',\n                        }}\n                        onClose={handlePopoverClose}\n                        disableRestoreFocus\n                    >\n                        <div>\n                            <Typography variant='body1'>\n                                <b>{revName}</b>\n                            </Typography>\n                            <Typography variant='body2'>\n                                {revDescription}\n                            </Typography>\n                            <div className={classes.timePaddingStyle}>\n                                <Typography variant='caption'>\n                                    <span>{moment(revCreatedTime).fromNow()}</span>\n                                </Typography>\n                            </div>\n                        </div>\n                    </Popover>\n                </Grid>\n                <Grid item className={classes.shapeRecBack} />\n            </Grid>\n        );\n        return item1;\n    }\n    const item2 = (\n        <Grid\n            className={classes.containerInline}\n        >\n            <Grid item className={classes.shapeRec} />\n            <Grid item className={clsx(classes.shapeCircaleBack, classes.shapeCircle)}>\n                <Grid className={clsx(classes.shapeInnerInactive, classes.shapeCircle)} />\n            </Grid>\n            <Grid item className={classes.shapeRecBack} />\n        </Grid>\n    );\n    const item3 = (\n        <Grid\n            className={classes.containerInline}\n        >\n            <Grid item className={classes.shapeRec} />\n            <Grid item className={clsx(classes.shapeCircaleBack, classes.shapeCircle)}>\n                <Grid className={clsx(classes.shapeDottedEnd, classes.shapeCircle)} />\n            </Grid>\n        </Grid>\n    );\n    const item4 = (\n        <Grid\n            className={classes.containerInline}\n        >\n            <Grid item className={classes.shapeRec} />\n            <Grid item className={clsx(classes.shapeCircaleBack, classes.shapeCircle)}>\n                <Grid\n                    onClick={handleClickOpen}\n                    className={clsx(classes.shapeDottedStart, classes.shapeCircle)}\n                    style={{ cursor: 'pointer' }}\n                >\n                    <AddIcon style={{ fontSize: 30 }} className={classes.plusIconStyle} />\n                </Grid>\n            </Grid>\n            <Grid item className={classes.shapeRecBack} />\n        </Grid>\n    );\n    const item5 = (\n        <Grid\n            className={classes.containerInline}\n        >\n            <Grid item className={classes.shapeRec} />\n            <Grid item className={clsx(classes.shapeCircaleBack, classes.shapeCircle)}>\n                <Grid\n                    onClick={handleClickOpen}\n                    className={clsx(classes.shapeDottedStart, classes.shapeCircle)}\n                    style={{ cursor: 'pointer' }}\n                >\n                    <AddIcon style={{ fontSize: 30 }} className={classes.plusIconStyle} />\n                </Grid>\n            </Grid>\n        </Grid>\n    );\n    let item6;\n    /**\n     * Returns modified item6\n     * @param {*} revDescription The description of the revision\n     * @returns {Object} Returns the item6\n     */\n    function ReturnItem6({ revDescription, revName, revCreatedTime }) {\n        const [anchorEl1, setAnchorEl1] = useState(null);\n\n        const handlePopoverOpen = (event) => {\n            setAnchorEl1(event.currentTarget);\n        };\n\n        const handlePopoverClose = () => {\n            setAnchorEl1(null);\n        };\n\n        const openPopover = Boolean(anchorEl1);\n        item6 = (\n            <Grid\n                className={classes.containerInline}\n            >\n                <Grid item className={classes.shapeRec} />\n                <Grid item className={clsx(classes.shapeCircaleBack, classes.shapeCircle)}>\n                    <Grid\n                        className={clsx(classes.shapeDottedStart1, classes.shapeCircle)}\n                        onMouseEnter={handlePopoverOpen}\n                        onMouseLeave={handlePopoverClose}\n                    />\n                    <Popover\n                        id='mouse-over-popover'\n                        className={classes.popover}\n                        classes={{\n                            paper: classes.paper,\n                        }}\n                        open={openPopover}\n                        anchorEl={anchorEl1}\n                        anchorOrigin={{\n                            vertical: 'bottom',\n                            horizontal: 'right',\n                        }}\n                        transformOrigin={{\n                            vertical: 'top',\n                            horizontal: 'left',\n                        }}\n                        onClose={handlePopoverClose}\n                        disableRestoreFocus\n                    >\n                        <div>\n                            <Typography variant='body1'>\n                                <b>{revName}</b>\n                            </Typography>\n                            <Typography variant='body2'>\n                                {revDescription}\n                            </Typography>\n                            <div className={classes.timePaddingStyle}>\n                                <Typography variant='caption'>\n                                    <span>{moment(revCreatedTime).fromNow()}</span>\n                                </Typography>\n                            </div>\n                        </div>\n                    </Popover>\n                </Grid>\n                <Grid item className={classes.shapeRecBack} />\n            </Grid>\n        );\n        return item6;\n    }\n\n    const items = [];\n    if (!api.isRevision) {\n        if (allRevisions && allRevisions.length !== 0) {\n            items.push(\n                <Grid item className={clsx(classes.shapeCircleBlack, classes.shapeCircle)} />,\n            );\n            for (let revision = 0; revision < (allRevisions.length); revision++) {\n                if (revision % 2 === 0) {\n                    items.push(\n                        <Grid item>\n                            <Grid className={classes.textShape4} />\n                            <ReturnItem1\n                                revDescription={allRevisions[revision].description}\n                                revName={allRevisions[revision].displayName}\n                                revCreatedTime={allRevisions[revision].createdTime}\n                            />\n                            {item1}\n                            <Grid className={classes.textShape2}>\n                                {allRevisions[revision].displayName}\n                            </Grid>\n                            <Grid>\n                                <Button\n                                    className={classes.textShape3}\n                                    onClick={() => toggleOpenConfirmRestore(\n                                        allRevisions[revision].displayName, allRevisions[revision].id,\n                                    )}\n                                    size='small'\n                                    type='submit'\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    startIcon={<RestoreIcon />}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.revision.restore'\n                                        defaultMessage='Restore'\n                                    />\n                                </Button>\n                                <Button\n                                    className={classes.textShape7}\n                                    onClick={() => toggleOpenConfirmDelete(\n                                        allRevisions[revision].displayName, allRevisions[revision].id,\n                                    )}\n                                    disabled={(allEnvRevision && allEnvRevision.filter(\n                                        (o1) => o1.id === allRevisions[revision].id,\n                                    ).length !== 0) || isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    size='small'\n                                    color='#38536c'\n                                    startIcon={<DeleteForeverIcon />}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.revision.delete'\n                                        defaultMessage='Delete'\n                                    />\n                                </Button>\n                            </Grid>\n                        </Grid>,\n                    );\n                } else {\n                    items.push(\n                        <Grid item>\n                            <Grid className={classes.textShape5} />\n                            <Grid className={classes.textShape2}>\n                                {allRevisions[revision].displayName}\n                            </Grid>\n                            <Grid className={classes.textPadding}>\n                                <Button\n                                    className={classes.textShape3}\n                                    onClick={() => toggleOpenConfirmRestore(\n                                        allRevisions[revision].displayName, allRevisions[revision].id,\n                                    )}\n                                    size='small'\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    type='submit'\n                                    startIcon={<RestoreIcon />}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.revision.restore'\n                                        defaultMessage='Restore'\n                                    />\n                                </Button>\n                                <Button\n                                    className={classes.textShape7}\n                                    onClick={() => toggleOpenConfirmDelete(\n                                        allRevisions[revision].displayName, allRevisions[revision].id,\n                                    )}\n                                    disabled={(allEnvRevision && allEnvRevision.filter(\n                                        (o1) => o1.id === allRevisions[revision].id,\n                                    ).length !== 0) || isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    size='small'\n                                    color='#38536c'\n                                    startIcon={<DeleteForeverIcon />}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.revision.delete'\n                                        defaultMessage='Delete'\n                                    />\n                                </Button>\n                            </Grid>\n                            <ReturnItem6\n                                revDescription={allRevisions[revision].description}\n                                revName={allRevisions[revision].displayName}\n                                revCreatedTime={allRevisions[revision].createdTime}\n                            />\n                            {item6}\n                        </Grid>,\n                    );\n                }\n            }\n            if (allRevisions.length !== revisionCount) {\n                items.push(\n                    <Grid item>\n                        <Grid className={classes.textShape4}>\n                            {item4}\n                        </Grid>\n                    </Grid>,\n                );\n            }\n            if (allRevisions.length === revisionCount) {\n                items.push(\n                    <Grid item>\n                        <Grid className={classes.textShape4}>\n                            {item5}\n                        </Grid>\n                    </Grid>,\n                );\n            }\n            for (let unassignRevision = 0; unassignRevision\n                < (revisionCount - (allRevisions.length + 1)); unassignRevision++) {\n                items.push(\n                    <Grid item>\n                        <Grid className={classes.textShape4} />\n                        {item2}\n                    </Grid>,\n                );\n            }\n            if (revisionCount !== allRevisions.length) {\n                items.push(\n                    <Grid item>\n                        <Grid className={classes.textShape4} />\n                        {item3}\n                    </Grid>,\n                );\n            }\n        }\n\n        if (allRevisions && allRevisions.length === 0) {\n            items.push(\n                <div>\n                    <Grid className={classes.textShape8} />\n                    <Grid item className={clsx(classes.shapeCircleBlack, classes.shapeCircle)} />\n                </div>,\n            );\n            items.push(\n                <Grid item>\n                    <Grid className={classes.textShape4}>\n                        {item4}\n                    </Grid>\n                </Grid>,\n            );\n            for (let revision = 0; revision < (revisionCount - (allRevisions.length + 1)); revision++) {\n                items.push(\n                    <Grid item>\n                        <Grid className={classes.textShape4} />\n                        {item2}\n                    </Grid>,\n                );\n            }\n            items.push(\n                <Grid item>\n                    <Grid className={classes.textShape4} />\n                    {item3}\n                </Grid>,\n            );\n        }\n    }\n\n    /**\n     * Get gateway access URL from vhost\n     * @param vhost VHost object\n     * @param type URL type WS or HTTP\n     * @returns {{secondary: string, primary: string}}\n     */\n    function getGatewayAccessUrl(vhost, type) {\n        const endpoints = { primary: '', secondary: '', combined: '' };\n        if (!vhost) {\n            return endpoints;\n        }\n\n        if (type === 'WS') {\n            endpoints.primary = 'ws://' + vhost.host + ':' + vhost.wsPort;\n            endpoints.secondary = 'wss://' + vhost.host + ':' + vhost.wssPort;\n            endpoints.combined = endpoints.secondary + ' ' + endpoints.primary;\n            return endpoints;\n        }\n\n        const httpContext = vhost.httpContext ? '/' + vhost.httpContext.replace(/^\\//g, '') : '';\n        endpoints.primary = 'http://' + vhost.host\n            + (vhost.httpPort === 80 ? '' : ':' + vhost.httpPort) + httpContext;\n        endpoints.secondary = 'https://' + vhost.host\n            + (vhost.httpsPort === 443 ? '' : ':' + vhost.httpsPort) + httpContext;\n        endpoints.combined = endpoints.secondary + ' ' + endpoints.primary;\n        return endpoints;\n    }\n\n    function getVhostHelperText(env, selectionList, shorten, maxTextLen) {\n        const selected = selectionList && selectionList.find((v) => v.env === env);\n        if (selected) {\n            const vhost = settings.environment.find((e) => e.name === env).vhosts.find(\n                (v) => v.host === selected.vhost,\n            );\n\n            const maxtLen = maxTextLen || 30;\n            const gatewayUrls = getGatewayAccessUrl(vhost, api.isWebSocket() ? 'WS' : 'HTTP');\n            if (shorten) {\n                const helperText = getGatewayAccessUrl(vhost, api.isWebSocket() ? 'WS' : 'HTTP').secondary;\n                return helperText.length > maxtLen ? helperText.substring(0, maxtLen) + '...' : helperText;\n            }\n            return gatewayUrls.combined;\n        }\n        return '';\n    }\n\n    return (\n        <>\n            {allRevisions && allRevisions.length === 0 && (\n                <DeploymentOnbording\n                    classes={classes}\n                    getVhostHelperText={getVhostHelperText}\n                    createDeployRevision={createDeployRevision}\n                    description\n                    setDescription={setDescription}\n                />\n            )}\n            {allRevisions && allRevisions.length !== 0 && (\n                <Grid md={12}>\n                    <Typography id='itest-api-details-deployments-head' variant='h5' gutterBottom>\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.deployments.heading'\n                            defaultMessage='Deployments'\n                        />\n                    </Typography>\n                    <Typography variant='caption'>\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.deployments.sub.heading'\n                            defaultMessage='Create revisions and deploy in Gateway Environments'\n                        />\n                    </Typography>\n                </Grid>\n            )}\n            {!api.isRevision && allRevisions && allRevisions.length !== 0\n            && (\n                <Grid container>\n                    <Button\n                        onClick={toggleDeployRevisionPopup}\n                        disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                        variant='contained'\n                        color='primary'\n                        size='large'\n                        className={classes.deployNewRevButtonStyle}\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.deploy.new.revision'\n                            defaultMessage='Deploy New Revision'\n                        />\n                    </Button>\n                </Grid>\n            )}\n            <Grid container>\n                <Dialog\n                    open={openDeployPopup}\n                    onClose={handleCloseDeployPopup}\n                    aria-labelledby='form-dialog-title'\n                    classes={{ paper: classes.dialogPaper }}\n                >\n                    <DialogTitle id='form-dialog-title' variant='h2'>\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.deploy.new.revision.heading'\n                            defaultMessage='Deploy New Revision'\n                        />\n                    </DialogTitle>\n                    <DialogContent className={classes.dialogContent}>\n                        { allRevisions && allRevisions.length === revisionCount && (\n                            <Typography variant='body' align='left' className={classes.warningText}>\n                                <FormattedMessage\n                                    id='Apis.Details.Environments.Environments.select.rev.warning'\n                                    defaultMessage={'Please delete a revision as '\n                                    + 'the number of revisions have reached a maximum of {count}'}\n                                    values={{ count: revisionCount }}\n                                />\n                            </Typography>\n                        )}\n                        { allRevisions && allRevisions.length === revisionCount && (\n                            <Box mb={3}>\n                                <TextField\n                                    fullWidth\n                                    id='revision-to-delete-selector'\n                                    required\n                                    select\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Details.Environments.Environments.select.rev.delete'\n                                            defaultMessage='Revision to delete'\n                                        />\n                                    )}\n                                    SelectProps={{\n                                        MenuProps: {\n                                            anchorOrigin: {\n                                                vertical: 'bottom',\n                                                horizontal: 'left',\n                                            },\n                                            getContentAnchorEl: null,\n                                        },\n                                    }}\n                                    name='extraRevisionToDelete'\n                                    onChange={handleDeleteSelect}\n                                    helperText={allRevisions && allRevisions.filter(\n                                        (o1) => o1.deploymentInfo.length === 0,\n                                    ).length === 0\n                                        ? (\n                                            <FormattedMessage\n                                                id='Apis.Details.Environments.Environments.select.rev.helper1'\n                                                defaultMessage={'Please undeploy and delete a revision as '\n                                                + 'the number of revisions have reached a maximum of {count}'}\n                                                values={{ count: revisionCount }}\n                                            />\n                                        ) : (\n                                            <FormattedMessage\n                                                id='Apis.Details.Environments.Environments.select.rev.helper'\n                                                defaultMessage={'Please select a revision to delete as '\n                                                + 'the number of revisions have reached a maximum of {count}'}\n                                                values={{ count: revisionCount }}\n                                            />\n                                        )}\n                                    margin='normal'\n                                    variant='outlined'\n                                    disabled={api.isRevision || allRevisions.filter(\n                                        (o1) => o1.deploymentInfo.length === 0,\n                                    ).length === 0}\n                                >\n                                    {allRevisions && allRevisions.length !== 0 && allRevisions.filter(\n                                        (o1) => o1.deploymentInfo.length === 0,\n                                    ).map(\n                                        (revision) => (\n                                            <MenuItem value={revision.id} name={revision.displayName}>\n                                                {revision.displayName}\n                                            </MenuItem>\n                                        ),\n                                    )}\n                                </TextField>\n                            </Box>\n                        )}\n                        <Box mb={3}>\n                            <TextField\n                                autoFocus\n                                name='description'\n                                margin='dense'\n                                variant='outlined'\n                                label='Description'\n                                inputProps={{ maxLength: maxCommentLength }}\n                                helperText={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.revision.description.deploy'\n                                        defaultMessage='Brief description of the new revision'\n                                    />\n                                )}\n                                fullWidth\n                                multiline\n                                rows={3}\n                                rowsMax={4}\n                                defaultValue={description}\n                                onBlur={handleChange}\n                            />\n                            <Typography className={classes.textCount} align='right'>\n                                {currentLength + '/' + maxCommentLength}\n                            </Typography>\n                        </Box>\n                        <Box mt={2}>\n                            <Typography variant='h6' align='left' className={classes.sectionTitle}>\n                                <FormattedMessage\n                                    id='Apis.Details.Environments.Environments.api.gateways.heading'\n                                    defaultMessage='API Gateways'\n                                />\n                            </Typography>\n                            <Grid\n                                container\n                                spacing={3}\n                            >\n                                {settings.environment.map((row) => (\n                                    <Grid item xs={4}>\n                                        <Card\n                                            className={clsx(SelectedEnvironment\n                                                && SelectedEnvironment.includes(row.name)\n                                                ? (classes.changeCard) : (classes.noChangeCard), classes.cardHeight)}\n                                            variant='outlined'\n                                        >\n                                            <Box height='100%'>\n                                                <CardHeader\n                                                    action={(\n                                                        <Checkbox\n                                                            id={row.name.split(' ').join('')}\n                                                            value={row.name}\n                                                            checked={SelectedEnvironment.includes(row.name)}\n                                                            onChange={handleChange}\n                                                            color='primary'\n                                                            icon={<RadioButtonUncheckedIcon />}\n                                                            checkedIcon={<CheckCircleIcon color='primary' />}\n                                                            inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                                        />\n                                                    )}\n                                                    title={(\n                                                        <Typography variant='subtitle2'>\n                                                            {row.displayName}\n                                                        </Typography>\n                                                    )}\n                                                    subheader={(\n                                                        <Typography\n                                                            variant='body2'\n                                                            color='textSecondary'\n                                                            gutterBottom\n                                                        >\n                                                            {row.type}\n                                                        </Typography>\n                                                    )}\n                                                />\n                                                <CardContent className={classes.cardContentHeight}>\n                                                    <Grid\n                                                        container\n                                                        direction='column'\n                                                        spacing={2}\n                                                    >\n                                                        <Grid item xs={12}>\n                                                            <Tooltip\n                                                                title={getVhostHelperText(row.name,\n                                                                    selectedVhostDeploy)}\n                                                                placement='bottom'\n                                                            >\n                                                                <TextField\n                                                                    id='vhost-selector'\n                                                                    select\n                                                                    label={(\n                                                                        <FormattedMessage\n                                                                            id='Apis.Details.Environments.deploy.vhost'\n                                                                            defaultMessage='VHost'\n                                                                        />\n                                                                    )}\n                                                                    SelectProps={{\n                                                                        MenuProps: {\n                                                                            anchorOrigin: {\n                                                                                vertical: 'bottom',\n                                                                                horizontal: 'left',\n                                                                            },\n                                                                            getContentAnchorEl: null,\n                                                                        },\n                                                                    }}\n                                                                    name={row.name}\n                                                                    value={selectedVhostDeploy.find(\n                                                                        (v) => v.env === row.name,\n                                                                    ).vhost}\n                                                                    onChange={handleVhostDeploySelect}\n                                                                    margin='dense'\n                                                                    variant='outlined'\n                                                                    fullWidth\n                                                                    helperText={getVhostHelperText(row.name,\n                                                                        selectedVhostDeploy, true)}\n                                                                >\n                                                                    {row.vhosts.map(\n                                                                        (vhost) => (\n                                                                            <MenuItem value={vhost.host}>\n                                                                                {vhost.host}\n                                                                            </MenuItem>\n                                                                        ),\n                                                                    )}\n                                                                </TextField>\n                                                            </Tooltip>\n                                                        </Grid>\n                                                        <Grid item>\n                                                            {allEnvRevision\n                                                                && allEnvRevision.filter(\n                                                                    (o1) => {\n                                                                        if (o1.deploymentInfo.filter(\n                                                                            (o2) => o2.name === row.name,\n                                                                        ).length > 0) {\n                                                                            return o1;\n                                                                        }\n                                                                        return null;\n                                                                    },\n                                                                ).length !== 0 ? (\n                                                                    allEnvRevision && allEnvRevision.filter(\n                                                                        (o1) => {\n                                                                            if (o1.deploymentInfo.filter(\n                                                                                (o2) => o2.name === row.name,\n                                                                            ).length > 0) {\n                                                                                return o1;\n                                                                            }\n                                                                            return null;\n                                                                        },\n                                                                    ).map((o3) => (\n                                                                        <div>\n                                                                            <Chip\n                                                                                label={o3.displayName}\n                                                                                style={{ backgroundColor: '#15B8CF' }}\n                                                                            />\n                                                                        </div>\n                                                                    ))) : (\n                                                                // eslint-disable-next-line react/jsx-indent\n                                                                    <div />\n                                                                )}\n                                                        </Grid>\n                                                        <Grid item />\n                                                    </Grid>\n                                                </CardContent>\n                                            </Box>\n                                        </Card>\n                                    </Grid>\n                                ))}\n                            </Grid>\n                        </Box>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleCloseDeployPopup}>\n                            <FormattedMessage\n                                id='Apis.Details.Environments.Environments.deploy.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Button>\n                        <Button\n                            type='submit'\n                            variant='contained'\n                            onClick={\n                                () => handleCreateAndDeployRevision(SelectedEnvironment, selectedVhostDeploy)\n                            }\n                            color='primary'\n                            disabled={SelectedEnvironment.length === 0\n                                || (allRevisions && allRevisions.length === revisionCount && !extraRevisionToDelete)\n                                || isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Environments.Environments.deploy.deploy'\n                                defaultMessage='Deploy'\n                            />\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Grid>\n            {allRevisions && allRevisions.length !== 0 && (\n                <>\n                    <Grid\n                        container\n                        direction='row'\n                        alignItems='flex-start'\n                        spacing={1}\n                    >\n                        <Grid item>\n                            <Typography variant='h6' gutterBottom>\n                                <FormattedMessage\n                                    id='Apis.Details.Environments.Environments.Deployments'\n                                    defaultMessage='Revisions'\n                                />\n                            </Typography>\n                        </Grid>\n                        <Grid item>\n                            <Tooltip\n                                title={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.Create.Revision.Deploy'\n                                        defaultMessage='Create new revision and deploy'\n                                    />\n                                )}\n                                placement='top-end'\n                                aria-label='New Deployment'\n                            >\n                                <IconButton size='small' aria-label='delete'>\n                                    <HelpOutlineIcon fontSize='small' />\n                                </IconButton>\n                            </Tooltip>\n                        </Grid>\n\n                    </Grid>\n                    <Box className={classes.containerOverflow}>\n                        <Grid\n                            xs={12}\n                            className={classes.containerInline}\n                        >\n                            {items}\n                            {confirmDeleteDialog}\n                            {confirmRestoreDialog}\n                        </Grid>\n                    </Box>\n                </>\n            )}\n            <Grid container>\n                <Dialog\n                    open={open}\n                    onClose={handleClose}\n                    aria-labelledby='form-dialog-title'\n                    classes={{ paper: classes.createRevisionDialogStyle }}\n                >\n                    <DialogTitle id='form-dialog-title' variant='h2'>\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.revision.create.heading'\n                            defaultMessage='Create New Revision (From Current API)'\n                        />\n                    </DialogTitle>\n                    <DialogContent className={classes.dialogContent}>\n                        { allRevisions && allRevisions.length === revisionCount && (\n                            <Typography variant='body' align='left' className={classes.warningText}>\n                                <FormattedMessage\n                                    id='Apis.Details.Environments.Environments.select.rev.warning'\n                                    defaultMessage={'Please delete a revision as '\n                                    + 'the number of revisions have reached a maximum of {count}'}\n                                    values={{ count: revisionCount }}\n                                />\n                            </Typography>\n                        )}\n                        { allRevisions && allRevisions.length === revisionCount && (\n                            <Box mb={3}>\n                                <TextField\n                                    fullWidth\n                                    id='revision-to-delete-selector'\n                                    required\n                                    select\n                                    label={(\n                                        <FormattedMessage\n                                            id='Apis.Details.Environments.Environments.select.rev.delete'\n                                            defaultMessage='Revision to delete'\n                                        />\n                                    )}\n                                    SelectProps={{\n                                        MenuProps: {\n                                            anchorOrigin: {\n                                                vertical: 'bottom',\n                                                horizontal: 'left',\n                                            },\n                                            getContentAnchorEl: null,\n                                        },\n                                    }}\n                                    name='extraRevisionToDelete'\n                                    onChange={handleDeleteSelect}\n                                    helperText={allRevisions && allRevisions.filter(\n                                        (o1) => o1.deploymentInfo.length === 0,\n                                    ).length === 0\n                                        ? (\n                                            <FormattedMessage\n                                                id='Apis.Details.Environments.Environments.select.rev.helper1'\n                                                defaultMessage={'Please undeploy and delete a revision as '\n                                                + 'the number of revisions have reached a maximum of {count}'}\n                                                values={{ count: revisionCount }}\n                                            />\n                                        ) : (\n                                            <FormattedMessage\n                                                id='Apis.Details.Environments.Environments.select.rev.helper'\n                                                defaultMessage={'Please select a revision to delete as '\n                                                + 'the number of revisions have reached a maximum of {count}'}\n                                                values={{ count: revisionCount }}\n                                            />\n                                        )}\n                                    margin='normal'\n                                    variant='outlined'\n                                    disabled={api.isRevision || allRevisions.filter(\n                                        (o1) => o1.deploymentInfo.length === 0,\n                                    ).length === 0}\n                                >\n                                    {allRevisions && allRevisions.length !== 0 && allRevisions.filter(\n                                        (o1) => o1.deploymentInfo.length === 0,\n                                    ).map(\n                                        (revision) => (\n                                            <MenuItem value={revision.id} name={revision.displayName}>\n                                                {revision.displayName}\n                                            </MenuItem>\n                                        ),\n                                    )}\n                                </TextField>\n                            </Box>\n                        )}\n                        <Box mb={3}>\n                            <TextField\n                                autoFocus\n                                name='description'\n                                margin='dense'\n                                variant='outlined'\n                                label='Description'\n                                inputProps={{ maxLength: maxCommentLength }}\n                                helperText={(\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.revision.description.create'\n                                        defaultMessage='Brief description of the new revision'\n                                    />\n                                )}\n                                fullWidth\n                                multiline\n                                rows={3}\n                                rowsMax={4}\n                                defaultValue={description}\n                                onBlur={handleChange}\n                            />\n                            <Typography className={classes.textCount} align='right'>\n                                {currentLength + '/' + maxCommentLength}\n                            </Typography>\n                        </Box>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleClose}>\n                            <FormattedMessage\n                                id='Apis.Details.Environments.Environments.create.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Button>\n                        <Button\n                            onClick={handleClickAddRevision}\n                            type='submit'\n                            variant='contained'\n                            color='primary'\n                            disabled={api.isRevision\n                                || (allRevisions && allRevisions.length === revisionCount && !extraRevisionToDelete)}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Environments.Environments.create.create'\n                                defaultMessage='Create'\n                            />\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </Grid>\n            {allRevisions && allRevisions.length !== 0 && (\n                <Box mx='auto' mt={5}>\n                    <Typography variant='h6' className={classes.sectionTitle}>\n                        <FormattedMessage\n                            id='Apis.Details.Environments.Environments.APIGateways'\n                            defaultMessage='API Gateways'\n                        />\n                    </Typography>\n                    <TableContainer component={Paper}>\n                        <Table>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell align='left'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Environments.Environments.api.gateways.name'\n                                            defaultMessage='Name'\n                                        />\n                                    </TableCell>\n                                    <TableCell align='left'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Environments.Environments.gateway.accessUrl'\n                                            defaultMessage='Gateway Access URL'\n                                        />\n                                    </TableCell>\n                                    {api && api.isDefaultVersion !== true\n                                        ? (\n                                            <TableCell align='left'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Environments.Environments.gateway\n                                                    .deployed.revision'\n                                                    defaultMessage='Deployed Revision'\n                                                />\n                                            </TableCell>\n                                        )\n                                        : (\n                                            <TableCell align='left'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Environments.Environments.gateway.action'\n                                                    defaultMessage='Action'\n                                                />\n                                            </TableCell>\n                                        )}\n                                    <TableCell align='left'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Environments.Environments.visibility.in.devportal'\n                                            defaultMessage='Gateway URL Visibility'\n                                        />\n                                        <Tooltip\n                                            title={(\n                                                <FormattedMessage\n                                                    id='Apis.Details.Environments.Environments.display.devportal'\n                                                    defaultMessage='Display Gateway Access URLs in developer portal.'\n                                                />\n                                            )}\n                                            placement='top-end'\n                                            aria-label='New Deployment'\n                                        >\n                                            <IconButton size='small' aria-label='delete'>\n                                                <HelpOutlineIcon fontSize='small' />\n                                            </IconButton>\n                                        </Tooltip>\n                                    </TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {settings.environment.map((row) => (\n                                    <TableRow key={row.name}>\n                                        <TableCell component='th' scope='row'>\n                                            {row.displayName}\n                                        </TableCell>\n                                        {allEnvDeployments[row.name].revision != null ? (\n                                            <>\n                                                <TableCell align='left'>\n                                                    <div className={classes.primaryEndpoint}>\n                                                        {api.isWebSocket()\n                                                            ? getGatewayAccessUrl(allEnvDeployments[row.name]\n                                                                .vhost, 'WS')\n                                                                .primary : getGatewayAccessUrl(\n                                                                allEnvDeployments[row.name].vhost, 'HTTP',\n                                                            ).primary}\n                                                    </div>\n                                                    <div className={classes.secondaryEndpoint}>\n                                                        {api.isWebSocket()\n                                                            ? getGatewayAccessUrl(allEnvDeployments[row.name]\n                                                                .vhost, 'WS')\n                                                                .secondary : getGatewayAccessUrl(\n                                                                allEnvDeployments[row.name].vhost, 'HTTP',\n                                                            ).secondary}\n                                                    </div>\n                                                </TableCell>\n                                            </>\n                                        ) : (\n                                            <>\n                                                <TableCell align='left' className={classes.tableCellVhostSelect}>\n                                                    <Tooltip\n                                                        title={getVhostHelperText(row.name, selectedVhosts)}\n                                                        placement='bottom'\n                                                    >\n                                                        <TextField\n                                                            id='vhost-selector'\n                                                            select\n                                                            label={(\n                                                                <FormattedMessage\n                                                                    id='Apis.Details.Environments.Environments\n                                                                    .select.vhost'\n                                                                    defaultMessage='Select Access URL'\n                                                                />\n                                                            )}\n                                                            SelectProps={{\n                                                                MenuProps: {\n                                                                    anchorOrigin: {\n                                                                        vertical: 'bottom',\n                                                                        horizontal: 'left',\n                                                                    },\n                                                                    getContentAnchorEl: null,\n                                                                },\n                                                            }}\n                                                            name={row.name}\n                                                            value={selectedVhosts.find((v) => v.env === row.name).vhost}\n                                                            onChange={handleVhostSelect}\n                                                            margin='dense'\n                                                            variant='outlined'\n                                                            className={classes.vhostSelect}\n                                                            fullWidth\n                                                            disabled={api.isRevision\n                                                            || !allRevisions || allRevisions.length === 0}\n                                                            helperText={getVhostHelperText(row.name, selectedVhosts,\n                                                                true, 100)}\n                                                        >\n                                                            {row.vhosts.map(\n                                                                (vhost) => (\n                                                                    <MenuItem value={vhost.host}>\n                                                                        {vhost.host}\n                                                                    </MenuItem>\n                                                                ),\n                                                            )}\n                                                        </TextField>\n                                                    </Tooltip>\n                                                </TableCell>\n                                            </>\n                                        )}\n                                        <TableCell align='left' style={{ width: '300px' }}>\n                                            {allEnvDeployments[row.name].revision != null\n                                                ? (\n                                                    <div>\n                                                        <Chip\n                                                            label={allEnvDeployments[row.name].revision.displayName}\n                                                            style={{ backgroundColor: '#15B8CF' }}\n                                                        />\n                                                        <Button\n                                                            className={classes.button1}\n                                                            variant='outlined'\n                                                            disabled={api.isRevision\n                                                                || isRestricted(['apim:api_create',\n                                                                    'apim:api_publish'], api)}\n                                                            onClick={() => undeployRevision(\n                                                                allEnvDeployments[row.name].revision.id, row.name,\n                                                            )}\n                                                            size='small'\n                                                        >\n                                                            <FormattedMessage\n                                                                id='Apis.Details.Environments.Environments.undeploy.btn'\n                                                                defaultMessage='Undeploy'\n                                                            />\n                                                        </Button>\n                                                    </div>\n                                                ) : (\n                                                    <div>\n                                                        <TextField\n                                                            id='revision-selector'\n                                                            select\n                                                            label={(\n                                                                <FormattedMessage\n                                                                    id='Apis.Details.Environments.Environments\n                                                                    .select.table'\n                                                                    defaultMessage='Select Revision'\n                                                                />\n                                                            )}\n                                                            SelectProps={{\n                                                                MenuProps: {\n                                                                    anchorOrigin: {\n                                                                        vertical: 'bottom',\n                                                                        horizontal: 'left',\n                                                                    },\n                                                                    getContentAnchorEl: null,\n                                                                },\n                                                            }}\n                                                            name={row.name}\n                                                            onChange={handleSelect}\n                                                            margin='dense'\n                                                            variant='outlined'\n                                                            style={{ width: '50%' }}\n                                                            disabled={api.isRevision\n                                                                || !allRevisions || allRevisions.length === 0}\n                                                        >\n                                                            {allRevisions && allRevisions.length !== 0\n                                                            && allRevisions.map(\n                                                                (number) => (\n                                                                    <MenuItem value={number.id}>\n                                                                        {number.displayName}\n                                                                    </MenuItem>\n                                                                ),\n                                                            )}\n                                                        </TextField>\n                                                        <Button\n                                                            className={classes.button2}\n                                                            disabled={api.isRevision || !selectedRevision.some(\n                                                                (r) => r.env === row.name && r.revision,\n                                                            ) || !selectedVhosts.some(\n                                                                (v) => v.env === row.name && v.vhost,\n                                                            )}\n                                                            variant='outlined'\n                                                            onClick={() => deployRevision(selectedRevision.find(\n                                                                (r) => r.env === row.name,\n                                                            ).revision, row.name, selectedVhosts.find(\n                                                                (v) => v.env === row.name,\n                                                            ).vhost, selectedRevision.find(\n                                                                (r) => r.env === row.name,\n                                                            ).displayOnDevPortal)}\n\n                                                        >\n                                                            <FormattedMessage\n                                                                id='Apis.Details.Environments.Environments\n                                                                .deploy.button'\n                                                                defaultMessage='Deploy'\n                                                            />\n                                                        </Button>\n                                                    </div>\n                                                )}\n                                        </TableCell>\n                                        <TableCell align='left'>\n                                            <DisplayDevportal\n                                                name={row.name}\n                                                api={api}\n                                                EnvDeployments={allEnvDeployments[row.name]}\n                                            />\n                                        </TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Box>\n            )}\n        </>\n    );\n}\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Switch from '@material-ui/core/Switch';\nimport React, { useState, useEffect } from 'react';\nimport API from 'AppData/api';\nimport base64url from 'base64url';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIProduct from 'AppData/APIProduct';\n\n/**\n * Renders an Deployrevision list\n * @class Environments\n * @extends {React.Component}\n */\nexport default function DisplayDevportal(props) {\n    const {\n        api,\n        name,\n        EnvDeployments,\n    } = props;\n    const restApi = new API();\n    const restAPIProduct = new APIProduct();\n    const [check, setCheck] = useState(EnvDeployments.disPlayDevportal);\n\n    useEffect(() => {\n        setCheck(typeof EnvDeployments.disPlayDevportal === 'undefined' ? false : EnvDeployments.disPlayDevportal);\n    },\n    [EnvDeployments.disPlayDevportal]);\n\n    const handleDisplayOnDevPortal = (event) => {\n        if (typeof EnvDeployments.revision === 'undefined') {\n            setCheck(event.target.checked);\n        } else {\n            const body = {\n                revisionUuid: EnvDeployments.revision.id,\n                displayOnDevportal: event.target.checked,\n            };\n            setCheck(event.target.checked);\n            if (api.apiType === API.CONSTS.APIProduct) {\n                restAPIProduct.displayInDevportalProduct(api.id, base64url.encode(event.target.name), body);\n            } else {\n                restApi.displayInDevportalAPI(api.id, base64url.encode(event.target.name), body);\n            }\n        }\n    };\n\n    return (\n        <Switch\n            checked={check}\n            onChange={handleDisplayOnDevPortal}\n            disabled={api.isRevision || isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n            name={name}\n        />\n    );\n}\n","import React, { useState } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport clsx from 'clsx';\nimport Paper from '@material-ui/core/Paper';\nimport Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport AddIcon from '@material-ui/icons/Add';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport PropTypes from 'prop-types';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\nimport { useTheme } from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        minHeight: '480px',\n    },\n    textOptional: {\n        fontSize: 'small',\n        color: '#707070',\n        fontWeight: '100',\n    },\n    textRevision: {\n        fontSize: '16px',\n        color: '#707070',\n    },\n    textDeploy: {\n        fontSize: '26px',\n        color: '#1B3A57',\n    },\n    textDescription: {\n        fontSize: '16px',\n        color: '#707070',\n        fontWeight: '400',\n    },\n    descriptionWidth: {\n        minWidth: '550px',\n    },\n    textAlign: {\n        textAlign: 'center',\n    },\n}));\n/**\n * Renders an Deployment Onboarding\n * @class Environments\n * @extends {React.Component}\n */\nexport default function DeploymentOnboarding(props) {\n    const {\n        classes,\n        getVhostHelperText,\n        createDeployRevision,\n        description,\n        setDescription,\n    } = props;\n    const classes1 = useStyles();\n    const theme = useTheme();\n    const { maxCommentLength } = theme.custom;\n    const { settings: { environment: environments } } = useAppContext();\n    const hasOnlyOneEnvironment = environments.length === 1;\n\n    const defaultVhosts = environments.map(\n        (e) => (e.vhosts && e.vhosts.length > 0 ? { env: e.name, vhost: e.vhosts[0].host } : undefined),\n    );\n    const [descriptionOpen, setDescriptionOpen] = useState(false);\n    const [selectedEnvironment, setSelectedEnvironment] = useState(hasOnlyOneEnvironment ? [environments[0].name] : []);\n    const [selectedVhostDeploy, setVhostsDeploy] = useState(defaultVhosts);\n\n    /**\n     * Handle Description\n     */\n    function handleDescriptionOpen() {\n        setDescriptionOpen(!descriptionOpen);\n    }\n\n    const handleVhostDeploySelect = (event) => {\n        const vhosts = selectedVhostDeploy.filter((v) => v.env !== event.target.name);\n        vhosts.push({ env: event.target.name, vhost: event.target.value });\n        setVhostsDeploy(vhosts);\n    };\n\n    const handleChange = (event) => {\n        if (event.target.checked) {\n            setSelectedEnvironment([...selectedEnvironment, event.target.value]);\n        } else {\n            setSelectedEnvironment(\n                selectedEnvironment.filter((env) => env !== event.target.value),\n            );\n        }\n        if (event.target.name === 'description') {\n            setDescription(event.target.value);\n        }\n    };\n\n    return (\n        <>\n            <Grid container spacing={2}>\n                <Grid item xs={2} />\n                <Grid item xs={8}>\n                    <Grid container spacing={2}>\n                        <Grid item xs={2} />\n                        <Grid item xs={8} className={classes1.textAlign}>\n                            <Typography variant='h6' className={classes1.textDeploy}>\n                                Deploy the API\n                            </Typography>\n                        </Grid>\n                        <Grid item xs={2} />\n                    </Grid>\n                    <Box pb={2}>\n                        <Grid container>\n                            <Grid item xs={2} />\n                            <Grid item xs={8} className={classes1.textAlign}>\n                                <Typography variant='h6' className={classes1.textDescription}>\n                                    Deploy API to the Gateway Environment\n                                </Typography>\n                            </Grid>\n                            <Grid item xs={2} />\n                        </Grid>\n                    </Box>\n                    <Paper fullWidth className={classes1.root}>\n                        <Box p={5}>\n                            <Typography className={classes1.textRevision}>\n                                API Gateways\n                            </Typography>\n                            <Box mt={4}>\n                                <Grid\n                                    container\n                                    spacing={3}\n                                >\n                                    {environments.map((row) => (\n                                        <Grid item xs={3}>\n                                            <Card\n                                                className={clsx(selectedEnvironment\n                                                    && selectedEnvironment.includes(row.name)\n                                                    ? (classes.changeCard) : (classes.noChangeCard),\n                                                classes.cardHeight)}\n                                                variant='outlined'\n                                            >\n                                                <Box height='100%'>\n                                                    <CardHeader\n                                                        action={(\n                                                            <Checkbox\n                                                                id={row.name.split(' ').join('')}\n                                                                value={row.name}\n                                                                checked={selectedEnvironment.includes(row.name)}\n                                                                onChange={handleChange}\n                                                                color='primary'\n                                                                icon={<RadioButtonUncheckedIcon />}\n                                                                checkedIcon={<CheckCircleIcon color='primary' />}\n                                                                inputProps={{ 'aria-label': 'secondary checkbox' }}\n                                                            />\n                                                        )}\n                                                        title={(\n                                                            <Typography variant='subtitle2'>\n                                                                {row.displayName}\n                                                            </Typography>\n                                                        )}\n                                                        subheader={(\n                                                            <Typography\n                                                                variant='body2'\n                                                                color='textSecondary'\n                                                                gutterBottom\n                                                            >\n                                                                {row.type}\n                                                            </Typography>\n                                                        )}\n                                                    />\n                                                    <CardContent className={classes.cardContentHeight}>\n                                                        <Grid\n                                                            container\n                                                            direction='column'\n                                                            spacing={2}\n                                                        >\n                                                            <Grid item xs={12}>\n                                                                <Tooltip\n                                                                    title={getVhostHelperText(row.name,\n                                                                        selectedVhostDeploy)}\n                                                                    placement='bottom'\n                                                                >\n                                                                    <TextField\n                                                                        id='vhost-selector'\n                                                                        select={row.vhosts.length > 1}\n                                                                        disabled={row.vhosts.length === 1}\n                                                                        label={(\n                                                                            <FormattedMessage\n                                                                                id='Apis.Details.Environments\n                                                                                .deploy.vhost'\n                                                                                defaultMessage='VHost'\n                                                                            />\n                                                                        )}\n                                                                        SelectProps={{\n                                                                            MenuProps: {\n                                                                                anchorOrigin: {\n                                                                                    vertical: 'bottom',\n                                                                                    horizontal: 'left',\n                                                                                },\n                                                                                getContentAnchorEl: null,\n                                                                            },\n                                                                        }}\n                                                                        name={row.name}\n                                                                        value={selectedVhostDeploy.find(\n                                                                            (v) => v.env === row.name,\n                                                                        ).vhost}\n                                                                        onChange={handleVhostDeploySelect}\n                                                                        margin='dense'\n                                                                        variant='outlined'\n                                                                        fullWidth\n                                                                        helperText={getVhostHelperText(row.name,\n                                                                            selectedVhostDeploy, true)}\n                                                                    >\n                                                                        {row.vhosts.map(\n                                                                            (vhost) => (\n                                                                                <MenuItem value={vhost.host}>\n                                                                                    {vhost.host}\n                                                                                </MenuItem>\n                                                                            ),\n                                                                        )}\n                                                                    </TextField>\n                                                                </Tooltip>\n                                                            </Grid>\n                                                        </Grid>\n                                                    </CardContent>\n                                                </Box>\n                                            </Card>\n                                        </Grid>\n                                    ))}\n                                </Grid>\n                            </Box>\n                            <Box mt={2}>\n                                <Button\n                                    color='primary'\n                                    className={classes.button}\n                                    display='inline'\n                                    startIcon={<AddIcon />}\n                                    onClick={handleDescriptionOpen}\n                                >\n                                    Add a description\n                                </Button>\n                                <Typography display='inline' className={classes1.textOptional}>\n                                    (optional)\n                                </Typography>\n                                <br />\n                                {descriptionOpen && (\n                                    <>\n                                        <TextField\n                                            className={classes1.descriptionWidth}\n                                            name='description'\n                                            margin='dense'\n                                            variant='outlined'\n                                            label='Description'\n                                            inputProps={{ maxLength: maxCommentLength }}\n                                            helperText={(\n                                                <FormattedMessage\n                                                    id='Apis.Details.Environments.Environments.revision\n                                                    .description.deploy'\n                                                    defaultMessage='Add a description to the revision'\n                                                />\n                                            )}\n                                            multiline\n                                            rows={3}\n                                            defaultValue={description === true ? '' : description}\n                                            onBlur={handleChange}\n                                        />\n                                    </>\n                                )}\n                            </Box>\n                            <Box mt={3}>\n                                <Button\n                                    type='submit'\n                                    variant='contained'\n                                    onClick={\n                                        () => createDeployRevision(selectedEnvironment, selectedVhostDeploy)\n                                    }\n                                    color='primary'\n                                    disabled={selectedEnvironment.length === 0}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Environments.Environments.deploy.deploy'\n                                        defaultMessage='Deploy'\n                                    />\n                                </Button>\n                            </Box>\n                        </Box>\n                    </Paper>\n                </Grid>\n                <Grid item xs={2} />\n            </Grid>\n        </>\n    );\n}\nDeploymentOnboarding.propTypes = {\n    getVhostHelperText: PropTypes.shape({}).isRequired,\n    createDeployRevision: PropTypes.shape({}).isRequired,\n    setDescription: PropTypes.shape({}).isRequired,\n    description: PropTypes.string.isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CircularProgress, Grid } from '@material-ui/core';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api';\nimport CONSTS from 'AppData/Constants';\nimport Progress from 'AppComponents/Shared/Progress';\nimport { FormattedMessage } from 'react-intl';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\nimport { isRestricted } from 'AppData/AuthManager';\nimport SubscriptionsTable from './SubscriptionsTable';\nimport SubscriptionPoliciesManage from './SubscriptionPoliciesManage';\nimport SubscriptionAvailability from './SubscriptionAvailability';\n\nconst useStyles = makeStyles((theme) => ({\n    buttonSection: {\n        marginTop: theme.spacing(2),\n    },\n    emptyBox: {\n        marginTop: theme.spacing(2),\n    },\n}));\n\n/**\n * Subscriptions component\n *\n * @class Subscriptions\n * @extends {Component}\n */\nfunction Subscriptions(props) {\n    const classes = useStyles();\n    const [api] = useAPI();\n    const { updateAPI } = props;\n    const restApi = new API();\n    const [tenants, setTenants] = useState(null);\n    const [policies, setPolices] = useState({});\n    const [availability, setAvailability] = useState({ subscriptionAvailability: api.subscriptionAvailability });\n    const [tenantList, setTenantList] = useState(api.subscriptionAvailableTenants);\n    const [subscriptions, setSubscriptions] = useState(null);\n    const [updateInProgress, setUpdateInProgress] = useState(false);\n    const { settings } = useAppContext();\n\n    /**\n     * Save subscription information (policies, subscriptionAvailability, subscriptionAvailableTenants)\n     */\n    function saveAPI() {\n        setUpdateInProgress(true);\n        const { subscriptionAvailability } = availability;\n        const newApi = {\n            policies,\n            subscriptionAvailability,\n            subscriptionAvailableTenants: tenantList,\n        };\n        updateAPI(newApi)\n            .then(() => {\n                Alert.info('Subscription configurations updated successfully');\n            })\n            .catch((error) => {\n                console.error(error);\n                Alert.error('Error occurred while updating subscription configurations');\n            }).finally(() => {\n                setUpdateInProgress(false);\n            });\n    }\n\n    useEffect(() => {\n        restApi.getTenantsByState(CONSTS.TENANT_STATE_ACTIVE)\n            .then((result) => {\n                setTenants(result.body.count);\n            });\n        restApi.subscriptions(api.id)\n            .then((result) => {\n                setSubscriptions(result.body.count);\n            });\n        setPolices([...api.policies]);\n    }, []);\n\n    if (typeof tenants !== 'number' || typeof subscriptions !== 'number') {\n        return (\n            <Grid container direction='row' justify='center' alignItems='center'>\n                <Grid item>\n                    <CircularProgress />\n                </Grid>\n            </Grid>\n        );\n    }\n    return (\n        <>\n            <SubscriptionPoliciesManage api={api} policies={policies} setPolices={setPolices} />\n            {tenants !== 0 && settings.crossTenantSubscriptionEnabled && (\n                <SubscriptionAvailability\n                    api={api}\n                    availability={availability}\n                    setAvailability={setAvailability}\n                    tenantList={tenantList}\n                    setTenantList={setTenantList}\n                />\n            )}\n            { updateInProgress && <Progress /> }\n            <Grid\n                container\n                direction='row'\n                alignItems='flex-start'\n                spacing={1}\n                className={classes.buttonSection}\n            >\n                <Grid item>\n                    <Button\n                        type='submit'\n                        variant='contained'\n                        color='primary'\n                        disabled={api.isRevision || isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                        onClick={() => saveAPI()}\n                    >\n                        <FormattedMessage\n                            id='Apis.Details.Subscriptions.Subscriptions.save'\n                            defaultMessage='Save'\n                        />\n                    </Button>\n                </Grid>\n                <Grid item>\n                    <Link to={'/apis/' + api.id + '/overview'}>\n                        <Button>\n                            <FormattedMessage\n                                id='Apis.Details.Subscriptions.Subscriptions.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Button>\n                    </Link>\n                </Grid>\n            </Grid>\n            <SubscriptionsTable api={api} />\n        </>\n    );\n}\n\nSubscriptions.propTypes = {\n    updateAPI: PropTypes.func.isRequired,\n};\n\nexport default withStyles(makeStyles)(Subscriptions);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl, defineMessages } from 'react-intl';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport Paper from '@material-ui/core/Paper';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport MUIDataTable from 'mui-datatables';\nimport InfoIcon from '@material-ui/icons/Info';\nimport UserIcon from '@material-ui/icons/Person';\n\n\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api';\nimport { ScopeValidation, resourceMethod, resourcePath } from 'AppData/ScopeValidation';\nimport AuthManager from 'AppData/AuthManager';\nimport Invoice from './Invoice';\n\nconst styles = (theme) => ({\n    heading: {\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(2),\n    },\n    button: {\n        margin: theme.spacing(1),\n    },\n    headline: { paddingTop: theme.spacing(1.25), paddingLeft: theme.spacing(2.5) },\n    popupHeadline: {\n        alignItems: 'center',\n        borderBottom: '2px solid #40E0D0',\n        textAlign: 'center',\n    },\n    table: {\n        '& td': {\n            fontSize: theme.typography.fontSize,\n        },\n        '& th': {\n            fontSize: theme.typography.fontSize * 1.2,\n        },\n    },\n    searchDiv: {\n        float: 'right',\n        paddingTop: theme.spacing(1.25),\n        paddingRight: theme.spacing(1.25),\n    },\n    searchRoot: {\n        paddingTop: theme.spacing(0.25),\n        paddingBottom: theme.spacing(0.25),\n        paddingRight: theme.spacing(0.5),\n        paddingLeft: theme.spacing(0.5),\n        display: 'flex',\n        alignItems: 'right',\n        width: theme.spacing(50),\n        borderBottom: '1px solid #E8E8E8',\n    },\n    searchInput: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n    },\n    searchIconButton: {\n        padding: theme.spacing(1.25),\n    },\n    noDataMessage: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        color: '#888888',\n        width: '100%',\n    },\n    tableColumnSize: {\n        width: '14%',\n    },\n    tableColumnSize2: {\n        width: '30%',\n    },\n    dialogColumnSize: {\n        width: '50%',\n    },\n    dialog: {\n        float: 'center',\n        alignItems: 'center',\n    },\n    invoiceTable: {\n        '& td': {\n            fontSize: theme.typography.fontSize * 1.5,\n        },\n    },\n    uniqueCell: {\n        borderTop: '1px solid #000000',\n        fontWeight: 'bold',\n    },\n    mainTitle: {\n        paddingLeft: 0,\n        marginTop: theme.spacing(3),\n    },\n    titleWrapper: {\n        marginBottom: theme.spacing(3),\n    },\n    typography: {\n        padding: theme.spacing(2),\n    },\n    root: {\n        flexGrow: 1,\n    },\n    InfoToolTip: {\n        backgroundColor: theme.custom.disableColor,\n        color: theme.palette.getContrastText(theme.custom.disableColor),\n        fontSize: theme.typography.fontSize,\n        fontWeight: theme.typography.h6.fontWeight,\n        border: 'solid 1px ' + theme.palette.grey,\n        borderRadius: theme.shape.borderRadius,\n        padding: theme.spacing(2),\n    },\n    subscriberHeader: {\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n});\n\nconst subscriptionStatus = {\n    BLOCKED: 'BLOCKED',\n    PROD_BLOCKED: 'PROD_ONLY_BLOCKED',\n};\n\n/**\n * Table pagination for subscriptions table\n *\n * @param props props used for SubscriptionTablePagination\n * @returns {*}\n */\nfunction SubscriptionTablePagination(props) {\n    const {\n        count, page, rowsPerPage, onChangePage,\n    } = props;\n\n    /**\n     * handleFirstPageButtonClick loads data of the first page\n     * */\n    function handleFirstPageButtonClick() {\n        if (onChangePage) {\n            onChangePage(0);\n        }\n    }\n\n    /**\n     * handleBackButtonClick load data of the prev page\n     * */\n    function handleBackButtonClick() {\n        if (onChangePage) {\n            onChangePage(page - 1);\n        }\n    }\n\n    /**\n     * handleNextButtonClick load data of the next page\n     * */\n    function handleNextButtonClick() {\n        if (onChangePage) {\n            onChangePage(page + 1);\n        }\n    }\n\n    /**\n     * handleLastPageButtonClick load data of the last page\n     * */\n    function handleLastPageButtonClick() {\n        if (onChangePage) {\n            onChangePage(Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n        }\n    }\n\n    return (\n        <div\n            style={{ display: 'flex' }}\n        >\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n            >\n                <FirstPageIcon />\n            </IconButton>\n            <IconButton\n                onClick={handleBackButtonClick}\n                disabled={page === 0}\n            >\n                <KeyboardArrowLeft />\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n            >\n                <KeyboardArrowRight />\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n            >\n                <LastPageIcon />\n            </IconButton>\n        </div>\n    );\n}\n\nSubscriptionTablePagination.propTypes = {\n    count: PropTypes.number.isRequired,\n    page: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired,\n    onChangePage: PropTypes.func.isRequired,\n};\n\n/**\n * Lists all subscriptions.\n *\n * @class SubscriptionsTable\n * @extends {React.Component}\n */\nclass SubscriptionsTable extends Component {\n    constructor(props) {\n        super(props);\n        this.api = props.api;\n        this.state = {\n            subscriptions: null,\n            totalSubscription: 0,\n            page: 0,\n            rowsPerPage: 5,\n            searchQuery: null,\n            rowsPerPageOptions: [5, 10, 25, 50, 100],\n            emptyColumnHeight: 60,\n            policies: [],\n            subscriberClaims: null,\n        };\n        this.formatSubscriptionStateString = this.formatSubscriptionStateString.bind(this);\n        this.blockSubscription = this.blockSubscription.bind(this);\n        this.blockProductionOnly = this.blockProductionOnly.bind(this);\n        this.unblockSubscription = this.unblockSubscription.bind(this);\n        this.handleChangePage = this.handleChangePage.bind(this);\n        this.handleChangeRowsPerPage = this.handleChangeRowsPerPage.bind(this);\n        this.filterSubscriptions = this.filterSubscriptions.bind(this);\n        this.isMonetizedPolicy = this.isMonetizedPolicy.bind(this);\n        this.renderClaims = this.renderClaims.bind(this);\n        this.isNotCreator = AuthManager.isNotCreator();\n        this.isNotPublisher = AuthManager.isNotPublisher();\n    }\n\n    componentDidMount() {\n        this.fetchSubscriptionData();\n    }\n\n    // TODO: This is a React anti-pattern, have to move this to a component ~tmkb\n    /**\n     * Returns the set of action buttons based on the current subscription state\n     *\n     * @param {*} state State of the subscription (PROD_ONLY_BLOCKED/BLOCKED/ACTIVE)\n     * @param {*} subscriptionId Subscription ID\n     * @returns {JSX} Action buttons in JSX\n     * @memberof SubscriptionsTable\n     */\n    getSubscriptionBlockingButtons(state, subscriptionId) {\n        const { classes } = this.props;\n        if (state === subscriptionStatus.PROD_BLOCKED) {\n            return (\n                <dev>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.blockProductionOnly(subscriptionId)}\n                        className={classes.button}\n                        disabled='true'\n                    >\n                        <FormattedMessage\n                            id='block.production.only'\n                            defaultMessage='Block Production Only'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.blockSubscription(subscriptionId)}\n                        className={classes.button}\n                        disabled={this.api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='block.all'\n                            defaultMessage='Block All'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.unblockSubscription(subscriptionId)}\n                        className={classes.button}\n                        disabled={this.api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='unblock'\n                            defaultMessage='Unblock'\n                        />\n                    </Button>\n                </dev>\n            );\n        } else if (state === subscriptionStatus.BLOCKED) {\n            return (\n                <dev>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.blockProductionOnly(subscriptionId)}\n                        className={classes.button}\n                        disabled={this.api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='block.production.only'\n                            defaultMessage='Block Production Only'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.blockSubscription(subscriptionId)}\n                        className={classes.button}\n                        disabled='true'\n                    >\n                        <FormattedMessage\n                            id='block.all'\n                            defaultMessage='Block All'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.unblockSubscription(subscriptionId)}\n                        className={classes.button}\n                        disabled={this.api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='unblock'\n                            defaultMessage='Unblock'\n                        />\n                    </Button>\n                </dev>\n            );\n        } else {\n            return (\n                <dev>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.blockProductionOnly(subscriptionId)}\n                        className={classes.button}\n                        disabled={this.api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='block.production.only'\n                            defaultMessage='Block Production Only'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.blockSubscription(subscriptionId)}\n                        className={classes.button}\n                        disabled={this.api.isRevision}\n                    >\n                        <FormattedMessage\n                            id='block.all'\n                            defaultMessage='Block All'\n                        />\n                    </Button>\n                    <Button\n                        size='small'\n                        variant='outlined'\n                        color='primary'\n                        onClick={() => this.unblockSubscription(subscriptionId)}\n                        className={classes.button}\n                        disabled='true'\n                    >\n                        <FormattedMessage\n                            id='unblock'\n                            defaultMessage='Unblock'\n                        />\n                    </Button>\n                </dev>\n            );\n        }\n    }\n\n    /**\n     * handleChangePage handle change in selected page\n     *\n     * @param page selected page\n     * */\n    handleChangePage(page) {\n        this.setState({ page }, this.fetchSubscriptionData);\n    }\n\n    /**\n     * handleChangeRowsPerPage handle change in rows per page\n     *\n     * @param event rows per page change event\n     * */\n    handleChangeRowsPerPage(event) {\n        this.setState({ rowsPerPage: event.target.value, page: 0 }, this.fetchSubscriptionData);\n    }\n\n    /**\n     * Returns subscription state string based on te current subscription state\n     *\n     * @param {*} state The current state of subscription\n     * @returns {JSX} Subscription state string\n     * @memberof SubscriptionsTable\n     */\n    formatSubscriptionStateString(state) {\n        if (state === subscriptionStatus.PROD_BLOCKED) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Subscriptions.SubscriptionsTable.blocked.production.only.subs.state'\n                    defaultMessage='Blocked Production Only'\n                />\n            );\n        } else if (state === subscriptionStatus.BLOCKED) {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Subscriptions.SubscriptionsTable.blocked.subs.state'\n                    defaultMessage='Blocked'\n                />\n            );\n        } else {\n            return (\n                <FormattedMessage\n                    id='Apis.Details.Subscriptions.SubscriptionsTable.active.subs.state'\n                    defaultMessage='Active'\n                />\n            );\n        }\n    }\n\n    /**\n     * Blocks the given subscription\n     *\n     * @param {*} subscriptionId Subscription ID\n     * @memberof SubscriptionsTable\n     */\n    blockSubscription(subscriptionId) {\n        const { intl } = this.props;\n        const api = new API();\n        const promisedSubscriptionUpdate = api.blockSubscriptions(subscriptionId, subscriptionStatus.BLOCKED);\n        promisedSubscriptionUpdate\n            .then(() => {\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.Subscriptions.SubscriptionsTable.subscription.blocked',\n                    defaultMessage: 'Subscription was blocked.',\n                }));\n                this.fetchSubscriptionData();\n            })\n            .catch((errorResponse) => {\n                console.error(errorResponse);\n                const { message } = errorResponse.response.body;\n                const messages = defineMessages({\n                    errorMessage: {\n                        id: 'Apis.Details.Subscriptions.SubscriptionsTable.error.subscription.block',\n                        defaultMessage: 'Error: Unable to block subscription. (Reason: {message})',\n                    },\n                });\n                Alert.error(intl.formatMessage(messages.errorMessage, { message }));\n            });\n    }\n\n    /**\n     * Blocks production only for the given subscription\n     *\n     * @param {*} subscriptionId Subscription ID\n     * @memberof SubscriptionsTable\n     */\n    blockProductionOnly(subscriptionId) {\n        const { intl } = this.props;\n        const api = new API();\n        const promisedSubscriptionUpdate = api.blockSubscriptions(subscriptionId, subscriptionStatus.PROD_BLOCKED);\n        promisedSubscriptionUpdate\n            .then(() => {\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.Subscriptions.SubscriptionsTable.subscription.blocked.prod.only',\n                    defaultMessage: 'Subscription was blocked for production only.',\n                }));\n                this.fetchSubscriptionData();\n            })\n            .catch((errorResponse) => {\n                console.error(errorResponse);\n                const { message } = errorResponse.response.body;\n                const messages = defineMessages({\n                    errorMessage: {\n                        id: 'Apis.Details.Subscriptions.SubscriptionsTable.error.subscription.block.prod.only',\n                        defaultMessage: 'Error: Unable to block subscription. (Reason: {message})',\n                    },\n                });\n                Alert.error(intl.formatMessage(messages.errorMessage, { message }));\n            });\n    }\n\n    /**\n     * Unblocks the given subscription\n     *\n     * @param {*} subscriptionId Subscription ID\n     * @memberof SubscriptionsTable\n     */\n    unblockSubscription(subscriptionId) {\n        const { intl } = this.props;\n        const api = new API();\n        const promisedSubscriptionUpdate = api.unblockSubscriptions(subscriptionId);\n        promisedSubscriptionUpdate\n            .then(() => {\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.Subscriptions.SubscriptionsTable.subscription.unblocked',\n                    defaultMessage: 'Subscription was unblocked.',\n                }));\n                this.fetchSubscriptionData();\n            })\n            .catch((errorResponse) => {\n                console.error(errorResponse);\n                const { message } = errorResponse.response.body;\n                const messages = defineMessages({\n                    errorMessage: {\n                        id: 'Apis.Details.Subscriptions.SubscriptionsTable.error.subscription.unblock',\n                        defaultMessage: 'Error: Unable to unblock subscription. (Reason: {message})',\n                    },\n                });\n                Alert.error(intl.formatMessage(messages.errorMessage, { message }));\n            });\n    }\n\n    /**\n     * Fetches subscription data\n     *\n     * @memberof SubscriptionsTable\n     */\n    fetchSubscriptionData() {\n        const api = new API();\n        const { page, rowsPerPage, searchQuery } = this.state;\n        const { intl } = this.props;\n        const promisedSubscriptions = api.subscriptions(this.api.id, page * rowsPerPage, rowsPerPage, searchQuery);\n        promisedSubscriptions\n            .then((response) => {\n                for (let i = 0; i < response.body.list.length; i++) {\n                    const { subscriptionId } = response.body.list[i];\n                    response.body.list[i].name = response.body.list[i].applicationInfo.name;\n                    const promisedInfo = api.getSubscriberInfo(subscriptionId);\n                    promisedInfo\n                        .then((resp) => {\n                            this.setState((prevState) => ({\n                                subscriberClaims: {\n                                    ...prevState.subscriberClaims,\n                                    [subscriptionId]: resp.body,\n                                },\n                            }));\n                        })\n                        .catch((errorMessage) => {\n                            console.error(errorMessage);\n                            Alert.error(intl.formatMessage({\n                                id: 'Apis.Details.Subscriptions.SubscriptionsTable.subscriber.info.error',\n                                defaultMessage: 'Error while retrieving the subscriber information',\n                            }));\n                        });\n                }\n                this.setState({\n                    subscriptions: response.body.list,\n                    totalSubscription: response.body.pagination.total,\n                });\n            })\n            .catch((errorMessage) => {\n                console.error(errorMessage);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Subscriptions.SubscriptionsTable.subscriptions.error',\n                    defaultMessage: 'Error while retrieving the subscriptions',\n                }));\n            });\n        api.getMonetization(this.props.api.id).then((status) => {\n            this.setState({ monetizationStatus: status.enabled });\n        });\n        api.getSubscriptionPolicies(this.api.id).then((policies) => {\n            const filteredPolicies = policies.filter((policy) => policy.tierPlan === 'COMMERCIAL');\n            this.setState({ policies: filteredPolicies });\n        });\n    }\n\n    /**\n     * Checks whether the policy is a usage based monetization plan\n     *\n     * */\n    isMonetizedPolicy(policyName) {\n        const { policies, monetizationStatus } = this.state;\n        if (policies.length > 0) {\n            const filteredPolicies = policies.filter(\n                (policy) => policy.name === policyName && policy.monetizationAttributes.pricePerRequest != null,\n            );\n            return (filteredPolicies.length > 0 && monetizationStatus);\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Filter subscriptions based on user search value\n     *\n     * @param event onChange event of user search\n     */\n    filterSubscriptions(event) {\n        this.setState({ searchQuery: event.target.value }, this.fetchSubscriptionData);\n    }\n\n    /**\n     * Render claims based on the claim object\n     */\n    renderClaims(claimsObject) {\n        const { classes } = this.props;\n        if (claimsObject) {\n            return (\n                <div className={classes.root}>\n                    {claimsObject.name}\n                    <Grid container spacing={1}>\n                        <Grid item>\n                            <UserIcon color='primary' />\n                        </Grid>\n                        <Grid item>\n                            {claimsObject.name}\n                        </Grid>\n                    </Grid>\n                    {claimsObject.claims && (\n                        <div>\n                            <Table className={classes.table}>\n                                <TableBody>\n                                    {claimsObject.claims.map((claim) => (\n                                        <TableRow hover>\n                                            <TableCell>{claim.name}</TableCell>\n                                            {claim.value ? (\n                                                <TableCell>{claim.value}</TableCell>\n                                            ) : (\n                                                <TableCell>Not Available</TableCell>\n                                            )}\n                                        </TableRow>\n                                    ))}\n                                </TableBody>\n                            </Table>\n                        </div>\n                    )}\n                </div>\n            );\n        }\n        return (\n            <div>\n                <Typography className={classes.typography}>\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Subscriber.no.claims'\n                        defaultMessage='No subscriber claims data available'\n                    />\n                </Typography>\n            </div>\n        );\n    }\n\n    /**\n     *\n     */\n    render() {\n        const {\n            subscriptions, page, rowsPerPage, totalSubscription, rowsPerPageOptions, emptyColumnHeight,\n            subscriberClaims,\n        } = this.state;\n        const { classes, api } = this.props;\n        if (!subscriptions) {\n            return (\n                <Grid container direction='row' justify='center' alignItems='center'>\n                    <Grid item>\n                        <CircularProgress />\n                    </Grid>\n                </Grid>\n            );\n        }\n        const columns = [\n            {\n                name: 'subscriptionId',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                },\n            },\n            {\n                name: 'applicationInfo.applicationId',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                },\n            },\n            {\n                name: 'applicationInfo.subscriber',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Listing.column.header.subscriber'\n                        defaultMessage='Subscriber'\n                    />\n                ),\n                options: {\n                    sort: false,\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            let claimsObject;\n                            if (subscriberClaims) {\n                                claimsObject = subscriberClaims[tableMeta.rowData[0]];\n                            }\n                            return (\n                                <Box display='flex'>\n                                    <Box pr={1}>\n                                        {subscriberClaims && claimsObject && claimsObject.name}\n                                    </Box>\n                                    <Tooltip\n                                        interactive\n                                        placement='top'\n                                        classes={{\n                                            tooltip: classes.InfoToolTip,\n                                        }}\n                                        title={(\n                                            <>\n                                                {subscriberClaims && (\n                                                    <div>\n                                                        {this.renderClaims(claimsObject)}\n                                                    </div>\n                                                )}\n                                            </>\n                                        )}\n                                    >\n                                        <Grid container direction='row' alignItems='center' spacing={1}>\n                                            <Grid item>\n                                                <Typography>\n                                                    <InfoIcon color='action' />\n                                                </Typography>\n                                            </Grid>\n                                            <Grid item>\n                                                {value}\n                                            </Grid>\n                                        </Grid>\n                                    </Tooltip>\n                                </Box>\n                            );\n                        }\n                        return null;\n                    },\n                },\n            },\n            {\n                name: 'name',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Listing.column.header.application'\n                        defaultMessage='Application'\n                    />\n                ),\n                options: {\n                    sort: false,\n                },\n            },\n            {\n                name: 'applicationInfo.description',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                },\n            },\n            {\n                name: 'applicationInfo.subscriptionCount',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                },\n            },\n            {\n                name: 'throttlingPolicy',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Listing.column.header.throttling.tier'\n                        defaultMessage='Tier'\n                    />\n                ),\n                options: {\n                    sort: false,\n                },\n            },\n            {\n                name: 'subscriptionStatus',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Listing.column.header.subscription.status'\n                        defaultMessage='Status'\n                    />\n                ),\n                options: {\n                    sort: false,\n                },\n            },\n            {\n                name: 'actions',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Listing.column.header.subscription.actions'\n                        defaultMessage='Actions'\n                    />\n                ),\n                options: {\n                    sort: false,\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const status = tableMeta.rowData[7];\n                            const subscriptionId = tableMeta.rowData[0];\n                            return (\n                                <ScopeValidation\n                                    resourceMethod={resourceMethod.POST}\n                                    resourcePath={resourcePath.BLOCK_SUBSCRIPTION}\n                                >\n                                    {\n                                        this.getSubscriptionBlockingButtons(\n                                            status,\n                                            subscriptionId,\n                                        )\n                                    }\n                                </ScopeValidation>\n                            );\n                        }\n                        return null;\n                    },\n                },\n            },\n            {\n                name: 'invoice',\n                label: (\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.Listing.column.header.subscription.invoice'\n                        defaultMessage='Invoice'\n                    />\n                ),\n                options: {\n                    sort: false,\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const throttlingPolicy = tableMeta.rowData[6];\n                            const subscriptionId = tableMeta.rowData[0];\n                            return (\n                                <Invoice\n                                    subscriptionId={subscriptionId}\n                                    isNotAuthorized={this.isNotCreator && this.isNotPublisher}\n                                    isMonetizedUsagePolicy={\n                                        this.isMonetizedPolicy(throttlingPolicy)\n                                    }\n                                    api={api}\n                                />\n                            );\n                        }\n                        return null;\n                    },\n                },\n            },\n        ];\n\n        const options = {\n            title: false,\n            print: false,\n            download: false,\n            viewColumns: false,\n            elevation: 1,\n            customToolbar: false,\n            search: false,\n            selectableRows: 'none',\n            rowsPerPageOptions: [5, 10, 25, 50, 100],\n            customFooter: () => {\n                return (\n                    <TablePagination\n                        rowsPerPageOptions={rowsPerPageOptions}\n                        colSpan={6}\n                        count={totalSubscription}\n                        rowsPerPage={rowsPerPage}\n                        page={page}\n                        onChangePage={this.handleChangePage}\n                        onChangeRowsPerPage={this.handleChangeRowsPerPage}\n                        ActionsComponent={SubscriptionTablePagination}\n                    />\n                );\n            },\n        };\n        const subMails = {};\n        const emails = subscriberClaims && Object.entries(subscriberClaims).map(([, v]) => {\n            let email = null;\n            if (!subMails[v.name]) {\n                email = v.claims.find((claim) => claim.uri === 'http://wso2.org/claims/emailaddress').value;\n                subMails[v.name] = email;\n            }\n            return email;\n        }).reduce((a, b) => {\n            return b !== null ? `${a || ''},${b}` : a;\n        });\n        let names = null;\n        if (subMails) {\n            Object.entries(subMails).map(([k, v]) => {\n                if (v) {\n                    if (names === null) {\n                        names = k;\n                    } else {\n                        names = `${names}, ${k}`;\n                    }\n                }\n                return null;\n            });\n        }\n        const Tip = names ? React.Fragment : Tooltip;\n        return (\n            <>\n                <div className={classes.heading}>\n                    <Typography variant='h4'>\n                        <FormattedMessage\n                            id='Apis.Details.Subscriptions.SubscriptionsTable.manage.subscriptions'\n                            defaultMessage='Manage Subscriptions'\n                        />\n                        {'   '}\n                        {subscriptions.length > 0 && (\n                            <Tip title='No contact details' placement='top'>\n                                <span>\n                                    <Button\n                                        target='_blank'\n                                        rel='noopener'\n                                        href={`mailto:?subject=Message from the API Publisher&cc=${emails}`\n                                            + `&body=Hi ${names},`}\n                                        size='small'\n                                        disabled={!names}\n                                        variant='outlined'\n                                    >\n                                        Contact Subscribers\n                                    </Button>\n                                </span>\n                            </Tip>\n                        )}\n                    </Typography>\n                    <Typography variant='caption' gutterBottom>\n                        <FormattedMessage\n                            id='Apis.Details.Subscriptions.SubscriptionsTable.sub.heading'\n                            defaultMessage='Manage subscriptions of the API'\n                        />\n                    </Typography>\n                </div>\n                <Paper elevation={0}>\n                    {subscriptions.length > 0 ? (\n                        <div>\n                            <MUIDataTable title='' data={subscriptions} columns={columns} options={options} />\n                        </div>\n                    )\n                        : (\n                            <div className={classes.noDataMessage} style={{ height: rowsPerPage * emptyColumnHeight }}>\n                                <FormattedMessage\n                                    id='Apis.Details.Subscriptions.SubscriptionsTable.no.subscriptions'\n                                    defaultMessage='No subscriptions data available'\n                                />\n                            </div>\n                        )}\n                </Paper>\n            </>\n        );\n    }\n}\n\nSubscriptionsTable.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(SubscriptionsTable));\n","/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport MUIDataTable from 'mui-datatables';\nimport API from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport { FormattedMessage } from 'react-intl';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogActions from '@material-ui/core/DialogActions';\n\nconst columns = ['Name', 'Value'];\n\nconst options = {\n    filterType: 'checkbox',\n    sort: false,\n    search: false,\n    viewColumns: false,\n    filter: false,\n    selectableRowsHeader: false,\n    selectableRows: 'none',\n    pagination: false,\n    download: false,\n};\n\n// eslint-disable-next-line require-jsdoc\nfunction Invoice(props) {\n    const {\n        subscriptionId,\n        isMonetizedUsagePolicy,\n        isNotAuthorized,\n        api,\n    } = props;\n    const [showPopup, setShowPopup] = useState(false);\n    const [showErrorPopup, setShowErrorPopup] = useState(false);\n    const [invoice, setInvoice] = useState(null);\n\n    /**\n   * Handle the popup for invoice\n   */\n    const handlePopup = () => {\n        setShowPopup(true);\n        setInvoice(null);\n        if (api.apiType === API.CONSTS.APIProduct) {\n            const apiProduct = new APIProduct(api.name, api.context, api.policies);\n            const promiseInvoice = apiProduct.getMonetizationInvoice(subscriptionId);\n            promiseInvoice.then((response) => {\n                const invoiceData = [];\n                Object.keys(response.properties).map((invoiceItem) => {\n                    const insideArray = [];\n                    insideArray.push(invoiceItem);\n                    insideArray.push(response.properties[invoiceItem]);\n                    invoiceData.push(insideArray);\n                    return true;\n                });\n                setInvoice(invoiceData);\n            }).catch((error) => {\n                console.error(error);\n                setShowErrorPopup(true);\n            });\n        } else {\n            const promiseInvoice = api.getMonetizationInvoice(subscriptionId);\n            promiseInvoice.then((response) => {\n                const invoiceData = [];\n                Object.keys(response.properties).map((invoiceItem) => {\n                    const insideArray = [];\n                    insideArray.push(invoiceItem);\n                    insideArray.push(response.properties[invoiceItem]);\n                    invoiceData.push(insideArray);\n                    return true;\n                });\n                setInvoice(invoiceData);\n            }).catch((error) => {\n                console.error(error);\n                setShowErrorPopup(true);\n            });\n        }\n    };\n\n    /**\n   * Handle closing the popup for invoice\n   */\n    const handleClose = () => {\n        setShowPopup(false);\n    };\n\n    const handleAlertClose = () => {\n        setShowErrorPopup(false);\n    };\n\n    return (\n        <>\n            <Button\n                variant='outlined'\n                size='small'\n                color='primary'\n                disabled={!isMonetizedUsagePolicy || isNotAuthorized}\n                onClick={handlePopup}\n            >\n                <FormattedMessage\n                    id='Applications.Details.Invoice.view.btn'\n                    defaultMessage='View Invoice'\n                />\n            </Button>\n            <Dialog open={showPopup} onClose={handleClose} fullWidth='true'>\n                {invoice && (\n                    <MUIDataTable\n                        title='Upcoming Invoice'\n                        data={invoice}\n                        columns={columns}\n                        options={options}\n                    />\n                )}\n            </Dialog>\n            <Dialog open={showErrorPopup} onClose={handleAlertClose} fullWidth='true'>\n                <DialogTitle>No Data Available</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id='invoice-dialog-description'>\n                        Pending invoice data not found for this subscription.\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleAlertClose} color='primary'>\n                        Close\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\n\nInvoice.propTypes = {\n    subscriptionId: PropTypes.string.isRequired,\n    isMonetizedUsagePolicy: PropTypes.string.isRequired,\n    isNotAuthorized: PropTypes.string.isRequired,\n    api: PropTypes.instanceOf(API).isRequired,\n};\n\nexport default Invoice;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Typography from '@material-ui/core/Typography';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Paper from '@material-ui/core/Paper';\nimport API from 'AppData/api';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst styles = (theme) => ({\n    subscriptionPoliciesPaper: {\n        marginTop: theme.spacing(2),\n        padding: theme.spacing(2),\n    },\n    grid: {\n        margin: theme.spacing(1.25),\n    },\n    gridLabel: {\n        marginTop: theme.spacing(1.5),\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n});\n\n/**\n * Manage subscription policies of the API\n * */\nclass SubscriptionPoliciesManage extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            subscriptionPolicies: {},\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        const { api } = this.props;\n        const isAsyncAPI = (api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE');\n        const policyPromise = isAsyncAPI ? API.asyncAPIPolicies() : API.policies('subscription');\n        policyPromise\n            .then((res) => {\n                this.setState({ subscriptionPolicies: res.body.list });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n            });\n    }\n\n    /**\n     * Handle onChange of selected subsription policies\n     *\n     * @param event onChange event\n     */\n    handleChange(event) {\n        const { name, checked } = event.target;\n        const { setPolices, policies } = this.props;\n        let newSelectedPolicies = [...policies];\n        if (checked) {\n            newSelectedPolicies.push(name);\n        } else {\n            newSelectedPolicies = policies.filter((policy) => policy !== name);\n        }\n        setPolices(newSelectedPolicies);\n    }\n\n    render() {\n        const { classes, api, policies } = this.props;\n        const { subscriptionPolicies } = this.state;\n\n        return (\n            <>\n                <Typography id='itest-api-details-bushiness-plans-head' variant='h4'>\n                    <FormattedMessage\n                        id='Apis.Details.Subscriptions.SubscriptionPoliciesManage.business.plans'\n                        defaultMessage='Business Plans'\n                    />\n                </Typography>\n                {api.apiType === API.CONSTS.APIProduct\n                    ? (\n                        <Typography variant='caption' gutterBottom>\n                            <FormattedMessage\n                                id='Apis.Details.Subscriptions.SubscriptionPoliciesManage.APIProduct.sub.heading'\n                                defaultMessage='Attach business plans to API'\n                            />\n                        </Typography>\n                    )\n                    : (\n                        <Typography variant='caption' gutterBottom>\n                            <FormattedMessage\n                                id='Apis.Details.Subscriptions.SubscriptionPoliciesManage.sub.heading'\n                                defaultMessage='Attach business plans to API'\n                            />\n                        </Typography>\n                    )}\n                <Paper className={classes.subscriptionPoliciesPaper}>\n                    <FormControl className={classes.formControl}>\n                        <FormGroup>\n                            { subscriptionPolicies && Object.entries(subscriptionPolicies).map((value) => (\n                                <FormControlLabel\n                                    key={value[1].displayName}\n                                    control={(\n                                        <Checkbox\n                                            disabled={isRestricted(['apim:api_publish', 'apim:api_create'], api)}\n                                            color='primary'\n                                            checked={policies.includes(value[1].displayName)}\n                                            onChange={(e) => this.handleChange(e)}\n                                            name={value[1].displayName}\n                                        />\n                                    )}\n                                    label={value[1].displayName + ' : ' + value[1].description}\n                                />\n                            ))}\n                        </FormGroup>\n                    </FormControl>\n                </Paper>\n            </>\n        );\n    }\n}\n\nSubscriptionPoliciesManage.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    api: PropTypes.shape({ policies: PropTypes.arrayOf(PropTypes.shape({})) }).isRequired,\n    setPolices: PropTypes.func.isRequired,\n    policies: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(SubscriptionPoliciesManage));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { makeStyles } from '@material-ui/core/styles';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport PropTypes from 'prop-types';\nimport Select from '@material-ui/core/Select';\nimport TenantAutocomplete from 'AppComponents/Apis/Details/Subscriptions/TenantAutocomplete';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    formControl: {\n        margin: theme.spacing(1),\n        minWidth: 400,\n    },\n    textControl: {\n        margin: theme.spacing(1),\n        minWidth: 300,\n    },\n    selectEmpty: {\n        marginTop: theme.spacing(2),\n    },\n    subscriptionAvailabilityPaper: {\n        marginTop: theme.spacing(2),\n        paddingLeft: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    grid: {\n        display: 'flex',\n        margin: theme.spacing(1.25),\n    },\n    gridLabel: {\n        marginTop: theme.spacing(3.5),\n    },\n    saveButton: {\n        marginTop: theme.spacing(2),\n    },\n    heading: {\n        marginTop: theme.spacing(3),\n    },\n    tenantsList: {\n        height: theme.spacing(12),\n    },\n}));\n\n/**\n * Allows user to select API availability for tenants\n * @export\n * @returns {React.Component} @inheritdoc\n */\nexport default function SimpleSelect(props) {\n    const classes = useStyles();\n    const {\n        api, setAvailability, tenantList, setTenantList,\n    } = props;\n    let currentAvailability;\n    if (api.subscriptionAvailability === null || api.subscriptionAvailability === 'CURRENT_TENANT') {\n        currentAvailability = 'currentTenant';\n    } else if (api.subscriptionAvailability === 'ALL_TENANTS') {\n        currentAvailability = 'allTenants';\n    } else if (api.subscriptionAvailability === 'SPECIFIC_TENANTS') {\n        currentAvailability = 'specificTenants';\n    }\n    const [values, setValues] = React.useState({\n        availability: currentAvailability,\n    });\n    const inputLabel = React.useRef(null);\n    const [labelWidth, setLabelWidth] = React.useState(0);\n    const isSpecificTenants = values.availability === 'specificTenants';\n    const isUIElementDisabled = isRestricted(['apim:api_publish', 'apim:api_create'], api);\n\n    React.useEffect(() => {\n        setLabelWidth(inputLabel.current.offsetWidth);\n    }, []);\n\n    /**\n     * Handle onchange for the subscription availability dropdown\n     * @param {string} value the new value selected for subscription availability\n     */\n    function subscriptionAvailableTenants(value) {\n        let availabilityValue;\n\n        setValues({\n            ...values,\n            availability: value,\n        });\n\n        if (value === 'currentTenant') {\n            availabilityValue = 'CURRENT_TENANT';\n            setTenantList([]);\n        } else if (value === 'allTenants') {\n            availabilityValue = 'ALL_TENANTS';\n            setTenantList([]);\n        } else if (value === 'specificTenants') {\n            availabilityValue = 'SPECIFIC_TENANTS';\n        }\n        setAvailability({\n            subscriptionAvailability: availabilityValue,\n        });\n    }\n\n    return (\n        <Grid item xs={12} md={12} lg={12}>\n            <Typography variant='h4' className={classes.heading}>\n                <FormattedMessage\n                    id='Apis.Details.Subscriptions.SubscriptionAvailability.subscription.availability'\n                    defaultMessage='Subscription Availability'\n                />\n            </Typography>\n            <Typography variant='caption' gutterBottom>\n                <FormattedMessage\n                    id='Apis.Details.Subscriptions.SubscriptionAvailability.sub.heading'\n                    defaultMessage='Make subscriptions available to tenants'\n                />\n            </Typography>\n            <Paper className={classes.subscriptionAvailabilityPaper}>\n                <form className={classes.root} autoComplete='off' onSubmit={(e) => { e.preventDefault(); }}>\n                    <Grid container xs={12} spacing={1} className={classes.grid}>\n                        <Grid item xs={10}>\n                            <FormControl\n                                variant='outlined'\n                                className={classes.formControl}\n                                disabled={isUIElementDisabled}\n                            >\n                                <InputLabel ref={inputLabel} htmlFor='outlined-age-simple' />\n                                <Select\n                                    value={values.availability}\n                                    onChange={({ target: { value } }) => {\n                                        subscriptionAvailableTenants(value);\n                                    }}\n                                    labelWidth={labelWidth}\n                                    displayEmpty\n                                    name='availability'\n                                    inputProps={{\n                                        name: 'availability',\n                                        id: 'outlined-availabi;ity-simple',\n                                    }}\n                                >\n                                    <MenuItem value='currentTenant'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Subscriptions.SubscriptionAvailability.current.tenant.only'\n                                            defaultMessage='Available to current tenant only'\n                                        />\n                                    </MenuItem>\n                                    <MenuItem value='allTenants'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Subscriptions.SubscriptionAvailability.all.tenants'\n                                            defaultMessage='Available to all the tenants'\n                                        />\n                                    </MenuItem>\n                                    <MenuItem value='specificTenants'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Subscriptions.SubscriptionAvailability.specific.tenants'\n                                            defaultMessage='Available to specific tenants'\n                                        />\n                                    </MenuItem>\n                                </Select>\n                            </FormControl>\n                        </Grid>\n                        {isSpecificTenants ? (\n                            <Grid item xs={8} className={classes.tenantsList}>\n                                <TenantAutocomplete setTenantList={setTenantList} tenantList={tenantList} api={api} />\n                            </Grid>\n                        ) : <Grid item xs={8} />}\n                    </Grid>\n                </form>\n            </Paper>\n        </Grid>\n    );\n}\nSimpleSelect.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    api: PropTypes.shape({ policies: PropTypes.arrayOf(PropTypes.shape({})) }).isRequired,\n    setAvailability: PropTypes.func.isRequired,\n    setTenantList: PropTypes.func.isRequired,\n    tenantList: PropTypes.shape([]).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport deburr from 'lodash/deburr';\nimport Downshift from 'downshift';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Chip from '@material-ui/core/Chip';\nimport API from 'AppData/api';\nimport CONSTS from 'AppData/Constants';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        height: 250,\n    },\n    container: {\n        flexGrow: 1,\n        position: 'relative',\n    },\n    paper: {\n        position: 'absolute',\n        zIndex: 1,\n        marginTop: theme.spacing(1),\n        left: 0,\n        right: 0,\n    },\n    chip: {\n        margin: theme.spacing(0.5, 0.25),\n    },\n    inputRoot: {\n        flexWrap: 'wrap',\n    },\n    inputInput: {\n        width: 'auto',\n        flexGrow: 1,\n    },\n    divider: {\n        height: theme.spacing(2),\n    },\n}));\n\n/**\n * Renders the input component\n */\nfunction renderInput(inputProps) {\n    const {\n        InputProps, classes, ref, ...other\n    } = inputProps;\n\n    return (\n        <TextField\n            InputProps={{\n                inputRef: ref,\n                classes: {\n                    root: classes.inputRoot,\n                    input: classes.inputInput,\n                },\n                ...InputProps,\n            }}\n            {...other}\n        />\n    );\n}\n\nrenderInput.propTypes = {\n    classes: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    InputProps: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n};\n\n/**\n * Renders the suggestion component\n */\nfunction renderSuggestion(suggestionProps) {\n    const {\n        suggestion, index, itemProps, highlightedIndex, tenantList,\n    } = suggestionProps;\n    const isHighlighted = highlightedIndex === index;\n    const isSelected = (tenantList || '').indexOf(suggestion) > -1;\n\n    return (\n        <MenuItem\n            {...itemProps}\n            key={suggestion}\n            selected={isHighlighted}\n            component='div'\n            style={{\n                fontWeight: isSelected ? 500 : 400,\n            }}\n        >\n            {suggestion}\n        </MenuItem>\n    );\n}\n\nrenderSuggestion.propTypes = {\n    highlightedIndex: PropTypes.oneOfType([PropTypes.oneOf([null]), PropTypes.number]).isRequired,\n    index: PropTypes.number.isRequired,\n    itemProps: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    tenantList: PropTypes.shape([]).isRequired,\n    suggestion: PropTypes.string.isRequired,\n};\n\n/**\n * Gets suggestion list\n */\nfunction getSuggestions(value, suggestions, { showEmpty = false } = {}) {\n    const inputValue = deburr(value.trim()).toLowerCase();\n    const inputLength = inputValue.length;\n    let count = 0;\n\n    return inputLength === 0 && !showEmpty\n        ? []\n        : suggestions.filter((suggestion) => {\n            const keep = count < 15 && suggestion.slice(0, inputLength).toLowerCase() === inputValue;\n            if (keep) {\n                count += 1;\n            }\n            return keep;\n        });\n}\n\n/**\n * Downshift selection component\n */\nfunction DownshiftMultiple(props) {\n    const { tenantList, setTenantList } = props;\n    const { classes, suggestions } = props;\n    const [inputValue, setInputValue] = React.useState('');\n\n    function handleKeyDown(event) {\n        if (tenantList.length && !inputValue.length && event.key === 'Backspace') {\n            setTenantList(tenantList.slice(0, tenantList.length - 1));\n        }\n    }\n\n    function handleInputChange(event) {\n        setInputValue(event.target.value);\n    }\n\n    function handleChange(item) {\n        let newSelectedItem = [...tenantList];\n        if (newSelectedItem.indexOf(item) === -1) {\n            newSelectedItem = [...newSelectedItem, item];\n        }\n        setInputValue('');\n        setTenantList(newSelectedItem);\n    }\n\n    const handleDelete = (item) => () => {\n        const newSelectedItem = [...tenantList];\n        newSelectedItem.splice(newSelectedItem.indexOf(item), 1);\n        setTenantList(newSelectedItem);\n    };\n\n    return (\n        <Downshift\n            id='downshift-multiple'\n            inputValue={inputValue}\n            onChange={handleChange}\n            tenantList={tenantList}\n        >\n            {({\n                getInputProps,\n                getItemProps,\n                getLabelProps,\n                isOpen,\n                inputValue: inputValue2,\n                tenantList: tenantList2,\n                highlightedIndex,\n            }) => {\n                const {\n                    onBlur, onChange, onFocus, ...inputProps\n                } = getInputProps({\n                    onKeyDown: handleKeyDown,\n                    placeholder: 'Type and select tenants from the suggested list',\n                });\n\n                return (\n                    <div className={classes.container}>\n                        {renderInput({\n                            fullWidth: true,\n                            classes,\n                            label: 'Tenants',\n                            InputLabelProps: getLabelProps(),\n                            InputProps: {\n                                startAdornment: tenantList.map((item) => (\n                                    <Chip\n                                        key={item}\n                                        tabIndex={-1}\n                                        label={item}\n                                        className={classes.chip}\n                                        onDelete={handleDelete(item)}\n                                    />\n                                )),\n                                onBlur,\n                                onChange: (event) => {\n                                    handleInputChange(event);\n                                    onChange(event);\n                                },\n                                onFocus,\n                            },\n                            inputProps,\n                        })}\n\n                        {isOpen ? (\n                            <Paper className={classes.paper} square>\n                                {getSuggestions(inputValue2, suggestions).map((suggestion, index) => renderSuggestion({\n                                    suggestion,\n                                    index,\n                                    itemProps: getItemProps({ item: suggestion }),\n                                    highlightedIndex,\n                                    tenantList: tenantList2,\n                                }))}\n                            </Paper>\n                        ) : null}\n                    </div>\n                );\n            }}\n        </Downshift>\n    );\n}\n\nDownshiftMultiple.propTypes = {\n    classes: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    setTenantList: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    suggestions: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    tenantList: PropTypes.shape([]).isRequired,\n};\n\n/**\n * Gets tenant list in order to populate suggestions list\n */\nexport default function IntegrationDownshift(props) {\n    const classes = useStyles();\n    const [suggestions, setsuggestions] = useState({});\n    const { setTenantList, tenantList } = props;\n\n    const restApi = new API();\n\n    useEffect(() => {\n        restApi.getTenantsByState(CONSTS.TENANT_STATE_ACTIVE)\n            .then((result) => {\n                const tenants = result.body.list;\n                const newSuggestions = tenants.map((tenant) => { return tenant.domain; });\n                setsuggestions(newSuggestions);\n            });\n    }, []);\n\n    return (\n        <div className={classes.root}>\n            <div className={classes.divider} />\n            <DownshiftMultiple\n                classes={classes}\n                suggestions={suggestions}\n                tenantList={tenantList}\n                setTenantList={setTenantList}\n            />\n            <div className={classes.divider} />\n        </div>\n    );\n}\n\nIntegrationDownshift.propTypes = {\n    setTenantList: PropTypes.shape({\n        type: PropTypes.string,\n        inputType: PropTypes.string,\n    }).isRequired,\n    tenantList: PropTypes.shape([]).isRequired,\n};\n","/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid/Grid';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Alert from 'AppComponents/Shared/Alert';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport CommentsAPI from 'AppData/Comments';\nimport Comment from './Comment';\nimport CommentAdd from './CommentAdd';\n\nconst styles = (theme) => ({\n    root: {\n        display: 'flex',\n        alignItems: 'center',\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n    },\n    paper: {\n        marginRight: theme.spacing(3),\n        paddingBottom: theme.spacing(3),\n        paddingRight: theme.spacing(2),\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    contentWrapper: {\n        paddingLeft: theme.spacing(3),\n        marginTop: theme.spacing(1),\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    contentWrapperOverview: {\n        padding: 0,\n        width: '100%',\n        boxShadow: 'none',\n    },\n    titleSub: {\n        cursor: 'pointer',\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    link: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        cursor: 'pointer',\n    },\n    verticalSpace: {\n        marginTop: theme.spacing(0.2),\n    },\n    loadMoreLink: {\n        textDecoration: 'none',\n    },\n    genericMessageWrapper: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        marginRight: theme.spacing(3),\n    },\n    paperProgress: {\n        padding: theme.spacing(3),\n        marginTop: theme.spacing(2),\n        textAlign: 'center',\n    },\n    dialogContainer: {\n        width: 1000,\n        padding: theme.spacing(2),\n    },\n});\n\n/**\n * Display a comment list\n * @class Comments\n * @extends {React.Component}\n */\nclass Comments extends Component {\n    /**\n     * Creates an instance of Comments\n     * @param {*} props properies passed by the parent element\n     * @memberof Comments\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: true,\n            allComments: [],\n            comments: [],\n            totalComments: 0,\n            apiId: null,\n            loading: true,\n        };\n        this.handleExpandClick = this.handleExpandClick.bind(this);\n        this.handleLoadMoreComments = this.handleLoadMoreComments.bind(this);\n        this.addComment = this.addComment.bind(this);\n        this.updateComment = this.updateComment.bind(this);\n        this.onDeleteComment = this.onDeleteComment.bind(this);\n    }\n\n    /**\n     * Gets all the comments for a particular API, when component mounts\n     * @memberof Comments\n     */\n    componentDidMount() {\n        const { api, theme } = this.props;\n        this.setState({ apiId: api.id });\n        const limit = theme.custom.commentsLimit;\n        const offset = 0;\n\n        CommentsAPI.all(api.id, limit, offset)\n            .then((result) => {\n                const commentList = result.body.list;\n                this.setState({\n                    allComments: commentList,\n                    comments: commentList,\n                    totalComments: result.body.pagination.total,\n                    loading: false,\n                });\n            })\n            .catch((error) => {\n                console.error(error);\n                if (error.response) {\n                    Alert.error(error.response.body.message);\n                } else {\n                    Alert.error('Something went wrong while retrieving comments');\n                }\n            });\n    }\n\n    /**\n     * Delete a comment\n     * @param {string} commentIdOfCommentToDelete id of deleted commetn\n     * @memberof Comments\n     */\n    onDeleteComment(commentIdOfCommentToDelete) {\n        const {\n            apiId, comments, totalComments,\n        } = this.state;\n\n        const remainingComments = comments.filter((item) => item.id !== commentIdOfCommentToDelete);\n        const newTotal = totalComments - 1;\n\n        if (newTotal > remainingComments.length) {\n            CommentsAPI\n                .all(apiId, 1, remainingComments.length)\n                .then((result) => {\n                    if (result.body) {\n                        this.setState({\n                            totalComments: newTotal,\n                            comments: [...remainingComments, ...result.body.list],\n                            allComments: [...remainingComments, ...result.body.list],\n                        });\n                    }\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                });\n        } else {\n            this.setState({\n                totalComments: newTotal,\n                comments: remainingComments,\n                allComments: remainingComments,\n            });\n        }\n    }\n\n    /**\n     * Add comment to the comment list\n     * @param {any} comment added comment\n     * @memberof Comments\n     */\n    addComment(comment) {\n        const { totalComments, allComments } = this.state;\n        const newTotal = totalComments + 1;\n\n        this.setState({\n            allComments: [comment, ...allComments],\n            totalComments: newTotal,\n            comments: [comment, ...allComments],\n        });\n    }\n\n    /**\n     * Update a specific comment in the comment list\n     * @param {any} comment updated comment\n     * @memberof Comments\n     */\n    updateComment(comment) {\n        const { comments } = this.state;\n\n        const newComments = comments.reduce((acc, cur) => {\n            let temp = cur;\n            if (cur.id === comment.id) {\n                temp = comment;\n            }\n            return [...acc, temp];\n        }, []);\n        this.setState({\n            allComments: newComments,\n            comments: newComments,\n        });\n    }\n\n    /**\n     * Handles loading the previous comments\n     * @memberof Comments\n     */\n    handleLoadMoreComments() {\n        const { allComments, comments } = this.state;\n        const { theme, api: { id: apiId } } = this.props;\n        const limit = theme.custom.commentsLimit;\n        const offset = comments.length;\n\n        CommentsAPI.all(apiId, limit, offset)\n            .then((result) => {\n                const newAllCommentList = allComments.concat(result.body.list);\n                this.setState({ allComments: newAllCommentList, comments: newAllCommentList });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n            });\n    }\n\n    /**\n     * Handles expanding the comment section\n     * @memberof Comments\n     */\n    handleExpandClick() {\n        const { expanded } = this.state;\n        this.setState({ expanded: !expanded });\n    }\n\n    /**\n     * Render method of the component\n     * @returns {React.Component} Comment html component\n     * @memberof Comments\n     */\n    render() {\n        const { classes, api } = this.props;\n        const {\n            comments, allComments, totalComments, loading,\n        } = this.state;\n        return (\n            <div className={classes.contentWrapper}>\n                <div className={classes.root}>\n                    <Typography id='itest-api-details-comments-head' variant='h4' className={classes.titleSub}>\n                        {totalComments > 0 ? totalComments + (' ') : ''}\n                        <FormattedMessage id='Apis.Details.Comments.title' defaultMessage='Comments' />\n                    </Typography>\n                </div>\n\n                <div className={classes.paper}>\n                    <CommentAdd\n                        api={api}\n                        commentsUpdate={this.addComment}\n                        addComment={this.addComment}\n                        allComments={allComments}\n                        replyTo={null}\n                        cancelButton\n                    />\n                </div>\n\n                {loading && (\n                    <div className={classes.paperProgress}>\n                        <CircularProgress size={24} />\n                    </div>\n                )}\n                {!loading && totalComments === 0\n                    && (\n                        <div className={classes.genericMessageWrapper}>\n                            <InlineMessage type='info' className={classes.dialogContainer}>\n                                <Typography variant='h5' component='h3'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Comments.no.comments'\n                                        defaultMessage='No Comments Yet'\n                                    />\n                                </Typography>\n                                <Typography component='p'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Comments.no.comments.content'\n                                        defaultMessage='No comments available for this API yet'\n                                    />\n                                </Typography>\n                            </InlineMessage>\n                        </div>\n                    )}\n                <Comment\n                    comments={comments}\n                    api={api}\n                    allComments={allComments}\n                    onDeleteComment={this.onDeleteComment}\n                    updateComment={this.updateComment}\n                />\n                {totalComments > comments.length && (\n                    <div className={classes.contentWrapper}>\n                        <Grid container spacing={4} className={classes.root}>\n                            <Grid item>\n                                <Typography className={classes.verticalSpace} variant='body1'>\n                                    <a\n                                        className={classes.link + ' ' + classes.loadMoreLink}\n                                        onClick={this.handleLoadMoreComments}\n                                        onKeyDown={this.handleLoadMoreComments}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Comments.load.previous.comments'\n                                            defaultMessage='Show More'\n                                        />\n                                    </a>\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Typography className={classes.verticalSpace} variant='body1'>\n                                    {'(' + comments.length + ' of ' + totalComments + ')'}\n                                </Typography>\n                            </Grid>\n                        </Grid>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nComments.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    api: PropTypes.instanceOf(Object).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Comments));\n","/* eslint-disable react/prop-types */\n/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Typography, Tooltip } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport Icon from '@material-ui/core/Icon';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\nimport Box from '@material-ui/core/Box';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ConfirmDialog from 'AppComponents/Shared/ConfirmDialog';\nimport CommentsAPI from 'AppData/Comments';\nimport API from 'AppData/api';\nimport CommentEdit from './CommentEdit';\nimport CommentOptions from './CommentOptions';\nimport CommentAdd from './CommentAdd';\n\ndayjs.extend(relativeTime);\n\nconst styles = (theme) => ({\n    link: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        cursor: 'pointer',\n    },\n    commentIcon: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    commentText: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        marginTop: 0,\n        width: '99%',\n        whiteSpace: 'pre-wrap',\n        overflowWrap: 'break-word',\n        wordBreak: 'break-all',\n    },\n    root: {\n        marginTop: theme.spacing(1),\n    },\n    contentWrapper: {\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n    },\n    contentWrapperOverview: {\n        background: 'transparent',\n        width: '100%',\n    },\n    divider: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(2),\n        width: '60%',\n    },\n    paper: {\n        margin: 0,\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(3),\n        paddingBottom: theme.spacing(3),\n    },\n    cleanBack: {\n        background: 'transparent',\n        width: '100%',\n        boxShadow: 'none',\n    },\n});\n\n/**\n * Display a particular comment and details\n * @class Comment\n * @extends {React.Component}\n */\nclass Comment extends React.Component {\n    /**\n     * Creates an instance of Comment\n     * @param {*} props properies passed by the parent element\n     * @memberof Comment\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            openDialog: false,\n            replyId: -1,\n            editIndex: -1,\n            deleteComment: null,\n        };\n        this.handleClickDeleteComment = this.handleClickDeleteComment.bind(this);\n        this.handleShowEdit = this.handleShowEdit.bind(this);\n        this.handleShowReply = this.handleShowReply.bind(this);\n        this.handleClickOpen = this.handleClickOpen.bind(this);\n        this.showAddComment = this.showAddComment.bind(this);\n        this.showEditComment = this.showEditComment.bind(this);\n        this.handleConfirmDialog = this.handleConfirmDialog.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.filterRemainingComments = this.filterRemainingComments.bind(this);\n        this.filterCommentToDelete = this.filterCommentToDelete.bind(this);\n        this.handleLoadMoreReplies = this.handleLoadMoreReplies.bind(this);\n        this.handleAddReply = this.handleAddReply.bind(this);\n        this.handleDeleteReply = this.handleDeleteReply.bind(this);\n    }\n\n    /**\n     * Genereates unique keys for comments\n     * @memberof Comment\n     */\n    getKey() {\n        return this.keyCount++;\n    }\n\n    /**\n     * Add two numbers.\n     * @param {string} commentToFilter comment to filter.\n     * @returns {boolean} filtering needed or not.\n     */\n    filterRemainingComments(commentToFilter) {\n        const { deleteComment } = this.state;\n        return commentToFilter.id !== deleteComment.id;\n    }\n\n    /**\n     * Add two numbers.\n     * @param {JSON} commentToFilter comment to filter.\n     * @returns {string} id of the comment.\n     */\n    filterCommentToDelete(commentToFilter) {\n        const { deleteComment } = this.state;\n        return commentToFilter.id === deleteComment.parentCommentId;\n    }\n\n    /**\n     * Shows the component to add a new comment\n     * @param {any} id of comment\n     * @memberof Comment\n     */\n    showAddComment(id) {\n        this.setState({ replyId: id });\n    }\n\n    /**\n     * Shows the component to edit a comment\n     * @param {any} index Index of comment in the array\n     * @memberof Comment\n     */\n    showEditComment(index) {\n        const { editIndex } = this.state;\n        if (editIndex === -1) {\n            this.setState({ editIndex: index });\n        }\n    }\n\n    /**\n     * Hides the component to edit a comment\n     * @param {any} index Index of comment in the array\n     * @memberof Comment\n     */\n    handleShowEdit() {\n        this.setState({ editIndex: -1 });\n    }\n\n    /**\n     * Hides the component to add a new comment\n     * @param {any} index Index of comment in the array\n     * @memberof Comment\n     */\n    handleShowReply() {\n        this.setState({ replyId: -1 });\n    }\n\n    /**\n     * Shows the confimation dialog to delete a comment\n     * @param {Object} comment Comment that has to be deleted\n     * @memberof Comment\n     */\n    handleClickOpen(comment) {\n        const { editIndex } = this.state;\n        if (editIndex === -1) {\n            this.setState({ deleteComment: comment, openDialog: true });\n        }\n    }\n\n    /**\n     * Hides the confimation dialog to delete a comment\n     * @memberof Comment\n     */\n    handleClose() {\n        this.setState({ openDialog: false });\n    }\n\n    /**\n     * Handles the Confirm Dialog\n     * @param {*} message properies passed by the Confirm Dialog\n     * @memberof Comment\n     */\n    handleConfirmDialog(message) {\n        if (message) {\n            this.handleClickDeleteComment();\n        } else {\n            this.handleClose();\n        }\n    }\n\n    /**\n     * Handles loading more comment replies\n     * @param {Object} comment comment for which replies should be loaded\n     * @memberof Comments\n     */\n    handleLoadMoreReplies(comment) {\n        const { api: { id: apiId }, comments, updateComment } = this.props;\n        const { id, replies: { count, list } } = comment;\n        const restApi = new API();\n\n        restApi\n            .getAllCommentReplies(apiId, id, 3, count)\n            .then((result) => {\n                if (result.body) {\n                    const { list: replyList, count: replyCount } = result.body;\n                    const existingComment = comments.find((entry) => entry.id === id);\n\n                    const newRepliesList = list.concat(replyList);\n                    const newCount = count + replyCount;\n                    const newLimit = newCount <= 3 ? 3 : newCount;\n\n                    const updatedComment = {\n                        ...existingComment,\n                        replies: {\n                            count: newCount,\n                            list: newRepliesList,\n                            pagination: { ...existingComment.replies.pagination, limit: newLimit },\n                        },\n                    };\n                    if (updateComment) {\n                        updateComment(updatedComment);\n                    }\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n            });\n    }\n\n    /**\n     * Handles deleting a comment\n     * @memberof Comment\n     */\n    handleClickDeleteComment() {\n        const apiClient = new CommentsAPI();\n\n        const { deleteComment } = this.state;\n        const {\n            api, onDeleteComment, intl,\n        } = this.props;\n        const apiId = api.id;\n        const commentIdOfCommentToDelete = deleteComment.id;\n        const parentCommentIdOfCommentToDelete = deleteComment.parentCommentId;\n        this.handleClose();\n\n        apiClient\n            .deleteComment(apiId, commentIdOfCommentToDelete)\n            .then(() => {\n                if (parentCommentIdOfCommentToDelete === null) {\n                    if (onDeleteComment) {\n                        onDeleteComment(commentIdOfCommentToDelete);\n                    }\n                    Alert.info('Comment has been successfully deleted');\n                } else {\n                    this.handleDeleteReply(parentCommentIdOfCommentToDelete, commentIdOfCommentToDelete);\n                    Alert.info('Reply comment has been successfully deleted');\n                }\n            })\n            .catch((error) => {\n                console.error(error);\n                if (error.response) {\n                    Alert.error(error.response.body.message);\n                } else {\n                    Alert.error(\n                        intl.formatMessage({\n                            defaultMessage: 'Something went wrong while deleting comment',\n                            id: 'Apis.Details.Comments.Comment.something.went.wrong',\n                        })\n                        + ' - '\n                        + commentIdOfCommentToDelete,\n                    );\n                }\n            });\n    }\n\n    /**\n     * Delete reply\n     * @param {string} parentCommentId parent comment of reply\n     * @param {string} replyCommentId deleted reply comment\n     * @memberof Comments\n     */\n    handleDeleteReply(parentCommentId, replyCommentId) {\n        const { comments, updateComment, api: { id: apiId } } = this.props;\n        const existingComment = comments.find((item) => item.id === parentCommentId);\n        const { replies } = existingComment;\n        // updated values\n        const updatedRepliesList = replies.list.filter((reply) => reply.id !== replyCommentId);\n        const newTotal = replies.pagination.total - 1;\n        const newLimit = replies.pagination.limit > newTotal ? newTotal : replies.pagination.limit;\n        const newCount = replies.count - 1;\n\n        if (newTotal > newCount) {\n            const restApi = new API();\n            restApi\n                .getAllCommentReplies(apiId, parentCommentId, 1, newLimit - 1)\n                .then((result) => {\n                    if (result.body) {\n                        const updatedComment = {\n                            ...existingComment,\n                            replies: {\n                                ...replies,\n                                list: [...updatedRepliesList, ...result.body.list],\n                                pagination: {\n                                    ...replies.pagination,\n                                    total: newTotal,\n                                },\n                            },\n                        };\n                        if (updateComment) {\n                            updateComment(updatedComment);\n                        }\n                    }\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.log(error);\n                    }\n                });\n        } else {\n            const updatedComment = {\n                ...existingComment,\n                replies: {\n                    ...replies,\n                    count: newCount,\n                    list: updatedRepliesList,\n                    pagination: {\n                        ...replies.pagination,\n                        limit: newLimit,\n                        total: newTotal,\n                    },\n                },\n            };\n            if (updateComment) {\n                updateComment(updatedComment);\n            }\n        }\n    }\n\n    /**\n     * Add new reply\n     * @param {Object} comment added reply comment\n     * @memberof Comments\n     */\n    handleAddReply(comment) {\n        const { comments, updateComment } = this.props;\n        const { parentCommentId } = comment;\n        const existingComment = comments.find((item) => item.id === parentCommentId);\n        const { replies } = existingComment;\n        const newCount = (replies.count || 0) + 1;\n        const newLimit = newCount <= 3 ? 3 : newCount;\n        const updatedComment = {\n            ...existingComment,\n            replies: {\n                ...replies,\n                count: newCount,\n                list: [...replies.list, comment],\n                pagination: {\n                    ...replies.pagination,\n                    limit: newLimit,\n                    offset: replies.pagination.offset || 0,\n                    total: replies.pagination.total + 1,\n                },\n            },\n        };\n        if (updateComment) {\n            updateComment(updatedComment);\n        }\n    }\n\n    /**\n     * Render method of the component\n     * @returns {React.Component} Comment html component\n     * @memberof Comment\n     */\n    render() {\n        const {\n            classes, comments, api, allComments, isOverview,\n        } = this.props;\n\n        const { editIndex, openDialog, replyId } = this.state;\n        return (\n            <>\n                <div className={classes.paper}>\n                    {comments\n                        && comments\n                            .slice(0)\n                            .map((comment, index) => (\n                                <div key={comment.id} className={classes.contentWrapper}>\n                                    {index !== 0 && <Divider light className={classes.divider} />}\n                                    <Grid\n                                        md={8}\n                                        container\n                                        spacing={1}\n                                        className={classNames({ [classes.root]: !isOverview })}\n                                    >\n                                        <Grid item>\n                                            <Icon className={classes.commentIcon}>account_circle</Icon>\n                                        </Grid>\n                                        <Grid item xs zeroMinWidth>\n                                            <Typography noWrap className={classes.commentText}>\n                                                {(comment.commenterInfo && comment.commenterInfo.firstName)\n                                                    ? (comment.commenterInfo.firstName + comment.commenterInfo.lastName)\n                                                    : comment.createdBy}\n                                            </Typography>\n                                            <Tooltip title={comment.createdTime} aria-label={comment.createdTime}>\n                                                <Typography noWrap className={classes.commentText} variant='caption'>\n                                                    {dayjs(comment.createdTime).fromNow()}\n                                                </Typography>\n                                            </Tooltip>\n\n                                            <Typography className={classes.commentText}>{comment.content}</Typography>\n\n                                            {!api.isRevision && (\n                                                <CommentOptions\n                                                    comment={comment}\n                                                    editIndex={editIndex}\n                                                    index={index}\n                                                    showAddComment={this.showAddComment}\n                                                    handleClickOpen={this.handleClickOpen}\n                                                    showEditComment={this.showEditComment}\n                                                />\n                                            )}\n\n                                            {comment.id === replyId && (\n                                                <Box ml={6} mb={2}>\n                                                    <CommentAdd\n                                                        api={api}\n                                                        replyTo={comment.id}\n                                                        allComments={allComments}\n                                                        handleShowReply={this.handleShowReply}\n                                                        cancelButton\n                                                        addReply={this.handleAddReply}\n                                                    />\n                                                </Box>\n                                            )}\n\n                                            {comment.replies && comment.replies.list.map((reply, commentIndex) => (\n                                                <>\n                                                    <Box ml={8}>\n                                                        {commentIndex !== 0\n                                                            && <Divider light className={classes.divider} />}\n                                                        <Grid container spacing={1} className={classes.root}>\n                                                            <Grid item>\n                                                                <Icon className={classes.commentIcon}>\n                                                                    account_circle\n                                                                </Icon>\n                                                            </Grid>\n                                                            <Grid item xs zeroMinWidth>\n                                                                <Typography noWrap className={classes.commentText}>\n                                                                    {(reply.commenterInfo\n                                                                        && reply.commenterInfo.fullName)\n                                                                        ? reply.commenterInfo.fullName\n                                                                        : reply.createdBy}\n                                                                </Typography>\n                                                                <Tooltip\n                                                                    title={comment.createdTime}\n                                                                    aria-label={comment.createdTime}\n                                                                >\n                                                                    <Typography\n                                                                        noWrap\n                                                                        className={classes.commentText}\n                                                                        variant='caption'\n                                                                    >\n                                                                        {dayjs(reply.createdTime).fromNow()}\n                                                                    </Typography>\n                                                                </Tooltip>\n\n                                                                {commentIndex !== editIndex && (\n                                                                    <Typography className={classes.commentText}>\n                                                                        {reply.content}\n                                                                    </Typography>\n                                                                )}\n\n                                                                {commentIndex === editIndex && (\n                                                                    <CommentEdit\n                                                                        api={api}\n                                                                        allComments={reply}\n                                                                        comment={reply}\n                                                                        toggleShowEdit={this.handleShowEdit}\n                                                                    />\n                                                                )}\n\n                                                                {!api.isRevision && (\n                                                                    <CommentOptions\n                                                                        comment={reply}\n                                                                        editIndex={editIndex}\n                                                                        index={commentIndex}\n                                                                        showAddComment={this.showAddComment}\n                                                                        handleClickOpen={this.handleClickOpen}\n                                                                        showEditComment={this.showEditComment}\n                                                                    />\n                                                                )}\n                                                            </Grid>\n                                                        </Grid>\n                                                    </Box>\n                                                </>\n                                            ))}\n                                            {comment.replies && comment.replies.count < comment.replies.pagination.total\n                                                && (\n                                                    <div className={classes.contentWrapper}>\n                                                        <Grid container spacing={4} className={classes.root}>\n                                                            <Grid item>\n                                                                <Typography\n                                                                    className={classes.verticalSpace}\n                                                                    variant='body1'\n                                                                >\n                                                                    <a\n                                                                        className={classes.link + ' '\n                                                                            + classes.loadMoreLink}\n                                                                        onClick={\n                                                                            () => this.handleLoadMoreReplies(comment)\n                                                                        }\n                                                                        onKeyDown={\n                                                                            () => this.handleLoadMoreReplies(comment)\n                                                                        }\n                                                                    >\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.Comments.Comment.load.'\n                                                                                + 'more.replies'}\n                                                                            defaultMessage='Show More Replies'\n                                                                        />\n                                                                    </a>\n                                                                </Typography>\n                                                            </Grid>\n                                                            <Grid item>\n                                                                <Typography\n                                                                    className={classes.verticalSpace}\n                                                                    zvariant='body1'\n                                                                >\n                                                                    {'(' + (comment.replies.count) + ' of '\n                                                                        + comment.replies.pagination.total + ')'}\n                                                                </Typography>\n                                                            </Grid>\n                                                        </Grid>\n                                                    </div>\n                                                )}\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            ))}\n                </div>\n                <ConfirmDialog\n                    key='key-dialog'\n                    labelCancel='Cancel'\n                    title='Confirm Delete'\n                    message='Are you sure you want to delete this comment?'\n                    labelOk='Yes'\n                    callback={this.handleConfirmDialog}\n                    open={openDialog}\n                />\n            </>\n        );\n    }\n}\n\nComment.defaultProps = {\n    isOverview: false,\n};\n\nComment.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.instanceOf(Object).isRequired,\n    allComments: PropTypes.instanceOf(Array).isRequired,\n    comments: PropTypes.instanceOf(Array).isRequired,\n    isOverview: PropTypes.bool,\n    updateComment: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(Comment));\n","/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { TextField, Button, Typography } from '@material-ui/core';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport Grid from '@material-ui/core/Grid';\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api';\n\nconst styles = (theme) => ({\n    textField: {\n        marginTop: 0,\n        width: '87.5%',\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing(1),\n        marginTop: theme.spacing(2),\n    },\n    category: {\n        width: '12%',\n        marginRight: '0.5%',\n    },\n});\n\n/**\n * Display a component to edit a comment\n * @class CommmentEdit\n * @extends {React.Component}\n */\nclass CommentEdit extends React.Component {\n    /**\n     * Creates an instance of CommentEdit\n     * @param {*} props properies passed by the parent element\n     * @memberof CommentEdit\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            commentText: '',\n            category: '',\n            currentLength: 0,\n        };\n        this.inputChange = this.inputChange.bind(this);\n        this.handleCategoryChange = this.handleCategoryChange.bind(this);\n        this.handleClickUpdateComment = this.handleClickUpdateComment.bind(this);\n        this.handleClickCancel = this.handleClickCancel.bind(this);\n        this.filterCommentToUpdate = this.filterCommentToUpdate.bind(this);\n        this.filterCommentToUpdateReply = this.filterCommentToUpdateReply.bind(this);\n    }\n\n    /**\n     * @memberof Comments\n     */\n    componentDidMount() {\n        const { comment } = this.props;\n        this.setState({\n            commentText: comment.commentText,\n            category: comment.category,\n            currentLength: comment.commentText.length,\n        });\n    }\n\n    /**\n     * Hides the component to edit a comment when cancelled\n     * @memberof CommentEdit\n     */\n    handleClickCancel() {\n        const { toggleShowEdit, commentsUpdate, allComments } = this.props;\n        toggleShowEdit();\n        commentsUpdate(allComments);\n    }\n\n    /**\n     * Handles category when the category is changed\n     * @param {any} event Drop down select event\n     * @memberof CommentEdit\n     */\n    handleCategoryChange(event) {\n        this.setState({ category: event.target.value });\n    }\n\n    /**\n     * Handles updating a comment\n     * @memberof CommentEdit\n     */\n    handleClickUpdateComment() {\n        const {\n            api, comment, allComments, toggleShowEdit, commentsUpdate,\n        } = this.props;\n        const { category, commentText } = this.state;\n        const Api = new API();\n        const apiId = api.id;\n        const commentToEdit = comment;\n        commentToEdit.commentText = commentText.trim();\n        commentToEdit.category = category;\n\n        // to check whether a string does not contain only whitehis spaces\n        if (comment.commentText.replace(/\\s/g, '').length) {\n            Api.updateComment(apiId, commentToEdit.commentId, commentToEdit)\n                .then((result) => {\n                    const updatedComment = result.body;\n                    if (commentToEdit.parentCommentId === undefined) {\n                        const index = allComments.findIndex(this.filterCommentToUpdate);\n                        allComments[index].category = updatedComment.category;\n                        allComments[index].commentText = updatedComment.commentText;\n                    } else {\n                        const index = allComments.findIndex(this.filterCommentToUpdateReply);\n                        const replyIndex = allComments[index].replies.findIndex(this.filterCommentToUpdate);\n                        allComments[index].replies[replyIndex] = updatedComment;\n                    }\n                    toggleShowEdit();\n                    commentsUpdate(allComments);\n                })\n                .catch((error) => {\n                    console.error(error);\n                    if (error.response) {\n                        Alert.error(error.response.body.message);\n                    } else {\n                        Alert.error('Something went wrong while adding the comment');\n                    }\n                });\n        } else {\n            Alert.error('You cannot enter a blank comment');\n        }\n    }\n\n    /**\n     * Filters the comment to update\n     * @memberof CommentAdd\n     */\n    filterCommentToUpdate(commentToFilter) {\n        const { comment } = this.props;\n        return commentToFilter.commentId === comment.commentId;\n    }\n\n    /**\n     * Filters the comment to update\n     * @memberof CommentAdd\n     */\n    filterCommentToUpdateReply(commentToFilter) {\n        const { comment } = this.props;\n        return commentToFilter.commentId === comment.parentCommentId;\n    }\n\n    /**\n     * Handles the comment text when input changes\n     * @param {Object} {target} target element\n     * @memberof CommentEdit\n     */\n    inputChange({ target }) {\n        this.setState({ commentText: target.value, currentLength: target.value.length });\n    }\n\n    /**\n     * Render method of the component\n     * @returns {React.Component} Comment html component\n     * @memberof CommentEdit\n     */\n    render() {\n        const { classes, theme } = this.props;\n        const { category, commentText, currentLength } = this.state;\n        return (\n            <div>\n                <FormControl className={classes.category}>\n                    <Select value={category} onChange={this.handleCategoryChange}>\n                        <MenuItem value='General'>General</MenuItem>\n                        <MenuItem value='Feature Request'>Feature Request</MenuItem>\n                        <MenuItem value='Bug Report'>Bug Report</MenuItem>\n                    </Select>\n                </FormControl>\n                <TextField\n                    id='multiline-static'\n                    autoFocus\n                    multiline\n                    className={classes.textField}\n                    margin='normal'\n                    placeholder='Write a comment'\n                    inputProps={{ maxLength: theme.custom.maxCommentLength }}\n                    value={commentText}\n                    onChange={this.inputChange}\n                />\n                <Typography className={classes.commentText} align='right'>\n                    {currentLength + '/' + theme.custom.maxCommentLength}\n                </Typography>\n                <Grid container spacing={2}>\n                    <Grid item>\n                        <Button variant='contained' color='primary' onClick={() => this.handleClickUpdateComment()}>\n                            Save\n                        </Button>\n                    </Grid>\n                    <Grid item>\n                        <Button onClick={() => this.handleClickCancel()} className={classes.button}>\n                            Cancel\n                        </Button>\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\n\nCommentEdit.defaultProps = {\n    commentsUpdate: null,\n};\n\nCommentEdit.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    api: PropTypes.instanceOf(Object).isRequired,\n    allComments: PropTypes.instanceOf(Array).isRequired,\n    // todo make commentsUpdate required once comment edit feature is supported\n    commentsUpdate: PropTypes.func,\n    toggleShowEdit: PropTypes.func.isRequired,\n    comment: PropTypes.instanceOf(Object).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles, { withTheme: true })(CommentEdit);\n","/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid/Grid';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport { FormattedMessage } from 'react-intl';\nimport AuthManager from 'AppData/AuthManager';\nimport Utils from 'AppData/Utils';\n\nconst styles = (theme) => ({\n    link: {\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n        '& span.MuiButton-label': {\n            color: theme.palette.primary.main,\n            fontWeight: '400',\n        },\n        cursor: 'pointer',\n    },\n    time: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        marginTop: theme.spacing(0.3),\n    },\n    verticalSpace: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    disable: {\n        color: theme.palette.grey[200],\n    },\n    commentIcon: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    commentText: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        marginTop: theme.spacing.unig,\n        width: '100%',\n        whiteSpace: 'pre-wrap',\n        overflowWrap: 'break-word',\n    },\n    root: {\n        marginTop: theme.spacing(2.5),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n        paddingLeft: theme.spacing(2),\n        paddingTop: theme.spacing.unig,\n    },\n});\n\n/**\n * Component to display options of the comment\n * @class CommentOptions\n * @extends {React.Component}\n */\nclass CommentOptions extends React.Component {\n    /**\n     * Creates an instance of CommentAdd\n     * @param {*} props properies passed by the parent element\n     * @memberof CommentAdd\n     */\n    constructor(props) {\n        super(props);\n        this.state = {};\n        this.showAddComment = this.showAddComment.bind(this);\n        this.showEditComment = this.showEditComment.bind(this);\n        this.handleClickOpen = this.handleClickOpen.bind(this);\n    }\n\n    /**\n     * Shows the confimation dialog to delete a comment\n     * @param {Object} comment Comment that has to be deleted\n     * @memberof Comment\n     */\n    handleClickOpen(comment) {\n        const { editIndex, handleClickOpen } = this.props;\n        if (editIndex === -1) {\n            handleClickOpen(comment);\n        }\n    }\n\n    /**\n     * Shows the component to add a new comment\n     * @param {any} index Index of comment in the array\n     * @memberof CommentOptions\n     */\n    showAddComment(replyId) {\n        const { showAddComment } = this.props;\n        showAddComment(replyId);\n    }\n\n    /**\n     * Shows the component to edit a comment\n     * @param {any} index Index of comment in the array\n     * @memberof Comment\n     */\n    showEditComment(index) {\n        const { editIndex, showEditComment } = this.props;\n        if (editIndex === -1) {\n            showEditComment(index);\n        }\n    }\n\n    /**\n     * Returns the date and time in a particular format\n     * @param {any} timestamp Timestamp that has to be formatted\n     * @memberof CommentOptions\n     */\n    displayDate(timestamp) {\n        const localDate = new Date(timestamp);\n        const localDateString = localDate.toLocaleDateString(undefined, {\n            day: 'numeric',\n            month: 'short',\n            year: 'numeric',\n        });\n        const localTimeString = localDate.toLocaleTimeString(undefined, {\n            hour: '2-digit',\n            minute: '2-digit',\n        });\n\n        return localDateString + ' ' + localTimeString;\n    }\n\n    /**\n     * Render method of the component\n     * @returns {React.Component} Comment html component\n     * @memberof CommentOptions\n     */\n    render() {\n        const {\n            classes, comment,\n        } = this.props;\n        const user = AuthManager.getUser();\n        const username = Utils.getUserNameWithoutDomain(user.name);\n        const canDelete = (comment.createdBy === username) || user.isAdmin();\n        // const canModify = comment.createdBy === username;\n        return (\n            <Grid container spacing={1} className={classes.verticalSpace} key={comment.id}>\n\n                {/* only the comment owner or admin can delete a comment */}\n                {canDelete && [\n                    <Grid item key='key-delete'>\n                        <Button\n                            size='small'\n                            onClick={() => this.handleClickOpen(comment)}\n                            color='primary'\n                            aria-label={'Delete comment ' + comment.content}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Comments.CommentOptions.delete'\n                                defaultMessage='Delete'\n                            />\n                        </Button>\n                    </Grid>,\n                ]}\n                {comment.parentCommentId === null && [\n                    <Grid item key='key-reply'>\n                        <Button\n                            size='small'\n                            onClick={() => this.showAddComment(comment.id)}\n                            color='primary'\n                            aria-label={'Reply to comment ' + comment.content}\n                        >\n                            <FormattedMessage id='Apis.Details.Comments.CommentOptions.reply' defaultMessage='Reply' />\n                        </Button>\n                    </Grid>,\n                ]}\n\n                {/* only the comment owner can modify the comment from the exact entry point */}\n                {/* {canModify && [\n                    <Grid item key='key-edit'>\n                        <Button\n                            size='small'\n                            className={classes.link}\n                            onClick={() => this.showAddComment(comment.id)}\n                            color='primary'\n                        >\n                            <FormattedMessage id='Apis.Details.Comments.CommentOptions.reply' defaultMessage='Reply' />\n                        </Button>\n                    </Grid>,\n                ]} */}\n\n            </Grid>\n        );\n    }\n}\n\nCommentOptions.defaultProps = {\n    showAddComment: null,\n};\n\nCommentOptions.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    editIndex: PropTypes.number.isRequired,\n    comment: PropTypes.instanceOf(Object).isRequired,\n    handleClickOpen: PropTypes.func.isRequired,\n    showEditComment: PropTypes.func.isRequired,\n    showAddComment: PropTypes.func,\n    theme: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles, { withTheme: true })(CommentOptions);\n","/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport CreateScope from './CreateScope';\nimport EditScope from './EditScope';\nimport Scopes from './Scopes';\n\nconst Scope = () => {\n    const [api, updateAPI] = useAPI();\n    const urlPrefix = api.isAPIProduct() ? 'api-products' : 'apis';\n    return (\n        <Switch>\n            <Route exact path={'/' + urlPrefix + '/:api_uuid/scopes/'} component={Scopes} />\n            <Route\n                exact\n                path={'/' + urlPrefix + '/:api_uuid/scopes/create'}\n                component={(props) => <CreateScope api={api} {...props} updateAPI={updateAPI} />}\n            />\n            <Route\n                exact\n                path={'/' + urlPrefix + '/:api_uuid/scopes/edit'}\n                component={(props) => <EditScope api={api} {...props} updateAPI={updateAPI} />}\n            />\n            <Route component={ResourceNotFound} />\n        </Switch>\n    );\n};\n\nScope.propTypes = {\n    api: PropTypes.shape({\n        id: PropTypes.string,\n        additionalProperties: PropTypes.shape({\n            key: PropTypes.string,\n            value: PropTypes.string,\n        }).isRequired,\n    }).isRequired,\n};\n\nexport default Scope;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport ChipInput from 'material-ui-chip-input';\nimport APIValidation from 'AppData/APIValidation';\nimport base64url from 'base64url';\nimport Error from '@material-ui/icons/Error';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Chip from '@material-ui/core/Chip';\nimport Icon from '@material-ui/core/Icon';\nimport Paper from '@material-ui/core/Paper';\nimport { red } from '@material-ui/core/colors/';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Api from 'AppData/api';\nimport { isRestricted } from 'AppData/AuthManager';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n        display: 'flex',\n        flexDirection: 'column',\n        padding: 20,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(3),\n    },\n    titleLink: {\n        color: theme.palette.primary.main,\n        marginRight: theme.spacing(1),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    FormControl: {\n        padding: `0 0 0 ${theme.spacing(1)}px`,\n        width: '100%',\n        marginTop: 0,\n    },\n    FormControlOdd: {\n        padding: `0 0 0 ${theme.spacing(1)}px`,\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n        marginTop: 0,\n    },\n    FormControlLabel: {\n        marginBottom: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        fontSize: theme.typography.caption.fontSize,\n    },\n    buttonSection: {\n        paddingTop: theme.spacing(3),\n    },\n    saveButton: {\n        marginRight: theme.spacing(1),\n    },\n    helpText: {\n        color: theme.palette.text.hint,\n        marginTop: theme.spacing(1),\n    },\n    extraPadding: {\n        paddingLeft: theme.spacing(2),\n    },\n    addNewOther: {\n        paddingTop: 40,\n    },\n    titleGrid: {\n        ' & .MuiGrid-item': {\n            padding: 0,\n            margin: 0,\n        },\n    },\n    descriptionForm: {\n        marginTop: theme.spacing(1),\n    },\n    progress: {\n        marginLeft: theme.spacing(1),\n    },\n});\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * Create new scopes for an API\n * @class CreateScope\n * @extends {Component}\n */\nclass CreateScope extends React.Component {\n    /**\n     * constructor\n     * @param {JSON} props parent props.\n     */\n    constructor(props) {\n        super(props);\n        this.api = new Api();\n        this.api_uuid = props.match.params.api_uuid;\n        const valid = [];\n        valid.name = {\n            invalid: false,\n            error: '',\n        };\n        valid.description = {\n            invalid: false,\n            error: '',\n        };\n        valid.displayName = {\n            invalid: false,\n            error: '',\n        };\n        this.state = {\n            apiScopes: null,\n            apiScope: {},\n            validRoles: [],\n            valid,\n            roleValidity: true,\n            invalidRoles: [],\n            scopeAddDisabled: false,\n        };\n        this.addScope = this.addScope.bind(this);\n        this.validateScopeName = this.validateScopeName.bind(this);\n        this.handleScopeNameInput = this.handleScopeNameInput.bind(this);\n        this.validateScopeDescription = this.validateScopeDescription.bind(this);\n        this.validateScopeDisplayName = this.validateScopeDisplayName.bind(this);\n        this.handleRoleAddition = this.handleRoleAddition.bind(this);\n        this.handleRoleDeletion = this.handleRoleDeletion.bind(this);\n    }\n\n    handleRoleDeletion = (role) => {\n        const { validRoles, invalidRoles } = this.state;\n        if (invalidRoles.includes(role)) {\n            const invalidRolesArray = invalidRoles.filter((existingRole) => existingRole !== role);\n            this.setState({ invalidRoles: invalidRolesArray });\n            if (invalidRolesArray.length === 0) {\n                this.setState({ roleValidity: true });\n            }\n        } else {\n            this.setState({ validRoles: validRoles.filter((existingRole) => existingRole !== role) });\n        }\n    };\n\n    /**\n     * Handle ScopeName Input.\n     * @param {JSON} event click event.\n     */\n    handleScopeNameInput({ target: { id, value } }) {\n        this.validateScopeName(id, value);\n    }\n\n    /**\n     * Handle Role Addition.\n     * @param {string} role The first number.\n     */\n    handleRoleAddition(role) {\n        const { validRoles, invalidRoles } = this.state;\n        const promise = APIValidation.role.validate(base64url.encode(role));\n        promise\n            .then(() => {\n                this.setState({\n                    roleValidity: true,\n                    validRoles: [...validRoles, role],\n                });\n            })\n            .catch((error) => {\n                if (error.status === 404) {\n                    this.setState({\n                        roleValidity: false,\n                        invalidRoles: [...invalidRoles, role],\n                    });\n                } else {\n                    Alert.error('Error when validating role: ' + role);\n                    console.error('Error when validating role ' + error);\n                }\n            });\n    }\n\n    /**\n     * validate Scope Description.\n     * @param {JSON} event click event object.\n     */\n    validateScopeDescription({ target: { id, value } }) {\n        const { valid, apiScope } = this.state;\n        const { intl } = this.props;\n        apiScope[id] = value;\n        if (value && value.length !== '' && value.length >= 512) {\n            valid[id].invalid = true;\n            valid[id].error = intl.formatMessage({\n                id: 'Scopes.Create.Scope.description.length.exceeded',\n                defaultMessage: 'Exceeds maximum length limit of 512 characters',\n            });\n        } else {\n            valid[id].invalid = false;\n            valid[id].error = '';\n        }\n        this.setState({\n            valid,\n            apiScope,\n        });\n    }\n\n    /**\n     * validate Scope Display Name.\n     * @param {JSON} event click event object.\n     */\n    validateScopeDisplayName({ target: { id, value } }) {\n        const { valid, apiScope } = this.state;\n        const { intl } = this.props;\n        apiScope[id] = value;\n        if (value && value.length !== '' && value.length >= 512) {\n            valid[id].invalid = true;\n            valid[id].error = intl.formatMessage({\n                id: 'Scopes.Create.Scope.display.name.length.exceeded',\n                defaultMessage: 'Exceeds maximum length limit of 512 characters',\n            });\n        } else {\n            valid[id].invalid = false;\n            valid[id].error = '';\n        }\n        this.setState({\n            valid,\n            apiScope,\n        });\n    }\n\n    /**\n     * validate Scope Name.\n     * @param {string} id click event object.\n     * @param {string} value click event object.\n     * @returns {boolean} valid state\n     */\n    validateScopeName(id, value) {\n        const { valid, apiScope } = this.state;\n        const {\n            api: { scopes },\n        } = this.props;\n        const { intl } = this.props;\n        apiScope[id] = value;\n        valid[id].invalid = !(value && value.length > 0);\n        // length validation\n        if (valid[id].invalid) {\n            valid[id].error = 'Scope name cannot be empty';\n        }\n        valid[id].invalid = !(value && value.length <= 60);\n        if (valid[id].invalid) {\n            valid[id].error = intl.formatMessage({\n                id: 'Scopes.Create.Scope.name.length.exceeded',\n                defaultMessage: 'Exceeds maximum length limit of 60 characters',\n            });\n        }\n\n        if (/\\s/.test(value)) {\n            valid[id].invalid = true;\n            valid[id].error = 'Scope name cannot have spaces';\n        }\n\n        const exist = scopes.find((scope) => {\n            return scope.name === value;\n        });\n        if (!valid[id].invalid && exist) {\n            valid[id].invalid = true;\n            valid[id].error = 'Scope name already exist';\n        }\n        if (!valid[id].invalid && /[!@#$%^&*(),?\"{}[\\]|<>\\t\\n]|(^apim:)/i.test(value)) {\n            valid[id].invalid = true;\n            valid[id].error = 'Field contains special characters';\n        }\n        if (!valid[id].invalid) {\n            const promise = APIValidation.scope.validate(base64url.encode(value));\n            promise\n                .then(() => {\n                    valid[id].invalid = true;\n                    valid[id].error = 'Scope name is already used by another API';\n                    this.setState({\n                        valid,\n                    });\n                })\n                .catch((error) => {\n                    if (error.status === 404) {\n                        valid[id].invalid = false;\n                        valid[id].error = '';\n                        this.setState({\n                            valid,\n                        });\n                    } else {\n                        Alert.error('Error when validating scope: ' + value);\n                        console.error('Error when validating scope ' + error);\n                    }\n                });\n        }\n        if (!valid[id].invalid) {\n            valid[id].error = '';\n        }\n        this.setState({\n            valid,\n            apiScope,\n        });\n        return valid[id].invalid;\n    }\n\n    /**\n     * Add new scope\n     * @memberof Scopes\n     */\n    addScope() {\n        const {\n            intl, api, history, updateAPI,\n        } = this.props;\n        const urlPrefix = api.apiType === Api.CONSTS.APIProduct ? 'api-products' : 'apis';\n        if (this.validateScopeName('name', this.state.apiScope.name)) {\n            // return status of the validation\n            return;\n        }\n        const scope = this.state.apiScope;\n        scope.bindings = this.state.validRoles;\n        const scopes = api.scopes.map((aScope) => {\n            return aScope;\n        });\n        scopes.push({\n            scope,\n            shared: false,\n        });\n        const updateProperties = { scopes };\n        const promisedApiUpdate = updateAPI(updateProperties);\n        this.setState({ scopeAddDisabled: true });\n        promisedApiUpdate\n            .then(() => {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Scopes.CreateScope.scope.added.successfully',\n                    defaultMessage: 'Scope added successfully',\n                }));\n                const { apiScopes } = this.state;\n                const redirectURL = '/' + urlPrefix + '/' + api.id + '/scopes/';\n                history.push(redirectURL);\n                this.setState({\n                    apiScopes,\n                    apiScope: {},\n                    validRoles: [],\n                });\n            })\n            .catch((error) => {\n                const { response } = error;\n                if (response.body) {\n                    const { description } = response.body;\n                    Alert.error(description);\n                }\n            })\n            .finally(() => {\n                this.setState({ scopeAddDisabled: false });\n            });\n    }\n\n    /**\n     * Render.\n     * @returns {JSX} rendered component.\n     */\n    render() {\n        const { classes, api } = this.props;\n        const urlPrefix = api.apiType === Api.CONSTS.APIProduct ? 'api-products' : 'apis';\n        const url = `/${urlPrefix}/${api.id}/scopes`;\n        const {\n            roleValidity, validRoles, invalidRoles, scopeAddDisabled,\n        } = this.state;\n\n        return (\n            <Grid container spacing={3}>\n                <Grid item sm={12} md={12} />\n                {/*\n            Following two grids control the placement of whole create page\n            For centering the content better use `container` props, but instead used an empty grid item for flexibility\n             */}\n                <Grid item sm={0} md={0} lg={2} />\n                <Grid item sm={12} md={12} lg={8}>\n                    <Grid container spacing={5} className={classes.titleGrid}>\n                        <Grid item md={12}>\n                            <div className={classes.titleWrapper}>\n                                <Link to={url} className={classes.titleLink}>\n                                    <Typography variant='h4'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Scopes.Scopes.heading.scope.heading'\n                                            defaultMessage='Scopes'\n                                        />\n                                    </Typography>\n                                </Link>\n                                <Icon>keyboard_arrow_right</Icon>\n                                <Typography variant='h4'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Scopes.CreateScope.create.new.scope'\n                                        defaultMessage='Create New Scope'\n                                    />\n                                </Typography>\n                            </div>\n                        </Grid>\n                        <Grid item md={12}>\n                            <Paper elevation={0} className={classes.root}>\n                                <FormControl margin='normal'>\n                                    <TextField\n                                        id='name'\n                                        label='Name'\n                                        placeholder='Scope Name'\n                                        error={this.state.valid.name.invalid}\n                                        helperText={\n                                            this.state.valid.name.invalid ? (\n                                                this.state.valid.name.error\n                                            ) : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.CreateScope.short.description.name'\n                                                    defaultMessage='Enter Scope Name ( E.g.,: creator )'\n                                                />\n                                            )\n                                        }\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        value={this.state.apiScope.name || ''}\n                                        onChange={this.handleScopeNameInput}\n                                    />\n                                </FormControl>\n                                <FormControl margin='normal'>\n                                    <TextField\n                                        id='displayName'\n                                        label='Display Name'\n                                        placeholder='Scope Display Name'\n                                        error={this.state.valid.displayName.invalid}\n                                        helperText={\n                                            this.state.valid.displayName.invalid ? (\n                                                this.state.valid.displayName.error\n                                            ) : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.CreateScope.short.description.name'\n                                                    defaultMessage='Enter Scope Name ( E.g.,: creator )'\n                                                />\n                                            )\n                                        }\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        value={this.state.apiScope.displayName || ''}\n                                        onChange={this.validateScopeDisplayName}\n                                    />\n                                </FormControl>\n                                <FormControl margin='normal' classes={{ root: classes.descriptionForm }}>\n                                    <TextField\n                                        id='description'\n                                        label='Description'\n                                        variant='outlined'\n                                        placeholder='Short description about the scope'\n                                        error={this.state.valid.description.invalid}\n                                        helperText={\n                                            this.state.valid.description.invalid ? (\n                                                this.state.valid.description.error\n                                            ) : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.CreateScope.description.about.the.scope'\n                                                    defaultMessage='Short description about the scope'\n                                                />\n                                            )\n                                        }\n                                        margin='normal'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        onChange={this.validateScopeDescription}\n                                        value={this.state.apiScope.description || ''}\n                                        multiline\n                                    />\n                                </FormControl>\n                                <FormControl margin='normal'>\n                                    <ChipInput\n                                        label='Roles'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        variant='outlined'\n                                        value={validRoles.concat(invalidRoles)}\n                                        alwaysShowPlaceholder={false}\n                                        placeholder='Enter roles and press Enter'\n                                        blurBehavior='clear'\n                                        InputProps={{\n                                            endAdornment: !roleValidity && (\n                                                <InputAdornment position='end'>\n                                                    <Error color='error' />\n                                                </InputAdornment>\n                                            ),\n                                        }}\n                                        onAdd={this.handleRoleAddition}\n                                        error={!roleValidity}\n                                        helperText={\n                                            !roleValidity ? (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.Roles.Invalid'\n                                                    defaultMessage='Role is invalid'\n                                                />\n                                            ) : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.CreateScope.roles.help'\n                                                    defaultMessage='Enter a valid role and press `Enter`.'\n                                                />\n                                            )\n                                        }\n                                        chipRenderer={({ value }, key) => (\n                                            <Chip\n                                                key={key}\n                                                label={value}\n                                                onDelete={() => {\n                                                    this.handleRoleDeletion(value);\n                                                }}\n                                                style={{\n                                                    backgroundColor: invalidRoles.includes(value) ? red[300] : null,\n                                                    margin: '8px 8px 8px 0',\n                                                    float: 'left',\n                                                }}\n                                            />\n                                        )}\n                                    />\n                                </FormControl>\n                                <div className={classes.addNewOther}>\n                                    <Button\n                                        variant='contained'\n                                        color='primary'\n                                        onClick={this.addScope}\n                                        disabled={\n                                            isRestricted(['apim:api_create'], api)\n                                            || this.state.valid.name.invalid\n                                            || invalidRoles.length !== 0\n                                            || scopeAddDisabled\n                                            || api.isRevision\n                                            || this.state.valid.description.invalid\n                                        }\n                                        className={classes.saveButton}\n                                    >\n                                        {scopeAddDisabled ? (\n                                            <>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.CreateScope.saving'\n                                                    defaultMessage='Saving'\n                                                />\n                                                <CircularProgress size={16} classes={{ root: classes.progress }} />\n                                            </>\n                                        ) : (\n                                            <FormattedMessage\n                                                id='Apis.Details.Scopes.CreateScope.save'\n                                                defaultMessage='Save'\n                                            />\n                                        )}\n                                    </Button>\n                                    <Link to={url}>\n                                        <Button>\n                                            <FormattedMessage\n                                                id='Apis.Details.Scopes.CreateScope.cancel'\n                                                defaultMessage='Cancel'\n                                            />\n                                        </Button>\n                                    </Link>\n                                </div>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nCreateScope.propTypes = {\n    match: PropTypes.shape({\n        params: PropTypes.shape({}),\n    }),\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    history: PropTypes.shape({ push: PropTypes.func }).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    updateAPI: PropTypes.func.isRequired,\n};\n\nCreateScope.defaultProps = {\n    match: { params: {} },\n};\n\nexport default injectIntl(withStyles(styles)(CreateScope));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Button from '@material-ui/core/Button';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport FormControl from '@material-ui/core/FormControl';\nimport ChipInput from 'material-ui-chip-input';\nimport APIValidation from 'AppData/APIValidation';\nimport Chip from '@material-ui/core/Chip';\nimport { red } from '@material-ui/core/colors/';\nimport Icon from '@material-ui/core/Icon';\nimport base64url from 'base64url';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Error from '@material-ui/core/SvgIcon/SvgIcon';\nimport Api from 'AppData/api';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n        display: 'flex',\n        flexDirection: 'column',\n        padding: 20,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(3),\n    },\n    titleLink: {\n        color: theme.palette.primary.main,\n        marginRight: theme.spacing(1),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    FormControl: {\n        padding: `0 0 0 ${theme.spacing(1)}px`,\n        width: '100%',\n        marginTop: 0,\n    },\n    FormControlOdd: {\n        padding: `0 0 0 ${theme.spacing(1)}px`,\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n        marginTop: 0,\n    },\n    FormControlLabel: {\n        marginBottom: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        fontSize: theme.typography.caption.fontSize,\n    },\n    buttonSection: {\n        paddingTop: theme.spacing(3),\n    },\n    saveButton: {\n        marginRight: theme.spacing(2),\n    },\n    helpText: {\n        color: theme.palette.text.hint,\n        marginTop: theme.spacing(1),\n    },\n    extraPadding: {\n        paddingLeft: theme.spacing(2),\n    },\n    addNewOther: {\n        paddingTop: 40,\n    },\n    titleGrid: {\n        ' & .MuiGrid-item': {\n            padding: 0,\n            margin: 0,\n        },\n    },\n});\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * Create new scopes for an API\n * @class CreateScope\n * @extends {Component}\n */\nclass EditScope extends React.Component {\n    /**\n     * constructor\n     * @param {JSON} props parent props.\n     */\n    constructor(props) {\n        super(props);\n        // this.api = new Api();\n        this.api_uuid = props.match.params.api_uuid;\n        const { api, location } = this.props;\n        const thisScope = api.scopes.find((apiScope) => {\n            return apiScope.scope.name === location.state.scopeName;\n        });\n        this.state = {\n            apiScope: { ...thisScope },\n            validRoles: thisScope.scope.bindings,\n            invalidRoles: [],\n            roleValidity: true,\n        };\n        this.updateScope = this.updateScope.bind(this);\n        this.handleInputs = this.handleInputs.bind(this);\n        this.handleRoleDeletion = this.handleRoleDeletion.bind(this);\n        this.handleRoleAddition = this.handleRoleAddition.bind(this);\n        this.validateScopeDescription = this.validateScopeDescription.bind(this);\n        this.validateScopeDisplayName = this.validateScopeDisplayName.bind(this);\n    }\n\n    handleRoleDeletion = (role) => {\n        const { validRoles, invalidRoles } = this.state;\n        if (invalidRoles.includes(role)) {\n            const invalidRolesArray = invalidRoles.filter((existingRole) => existingRole !== role);\n            this.setState({ invalidRoles: invalidRolesArray });\n            if (invalidRolesArray.length === 0) {\n                this.setState({ roleValidity: true });\n            }\n        } else {\n            this.setState({ validRoles: validRoles.filter((existingRole) => existingRole !== role) });\n        }\n    };\n\n    /**\n     * Handle api scope addition event\n     * @param {any} event Button Click event\n     * @memberof Scopes\n     */\n    handleInputs(event) {\n        if (Array.isArray(event)) {\n            const { apiScope } = this.state;\n            apiScope.scope.bindings = event;\n            this.setState({\n                apiScope,\n            });\n        } else {\n            const input = event.target;\n            const { apiScope } = this.state;\n            apiScope[input.id] = input.value;\n            this.setState({\n                apiScope,\n            });\n        }\n    }\n\n    /**\n     * Handle Role Addition.\n     * @param {string} role The first number.\n     */\n    handleRoleAddition(role) {\n        const { validRoles, invalidRoles } = this.state;\n        const promise = APIValidation.role.validate(base64url.encode(role));\n        promise\n            .then(() => {\n                this.setState({\n                    roleValidity: true,\n                    validRoles: [...validRoles, role],\n                });\n            })\n            .catch((error) => {\n                if (error.status === 404) {\n                    this.setState({\n                        roleValidity: false,\n                        invalidRoles: [...invalidRoles, role],\n                    });\n                } else {\n                    Alert.error('Error when validating role: ' + role);\n                    console.error('Error when validating role ' + error);\n                }\n            });\n    }\n\n    /**\n     * Add new scope\n     * @memberof Scopes\n     */\n    updateScope() {\n        const { apiScope, validRoles } = this.state;\n        const {\n            intl, api, history, updateAPI,\n        } = this.props;\n        const originalScope = apiScope.scope;\n        apiScope.scope = {\n            id: originalScope.id,\n            name: originalScope.name,\n            displayName: originalScope.displayName,\n            description: originalScope.description,\n            bindings: validRoles,\n        };\n        const urlPrefix = api.apiType === Api.CONSTS.APIProduct ? 'api-products' : 'apis';\n        const scopes = api.scopes.map((scopeObj) => {\n            if (scopeObj.scope.name === apiScope.scope.name) {\n                return apiScope;\n            } else {\n                return scopeObj;\n            }\n        });\n        const updateProperties = { scopes };\n        const promisedApiUpdate = updateAPI(updateProperties);\n        promisedApiUpdate.then(() => {\n            Alert.info(intl.formatMessage({\n                id: 'Apis.Details.Scopes.CreateScope.scope.updated.successfully',\n                defaultMessage: 'Scope updated successfully',\n            }));\n            const redirectURL = '/' + urlPrefix + '/' + api.id + '/scopes/';\n            history.push(redirectURL);\n        }).catch((error) => {\n            const { response } = error;\n            if (response.body) {\n                const { description } = response.body;\n                Alert.error(description);\n            }\n        });\n    }\n\n    /**\n     * validate Scope Description.\n     * @param {JSON} event click event object.\n     */\n    validateScopeDescription({ target: { value } }) {\n        const { apiScope } = this.state;\n        const originalScope = apiScope.scope;\n        apiScope.scope = {\n            id: originalScope.id,\n            name: originalScope.name,\n            displayName: originalScope.displayName,\n            description: value,\n            bindings: originalScope.bindings,\n        };\n        this.setState({\n            apiScope,\n        });\n    }\n\n    /**\n     * validate Scope Display Name.\n     * @param {JSON} event click event object.\n     */\n    validateScopeDisplayName({ target: { value } }) {\n        const { apiScope } = this.state;\n        const originalScope = apiScope.scope;\n        apiScope.scope = {\n            id: originalScope.id,\n            name: originalScope.name,\n            displayName: value,\n            description: originalScope.description,\n            bindings: originalScope.bindings,\n        };\n        this.setState({\n            apiScope,\n        });\n    }\n\n    /**\n     * Render.\n     * @returns {JSX} rendered component.\n     */\n    render() {\n        const { classes, api, isAPIProduct } = this.props;\n        const {\n            apiScope, roleValidity, validRoles, invalidRoles,\n        } = this.state;\n        const urlPrefix = isAPIProduct ? 'api-products' : 'apis';\n        const url = `/${urlPrefix}/${api.id}/scopes`;\n        return (\n            <Grid container spacing={3}>\n                <Grid item sm={12} md={12} />\n                {/*\n            Following two grids control the placement of whole create page\n            For centering the content better use `container` props, but instead used an empty grid item for flexibility\n             */}\n                <Grid item sm={0} md={0} lg={2} />\n                <Grid item sm={12} md={12} lg={8}>\n                    <Grid container spacing={5} className={classes.titleGrid}>\n                        <Grid item md={12}>\n                            <div className={classes.titleWrapper}>\n                                <Link to={url} className={classes.titleLink}>\n                                    <Typography variant='h4'>\n                                        <FormattedMessage\n                                            id='Apis.Details.Scopes.Scopes.heading.edit.scope.heading'\n                                            defaultMessage='Scopes'\n                                        />\n                                    </Typography>\n                                </Link>\n                                <Icon>keyboard_arrow_right</Icon>\n                                <Typography variant='h4'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Scopes.EditScope.update.scope'\n                                        defaultMessage='Update Scope'\n                                    />\n                                </Typography>\n                            </div>\n                        </Grid>\n                        <Grid item md={12}>\n                            <Paper elevation={0} className={classes.root}>\n                                <FormControl margin='normal'>\n                                    <TextField\n                                        id='name'\n                                        label='Name'\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        value={apiScope.scope.name}\n                                        onChange={this.handleScopeNameInput}\n                                        disabled\n                                    />\n                                </FormControl>\n                                <FormControl margin='normal'>\n                                    <TextField\n                                        id='displayName'\n                                        label='Display Name'\n                                        placeholder='Scope Display Name'\n                                        helperText={(\n                                            <FormattedMessage\n                                                id='Apis.Details.Scopes.CreateScope.short.description.name'\n                                                defaultMessage='Enter Scope Name ( E.g.,: creator )'\n                                            />\n                                        )}\n                                        fullWidth\n                                        margin='normal'\n                                        variant='outlined'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        value={apiScope.scope.displayName || ''}\n                                        onChange={this.validateScopeDisplayName}\n                                    />\n                                </FormControl>\n                                <FormControl margin='normal'>\n                                    <TextField\n                                        id='description'\n                                        label='Description'\n                                        variant='outlined'\n                                        placeholder='Short description about the scope'\n                                        helperText={(\n                                            <FormattedMessage\n                                                id='Apis.Details.Scopes.EditScope.short.description.about.the.scope'\n                                                defaultMessage='Short description about the scope'\n                                            />\n                                        )}\n                                        margin='normal'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        onChange={this.validateScopeDescription}\n                                        value={apiScope.scope.description || ''}\n                                        multiline\n                                    />\n                                </FormControl>\n                                <FormControl margin='normal'>\n                                    <ChipInput\n                                        label='Roles'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        variant='outlined'\n                                        value={validRoles.concat(invalidRoles)}\n                                        alwaysShowPlaceholder={false}\n                                        placeholder='Enter roles and press Enter'\n                                        blurBehavior='clear'\n                                        InputProps={{\n                                            endAdornment: !roleValidity && (\n                                                <InputAdornment position='end'>\n                                                    <Error color='error' />\n                                                </InputAdornment>\n                                            ),\n                                        }}\n                                        onAdd={this.handleRoleAddition}\n                                        error={!roleValidity}\n                                        helperText={\n                                            !roleValidity ? (\n                                                <FormattedMessage\n                                                    id='Apis.Details.EditScopes.Roles.Invalid'\n                                                    defaultMessage='Role is invalid'\n                                                />\n                                            ) : (\n                                                <FormattedMessage\n                                                    id='Apis.Details.Scopes.EditScopes.roles.help'\n                                                    defaultMessage='Enter a valid role and press `Enter`.'\n                                                />\n                                            )\n                                        }\n                                        chipRenderer={({ value }, key) => (\n                                            <Chip\n                                                key={key}\n                                                label={value}\n                                                onDelete={() => {\n                                                    this.handleRoleDeletion(value);\n                                                }}\n                                                style={{\n                                                    backgroundColor: invalidRoles.includes(value) ? red[300] : null,\n                                                    margin: '8px 8px 8px 0',\n                                                    float: 'left',\n                                                }}\n                                            />\n                                        )}\n                                    />\n                                </FormControl>\n                                <div className={classes.addNewOther}>\n                                    <Button\n                                        variant='contained'\n                                        color='primary'\n                                        onClick={this.updateScope}\n                                        disabled={invalidRoles.length !== 0 || api.isRevision}\n                                        className={classes.saveButton}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Scopes.EditScope.update'\n                                            defaultMessage='Update'\n                                        />\n                                    </Button>\n                                    <Link to={url}>\n                                        <Button variant='contained'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Scopes.EditScope.cancel'\n                                                defaultMessage='Cancel'\n                                            />\n                                        </Button>\n                                    </Link>\n                                </div>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nEditScope.propTypes = {\n    match: PropTypes.shape({\n        params: PropTypes.shape({}),\n    }),\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    location: PropTypes.shape({\n        state: PropTypes.shape({\n            scopeName: PropTypes.string,\n        }),\n    }).isRequired,\n    history: PropTypes.shape({ push: PropTypes.func }).isRequired,\n    isAPIProduct: PropTypes.bool.isRequired,\n    updateAPI: PropTypes.func.isRequired,\n};\n\nEditScope.defaultProps = {\n    match: { params: {} },\n};\n\nexport default injectIntl(withRouter(withStyles(styles)(EditScope)));\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport 'react-tagsinput/react-tagsinput.css';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport Api from 'AppData/api';\nimport { Progress } from 'AppComponents/Shared';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Button from '@material-ui/core/Button';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { Link } from 'react-router-dom';\nimport { List, ListItem, ListItemText } from '@material-ui/core';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport MUIDataTable from 'mui-datatables';\nimport Icon from '@material-ui/core/Icon';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport Grid from '@material-ui/core/Grid';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport IconButton from '@material-ui/core/IconButton';\nimport Tooltip from '@material-ui/core/Tooltip';\n\nimport Delete from './Delete';\n\nconst styles = (theme) => ({\n    root: {\n        paddingTop: 0,\n        paddingLeft: 0,\n    },\n    buttonProgress: {\n        position: 'relative',\n        margin: theme.spacing(1),\n    },\n    headline: { paddingTop: theme.spacing(1.25), paddingLeft: theme.spacing(2.5) },\n    heading: {\n        flexGrow: 1,\n        marginTop: 10,\n        '& table td:nth-child(2)': {\n            'word-break': 'break-word',\n        },\n        '& table td button span, & table th': {\n            'white-space': 'nowrap',\n        },\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: theme.spacing(2),\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    buttonIcon: {\n        marginRight: theme.spacing(1),\n    },\n    content: {\n        margin: `${theme.spacing(2)}px 0 ${theme.spacing(2)}px 0`,\n    },\n    head: {\n        fontWeight: 200,\n    },\n});\n/**\n * Generate the scopes UI in API details page.\n * @class Scopes\n * @extends {React.Component}\n */\nclass Scopes extends React.Component {\n    /**\n     * Creates an instance of Scopes.\n     * @param {any} props Generic props\n     * @memberof Scopes\n     */\n    constructor(props) {\n        super(props);\n        this.api = new Api();\n        this.api_uuid = props.match.params.api_uuid;\n        this.api_data = props.api;\n    }\n\n    /**\n     * Render Scopes section\n     * @returns {React.Component} React Component\n     * @memberof Scopes\n     */\n    render() {\n        const {\n            intl, classes, api,\n        } = this.props;\n        const urlPrefix = (api.apiType === Api.CONSTS.APIProduct) ? 'api-products' : 'apis';\n        const { scopes } = api;\n        const url = `/${urlPrefix}/${api.id}/scopes/create`;\n        const editUrl = `/${urlPrefix}/${api.id}/scopes/edit`;\n        const columns = [\n            intl.formatMessage({\n                id: 'Apis.Details.Scopes.Scopes.table.header.name',\n                defaultMessage: 'Name',\n            }),\n            intl.formatMessage({\n                id: 'Apis.Details.Scopes.Scopes.table.header.description',\n                defaultMessage: 'Description',\n            }),\n            {\n                options: {\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const roles = value || [];\n                            return roles.join(',');\n                        }\n                        return false;\n                    },\n                    filter: false,\n                    sort: false,\n                    label: (\n                        <FormattedMessage\n                            id='Apis.Details.Scopes.Scopes.table.header.roles'\n                            defaultMessage='Roles'\n                        />\n                    ),\n                },\n            },\n            {\n                options: {\n                    customBodyRender: (value, tableMeta) => {\n                        if (value && tableMeta.rowData) {\n                            return (\n                                <List component='nav' className={classes.root}>\n                                    {value.map((resource) => (\n                                        <ListItem button>\n                                            <ListItemText primary={resource} />\n                                        </ListItem>\n                                    ))}\n                                </List>\n                            );\n                        }\n                        return false;\n                    },\n                    filter: false,\n                    sort: false,\n                    label: (\n                        <FormattedMessage\n                            id='Apis.Details.Scopes.Scopes.table.header.usages'\n                            defaultMessage='Used In'\n                        />\n                    ),\n                },\n            },\n            {\n                options: {\n                    customBodyRender: (value, tableMeta) => {\n                        if (tableMeta.rowData) {\n                            const scopeName = tableMeta.rowData[0];\n                            return (\n                                <table className={classes.actionTable}>\n                                    <tr>\n                                        <td>\n                                            <Link\n                                                to={\n                                                    !isRestricted(['apim:api_create'], api) && !api.isRevision && {\n                                                        pathname: editUrl,\n                                                        state: {\n                                                            scopeName,\n                                                        },\n                                                    }\n                                                }\n                                            >\n                                                <Button\n                                                    disabled={isRestricted(\n                                                        ['apim:api_create'],\n                                                        api,\n                                                    ) || api.isRevision}\n                                                >\n                                                    <Icon>edit</Icon>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.scopes.Edit.text.editor.edit'\n                                                        defaultMessage='Edit'\n                                                    />\n                                                </Button>\n                                            </Link>\n                                        </td>\n                                        <td>\n                                            <Delete scopeName={scopeName} api={api} isAPIProduct />\n                                        </td>\n                                    </tr>\n                                </table>\n                            );\n                        }\n                        return false;\n                    },\n                    filter: false,\n                    sort: false,\n                    label: (\n                        <FormattedMessage\n                            id='Apis.Details.Scopes.Scopes.table.header.actions'\n                            defaultMessage='Actions'\n                        />\n                    ),\n                },\n            },\n        ];\n        const options = {\n            filterType: 'multiselect',\n            selectableRows: false,\n            title: false,\n            filter: false,\n            sort: false,\n            print: false,\n            download: false,\n            viewColumns: false,\n            customToolbar: false,\n        };\n\n        const scopesList = api.scopes.filter((apiScope) => {\n            return !apiScope.shared;\n        }).map((apiScope) => {\n            const aScope = [];\n            aScope.push(apiScope.scope.name);\n            aScope.push(apiScope.scope.description);\n            aScope.push(apiScope.scope.bindings);\n            const resources = api.operations && api.operations\n                .filter((op) => {\n                    return op.scopes.includes(apiScope.scope.name);\n                })\n                .map((op) => {\n                    return op.target + ' ' + op.verb;\n                });\n            aScope.push(resources);\n            return aScope;\n        });\n\n        if (!scopes) {\n            return <Progress />;\n        }\n\n        if (scopes.length === 0) {\n            return (\n                <div className={classes.root}>\n                    <div className={classes.titleWrapper}>\n                        <Typography\n                            id='itest-api-details-scopes-onboarding-head'\n                            variant='h4'\n                            align='left'\n                            className={classes.mainTitle}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.local.Scopes.heading.scope.heading'\n                                defaultMessage='Local Scopes'\n                            />\n                        </Typography>\n                        <Tooltip\n                            title={(\n                                <FormattedMessage\n                                    id='Apis.Details.Scopes.Scopes.heading.scope.title.tooltip'\n                                    defaultMessage='Manage scopes that are local to this API'\n                                />\n                            )}\n                            placement='top-end'\n                            aria-label='Local Scopes'\n                        >\n                            <IconButton size='small' aria-label='delete'>\n                                <HelpOutlineIcon fontSize='small' />\n                            </IconButton>\n                        </Tooltip>\n                    </div>\n                    <InlineMessage type='info' height={140}>\n                        <div className={classes.contentWrapper}>\n                            <Typography variant='h5' component='h3' className={classes.head}>\n                                <FormattedMessage\n                                    id='Apis.Details.Scopes.Scopes.create.scopes.title'\n                                    defaultMessage='Create API Local Scopes'\n                                />\n                            </Typography>\n                            <Typography component='p' className={classes.content}>\n                                <FormattedMessage\n                                    id='Apis.Details.Scopes.Scopes.scopes.enable.fine.gained.access.control'\n                                    defaultMessage={\n                                        'Scopes enable fine-grained access control to API resources'\n                                        + ' based on user roles.'\n                                    }\n                                />\n                            </Typography>\n                            <div className={classes.actions}>\n                                <Link to={!isRestricted(['apim:api_create'], api) && !api.isRevision && url}>\n                                    <Button\n                                        variant='contained'\n                                        color='primary'\n                                        className={classes.button}\n                                        disabled={isRestricted(['apim:api_create'], api) || api.isRevision}\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.Scopes.Scopes.create.scopes.button'\n                                            defaultMessage='Create Scopes'\n                                        />\n                                    </Button>\n                                </Link>\n                            </div>\n                        </div>\n                    </InlineMessage>\n                </div>\n            );\n        }\n\n        return (\n            <div className={classes.heading}>\n                <div className={classes.titleWrapper}>\n                    <Typography variant='h4' align='left' className={classes.mainTitle}>\n                        <FormattedMessage\n                            id='Apis.Details.local.Scopes.heading.edit.heading'\n                            defaultMessage='Local Scopes'\n                        />\n                    </Typography>\n                    <Tooltip\n                        title={(\n                            <FormattedMessage\n                                id='Apis.Details.Scopes.Scopes.heading.scope.title.tooltip2'\n                                defaultMessage='Manage scopes that are local to this API'\n                            />\n                        )}\n                        placement='top-end'\n                        aria-label='Local Scopes'\n                    >\n                        <IconButton size='small' aria-label='delete'>\n                            <HelpOutlineIcon fontSize='small' />\n                        </IconButton>\n                    </Tooltip>\n                    <Link to={!isRestricted(['apim:api_create'], api) && !api.isRevision && url}>\n                        <Button\n                            variant='outlined'\n                            color='primary'\n                            size='small'\n                            disabled={isRestricted(['apim:api_create'], api) || api.isRevision}\n                        >\n                            <AddCircle className={classes.buttonIcon} />\n                            <FormattedMessage\n                                id='Apis.Details.Scopes.Scopes.heading.scope.add_new'\n                                defaultMessage='Add New Local Scope'\n                            />\n                        </Button>\n                    </Link>\n                    {isRestricted(['apim:api_create'], api) && (\n                        <Grid item>\n                            <Typography variant='body2' color='primary'>\n                                <FormattedMessage\n                                    id='Apis.Details.Scopes.Scopes.update.not.allowed'\n                                    defaultMessage={\n                                        '*You are not authorized to update scopes of'\n                                        + ' the API due to insufficient permissions'\n                                    }\n                                />\n                            </Typography>\n                        </Grid>\n                    )}\n                </div>\n\n                <MUIDataTable title={false} data={scopesList} columns={columns} options={options} />\n            </div>\n        );\n    }\n}\n\nScopes.propTypes = {\n    match: PropTypes.shape({\n        params: PropTypes.shape({}),\n    }),\n    api: PropTypes.instanceOf(Object).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nScopes.defaultProps = {\n    match: { params: {} },\n};\n\nexport default injectIntl(withAPI(withStyles(styles)(Scopes)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Icon from '@material-ui/core/Icon';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ConfirmDialog from 'AppComponents/Shared/ConfirmDialog';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst styles = {\n    appBar: {\n        position: 'relative',\n    },\n    flex: {\n        flex: 1,\n    },\n    popupHeader: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    splitWrapper: {\n        padding: 0,\n    },\n    docName: {\n        alignItems: 'center',\n        display: 'flex',\n    },\n    button: {\n        height: 30,\n        marginLeft: 30,\n    },\n};\n\nfunction Delete(props) {\n    const [api, updateAPI] = useAPI();\n    const { intl } = props;\n    const [open, setOpen] = useState(false);\n    const toggleOpen = () => {\n        setOpen(!open);\n    };\n    const deleteScope = () => {\n        const { scopeName } = props;\n        const ops = api.operations && JSON.parse(JSON.stringify(api.operations));\n        const operations = ops && ops.map((op) => {\n            // eslint-disable-next-line no-param-reassign\n            op.scopes = op.scopes.filter((scope) => {\n                return scope !== scopeName;\n            });\n            return op;\n        });\n        const scopes = api.scopes.filter((apiScope) => {\n            return apiScope.scope.name !== scopeName;\n        });\n        const updateProperties = { scopes, operations };\n        const setOpenLocal = setOpen; // Need to copy this to access inside the promise.then\n        const promisedUpdate = updateAPI(updateProperties);\n        promisedUpdate\n            .then(() => {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Resources.Resources.api.scope.deleted.successfully',\n                    defaultMessage: 'API Scope deleted successfully!',\n                }));\n                setOpenLocal(!open);\n            })\n            .catch((errorResponse) => {\n                console.error(errorResponse);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Resources.Resources.something.went.wrong.while.updating.the.api',\n                    defaultMessage: 'Error occurred while updating API',\n                }));\n            });\n    };\n\n    const runAction = (confirm) => {\n        if (confirm) {\n            deleteScope();\n        } else {\n            setOpen(!open);\n        }\n    };\n    const { scopeName } = props;\n\n    return (\n        <div>\n            <Button onClick={toggleOpen} disabled={isRestricted(['apim:api_create'], api) || api.isRevision}>\n                <Icon>delete_forever</Icon>\n                <FormattedMessage\n                    id='Apis.Details.Documents.Delete.document.delete'\n                    defaultMessage='Delete'\n                />\n            </Button>\n            <ConfirmDialog\n                key='key-dialog'\n                labelCancel={(\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.label.cancel'\n                        defaultMessage='Cancel'\n                    />\n                )}\n                title={(\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.delete.confirm'\n                        defaultMessage='Confirm Delete'\n                    />\n                )}\n                message={(\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.label.ok.confirm'\n                        defaultMessage='Are you sure you want to delete scope {scope} ?'\n                        values={{ scope: scopeName }}\n                    />\n                )}\n                labelOk={(\n                    <FormattedMessage\n                        id='Apis.Details.Documents.Delete.document.listing.label.ok.yes'\n                        defaultMessage='Yes'\n                    />\n                )}\n                callback={runAction}\n                open={open}\n            />\n        </div>\n    );\n}\nDelete.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    scopeName: PropTypes.string.isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(Delete));\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport SecurityOverview from './SecurityOverview';\n\nconst Security = () => {\n    return (\n        <Switch>\n            <Route path='/apis/:api_uuid/security' component={SecurityOverview} />\n        </Switch>\n    );\n};\n\nexport default Security;\n","/*\n * Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Component } from 'react';\n\nimport Api from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport PropTypes from 'prop-types';\n\nimport Typography from '@material-ui/core/Typography';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Button from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport Divider from '@material-ui/core/Divider';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport AddPolicy from './AddPolicy';\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n        marginTop: 10,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    mainTitle: {\n        paddingLeft: 0,\n    },\n    button: {\n        marginLeft: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n    buttonIcon: {\n        marginRight: 10,\n    },\n    table: {\n        '& td': {\n            fontSize: theme.typography.fontSize,\n        },\n        '& th': {\n            fontSize: theme.typography.fontSize * 1.2,\n        },\n        tableLayout: 'fixed',\n    },\n    addNewHeader: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.grey['300'],\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n    addNewWrapper: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px ' + theme.palette.grey['300'],\n        borderRadius: theme.shape.borderRadius,\n        marginTop: theme.spacing(2),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    addJsonContent: {\n        whiteSpace: 'pre',\n    },\n});\n\nclass SecurityOverview extends Component {\n    constructor(props) {\n        super(props);\n        this.api = new Api();\n        this.state = {\n            api: {\n                name: '',\n            },\n            policies: [],\n            showAddPolicy: false,\n        };\n        this.updateData = this.updateData.bind(this);\n        this.toggleShowAddPolicy = this.toggleShowAddPolicy.bind(this);\n        this.updateData = this.updateData.bind(this);\n    }\n\n    componentDidMount() {\n        this.updateData();\n    }\n\n    updateData() {\n        const promisedApi = this.api.get(this.props.match.params.api_uuid);\n        promisedApi.then((response) => {\n            this.setState({ api: response.obj });\n            this.updatePolicyData();\n        });\n    }\n\n    updatePolicyData() {\n        this.setState({ policies: [] });\n        const policyIds = this.state.api.threatProtectionPolicies.list;\n        for (let i = 0; i < policyIds.length; i++) {\n            const id = policyIds[i].policyId;\n            const promisedPolicies = this.api.getThreatProtectionPolicy(id);\n            promisedPolicies.then((response) => {\n                const updatedPolicies = this.state.policies;\n                updatedPolicies.push(response.obj);\n                this.setState({ policies: updatedPolicies });\n            });\n        }\n    }\n\n    deletePolicy(id) {\n        const { intl } = this.props;\n        const associatedApi = this.state.api;\n        const promisedPolicyDelete = this.api.deleteThreatProtectionPolicyFromApi(associatedApi.id, id);\n        promisedPolicyDelete.then((response) => {\n            if (response.status === 200) {\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.Security.SecurityOverview.policy.remove.success',\n                    defaultMessage: 'Policy removed successfully.',\n                }));\n\n                //   remove policy from local api\n                const index = associatedApi.threatProtectionPolicies.list.indexOf({ policyId: id });\n                associatedApi.threatProtectionPolicies.list.splice(index, 1);\n                this.setState({ api: associatedApi });\n                this.updatePolicyData();\n            } else {\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.Security.SecurityOverview.policy.remove.failure',\n                    defaultMessage: 'Failed to remove policy.',\n                }));\n            }\n        });\n    }\n\n    toggleShowAddPolicy = () => {\n        this.setState({ showAddPolicy: !this.state.showAddPolicy });\n    }\n\n    formatPolicy = (policy) => {\n        let formattedPolicy = policy;\n        formattedPolicy = formattedPolicy.replace(':', ' : ');\n        formattedPolicy = formattedPolicy.split(',').join(',\\n');\n        return formattedPolicy;\n    }\n\n    render() {\n        let data = [];\n        if (this.state.policies) {\n            data = this.state.policies;\n        }\n        const { classes } = this.props;\n        const { showAddPolicy } = this.state;\n\n        return (\n            <div className={classes.root}>\n                <div className={classes.contentWrapper}>\n                    <div className={classes.titleWrapper}>\n                        <Typography variant='h4' align='left' className={classes.mainTitle}>\n                            <FormattedMessage\n                                id='Apis.Details.Security.SecurityOverview.threat.protection.policies'\n                                defaultMessage='Threat Protection Policies'\n                            />\n                        </Typography>\n                        <Button size='small' className={classes.button} onClick={this.toggleShowAddPolicy}>\n                            <AddCircle className={classes.buttonIcon} />\n                            <FormattedMessage\n                                id='Apis.Details.Security.SecurityOverview.add.threat.protection.policy'\n                                defaultMessage='Add New Threat Protection Policy'\n                            />\n                        </Button>\n                    </div>\n                </div>\n                <div className={classes.contentWrapper}>\n                    {showAddPolicy &&\n                    <AddPolicy\n                        id={this.state.api.id}\n                        toggleShowAddPolicy={this.toggleShowAddPolicy}\n                        updateData={this.updateData}\n                    />\n                    }\n                </div>\n                <br />\n                <div className={classes.contentWrapper}>\n                    <div className={classes.addNewWrapper}>\n                        <Typography className={classes.addNewHeader}>\n                            <FormattedMessage\n                                id='Apis.Details.Security.SecurityOverview.manage.threat.protection.policies'\n                                defaultMessage='Manage Threat Protection Policies'\n                            />\n                        </Typography>\n                        <Divider className={classes.divider} />\n                        <Table className={classes.table}>\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>\n                                        <FormattedMessage\n                                            id='Apis.Details.Security.SecurityOverview.policy.name'\n                                            defaultMessage='Policy Name'\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        <FormattedMessage\n                                            id='Apis.Details.Security.SecurityOverview.policy.type'\n                                            defaultMessage='Policy Type'\n                                        />\n                                    </TableCell>\n                                    <TableCell>\n                                        <FormattedMessage\n                                            id='Apis.Details.Security.SecurityOverview.policy'\n                                            defaultMessage='Policy'\n                                        />\n                                    </TableCell>\n                                    <TableCell />\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {data.map((n) => {\n                                    return (\n                                        <TableRow key={n.uuid}>\n                                            <TableCell>{n.name + (n.uuid === 'GLOBAL-JSON' ? ' (GLOBAL)' : '')}</TableCell>\n                                            <TableCell>{n.type}</TableCell>\n                                            <TableCell>\n                                                <div className={classes.addJsonContent}>\n                                                    {this.formatPolicy(n.policy)}\n                                                </div>\n                                            </TableCell>\n                                            <TableCell>\n                                                <span>\n                                                    <Button color='accent' onClick={() => this.deletePolicy(n.uuid)} >\n                                                        <FormattedMessage\n                                                            id='Apis.Details.Security.SecurityOverview.delete'\n                                                            defaultMessage='Delete'\n                                                        />\n                                                    </Button>\n                                                </span>\n                                            </TableCell>\n                                        </TableRow>\n                                    );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nSecurityOverview.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    match: PropTypes.shape({\n        params: PropTypes.shape({\n            api_uuid: PropTypes.string,\n        }),\n    }).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\n\nexport default injectIntl(withStyles(styles)(SecurityOverview));\n","/*\n * Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport Input from '@material-ui/core/Input';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { withStyles } from '@material-ui/core/styles';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport API from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\n\nconst styles = (theme) => ({\n    addNewWrapper: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px ' + theme.palette.grey['300'],\n        borderRadius: theme.shape.borderRadius,\n        marginTop: theme.spacing(2),\n    },\n    addNewHeader: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.grey['300'],\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n    addNewOther: {\n        padding: theme.spacing(2),\n    },\n    button: {\n        marginLeft: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    addJsonContent: {\n        whiteSpace: 'pre',\n    },\n});\n\nclass AddPolicy extends Component {\n    /**\n     * AddPolicy\n     */\n    constructor() {\n        super();\n        this.state = {\n            selectedPolicy: {\n                uuid: '',\n                name: 'Select',\n                policy: '',\n                type: '',\n            },\n            policies: [],\n        };\n    }\n\n    /**\n     * AddPolicy\n     */\n    componentDidMount() {\n        const api = new API();\n        const promisedPolicies = api.getThreatProtectionPolicies();\n        promisedPolicies.then((response) => {\n            this.setState({ policies: response.obj.list });\n        });\n        const promisedApi = api.get(this.props.id);\n        promisedApi.then((response) => {\n            this.setState({ currentApi: response.obj });\n        });\n    }\n\n    /**\n     * AddPolicy\n     */\n    formatPolicy = (policy) => {\n        let formattedPolicy = policy;\n        formattedPolicy = formattedPolicy.replace(':', ' : ');\n        formattedPolicy = formattedPolicy.split(',').join(',\\n');\n        return formattedPolicy;\n    }\n\n    handleChange = () => (event) => {\n        const policyId = event.target.value;\n        const api = new API();\n        const promisedPolicy = api.getThreatProtectionPolicy(policyId);\n        promisedPolicy.then((response) => {\n            this.setState({ selectedPolicy: response.obj });\n        });\n    }\n\n\n    handlePolicyAdd() {\n        const { intl } = this.props;\n        const policy = this.state.selectedPolicy;\n        if (policy.uuid === '' || policy.name === '') {\n            Alert.error(intl.formatMessage({\n                id: 'Apis.Details.Security.AddPolicy.select.policy',\n                defaultMessage: 'Please select a policy',\n            }));\n            return;\n        }\n\n        if (this.state.currentApi) {\n            const { currentApi } = this.state;\n            const api = new API();\n            const promisedPolicyAdd = api.addThreatProtectionPolicyToApi(currentApi.id, this.state.selectedPolicy.uuid);\n            promisedPolicyAdd.then((response) => {\n                if (response.status === 200) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.Security.AddPolicy.threat.protection.policy.add.success',\n                        defaultMessage: 'Threat protection policy added successfully.',\n                    }));\n                    this.props.updateData();\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Security.AddPolicy.threat.protection.policy.add.failure',\n                        defaultMessage: 'Failed to add threat protection policy.',\n                    }));\n                }\n            });\n        }\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div className={classes.contentWrapper}>\n                <div className={classes.addNewWrapper}>\n                    <Typography className={classes.addNewHeader}>\n                        <FormattedMessage\n                            id='Apis.Details.Security.AddPolicy.add.threat.protection.policy'\n                            defaultMessage='Add New Threat Protection Policy'\n                        />\n                    </Typography>\n                    <Divider className={classes.divider} />\n                    <div className={classes.addNewOther}>\n                        <InputLabel htmlFor='selectedPolicy'>\n                            <FormattedMessage\n                                id='Apis.Details.Security.AddPolicy.policy'\n                                defaultMessage='Policy'\n                            />\n                        </InputLabel>\n                        &nbsp;&nbsp;\n                        <Select\n                            value={this.state.selectedPolicy.uuid}\n                            onChange={this.handleChange('selectedPolicy')}\n                            input={<Input name='selectedPolicy' id='selectedPolicy' />}\n                        >\n                            {this.state.policies.map((n) => {\n                                return (\n                                    <MenuItem key={n.uuid} value={n.uuid}>{n.name}</MenuItem>\n                                );\n                            })}\n                            ;\n                        </Select>\n                        <br />\n                        <br />\n                        <p>\n                            <FormattedMessage\n                                id='Apis.Details.Security.AddPolicy.policy.type.label'\n                                defaultMessage='Policy Type: '\n                            />\n                            {this.state.selectedPolicy.type}\n                        </p>\n                        <div>\n                            <p>\n                                <FormattedMessage\n                                    id='Apis.Details.Security.AddPolicy.policy.label'\n                                    defaultMessage='Policy: '\n                                />\n                            </p>\n                            <div className={classes.addJsonContent}>\n                                {this.formatPolicy(this.state.selectedPolicy.policy)}\n                            </div>\n                        </div>\n                    </div>\n                    <Divider className={classes.divider} />\n                    <div className={classes.addNewOther}>\n                        <Button variant='contained' color='primary' onClick={() => this.handlePolicyAdd()}>\n                            <FormattedMessage\n                                id='Apis.Details.Security.AddPolicy.add.policy.to.api'\n                                defaultMessage='Add Policy to API'\n                            />\n                        </Button>\n                        <Button className={classes.button} onClick={this.props.toggleShowAddPolicy}>\n                            <FormattedMessage\n                                id='Apis.Details.Security.AddPolicy.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nAddPolicy.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    toggleShowAddPolicy: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n    updateData: PropTypes.func.isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\n\n\nexport default injectIntl(withStyles(styles)(AddPolicy));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Suspense, lazy } from 'react';\nimport AppContext from 'AppComponents/Shared/AppContext';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport EditRounded from '@material-ui/icons/EditRounded';\nimport CloudDownloadRounded from '@material-ui/icons/CloudDownloadRounded';\nimport LockRounded from '@material-ui/icons/LockRounded';\nimport SwapHorizontalCircle from '@material-ui/icons/SwapHorizontalCircle';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport Dialog from '@material-ui/core/Dialog';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport Paper from '@material-ui/core/Paper';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Progress } from 'AppComponents/Shared';\nimport Typography from '@material-ui/core/Typography';\nimport Slide from '@material-ui/core/Slide';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport YAML from 'js-yaml';\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api.js';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport { withRouter } from 'react-router';\nimport { isRestricted } from 'AppData/AuthManager';\nimport ResourceNotFound from '../../../Base/Errors/ResourceNotFound';\nimport APISecurityAudit from './APISecurityAudit';\nimport ImportDefinition from './ImportDefinition';\nimport DefinitionOutdated from './DefinitionOutdated';\n\nconst EditorDialog = lazy(() => import('./SwaggerEditorDrawer' /* webpackChunkName: \"EditorDialog\" */));\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"APIDefMonacoEditor\" */));\nconst AsyncAPIEditor = lazy(() => import('./AsyncApiEditorDrawer'));\n\nconst styles = (theme) => ({\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    swaggerEditorWrapper: {\n        height: '100vh',\n        overflowY: 'auto',\n    },\n    buttonIcon: {\n        marginRight: 10,\n    },\n    buttonWarningColor: {\n        color: theme.palette.warning.light,\n    },\n    topBar: {\n        display: 'flex',\n        flexDirection: 'row',\n        marginBottom: theme.spacing(2),\n    },\n    converterWrapper: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        flex: '1',\n        fontSize: '0.6964285714285714rem',\n    },\n    downloadLink: {\n        color: 'black',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    progressLoader: {\n        marginLeft: theme.spacing(1),\n    },\n    updateApiWarning: {\n        marginLeft: theme.spacing(5),\n        color: theme.custom.serviceCatalog.onboarding.buttonText,\n        borderColor: theme.custom.serviceCatalog.onboarding.buttonText,\n    },\n    warningIconStyle: {\n        color: theme.custom.serviceCatalog.onboarding.buttonText,\n    },\n});\n/**\n * This component holds the functionality of viewing the api definition content of an api. The initial view is a\n * read-only representation of the api definition file.\n * Users can either edit the content by clicking the 'Edit' button or upload a new api definition file by clicking\n * 'Import API Definition'.\n * */\nclass APIDefinition extends React.Component {\n    /**\n     * @inheritDoc\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            openEditor: false,\n            swagger: null,\n            swaggerModified: null,\n            graphQL: null,\n            format: null,\n            convertTo: null,\n            isAuditApiClicked: false,\n            securityAuditProperties: [],\n            isSwaggerValid: true,\n            isUpdating: false,\n            asyncAPI: null,\n            asyncAPIModified: null,\n            isAsyncAPIValid: true,\n        };\n        this.handleNo = this.handleNo.bind(this);\n        this.handleSave = this.handleSave.bind(this);\n        this.handleSaveAndDeploy = this.handleSaveAndDeploy.bind(this);\n        this.openEditor = this.openEditor.bind(this);\n        this.transition = this.transition.bind(this);\n        this.closeEditor = this.closeEditor.bind(this);\n        this.hasJsonStructure = this.hasJsonStructure.bind(this);\n        this.getConvertToFormat = this.getConvertToFormat.bind(this);\n        this.onAuditApiClick = this.onAuditApiClick.bind(this);\n        this.onChangeFormatClick = this.onChangeFormatClick.bind(this);\n        this.openUpdateConfirmation = this.openUpdateConfirmation.bind(this);\n        this.updateSwaggerDefinition = this.updateSwaggerDefinition.bind(this);\n        this.updateAsyncAPIDefinitionAndDeploy = this.updateAsyncAPIDefinitionAndDeploy.bind(this);\n        this.updateSwaggerDefinitionAndDeploy = this.updateSwaggerDefinitionAndDeploy.bind(this);\n        this.onChangeSwaggerContent = this.onChangeSwaggerContent.bind(this);\n        this.updateAsyncAPIDefinition = this.updateAsyncAPIDefinition.bind(this);\n        this.onChangeAsyncAPIContent = this.onChangeAsyncAPIContent.bind(this);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    componentDidMount() {\n        const { api } = this.props;\n        const { settings } = this.context;\n        let promisedApi;\n        if (api.type === 'GRAPHQL') {\n            promisedApi = api.getSchema(api.id);\n        } else if (api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE') {\n            promisedApi = api.getAsyncAPIDefinition(api.id);\n        } else {\n            promisedApi = api.getSwagger(api.id);\n        }\n\n        this.setState({ securityAuditProperties: settings.securityAuditProperties });\n\n        promisedApi\n            .then((response) => {\n                if (api.type === 'GRAPHQL') {\n                    this.setState({\n                        graphQL: response.obj.schemaDefinition,\n                        format: 'txt',\n                    });\n                } else if (api.type === 'WS' || api.type === 'WEBSUB' || api.type === 'SSE') {\n                    this.setState({\n                        asyncAPI: YAML.safeDump(YAML.safeLoad(response.data)),\n                        asyncAPIModified: YAML.safeDump(YAML.safeLoad(response.data)),\n                        format: 'yaml',\n                        convertTo: this.getConvertToFormat('yaml'),\n                    });\n                } else {\n                    this.setState({\n                        swagger: YAML.safeDump(YAML.safeLoad(response.data)),\n                        swaggerModified: YAML.safeDump(YAML.safeLoad(response.data)),\n                        format: 'yaml',\n                        convertTo: this.getConvertToFormat('yaml'),\n                    });\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    }\n\n\n    /**\n     * Method to handle asyncAPI content change\n     *\n     * @param {string} modifiedContent : The modified asyncAPI content.\n     * */\n    onChangeAsyncAPIContent(modifiedContent) {\n        const { format } = this.state;\n        /**\n         * Validate for the basic json/ yaml format.\n         * */\n        try {\n            if (format === 'json') {\n                JSON.parse(modifiedContent, null);\n            } else {\n                YAML.load(modifiedContent);\n            }\n            this.setState({ isAsyncAPIValid: true, asyncAPIModified: modifiedContent });\n        } catch (e) {\n            this.setState({ isAsyncAPIValid: false, asyncAPIModified: modifiedContent });\n        }\n    }\n\n    /**\n     * Toggle the format of the api definition.\n     * JSON -> YAML, YAML -> JSON\n     */\n    onChangeFormatClick() {\n        const {\n            format, swagger, convertTo, asyncAPI,\n        } = this.state;\n        let formattedString = '';\n        if (asyncAPI === null) {\n            if (convertTo === 'json') {\n                formattedString = JSON.stringify(YAML.load(swagger), null, 1);\n            } else {\n                formattedString = YAML.safeDump(YAML.safeLoad(swagger));\n            }\n            this.setState({\n                swagger: formattedString,\n                swaggerModified: formattedString,\n                format: convertTo,\n                convertTo: format,\n            });\n        } else {\n            if (convertTo === 'json') {\n                formattedString = JSON.stringify(YAML.load(asyncAPI), null, 1);\n            } else {\n                formattedString = YAML.safeDump(YAML.safeLoad(asyncAPI));\n            }\n            this.setState({\n                asyncAPI: formattedString,\n                asyncAPIModified: formattedString,\n                format: convertTo,\n                convertTo: format,\n            });\n        }\n    }\n\n    /**\n      * Set isAuditApiClicked to true when Audit API is clicked\n      */\n    onAuditApiClick() {\n        this.setState({ isAuditApiClicked: true });\n    }\n\n    /**\n     * Method to handle swagger content change\n     *\n     * @param {string} modifiedContent : The modified swagger content.\n     * */\n    onChangeSwaggerContent(modifiedContent) {\n        const { format } = this.state;\n        /**\n         * Validate for the basic json/ yaml format.\n         * */\n        try {\n            if (format === 'json') {\n                JSON.parse(modifiedContent, null);\n            } else {\n                YAML.load(modifiedContent);\n            }\n            this.setState({ isSwaggerValid: true, swaggerModified: modifiedContent });\n        } catch (e) {\n            this.setState({ isSwaggerValid: false, swaggerModified: modifiedContent });\n        }\n    }\n\n    setSchemaDefinition = (schemaContent, contentType) => {\n        const { api } = this.props;\n        const isGraphql = api.isGraphql();\n        const isWebSocket = api.isWebSocket();\n        const isWebSub = api.isWebSub();\n        if (isGraphql) {\n            this.setState({ graphQL: schemaContent });\n        } else if (isWebSocket || isWebSub) {\n            this.setState({\n                asyncAPI: schemaContent,\n                asyncAPIModified: schemaContent,\n                convertTo: this.getConvertToFormat(contentType),\n                format: contentType,\n            });\n        } else {\n            this.setState({\n                swagger: schemaContent,\n                swaggerModified: schemaContent,\n                convertTo: this.getConvertToFormat(contentType),\n                format: contentType,\n            });\n        }\n    };\n\n    /**\n     * Util function to get the format which the definition can be converted to.\n     * @param {*} format : The current format of definition.\n     * @returns {string} The possible conversion format.\n     */\n    getConvertToFormat(format) {\n        return format === 'json' ? 'yaml' : 'json';\n    }\n\n    /**\n     * Handles the No button action of the save api definition confirmation dialog box.\n     */\n    handleNo() {\n        this.setState({ openDialog: false });\n    }\n\n    /**\n     * Handles the yes button action of the save api definition confirmation dialog box.\n     */\n    handleSave() {\n        const { swaggerModified, asyncAPIModified } = this.state;\n        if (asyncAPIModified !== null) {\n            this.setState({ openDialog: false }, () => this.updateAsyncAPIDefinition(asyncAPIModified, '', ''));\n        } else {\n            this.setState({ openDialog: false }, () => this.updateSwaggerDefinition(swaggerModified, '', ''));\n        }\n    }\n\n    handleSaveAndDeploy() {\n        const { swaggerModified, asyncAPIModified } = this.state;\n        const { api, history } = this.props;\n        if (asyncAPIModified !== null) {\n            this.updateAsyncAPIDefinitionAndDeploy(asyncAPIModified, '', '');\n            history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            });\n        } else {\n            this.updateSwaggerDefinitionAndDeploy(swaggerModified, '', '');\n            history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            });\n        }\n    }\n\n    /**\n     * Checks whether the swagger content is json type.\n     * @param {string} definition The swagger string.\n     * @return {boolean} Whether the content is a json or not.\n     * */\n    hasJsonStructure(definition) {\n        if (typeof definition !== 'string') return false;\n        try {\n            const result = JSON.parse(definition);\n            return result && typeof result === 'object';\n        } catch (err) {\n            return false;\n        }\n    }\n\n    /**\n     * Method to set the state for opening the swagger editor drawer.\n     * Swagger editor loads the definition content from the local storage. Hence we set the swagger content to the\n     * local storage.\n     * */\n    openEditor() {\n        this.setState({ openEditor: true });\n    }\n\n    /**\n     * Sets the state to close the swagger-editor drawer.\n     * */\n    closeEditor() {\n        this.setState({ openEditor: false });\n        const { intl, api, history } = this.props;\n        const { isAuditApiClicked } = this.state;\n        if (isAuditApiClicked === true) {\n            Alert.info(intl.formatMessage({\n                id: 'Apis.Details.APIDefinition.info.updating.auditapi',\n                defaultMessage: 'To reflect the changes made, you need to click Audit API',\n            }));\n            const redirectUrl = '/apis/' + api.id + '/api definition';\n            history.push(redirectUrl);\n        }\n    }\n\n    /**\n     * Handles the transition of the drawer.\n     * @param {object} props list of props\n     * @return {object} The Slide transition component\n     * */\n    transition(props) {\n        return <Slide direction='up' {...props} />;\n    }\n\n    /**\n     * Updates swagger content in the local storage.\n     * */\n    openUpdateConfirmation() {\n        this.setState({ openDialog: true });\n    }\n\n    /**\n     * Updates swagger definition of the api.\n     * @param {string} swaggerContent The swagger file that needs to be updated.\n     * @param {string} specFormat The current format of the definition\n     * @param {string} toFormat The format it can be converted to.\n     * */\n    updateSwaggerDefinition(swaggerContent, specFormat, toFormat) {\n        const { api, intl, updateAPI } = this.props;\n        this.setState({ isUpdating: true });\n        let parsedContent = {};\n        if (this.hasJsonStructure(swaggerContent)) {\n            parsedContent = JSON.parse(swaggerContent);\n        } else {\n            try {\n                parsedContent = YAML.load(swaggerContent);\n            } catch (err) {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.while.parsing.api.definition',\n                    defaultMessage: 'Error occurred while updating the API Definition',\n                }));\n                return;\n            }\n        }\n        const promise = api.updateSwagger(parsedContent);\n        promise\n            .then((response) => {\n                const { endpointImplementationType } = api;\n                if (endpointImplementationType === 'INLINE') {\n                    api.generateMockScripts(api.id);\n                }\n                if (response) {\n                    Alert.success(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.api.definition.updated.successfully',\n                        defaultMessage: 'API Definition updated successfully',\n                    }));\n                    if (specFormat && toFormat) {\n                        this.setState({ swagger: swaggerContent, format: specFormat, convertTo: toFormat });\n                    } else {\n                        this.setState({ swagger: swaggerContent });\n                    }\n                }\n                /*\n                 *updateAPI() will make a /GET call to get the latest api once the swagger definition is updated.\n                 *Otherwise, we need to refresh the page to get changes.\n                 */\n                updateAPI();\n                this.setState({ isUpdating: false });\n            })\n            .catch((err) => {\n                console.log(err);\n                const { response: { body: { description, message } } } = err;\n                if (description && message) {\n                    Alert.error(`${message} ${description}`);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.api.definition',\n                        defaultMessage: 'Error occurred while updating the API Definition',\n                    }));\n                }\n\n                this.setState({ isUpdating: false });\n            });\n    }\n\n    /**\n     * Updates swagger definition of the api.\n     * @param {string} swaggerContent The swagger file that needs to be updated.\n     * @param {string} specFormat The current format of the definition\n     * @param {string} toFormat The format it can be converted to.\n     * */\n    updateSwaggerDefinitionAndDeploy(swaggerContent, specFormat, toFormat) {\n        const { api, intl } = this.props;\n        this.setState({ isUpdating: true });\n        let parsedContent = {};\n        if (this.hasJsonStructure(swaggerContent)) {\n            parsedContent = JSON.parse(swaggerContent);\n        } else {\n            try {\n                parsedContent = YAML.load(swaggerContent);\n            } catch (err) {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.while.parsing.api.definition',\n                    defaultMessage: 'Error occurred while updating the API Definition',\n                }));\n                return;\n            }\n        }\n        const promise = api.updateSwagger(parsedContent);\n        promise\n            .then((response) => {\n                const { endpointImplementationType } = api;\n                if (endpointImplementationType === 'INLINE') {\n                    api.generateMockScripts(api.id);\n                }\n                if (response) {\n                    Alert.success(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.api.definition.updated.successfully',\n                        defaultMessage: 'API Definition updated successfully',\n                    }));\n                    if (specFormat && toFormat) {\n                        this.setState({ swagger: swaggerContent, format: specFormat, convertTo: toFormat });\n                    } else {\n                        this.setState({ swagger: swaggerContent });\n                    }\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                const { response: { body: { description, message } } } = err;\n                if (description && message) {\n                    Alert.error(`${message} ${description}`);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.api.definition',\n                        defaultMessage: 'Error occurred while updating the API Definition',\n                    }));\n                }\n            });\n    }\n\n\n    /**\n     * Updates asyncAPI definition of the API\n     * @param {string} asyncAPIContent The AsyncAPi file that needs to be updated.\n     * @param {string} specFormat The current format of the definition\n     * @param {string} toFormat The format it can be converted to.\n     */\n    updateAsyncAPIDefinitionAndDeploy(asyncAPIContent, specFormat, toFormat) {\n        const { api, intl } = this.props;\n        this.setState({ isUpdating: true });\n        let parsedContent = {};\n        if (this.hasJsonStructure(asyncAPIContent)) {\n            parsedContent = JSON.parse(asyncAPIContent);\n        } else {\n            try {\n                parsedContent = YAML.load(asyncAPIContent);\n            } catch (err) {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.async.api.definition',\n                    defaultMessage: 'Error occurred while updating the API Definition',\n                }));\n                return;\n            }\n        }\n        const promise = api.updateAsyncAPIDefinition(parsedContent);\n        promise\n            .then((response) => {\n                /* const { endpointImplementationType } = api; */\n                /* if (endpointImplementationType === 'INLINE') {\n                    api.generateMockScripts(api.id);\n                } */\n                if (response) {\n                    Alert.success(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.async.api.definition.updated.successfully',\n                        defaultMessage: 'API Definition updated successfully',\n                    }));\n                    if (specFormat && toFormat) {\n                        this.setState({ asyncAPI: asyncAPIContent, format: specFormat, convertTo: toFormat });\n                    } else {\n                        this.setState({ asyncAPI: asyncAPIContent });\n                    }\n                }\n            })\n            .catch((err) => {\n                console.log(err);\n                const { response: { body: { description, message } } } = err;\n                if (description && message) {\n                    Alert.error(`${message} ${description}`);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.async.api.definition',\n                        defaultMessage: 'Error occurred while updating the API Definition',\n                    }));\n                }\n                this.setState({ isUpdating: false });\n            });\n    }\n\n    /**\n     * Updates asyncAPI definition of the API\n     * @param {string} asyncAPIContent The AsyncAPi file that needs to be updated.\n     * @param {string} specFormat The current format of the definition\n     * @param {string} toFormat The format it can be converted to.\n     */\n    updateAsyncAPIDefinition(asyncAPIContent, specFormat, toFormat) {\n        const { api, intl, updateAPI } = this.props;\n        this.setState({ isUpdating: true });\n        let parsedContent = {};\n        if (this.hasJsonStructure(asyncAPIContent)) {\n            parsedContent = JSON.parse(asyncAPIContent);\n        } else {\n            try {\n                parsedContent = YAML.load(asyncAPIContent);\n            } catch (err) {\n                console.log(err);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.async.api.definition',\n                    defaultMessage: 'Error occurred while updating the API Definition',\n                }));\n                return;\n            }\n        }\n        const promise = api.updateAsyncAPIDefinition(parsedContent);\n        promise\n            .then((response) => {\n                /* const { endpointImplementationType } = api; */\n                /* if (endpointImplementationType === 'INLINE') {\n                    api.generateMockScripts(api.id);\n                } */\n                if (response) {\n                    Alert.success(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.async.api.definition.updated.successfully',\n                        defaultMessage: 'API Definition updated successfully',\n                    }));\n                    if (specFormat && toFormat) {\n                        this.setState({ asyncAPI: asyncAPIContent, format: specFormat, convertTo: toFormat });\n                    } else {\n                        this.setState({ asyncAPI: asyncAPIContent });\n                    }\n                }\n                /*\n                 * updateAPI() will make a /GET call to get the latest api once the asyncAPI definition is updated.\n                 * Otherwise, we need to refresh the page to get changes.\n                 */\n                updateAPI();\n                this.setState({ isUpdating: false });\n            })\n            .catch((err) => {\n                console.log(err);\n                const { response: { body: { description, message } } } = err;\n                if (description && message) {\n                    Alert.error(`${message} ${description}`);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.APIDefinition.error.while.updating.async.api.definition',\n                        defaultMessage: 'Error occurred while updating the API Definition',\n                    }));\n                }\n                this.setState({ isUpdating: false });\n            });\n    }\n\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            swagger, graphQL, openEditor, openDialog, format, convertTo, notFound, isAuditApiClicked,\n            securityAuditProperties, isSwaggerValid, swaggerModified, isUpdating,\n            asyncAPI, asyncAPIModified, isAsyncAPIValid,\n        } = this.state;\n\n        const {\n            classes, resourceNotFountMessage, api,\n        } = this.props;\n\n        let downloadLink;\n        let fileName;\n        let isGraphQL = 0;\n\n        if (graphQL !== null) {\n            downloadLink = 'data:text/' + format + ';charset=utf-8,' + encodeURIComponent(graphQL);\n            fileName = api.provider + '-' + api.name + '-' + api.version + '.graphql';\n            isGraphQL = 1;\n        } else if (asyncAPI !== null) {\n            downloadLink = 'data:text/' + format + ';charset=utf-8,' + encodeURIComponent(asyncAPI);\n            fileName = 'asyncapi.' + format;\n        } else {\n            downloadLink = 'data:text/' + format + ';charset=utf-8,' + encodeURIComponent(swagger);\n            fileName = 'swagger.' + format;\n        }\n        const editorOptions = {\n            selectOnLineNumbers: true,\n            readOnly: true,\n            smoothScrolling: true,\n            wordWrap: 'on',\n        };\n\n        if (notFound) {\n            return <ResourceNotFound message={resourceNotFountMessage} />;\n        }\n        if (!swagger && !graphQL && !asyncAPI && api === 'undefined') {\n            return <Progress />;\n        }\n\n        return (\n            <>\n                <div className={classes.topBar}>\n                    <div className={classes.titleWrapper}>\n                        <Typography id='itest-api-details-api-definition-head' variant='h4'>\n                            {/* eslint-disable-next-line no-nested-ternary */}\n                            {graphQL ? (\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.schema.definition'\n                                    defaultMessage='Schema Definition'\n                                />\n                            ) : asyncAPI ? (\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.asyncAPI.definition'\n                                    defaultMessage='AsyncAPI Definition'\n                                />\n                            ) : (\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.api.definition'\n                                    defaultMessage='API Definition'\n                                />\n                            )}\n                        </Typography>\n                        {asyncAPI ? (\n                            <Button\n                                size='small'\n                                className={classes.button}\n                                onClick={this.openEditor}\n                                disabled={isRestricted(['apim:api_create'], api)}\n                            >\n                                <EditRounded className={classes.buttonIcon} />\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.edit'\n                                    defaultMessage='Edit'\n                                />\n                            </Button>\n                        ) : (\n                            !(graphQL || api.type === API.CONSTS.APIProduct) && (\n                                <Button\n                                    size='small'\n                                    className={classes.button}\n                                    onClick={this.openEditor}\n                                    disabled={isRestricted(['apim:api_create'], api) || api.isRevision}\n                                >\n                                    <EditRounded className={classes.buttonIcon} />\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.APIDefinition.edit'\n                                        defaultMessage='Edit'\n                                    />\n                                </Button>\n                            )\n                        )}\n                        {api.type !== API.CONSTS.APIProduct && (\n                            <ImportDefinition setSchemaDefinition={this.setSchemaDefinition} />\n                        )}\n                        {api.serviceInfo && api.serviceInfo.outdated && (\n                            <DefinitionOutdated\n                                api={api}\n                                classes={classes}\n                            />\n                        )}\n                        <a className={classes.downloadLink} href={downloadLink} download={fileName}>\n                            <Button size='small' className={classes.button}>\n                                <CloudDownloadRounded className={classes.buttonIcon} />\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.download.definition'\n                                    defaultMessage='Download Definition'\n                                />\n                            </Button>\n                        </a>\n\n                        {(securityAuditProperties.apiToken && securityAuditProperties.collectionId\n                        && api.type !== 'GRAPHQL' && !asyncAPI)\n                            && (\n                                <Button size='small' className={classes.button} onClick={this.onAuditApiClick}>\n                                    <LockRounded className={classes.buttonIcon} />\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.APIDefinition.audit.api'\n                                        defaultMessage='Audit API'\n                                    />\n                                </Button>\n                            )}\n\n                        {isRestricted(['apim:api_create'], api) && (\n                            <Typography variant='body2' color='primary'>\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.update.not.allowed'\n                                    defaultMessage='Unauthorized: Insufficient permissions to update API Definition'\n                                />\n                            </Typography>\n                        )}\n                    </div>\n                    {isGraphQL === 0 && (\n                        <div className={classes.titleWrapper}>\n                            <Button size='small' className={classes.button} onClick={this.onChangeFormatClick}>\n                                <SwapHorizontalCircle className={classes.buttonIcon} />\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.convert.to'\n                                    defaultMessage='Convert to'\n                                />\n                                {' '}\n                                {convertTo}\n                            </Button>\n                        </div>\n                    )}\n                </div>\n                <div>\n                    <Suspense fallback={<Progress />}>\n                        {isAuditApiClicked ? (\n                            <APISecurityAudit apiId={api.id} />\n                        ) : (\n                            <MonacoEditor\n                                language={format}\n                                width='100%'\n                                height='calc(100vh - 51px)'\n                                theme='vs-dark'\n                                /* eslint-disable-next-line no-nested-ternary */\n                                value={swagger !== null ? swagger : asyncAPI !== null ? asyncAPI : graphQL}\n                                options={editorOptions}\n                            />\n                        )}\n                    </Suspense>\n                </div>\n                <Dialog fullScreen open={openEditor} onClose={this.closeEditor} TransitionComponent={this.transition}>\n                    <Paper square className={classes.popupHeader}>\n                        <IconButton\n                            className={classes.button}\n                            color='inherit'\n                            onClick={this.closeEditor}\n                            aria-label={(\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.APIDefinition.btn.close'\n                                    defaultMessage='Close'\n                                />\n                            )}\n                        >\n                            <Icon>close</Icon>\n                        </IconButton>\n\n                        <Button\n                            className={classes.button}\n                            variant='contained'\n                            color='primary'\n                            onClick={this.openUpdateConfirmation}\n                            disabled={(!isSwaggerValid || isUpdating) || (!isAsyncAPIValid || isUpdating)}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.APIDefinition.documents.swagger.editor.update.content'\n                                defaultMessage='Update Content'\n                            />\n                            {isUpdating && <CircularProgress className={classes.progressLoader} size={24} />}\n                        </Button>\n                    </Paper>\n                    <Suspense\n                        fallback={(\n                            <Progress />\n                        )}\n                    >\n                        {swagger ? (\n                            <EditorDialog\n                                swagger={swaggerModified}\n                                language={format}\n                                onEditContent={this.onChangeSwaggerContent}\n                            />\n                        ) : (\n                            <AsyncAPIEditor\n                                asyncAPI={asyncAPIModified}\n                                language={format}\n                                onEditContent={this.onChangeAsyncAPIContent}\n                            />\n                        )}\n                    </Suspense>\n                </Dialog>\n                <Dialog\n                    open={openDialog}\n                    onClose={this.handleNo}\n                    aria-labelledby='alert-dialog-title'\n                    aria-describedby='alert-dialog-description'\n                >\n                    <DialogTitle id='alert-dialog-title'>\n                        <Typography align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.APIDefinition.save.api.definition'\n                                defaultMessage='Save API Definition'\n                            />\n                        </Typography>\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id='alert-dialog-description'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.APIDefinition.api.definition.save.confirmation'\n                                defaultMessage={\n                                    'Are you sure you want to save the API Definition? This might affect the'\n                                    + ' existing resources.'\n                                }\n                            />\n                        </DialogContentText>\n                    </DialogContent>\n                    <DialogActions>\n                        <Grid\n                            container\n                            direction='row'\n                            alignItems='flex-start'\n                            spacing={1}\n                        >\n                            <Grid item>\n                                <Button onClick={this.handleNo} color='primary'>\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.APIDefinition.btn.no'\n                                        defaultMessage='CANCEL'\n                                    />\n                                </Button>\n                            </Grid>\n                            <Grid item>\n                                <CustomSplitButton\n                                    handleSave={this.handleSave}\n                                    handleSaveAndDeploy={this.handleSaveAndDeploy}\n                                    isUpdating={isUpdating}\n                                />\n                            </Grid>\n                        </Grid>\n                    </DialogActions>\n                </Dialog>\n            </>\n        );\n    }\n}\n\nAPIDefinition.contextType = AppContext;\nAPIDefinition.propTypes = {\n    classes: PropTypes.shape({\n        button: PropTypes.shape({}),\n        popupHeader: PropTypes.shape({}),\n        buttonIcon: PropTypes.shape({}),\n        root: PropTypes.shape({}),\n        topBar: PropTypes.shape({}),\n        titleWrapper: PropTypes.shape({}),\n        mainTitle: PropTypes.shape({}),\n        converterWrapper: PropTypes.shape({}),\n        dropzone: PropTypes.shape({}),\n        downloadLink: PropTypes.shape({}),\n    }).isRequired,\n    api: PropTypes.shape({\n        updateSwagger: PropTypes.func,\n        getSwagger: PropTypes.func,\n        id: PropTypes.string,\n        apiType: PropTypes.oneOf([API.CONSTS.API, API.CONSTS.APIProduct]),\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.shape({}),\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.shape({}),\n    }).isRequired,\n    resourceNotFountMessage: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n    updateAPI: PropTypes.func.isRequired,\n};\nexport default withRouter(injectIntl(withStyles(styles, { withTheme: true })(APIDefinition)));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { Component } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport API from 'AppData/api';\nimport PropTypes from 'prop-types';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Button from '@material-ui/core/Button';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { CircularProgressbarWithChildren } from 'react-circular-progressbar';\nimport 'react-circular-progressbar/dist/styles.css';\nimport Paper from '@material-ui/core/Paper';\nimport { withStyles, createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport { Line } from 'rc-progress';\nimport Progress from 'AppComponents/Shared/Progress';\nimport { withRouter } from 'react-router';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\n\nimport MUIDataTable from 'mui-datatables';\n\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport MonacoEditor from 'react-monaco-editor';\n\nconst styles = (theme) => ({\n    rootPaper: {\n        padding: theme.spacing(3),\n        margin: theme.spacing(2),\n    },\n    inlineDecoration: {\n        background: '#FF0000',\n    },\n    contentLine: {\n        background: '#add8e6',\n    },\n    htmlToolTip: {\n        backgroundColor: '#f5f5f9',\n        color: 'rgba(0, 0, 0, 0.87)',\n        maxWidth: 220,\n        fontSize: theme.typography.pxToRem(14),\n        border: '1px solid #dadde9',\n        '& b': {\n            fontWeight: theme.typography.fontWeightMedium,\n        },\n    },\n    helpButton: {\n        padding: 0,\n        minWidth: 20,\n        'margin-left': 10,\n    },\n    helpIcon: {\n        fontSize: 16,\n    },\n    tableRow: {\n        'background-color': '#d3d3d3',\n    },\n    referenceErrorTypography: {\n        width: '70%',\n        marginTop: '15%',\n    },\n    referenceTypography: {\n        width: '70%',\n    },\n    subheadingTypography: {\n        paddingTop: 30,\n        paddingLeft: 20,\n    },\n    paperDiv: {\n        marginTop: 30,\n    },\n    sectionHeadingTypography: {\n        marginBottom: 18,\n    },\n    auditSummaryDiv: {\n        display: 'flex',\n        marginTop: 25,\n    },\n    auditSummarySubDiv: {\n        width: 250,\n        marginLeft: 40,\n        marginRight: 40,\n        display: 'table',\n    },\n    circularProgressBarScore: {\n        fontSize: 70,\n        color: '#3d98c7',\n        marginTop: 18,\n    },\n    circularProgressBarScoreFooter: {\n        fontSize: 18,\n        marginTop: 10,\n    },\n    auditSummaryDivRight: {\n        flexGrow: 1,\n        marginLeft: 200,\n        marginTop: 10,\n    },\n    columnOne: {\n        display: 'block',\n        width: '50%',\n        float: 'left',\n    },\n    columnTwo: {\n        width: '40%',\n        float: 'right',\n    },\n    head: {\n        fontWeight: 200,\n        marginBottom: 20,\n    },\n    linkText: {\n        float: 'right',\n    },\n});\n\n/**\n * This Component hosts the API Security Audit Component\n * More specifically, rendering of the Security Audit\n * Report.\n */\nclass APISecurityAudit extends Component {\n    /**\n     * @inheritdoc\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            report: null,\n            overallScore: 0,\n            numErrors: 0,\n            externalApiId: null,\n            loading: false,\n            apiDefinition: null,\n        };\n        this.criticalityObject = {\n            1: 'INFO',\n            2: 'LOW',\n            3: 'MEDIUM',\n            4: 'HIGH',\n            5: 'CRITICAL',\n        };\n        this.searchTerm = null;\n    }\n\n    /**\n     * @inheritdoc\n     */\n    componentDidMount() {\n        this.setState({ loading: true });\n        const { apiId, history, intl } = this.props;\n        const currentApi = new API();\n        const promisedDefinition = currentApi.getSwagger(apiId);\n        promisedDefinition.then((response) => {\n            this.setState({\n                apiDefinition: JSON.stringify(response.obj, null, 1),\n            });\n        })\n            .catch((error) => {\n                console.log(error);\n            });\n\n        currentApi.getSecurityAuditReport(apiId)\n            .then((response) => {\n                this.setState({\n                    report: response.body.report,\n                    overallScore: response.body.grade,\n                    numErrors: response.body.numErrors,\n                    externalApiId: response.body.externalApiId,\n                    loading: false,\n                });\n            })\n            .catch((error) => {\n                console.log(error);\n                this.setState({ loading: false });\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.AuditApi.GetReportError',\n                    defaultMessage: 'Something went wrong while retrieving the API Security Report',\n                }));\n                const redirectUrl = '/apis/' + apiId + '/api definition';\n                history.push(redirectUrl);\n            });\n    }\n\n    getMuiTheme = () => createMuiTheme({\n        typography: {\n            useNextVariants: true,\n        },\n        overrides: {\n            MUIDataTableBodyCell: {\n                root: {\n                    width: '30%',\n                },\n            },\n            MUIDataTableSelectCell: {\n                root: {\n                    display: 'none',\n                },\n            },\n            MUIDataTableToolbarSelect: {\n                title: {\n                    display: 'none',\n                },\n            },\n        },\n    });\n\n    getErrorMuiTheme = () => createMuiTheme({\n        typography: {\n            useNextVariants: true,\n        },\n        overrides: {\n            MUIDataTableBodyCell: {\n                root: {\n                    width: '100%',\n                },\n            },\n            MUIDataTableSelectCell: {\n                root: {\n                    display: 'none',\n                },\n            },\n            MUIDataTableToolbarSelect: {\n                title: {\n                    display: 'none',\n                },\n            },\n        },\n    });\n\n    /**\n     * Get Row data for MUI Table\n     * @param {*} issues Issues array\n     * @param {String} category The category of the issue\n     * @param {*} rowType The type of row - normal or error\n     * @return {*} dataObject The dataObject array\n     */\n    getRowData(issues, category, rowType) {\n        const dataObject = [];\n        for (const item in issues) {\n            if ({}.hasOwnProperty.call(issues, item)) {\n                for (let i = 0; i < issues[item].issues.length; i++) {\n                    const rowObject = [];\n                    if (rowType === 'error') {\n                        if (issues[item].issues[i].specificDescription) {\n                            rowObject.push(\n                                issues[item].issues[i].specificDescription, issues[item].issues[i].pointer,\n                                category, rowType, item,\n                            );\n                        } else {\n                            rowObject.push(\n                                issues[item].description, issues[item].issues[i].pointer,\n                                category, rowType, item,\n                            );\n                        }\n                    } else if (rowType === 'normal') {\n                        if (issues[item].issues[i].specificDescription) {\n                            rowObject.push(\n                                this.criticalityObject[issues[item].criticality],\n                                issues[item].issues[i].specificDescription,\n                                this.roundScore(issues[item].issues[i].score), issues[item].issues[i].pointer,\n                                issues[item].issues[i].tooManyImpacted,\n                                issues[item].issues[i].pointersAffected, category, issues[item].tooManyError,\n                                rowType, item,\n                            );\n                        } else {\n                            rowObject.push(\n                                this.criticalityObject[issues[item].criticality],\n                                issues[item].description, this.roundScore(issues[item].issues[i].score),\n                                issues[item].issues[i].pointer, issues[item].issues[i].tooManyImpacted,\n                                issues[item].issues[i].pointersAffected, category, issues[item].tooManyError,\n                                rowType, item,\n                            );\n                        }\n                    }\n                    dataObject.push(rowObject);\n                }\n            }\n        }\n        return dataObject;\n    }\n\n    /**\n     * Method to get the URL to display for each issue\n     * @param {*} category Category of the issue\n     * @returns {*} String URL\n     */\n    getMoreDetailUrl(category) {\n        const baseUrl = 'https://apisecurity.io/ref/';\n        let url = '';\n\n        switch (category) {\n            case 'OpenAPI Format Requirements':\n                url = baseUrl + 'oasconformance/';\n                break;\n            case 'Security':\n                url = baseUrl + 'security/';\n                break;\n            case 'Data Validation':\n                url = baseUrl + 'datavalidation/datavalidation/';\n                break;\n            default:\n                url = baseUrl;\n        }\n        return url;\n    }\n\n    /**\n     * editorDidMount method for Monaco Editor\n     * @param {*} editor Monaco Editor editor\n     * @param {*} monaco Monaco Editor monaco\n     * @param {String} searchTerm SearchTerm for pointer\n     */\n    editorDidMount = (editor, monaco, searchTerm) => {\n        const { classes } = this.props;\n        if (searchTerm !== '') {\n            const lastTerms = [];\n            const termObject = searchTerm.split('/');\n            const regexPatterns = [];\n            for (let i = 0; i < termObject.length; i++) {\n                if (termObject[i] !== '' && termObject[i] !== '0') {\n                    let appendedString = '\"' + termObject[i] + '\":';\n                    if (appendedString.includes('~1')) {\n                        appendedString = appendedString.replace(/~1/i, '/');\n                    }\n                    regexPatterns.push(appendedString);\n                }\n            }\n\n            for (let j = 0; j < regexPatterns.length; j++) {\n                if (regexPatterns[j] !== '') {\n                    if (j !== 0 && lastTerms.length !== 0 && lastTerms[lastTerms.length - 1] !== null) {\n                        lastTerms.push(editor.getModel().findNextMatch(\n                            regexPatterns[j],\n                            { lineNumber: lastTerms[lastTerms.length - 1].range.endLineNumber, column: 1 },\n                            true, true, null, false,\n                        ));\n                    } else {\n                        lastTerms.push(editor.getModel().findNextMatch(regexPatterns[j], 1, true, true, null, true));\n                    }\n                }\n            }\n            const finalMatchIndex = lastTerms.length - 1;\n            if (lastTerms[finalMatchIndex] != null) {\n                editor.revealLineInCenter(lastTerms[finalMatchIndex].range.startLineNumber);\n                editor.deltaDecorations([], [\n                    {\n                        range: new monaco.Range(\n                            lastTerms[finalMatchIndex].range.startLineNumber,\n                            lastTerms[finalMatchIndex].range.startColumn,\n                            lastTerms[finalMatchIndex].range.endLineNumber,\n                            lastTerms[finalMatchIndex].range.endColumn,\n                        ),\n                        options: {\n                            isWholeLine: true,\n                            className: classes.inlineDecoration,\n                            glyphMarginClassName: classes.contentLine,\n                        },\n                    },\n                ]);\n            }\n        }\n    }\n\n    /**\n     * Method to round off the score of a section of the report\n     * @param {*} score Score of section\n     * @returns {*} roundScore Rounded off score\n     */\n    roundScore(score) {\n        if (score !== 0) {\n            return Math.round(score * 100) / 100;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const { classes } = this.props;\n        const {\n            report, overallScore, numErrors, externalApiId, loading, apiDefinition,\n        } = this.state;\n\n        const reportObject = JSON.parse(report);\n        const linkToDetailedReport = 'https://platform.42crunch.com/apis/' + externalApiId + '/security-audit-report';\n        if (loading) {\n            return (\n                <div>\n                    <InlineMessage type='info' height={140}>\n                        <div className={classes.contentWrapper}>\n                            <Typography\n                                variant='h5'\n                                component='h3'\n                                className={classes.head}\n                            >\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.AuditApi.WaitForReport'\n                                    defaultMessage='Please wait...'\n                                />\n                            </Typography>\n                            <Typography component='p' className={classes.content}>\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.AuditApi.WaitForReport.Content'\n                                    defaultMessage='Auditing an API for the first time will take some time'\n                                />\n                            </Typography>\n                        </div>\n                    </InlineMessage>\n                    <Progress />\n                </div>\n            );\n        }\n        const columns = [\n            {\n                name: 'Severity',\n                options: {\n                    filter: true,\n                    sort: true,\n                },\n            },\n            {\n                name: 'Description',\n                options: {\n                    filter: true,\n                    sort: true,\n                },\n            },\n            {\n                name: 'Score Impact',\n                options: {\n                    filter: true,\n                    sort: true,\n                },\n            },\n            {\n                name: 'Pointer',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'Too Many Impacted',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'Pointers Affected',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'Issue Category',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'Too Many Errors',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'isError',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'ReferenceUrl',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n        ];\n\n        const errorColumns = [\n            {\n                name: 'Description',\n                options: {\n                    filter: true,\n                    sort: true,\n                },\n            },\n            {\n                name: 'Pointer',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'Issue Category',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'isError',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n            {\n                name: 'ReferenceUrl',\n                options: {\n                    display: 'excluded',\n                    filter: false,\n                    sort: false,\n                },\n            },\n        ];\n\n        const editorOptions = {\n            selectOnLineNumbers: true,\n            readOnly: true,\n            smoothScrolling: true,\n            wordWrap: 'on',\n            glyphMargin: true,\n        };\n\n        const options = {\n            filterType: 'dropdown',\n            responsive: 'stacked',\n            print: false,\n            download: false,\n            selectableRows: false,\n            expandableRows: true,\n            expandableRowsOnClick: true,\n            renderExpandableRow: (rowData) => {\n                let searchTerm = null;\n                if (rowData[3] === 'error') {\n                    searchTerm = reportObject.index[rowData[1]];\n\n                    return (\n                        <TableRow className={classes.tableRow}>\n                            <TableCell className={classes.columnOne}>\n                                <MonacoEditor\n                                    height='250px'\n                                    theme='vs-dark'\n                                    value={apiDefinition}\n                                    options={editorOptions}\n                                    editorDidMount={(editor, monaco) => this.editorDidMount(editor, monaco, searchTerm)}\n                                />\n                            </TableCell>\n                            <TableCell className={classes.columnTwo}>\n                                <Typography variant='body1' className={classes.referenceErrorTypography}>\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.AuditApi.ReferenceSection'\n                                        description='Link to visit for detail on how to remedy issue'\n                                        defaultMessage='Visit this {link} to view a detailed description, possible\n                                        exploits and remediation for this issue.'\n                                        values={{\n                                            link: (\n                                                <strong>\n                                                    <a\n                                                        href={this.getMoreDetailUrl(rowData[2])}\n                                                        target='_blank'\n                                                        rel='noopener noreferrer'\n                                                    >\n                                                        link\n                                                    </a>\n                                                </strong>),\n                                        }}\n                                    />\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    );\n                } else {\n                    searchTerm = reportObject.index[rowData[3]];\n                    return (\n                        <TableRow className={classes.tableRow}>\n                            <TableCell colSpan='2'>\n                                <MonacoEditor\n                                    width='85%'\n                                    height='250px'\n                                    theme='vs-dark'\n                                    value={apiDefinition}\n                                    options={editorOptions}\n                                    editorDidMount={(editor, monaco) => this.editorDidMount(editor, monaco, searchTerm)}\n                                />\n                            </TableCell>\n                            <TableCell>\n                                <Typography variant='body1' className={classes.referenceTypography}>\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.AuditApi.ReferenceSection'\n                                        description='Link to visit for detail on how to remedy issue'\n                                        defaultMessage='Visit this {link} to view a detailed description, possible\n                                        exploits and remediation for this issue.'\n                                        values={{\n                                            link: (\n                                                <strong>\n                                                    <a\n                                                        href={this.getMoreDetailUrl(rowData[6])}\n                                                        target='_blank'\n                                                        rel='noopener noreferrer'\n                                                    >\n                                                        link\n                                                    </a>\n                                                </strong>),\n                                        }}\n                                    />\n                                </Typography>\n                            </TableCell>\n                        </TableRow>\n                    );\n                }\n            },\n        };\n        return (\n            <div>\n                {report && (\n                    <div\n                        width='100%'\n                        height='calc(100vh - 51px)'\n                    >\n                        <Typography variant='h4' className={classes.subheadingTypography}>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.AuditApi.ApiSecurityAuditReport'\n                                defaultMessage='API Security Audit Report'\n                            />\n                        </Typography>\n                        <div className={classes.paperDiv}>\n                            <Paper elevation={1} className={classes.rootPaper}>\n                                <div>\n                                    <Typography variant='h5' className={classes.sectionHeadingTypography}>\n                                        <FormattedMessage\n                                            id='Apis.Details.APIDefinition.AuditApi.AuditScoreSummary'\n                                            defaultMessage='Audit Score and Summary'\n                                        />\n                                    </Typography>\n                                    <Typography variant='body1' className={classes.linkText}>\n                                        <FormattedMessage\n                                            id='Apis.Details.APIDefinition.AuditApi.LinkToDetailedReport'\n                                            defaultMessage='{linkToDetailedReportText} {link} {afterLinkText}'\n                                            values={{\n                                                linkToDetailedReportText: 'Check out the ',\n                                                link: (\n                                                    <b>\n                                                        <a\n                                                            href={linkToDetailedReport}\n                                                            target='_blank'\n                                                            rel='noopener noreferrer'\n                                                        >\n                                                            detailed Report\n                                                        </a>\n                                                    </b>),\n                                                afterLinkText: ' from 42Crunch',\n                                            }}\n                                        />\n                                    </Typography>\n                                    <div className={classes.auditSummaryDiv}>\n                                        <div className={classes.auditSummarySubDiv}>\n                                            <CircularProgressbarWithChildren\n                                                value={overallScore}\n                                            >\n                                                <Typography\n                                                    variant='body1'\n                                                    className={classes.circularProgressBarScore}\n                                                >\n                                                    <FormattedMessage\n                                                        id='Apis.Details.APIDefinition.AuditApi\n                                                                    .OverallScoreProgress'\n                                                        defaultMessage='{overallScore}'\n                                                        values={{\n                                                            overallScore: (\n                                                                <strong>{Math.round(overallScore)}</strong>\n                                                            ),\n                                                        }}\n                                                    />\n                                                </Typography>\n                                                <Typography\n                                                    variant='body1'\n                                                    className={classes.circularProgressBarScoreFooter}\n                                                >\n                                                    <FormattedMessage\n                                                        id='Apis.Details.APIDefinition.AuditApi.ScoreFooter'\n                                                        defaultMessage='out of 100'\n                                                    />\n                                                </Typography>\n                                            </CircularProgressbarWithChildren>\n                                        </div>\n                                        <div className={classes.auditSummaryDivRight}>\n                                            {{}.hasOwnProperty.call(reportObject, 'score')\n                                                && (\n                                                    <Typography variant='body1'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.APIDefinition.AuditApi.overallScore'\n                                                            defaultMessage='{overallScoreText} {overallScore} / 100'\n                                                            values={{\n                                                                overallScoreText: <strong>Overall Score:</strong>,\n                                                                overallScore: this.roundScore(overallScore),\n                                                            }}\n                                                        />\n                                                    </Typography>\n                                                )}\n                                            {numErrors !== null\n                                                && (\n                                                    <Typography variant='body1'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.APIDefinition.AuditApi.TotalNumOfErrors'\n                                                            defaultMessage='{totalNumOfErrorsText} {totalNumOfErrors}'\n                                                            values={{\n                                                                totalNumOfErrorsText: (\n                                                                    <strong>Total Number of Errors: </strong>\n                                                                ),\n                                                                totalNumOfErrors: numErrors,\n                                                            }}\n                                                        />\n                                                    </Typography>\n                                                )}\n                                            {{}.hasOwnProperty.call(reportObject, 'criticality')\n                                                && (\n                                                    <>\n                                                        <Typography variant='body1'>\n                                                            <FormattedMessage\n                                                                id={'Apis.Details.APIDefinition'\n                                                                + '.AuditApi.OverallCriticality'}\n                                                                defaultMessage={'{overallCriticalityText}'\n                                                                + ' {overallCriticality}'}\n                                                                values={{\n                                                                    overallCriticalityText: (\n                                                                        <strong>Overall Severity:</strong>\n                                                                    ),\n                                                                    overallCriticality: (\n                                                                        this.criticalityObject[reportObject.criticality]\n                                                                    ),\n                                                                }}\n                                                            />\n                                                            <Tooltip\n                                                                placement='right'\n                                                                classes={{\n                                                                    tooltip: classes.htmlTooltip,\n                                                                }}\n                                                                title={(\n                                                                    <>\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.severity'}\n                                                                            defaultMessage='Severity ranges from: '\n                                                                        />\n                                                                        <br />\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.info'}\n                                                                            defaultMessage='1. INFO'\n                                                                        />\n                                                                        <br />\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.low'}\n                                                                            defaultMessage='2. LOW'\n                                                                        />\n                                                                        <br />\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.medium'}\n                                                                            defaultMessage='3. MEDIUM'\n                                                                        />\n                                                                        <br />\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.high'}\n                                                                            defaultMessage='4. HIGH'\n                                                                        />\n                                                                        <br />\n                                                                        <FormattedMessage\n                                                                            id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.critical'}\n                                                                            defaultMessage='5. CRITICAL'\n                                                                        />\n                                                                        <br />\n                                                                    </>\n                                                                )}\n                                                            >\n                                                                <Button className={classes.helpButton}>\n                                                                    <HelpOutline className={classes.helpIcon} />\n                                                                </Button>\n                                                            </Tooltip>\n                                                        </Typography>\n                                                    </>\n                                                )}\n                                            <hr />\n                                            {{}.hasOwnProperty.call(reportObject, 'security')\n                                                && (\n                                                    <Typography variant='body1'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.APIDefinition.AuditApi.SecuritySummary'\n                                                            defaultMessage='{securitySummary}'\n                                                            values={{\n                                                                securitySummary: (\n                                                                    <strong>\n                                                                        Security -\n                                                                        (\n                                                                        {\n                                                                            this.roundScore(reportObject.security.score)\n                                                                        }\n                                                                        {' '}\n                                                                        / 30)\n                                                                    </strong>\n                                                                ),\n                                                            }}\n                                                        />\n                                                        <Line\n                                                            percent={((this.roundScore(reportObject.security.score)\n                                                                / 30\n                                                            ) * 100)}\n                                                            strokeColor='#3d98c7'\n                                                        />\n                                                    </Typography>\n                                                )}\n                                            {{}.hasOwnProperty.call(reportObject, 'data')\n                                                && (\n                                                    <Typography variant='body1'>\n                                                        <FormattedMessage\n                                                            id={'Apis.Details.APIDefinition'\n                                                            + '.AuditApi.DataValidationSummary'}\n                                                            defaultMessage='{dataValidationSummary}'\n                                                            values={{\n                                                                dataValidationSummary: (\n                                                                    <strong>\n                                                                        Data Validation -\n                                                                        (\n                                                                        {this.roundScore(reportObject.data.score)}\n                                                                        {' '}\n                                                                        / 70)\n                                                                    </strong>\n                                                                ),\n                                                            }}\n                                                        />\n                                                        <Line\n                                                            percent={((this.roundScore(reportObject.data.score) / 70\n                                                            ) * 100)}\n                                                            strokeColor='#3d98c7'\n                                                        />\n                                                    </Typography>\n                                                )}\n                                            {{}.hasOwnProperty.call(reportObject, 'validationErrors')\n                                                && (\n                                                    <InlineMessage type='warning' height={140}>\n                                                        <div className={classes.contentWrapper}>\n                                                            <Typography\n                                                                variant='h5'\n                                                                component='h3'\n                                                                className={classes.head}\n                                                            >\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                    + '.AuditApi.FailedToValidate.Heading'}\n                                                                    defaultMessage='Failed to Validate OpenAPI File'\n                                                                />\n                                                            </Typography>\n                                                            <Typography component='p' className={classes.content}>\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                    + '.AuditApi.FailedToValidate.Content'}\n                                                                    defaultMessage={'Fix the critical errors '\n                                                                    + 'shown below and run the audit again.'}\n                                                                />\n                                                            </Typography>\n                                                        </div>\n                                                    </InlineMessage>\n                                                )}\n                                        </div>\n                                    </div>\n                                </div>\n                            </Paper>\n                        </div>\n                        {\n                            <div className={classes.paperDiv}>\n                                <Paper elevation={1} className={classes.rootPaper}>\n                                    <div>\n                                        <Typography variant='h5' className={classes.sectionHeadingTypography}>\n                                            <FormattedMessage\n                                                id='Apis.Details.APIDefinition.AuditApi.OpenApiFormatRequirements'\n                                                defaultMessage='OpenAPI Format Requirements'\n                                            />\n                                        </Typography>\n                                        {{}.hasOwnProperty.call(reportObject, 'semanticErrors')\n                                            && (\n                                                <>\n                                                    <div>\n                                                        <Typography variant='body1'>\n                                                            <MuiThemeProvider theme={this.getMuiTheme()}>\n                                                                <MUIDataTable\n                                                                    title='Semantic Errors'\n                                                                    data={this.getRowData(\n                                                                        reportObject.semanticErrors.issues,\n                                                                        'OpenAPI Format Requirements',\n                                                                        'error',\n                                                                    )}\n                                                                    columns={errorColumns}\n                                                                    options={options}\n                                                                />\n                                                            </MuiThemeProvider>\n                                                        </Typography>\n                                                    </div>\n                                                </>\n                                            )}\n                                        {{}.hasOwnProperty.call(reportObject, 'validationErrors')\n                                            && (\n                                                <>\n                                                    <div>\n                                                        <Typography variant='body1'>\n                                                            <MuiThemeProvider theme={this.getErrorMuiTheme()}>\n                                                                <MUIDataTable\n                                                                    title='Structural Errors'\n                                                                    data={this.getRowData(\n                                                                        reportObject.validationErrors.issues,\n                                                                        'OpenAPI Format Requirements',\n                                                                        'error',\n                                                                    )}\n                                                                    columns={errorColumns}\n                                                                    options={options}\n                                                                />\n                                                            </MuiThemeProvider>\n                                                        </Typography>\n                                                    </div>\n                                                </>\n                                            )}\n                                        {{}.hasOwnProperty.call(reportObject, 'warnings')\n                                            && (\n                                                <>\n                                                    <div>\n                                                        <Typography variant='body1'>\n                                                            <MuiThemeProvider theme={this.getErrorMuiTheme()}>\n                                                                <MUIDataTable\n                                                                    title='Best Practices Issues'\n                                                                    data={this.getRowData(\n                                                                        reportObject.warnings.issues,\n                                                                        'OpenAPI Format Requirements',\n                                                                        'error',\n                                                                    )}\n                                                                    columns={errorColumns}\n                                                                    options={options}\n                                                                />\n                                                            </MuiThemeProvider>\n                                                        </Typography>\n                                                    </div>\n                                                </>\n                                            )}\n                                        {!{}.hasOwnProperty.call(reportObject, 'validationErrors')\n                                        && !{}.hasOwnProperty.call(reportObject, 'semanticErrors')\n                                        && !{}.hasOwnProperty.call(reportObject, 'warnings')\n                                        && (\n                                            <Typography variant='body1'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.OASNoIssuesFound'\n                                                    defaultMessage='No Issues Found'\n                                                />\n                                            </Typography>\n                                        )}\n                                    </div>\n                                </Paper>\n                            </div>\n                        }\n                        {{}.hasOwnProperty.call(reportObject, 'security')\n                            && (\n                                <div className={classes.paperDiv}>\n                                    <Paper elevation={1} className={classes.rootPaper}>\n                                        <div>\n                                            <Typography variant='h5' className={classes.sectionHeadingTypography}>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.Security'\n                                                    defaultMessage='Security'\n                                                />\n                                            </Typography>\n                                            <Typography variant='body1'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.SecurityNumOfIssues'\n                                                    defaultMessage='{securityNumOfIssuesText} {securityNumOfIssues}'\n                                                    values={{\n                                                        securityNumOfIssuesText: (\n                                                            <strong>Number of Issues:</strong>\n                                                        ),\n                                                        securityNumOfIssues: reportObject.security.issueCounter,\n                                                    }}\n                                                />\n                                            </Typography>\n                                            <Typography variant='body1'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.SecurityScore'\n                                                    defaultMessage='{securityScoreText} {securityScore}  / 30'\n                                                    values={{\n                                                        securityScoreText: (\n                                                            <strong>Score:</strong>\n                                                        ),\n                                                        securityScore: (\n                                                            (Math.round(reportObject.security.score * 100) / 100)\n                                                        ),\n                                                    }}\n                                                />\n                                            </Typography>\n                                            <>\n                                                <Typography variant='body1'>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.APIDefinition.AuditApi.securityCriticality'\n                                                        defaultMessage='{securityCriticalityText} {securityCriticality}'\n                                                        values={{\n                                                            securityCriticalityText: (\n                                                                <strong>Severity:</strong>\n                                                            ),\n                                                            securityCriticality: (\n                                                                // eslint-disable-next-line max-len\n                                                                this.criticalityObject[reportObject.security.criticality]\n                                                            ),\n                                                        }}\n                                                    />\n                                                    <Tooltip\n                                                        placement='right'\n                                                        classes={{\n                                                            tooltip: classes.htmlTooltip,\n                                                        }}\n                                                        title={(\n                                                            <>\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.severity'}\n                                                                    defaultMessage='Severity ranges from: '\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.info'}\n                                                                    defaultMessage='1. INFO'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.low'}\n                                                                    defaultMessage='2. LOW'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.medium'}\n                                                                    defaultMessage='3. MEDIUM'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.high'}\n                                                                    defaultMessage='4. HIGH'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.critical'}\n                                                                    defaultMessage='5. CRITICAL'\n                                                                />\n                                                                <br />\n                                                            </>\n                                                        )}\n                                                    >\n                                                        <Button className={classes.helpButton}>\n                                                            <HelpOutline className={classes.helpIcon} />\n                                                        </Button>\n                                                    </Tooltip>\n                                                </Typography>\n                                            </>\n                                            {(reportObject.security.issueCounter !== 0)\n                                            && (\n                                                <div>\n                                                    <hr />\n                                                    <Typography variant='body1'>\n                                                        <MuiThemeProvider theme={this.getMuiTheme()}>\n                                                            <MUIDataTable\n                                                                title='Issues'\n                                                                data={this.getRowData(\n                                                                    reportObject.security.issues,\n                                                                    'Security',\n                                                                    'normal',\n                                                                )}\n                                                                columns={columns}\n                                                                options={options}\n                                                            />\n                                                        </MuiThemeProvider>\n                                                    </Typography>\n                                                </div>\n                                            )}\n                                        </div>\n                                    </Paper>\n                                </div>\n                            )}\n                        {{}.hasOwnProperty.call(reportObject, 'data')\n                            && (\n                                <div className={classes.paperDiv}>\n                                    <Paper elevation={1} className={classes.rootPaper}>\n                                        <div>\n                                            <Typography variant='h5' className={classes.sectionHeadingTypography}>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.DataValidation'\n                                                    defaultMessage='Data Validation'\n                                                />\n                                            </Typography>\n                                            <Typography variant='body1'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.DataValidationNumOfIssues'\n                                                    defaultMessage='{dataNumOfIssuesText} {dataNumOfIssues}'\n                                                    values={{\n                                                        dataNumOfIssuesText: (\n                                                            <strong>Number of Issues:</strong>\n                                                        ),\n                                                        dataNumOfIssues: reportObject.data.issueCounter,\n                                                    }}\n                                                />\n                                            </Typography>\n                                            <Typography variant='body1'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.APIDefinition.AuditApi.DataValidationScore'\n                                                    defaultMessage='{dataScoreText} {dataScore}  / 70'\n                                                    values={{\n                                                        dataScoreText: (\n                                                            <strong>Score:</strong>\n                                                        ),\n                                                        dataScore: (\n                                                            (Math.round(reportObject.data.score * 100) / 100)\n                                                        ),\n                                                    }}\n                                                />\n                                            </Typography>\n                                            <>\n                                                <Typography variant='body1'>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.APIDefinition.AuditApi.dataCriticality'\n                                                        defaultMessage='{dataCriticalityText} {dataCriticality}'\n                                                        values={{\n                                                            dataCriticalityText: (\n                                                                <strong>Severity:</strong>\n                                                            ),\n                                                            dataCriticality: (\n                                                                this.criticalityObject[reportObject.data.criticality]\n                                                            ),\n                                                        }}\n                                                    />\n                                                    <Tooltip\n                                                        placement='right'\n                                                        classes={{\n                                                            tooltip: classes.htmlTooltip,\n                                                        }}\n                                                        title={(\n                                                            <>\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.severity'}\n                                                                    defaultMessage='Severity ranges from: '\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.info'}\n                                                                    defaultMessage='1. INFO'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.low'}\n                                                                    defaultMessage='2. LOW'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.medium'}\n                                                                    defaultMessage='3. MEDIUM'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.high'}\n                                                                    defaultMessage='4. HIGH'\n                                                                />\n                                                                <br />\n                                                                <FormattedMessage\n                                                                    id={'Apis.Details.APIDefinition'\n                                                                            + '.AuditApi.tooltip.critical'}\n                                                                    defaultMessage='5. CRITICAL'\n                                                                />\n                                                                <br />\n                                                            </>\n                                                        )}\n                                                    >\n                                                        <Button className={classes.helpButton}>\n                                                            <HelpOutline className={classes.helpIcon} />\n                                                        </Button>\n                                                    </Tooltip>\n                                                </Typography>\n                                            </>\n                                            {(reportObject.data.issueCounter !== 0)\n                                            && (\n                                                <div>\n                                                    <hr />\n                                                    <Typography variant='body1'>\n                                                        <MuiThemeProvider theme={this.getMuiTheme()}>\n                                                            <MUIDataTable\n                                                                title='Issues'\n                                                                data={this.getRowData(\n                                                                    reportObject.data.issues,\n                                                                    'Data Validation',\n                                                                    'normal',\n                                                                )}\n                                                                columns={columns}\n                                                                options={options}\n                                                            />\n                                                        </MuiThemeProvider>\n                                                    </Typography>\n                                                </div>\n                                            )}\n                                        </div>\n                                    </Paper>\n                                </div>\n                            )}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nAPISecurityAudit.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    apiId: PropTypes.string.isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.func.isRequired,\n    }).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nexport default withRouter(injectIntl(withStyles(styles)(APISecurityAudit)));\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useContext } from 'react';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport PropTypes from 'prop-types';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Dialog from '@material-ui/core/Dialog';\nimport Typography from '@material-ui/core/Typography';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport ReactDiffViewer from 'react-diff-viewer';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport ServiceCatalog from 'AppData/ServiceCatalog';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Button from '@material-ui/core/Button';\nimport API from 'AppData/api.js';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * This component hosts the Swagger Editor component.\n * Known Issue: The cursor jumps back to the start of the first line when updating the swagger-ui based on the\n * modification done via the editor.\n * https://github.com/wso2/product-apim/issues/5071\n * */\n/**\n * Renders an Environments list\n * @class Environments\n * @extends {React.Component}\n */\nexport default function DefinitionOutdated(props) {\n    const {\n        api,\n        classes,\n    } = props;\n    const [openImport, setOpenImport] = useState(false);\n    const [showDiff, setShowDiff] = useState(false);\n    const [newDefinition, setNewDefinition] = useState('');\n    const [oldDefinition, setOldDefinition] = useState('');\n    const [isRendering, setIsRendering] = useState(false);\n    const { updateAPI } = useContext(APIContext);\n\n    /**\n     * Re import service definition\n     */\n    function reimportService() {\n        const promisedReimportService = API.reimportService(api.id);\n        promisedReimportService.then(() => {\n            Alert.info(\n                <FormattedMessage\n                    id='Apis.Details.APIDefinition.DefinitionOutdated.import.success'\n                    defaultMessage='Re-imported API definition successfully!'\n                />,\n            );\n            setOpenImport(false);\n        }).catch((error) => {\n            if (error.response) {\n                Alert.error(error.response.body.description);\n            } else {\n                Alert.error(\n                    <FormattedMessage\n                        id='Apis.Details.APIDefinition.DefinitionOutdated.import.error'\n                        defaultMessage='Error while re-importing API definition'\n                    />,\n                );\n            }\n        }).finally(() => {\n            updateAPI();\n        });\n    }\n\n    /**\n     * Show diff between old service definition and new service definition\n     */\n    function showdiff() {\n        setIsRendering(true);\n        const promisedNewServiceDef = ServiceCatalog.searchServiceByKey(api.serviceInfo.key);\n        const promisedOldServiceDef = api.getSwagger(api.id);\n        Promise.all([promisedNewServiceDef, promisedOldServiceDef])\n            .then((response) => {\n                const newServiceDef = response[0];\n                const oldServiceDef = response[1];\n                return ServiceCatalog.getServiceDefinition(newServiceDef.body.list[0].id).then((file) => {\n                    setNewDefinition(JSON.stringify(file, null, 2));\n                    setOldDefinition(JSON.stringify(oldServiceDef.obj, null, 2));\n                }).catch((error) => {\n                    if (error.response) {\n                        Alert.error(error.response.body.description);\n                    } else {\n                        Alert.error(\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.DefinitionOutdated.new.api.definition.error'\n                                defaultMessage='Something went wrong while retrieving new API definition.'\n                            />,\n                        );\n                    }\n                    console.error(error);\n                });\n            }).catch((error) => {\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                } else {\n                    Alert.error(\n                        <FormattedMessage\n                            id='Apis.Details.APIDefinition.DefinitionOutdated.service.retrieve.error'\n                            defaultMessage='Something went wrong while rendering diff for API Definition'\n                        />,\n                    );\n                }\n                console.error(error);\n            }).finally(() => {\n                setShowDiff(true);\n                setIsRendering(false);\n            });\n    }\n\n    const hideDiff = () => {\n        setShowDiff(false);\n    };\n\n    const handleOpen = () => {\n        setOpenImport(true);\n    };\n\n    const handleClose = () => {\n        setOpenImport(false);\n    };\n\n    return (\n        <>\n            <div>\n                <Button\n                    size='small'\n                    className={classes.button}\n                    onClick={handleOpen}\n                >\n                    <WarningIcon className={classes.buttonWarningColor} />\n                    <FormattedMessage\n                        id='Apis.Details.APIDefinition.DefinitionOutdated.outdated.definition.heading'\n                        defaultMessage='Outdated Definition'\n                    />\n                </Button>\n                <Dialog\n                    open={openImport}\n                    onClose={handleClose}\n                    aria-labelledby='alert-dialog-title'\n                    aria-describedby='alert-dialog-description'\n                    fullWidth\n                    maxWidth='md'\n                >\n                    <DialogTitle id='alert-dialog-title'>\n                        <Typography align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.DefinitionOutdated.outdated.definition'\n                                defaultMessage='Outdated Definition'\n                            />\n                        </Typography>\n                    </DialogTitle>\n                    <DialogContent>\n                        <DialogContentText id='alert-dialog-description'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.DefinitionOutdated.api.outdated.definition'\n                                defaultMessage='Current API definition is outdated.\n                                You can either re-import the new definition or create a new version of this API.'\n                            />\n                        </DialogContentText>\n                        {showDiff && !isRendering && (\n                            <ReactDiffViewer\n                                oldValue={oldDefinition}\n                                newValue={newDefinition}\n                                splitView\n                                disableWordDiff\n                                leftTitle='Outdated Definition from API'\n                                rightTitle='New Service Definition'\n                            />\n                        )}\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={handleClose} color='primary'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.DefinitionOutdated.btn.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </Button>\n                        {!showDiff ? (\n                            <Button onClick={showdiff} color='primary'>\n                                {isRendering ? (<CircularProgress size={24} />) : (\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.DefinitionOutdated.btn.show.diff'\n                                        defaultMessage='Show Diff'\n                                    />\n                                )}\n                            </Button>\n                        ) : (\n                            <Button onClick={hideDiff} color='primary'>\n                                {isRendering ? (<CircularProgress size={24} />) : (\n                                    <FormattedMessage\n                                        id='Apis.Details.APIDefinition.DefinitionOutdated.btn.hide.diff'\n                                        defaultMessage='Hide Diff'\n                                    />\n                                )}\n                            </Button>\n                        )}\n                        <Button\n                            onClick={reimportService}\n                            color='primary'\n                            autoFocus\n                            variant='contained'\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.DefinitionOutdated.btn.reimport'\n                                defaultMessage='Re-import'\n                            />\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        </>\n    );\n}\n\nDefinitionOutdated.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { Suspense, lazy } from 'react';\nimport AppContext from 'AppComponents/Shared/AppContext';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport CloudDownloadRounded from '@material-ui/icons/CloudDownloadRounded';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Progress } from 'AppComponents/Shared';\nimport Typography from '@material-ui/core/Typography';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport API from 'AppData/api.js';\nimport { withRouter } from 'react-router';\nimport { isRestricted } from 'AppData/AuthManager';\nimport Utils from 'AppData/Utils';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ResourceNotFound from '../../../Base/Errors/ResourceNotFound';\nimport ImportDefinition from './ImportDefinition';\n\nconst MonacoEditor = lazy(() => import('react-monaco-editor' /* webpackChunkName: \"APIDefMonacoEditor\" */));\n\nconst styles = (theme) => ({\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    swaggerEditorWrapper: {\n        height: '100vh',\n        overflowY: 'auto',\n    },\n    buttonIcon: {\n        marginRight: 10,\n    },\n    topBar: {\n        display: 'flex',\n        flexDirection: 'row',\n        marginBottom: theme.spacing(2),\n    },\n    converterWrapper: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-end',\n        flex: '1',\n        fontSize: '0.6964285714285714rem',\n    },\n    downloadLink: {\n        color: 'black',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n});\n\n/**\n * This component holds the functionality of viewing the WSDL content of an api. The view is a\n * read-only representation of the WSDL file. If the API has a WSDL ZIP archive, the preview will not be\n * available and it will be indicated in the UI.\n * Users can upload a new api definition file by clicking 'Import WSDL'.\n *\n * @class WSDL\n * @extends {Component}\n * */\nclass WSDL extends React.Component {\n    /**\n     * @inheritDoc\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            isArchive: false,\n            wsdl: null,\n        };\n        this.loadWSDLInEditor = this.loadWSDLInEditor.bind(this);\n        this.handleDownloadWSDLZip = this.handleDownloadWSDLZip.bind(this);\n    }\n\n    /**\n     * @inheritdoc\n     */\n    componentDidMount() {\n        const { api, intl } = this.props;\n        const promisedWSDLInfo = api.getWSDLInfo(api.id);\n        promisedWSDLInfo\n            .then((response) => {\n                const wsdlType = response.obj.type;\n                if (wsdlType === 'WSDL') {\n                    this.loadWSDLInEditor(api);\n                } else {\n                    this.setState({ isArchive: true, wsdl: null });\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.WSDL.error.loading.wsdl.info',\n                        defaultMessage: 'Error loading WSDL',\n                    }));\n                }\n            });\n    }\n\n    /**\n     * Downloads and loads the API's WSDL in the editor. If the WSDL is ZIP, the operation is skipped\n     * and it is indicated in the UI.\n     *\n     *  @param {boolean} isArchive states whether the WSDL is a ZIP\n     */\n    setSchemaDefinition = (isArchive) => {\n        this.setState({ isArchive, wsdl: null });\n        if (!isArchive) {\n            const { api } = this.props;\n            this.loadWSDLInEditor(api);\n        }\n    }\n\n    /**\n     * Downloads WSDL ZIP file.\n     *\n     */\n    handleDownloadWSDLZip() {\n        const { api, intl } = this.props;\n        const wsdlZipContent = api.getWSDL(api.id);\n        wsdlZipContent.then((response) => {\n            Utils.forceDownload(response);\n        })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.APIDefinition.WSDL.download.error',\n                    defaultMessage: 'Error downloading WSDL ZIP file',\n                }));\n            });\n    }\n\n    /**\n     * Downloads and loads the API's WSDL in the editor.\n     *\n     * @param {*} api API\n     */\n    loadWSDLInEditor(api) {\n        const { intl } = this.props;\n        const promisedApi = api.getWSDL(api.id);\n\n        promisedApi\n            .then((response) => {\n                response.data.text().then((text) => {\n                    this.setState({\n                        isArchive: false,\n                        wsdl: text,\n                    });\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.log(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.APIDefinition.WSDL.error.loading.wsdl',\n                        defaultMessage: 'Error loading WSDL',\n                    }));\n                }\n            });\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            wsdl, notFound, isArchive,\n        } = this.state;\n        const { classes, resourceNotFountMessage, api } = this.props;\n\n        const editorOptions = {\n            selectOnLineNumbers: true,\n            readOnly: true,\n            smoothScrolling: true,\n            wordWrap: 'on',\n            cursorStyle: 'line-thin',\n        };\n\n        if (notFound) {\n            return <ResourceNotFound message={resourceNotFountMessage} />;\n        }\n\n        if (!isArchive && !wsdl) {\n            return <Progress />;\n        }\n\n        let downloadWidget;\n        const downloadButtonContent = (\n            <>\n                <CloudDownloadRounded className={classes.buttonIcon} />\n                <FormattedMessage\n                    id='Apis.Details.APIDefinition.WSDL.download.definition'\n                    defaultMessage='Download WSDL'\n                />\n            </>\n        );\n        if (!isArchive) {\n            const downloadLink = 'data:text/xml;charset=utf-8,' + encodeURIComponent(wsdl);\n            const fileName = api.name + '-' + api.version + '.wsdl';\n            downloadWidget = (\n                <a className={classes.downloadLink} href={downloadLink} download={fileName}>\n                    <Button size='small' className={classes.button}>\n                        {downloadButtonContent}\n                    </Button>\n                </a>\n            );\n        } else {\n            downloadWidget = (\n                <Button size='small' className={classes.button} onClick={this.handleDownloadWSDLZip}>\n                    {downloadButtonContent}\n                </Button>\n            );\n        }\n\n        return (\n            <>\n                <div className={classes.topBar}>\n                    <div className={classes.titleWrapper}>\n                        <Typography variant='h4'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDefinition.WSDL.wsdl.definition'\n                                defaultMessage='WSDL Definition'\n                            />\n                        </Typography>\n                        <ImportDefinition setSchemaDefinition={this.setSchemaDefinition} />\n                        {downloadWidget}\n                        {isRestricted(['apim:api_create'], api) && (\n                            <Typography variant='body2' color='primary'>\n                                <FormattedMessage\n                                    id='Apis.Details.APIDefinition.WSDL.update.not.allowed'\n                                    defaultMessage='Unauthorized: Insufficient permissions to update WSDL Definition'\n                                />\n                            </Typography>\n                        )}\n                    </div>\n                </div>\n                <div>\n                    <Suspense fallback={<Progress />}>\n                        {isArchive ? (\n                            <InlineMessage type='info' height={80} className={classes.emptyBox}>\n                                <div className={classes.contentWrapper}>\n                                    <Typography component='p' className={classes.content}>\n                                        <FormattedMessage\n                                            id='Apis.Details.APIDefinition.WSDL.preview.not.available'\n                                            defaultMessage='The API has a WSDL ZIP hence the preview is not available.'\n                                        />\n                                    </Typography>\n                                </div>\n                            </InlineMessage>\n                        ) : (\n                            <MonacoEditor\n                                language='xml'\n                                width='100%'\n                                height='calc(100vh - 51px)'\n                                theme='vs-dark'\n                                value={wsdl}\n                                options={editorOptions}\n                            />\n                        )}\n\n                    </Suspense>\n                </div>\n            </>\n        );\n    }\n}\n\nWSDL.contextType = AppContext;\nWSDL.propTypes = {\n    classes: PropTypes.shape({\n        button: PropTypes.shape({}),\n        popupHeader: PropTypes.shape({}),\n        buttonIcon: PropTypes.shape({}),\n        root: PropTypes.shape({}),\n        topBar: PropTypes.shape({}),\n        titleWrapper: PropTypes.shape({}),\n        mainTitle: PropTypes.shape({}),\n        converterWrapper: PropTypes.shape({}),\n        dropzone: PropTypes.shape({}),\n        downloadLink: PropTypes.shape({}),\n    }).isRequired,\n    api: PropTypes.shape({\n        updateSwagger: PropTypes.func,\n        getSwagger: PropTypes.func,\n        id: PropTypes.string,\n        apiType: PropTypes.oneOf([API.CONSTS.API, API.CONSTS.APIProduct]),\n    }).isRequired,\n    history: PropTypes.shape({\n        push: PropTypes.shape({}),\n    }).isRequired,\n    location: PropTypes.shape({\n        pathname: PropTypes.shape({}),\n    }).isRequired,\n    resourceNotFountMessage: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\nexport default withRouter(injectIntl(withStyles(styles, { withTheme: true })(WSDL)));\n","/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport Utils from 'AppData/Utils';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport CloudDownloadRounded from '@material-ui/icons/CloudDownloadRounded';\nimport { isRestricted } from 'AppData/AuthManager';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Link, useHistory } from 'react-router-dom';\nimport ApiContext from 'AppComponents/Apis/Details/components/ApiContext';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\nimport { useRevisionContext } from 'AppComponents/Shared/RevisionContext';\nimport ThumbnailView from 'AppComponents/Apis/Listing/components/ImageGenerator/ThumbnailView';\nimport VerticalDivider from 'AppComponents/Shared/VerticalDivider';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport GoTo from 'AppComponents/Apis/Details/GoTo/GoTo';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport API from 'AppData/api';\nimport MUIAlert from 'AppComponents/Shared/MuiAlert';\nimport DeleteApiButton from './DeleteApiButton';\nimport CreateNewVersionButton from './CreateNewVersionButton';\n\nconst styles = (theme) => ({\n    root: {\n        height: theme.custom.apis.topMenu.height,\n        background: theme.palette.background.paper,\n        borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n        display: 'flex',\n        alignItems: 'center',\n    },\n    backLink: {\n        alignItems: 'center',\n        textDecoration: 'none',\n        display: 'flex',\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    backIcon: {\n        color: theme.palette.primary.main,\n        fontSize: 56,\n        cursor: 'pointer',\n    },\n    backText: {\n        color: theme.palette.primary.main,\n        cursor: 'pointer',\n        fontFamily: theme.typography.fontFamily,\n    },\n    viewInStoreLauncher: {\n        display: 'flex',\n        flexDirection: 'column',\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        textAlign: 'center',\n        justifyContent: 'center',\n        height: 70,\n    },\n    linkText: {\n        fontSize: theme.typography.fontSize,\n    },\n    dateWrapper: {\n        flex: 1,\n        alignSelf: 'center',\n    },\n    lastUpdatedTypography: {\n        display: 'inline-block',\n        minWidth: 30,\n    },\n    apiName: {\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n        whiteSpace: 'nowrap',\n    },\n    downloadApi: {\n        display: 'flex',\n        flexDirection: 'column',\n        textAlign: 'center',\n        justifyContent: 'center',\n        cursor: 'pointer',\n        height: 70,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    downloadApiFlex: {\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    revisionWrapper: {\n        paddingRight: theme.spacing(2),\n    },\n    topRevisionStyle: {\n        marginLeft: theme.spacing(1),\n        maxWidth: 500,\n    },\n    readOnlyStyle: {\n        color: 'red',\n    },\n    active: {\n        background: theme.custom.revision.activeRevision.background,\n        width: 8,\n        height: 8,\n        borderRadius: '50%',\n        alignItems: 'center',\n    },\n});\n\nconst APIDetailsTopMenu = (props) => {\n    const {\n        classes, theme, api, isAPIProduct, imageUpdate, intl,\n    } = props;\n    const history = useHistory();\n    const prevLocation = history.location.pathname;\n    const lastIndex = prevLocation.split('/')[3];\n    const [revisionId, setRevisionId] = useState(api.id);\n    const isVisibleInStore = ['PROTOTYPED', 'PUBLISHED'].includes(api.lifeCycleStatus);\n    /**\n         * The component for advanced endpoint configurations.\n         * @param {string} name The name of the\n         * @param {string} version Version of the API\n         * @param {string} provider Provider of the API\n         * @param {string} format Weather to recive files in YALM of JSON format\n         * @returns {zip} Zpi file containing the API directory.\n     */\n    function exportAPI() {\n        return api.export().then((zipFile) => {\n            return Utils.forceDownload(zipFile);\n        }).catch((error) => {\n            console.error(error);\n            if (error.response) {\n                Alert.error(error.response.body.description);\n            } else {\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.components.APIDetailsTopMenu.error',\n                    defaultMessage: 'Something went wrong while downloading the API.',\n                }));\n            }\n        });\n    }\n\n    const handleChange = (event) => {\n        setRevisionId(event.target.value);\n    };\n\n    /**\n     * Update the state when new props are available\n     */\n    useEffect(() => {\n        setRevisionId(api.id);\n    }, [api.id]);\n\n    const isDownloadable = [API.CONSTS.API, API.CONSTS.APIProduct].includes(api.apiType);\n    const { settings, user } = useAppContext();\n    const { allRevisions, allEnvRevision } = useRevisionContext();\n    const { tenantList } = useContext(ApiContext);\n    const userNameSplit = user.name.split('@');\n    const tenantDomain = userNameSplit[userNameSplit.length - 1];\n    let devportalUrl = `${settings.devportalUrl}/apis/${api.id}/overview`;\n    if (tenantList && tenantList.length > 0) {\n        devportalUrl = `${settings.devportalUrl}/apis/${api.id}/overview?tenant=${tenantDomain}`;\n    }\n\n    function getDeployments(revisionKey) {\n        const array = [];\n        allEnvRevision.filter(\n            (env) => env.id === revisionKey,\n        )[0].deploymentInfo.map((environment) => array.push(environment.name));\n        return array.join(', ');\n    }\n\n    // todo: need to support rev proxy ~tmkb\n    return (\n        <div className={classes.root}>\n            <Link\n                to={isAPIProduct\n                    ? `/api-products/${api.id}/overview`\n                    : `/apis/${api.id}/overview`}\n                className={classes.backLink}\n            >\n                <Box width={70} height={50} marginLeft={1}>\n                    <ThumbnailView api={api} width={70} height={50} imageUpdate={imageUpdate} />\n                </Box>\n                <div style={{ marginLeft: theme.spacing(1), maxWidth: 500 }}>\n                    <Typography id='itest-api-name-version' variant='h4' className={classes.apiName}>\n                        {api.name}\n                        {' '}\n                        {isAPIProduct ? '' : ':' + api.version}\n                    </Typography>\n                    <Typography variant='caption' gutterBottom align='left'>\n                        <FormattedMessage\n                            id='Apis.Details.components.APIDetailsTopMenu.created.by'\n                            defaultMessage='Created by:'\n                        />\n                        {' '}\n                        {api.provider}\n                    </Typography>\n                </div>\n            </Link>\n            <VerticalDivider height={70} />\n            <div className={classes.infoItem}>\n                <Typography variant='subtitle1'>{isAPIProduct ? api.state : api.lifeCycleStatus}</Typography>\n                <Typography variant='caption' align='left'>\n                    <FormattedMessage\n                        id='Apis.Details.components.APIDetailsTopMenu.state'\n                        defaultMessage='State'\n                    />\n                </Typography>\n            </div>\n\n            <div className={classes.dateWrapper} />\n            {api.isRevision && (\n                <MUIAlert\n                    variant='outlined'\n                    severity='warning'\n                    icon={false}\n                >\n                    <FormattedMessage\n                        id='Apis.Details.components.APIDetailsTopMenu.read.only.label'\n                        defaultMessage='Read only'\n                    />\n                </MUIAlert>\n            )}\n            <div className={classes.topRevisionStyle}>\n                <TextField\n                    id='revision-selector'\n                    value={revisionId}\n                    select\n                    SelectProps={{\n                        MenuProps: {\n                            anchorOrigin: {\n                                vertical: 'bottom',\n                                horizontal: 'left',\n                            },\n                            getContentAnchorEl: null,\n                        },\n                    }}\n                    name='selectRevision'\n                    onChange={handleChange}\n                    margin='dense'\n                    variant='outlined'\n                >\n                    {!isAPIProduct ? (\n                        <MenuItem\n                            value={api.isRevision ? api.revisionedApiId : api.id}\n                            component={Link}\n                            to={'/apis/' + (api.isRevision ? api.revisionedApiId : api.id) + '/' + lastIndex}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.components.APIDetailsTopMenu.current.api'\n                                defaultMessage='Current API'\n                            />\n                        </MenuItem>\n                    ) : (\n                        <MenuItem\n                            value={api.isRevision ? api.revisionedApiProductId : api.id}\n                            component={Link}\n                            to={'/api-products/' + (api.isRevision\n                                ? api.revisionedApiProductId : api.id) + '/' + lastIndex}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.components.APIDetailsTopMenu.current.api'\n                                defaultMessage='Current API'\n                            />\n                        </MenuItem>\n                    )}\n                    {allRevisions && !isAPIProduct && allRevisions.map((item) => (\n                        <MenuItem value={item.id} component={Link} to={'/apis/' + item.id + '/' + lastIndex}>\n                            <Grid\n                                container\n                                direction='row'\n                                alignItems='center'\n                            >\n                                <Grid item>\n                                    {item.displayName}\n                                </Grid>\n                                {allEnvRevision && allEnvRevision.find((env) => env.id === item.id) && (\n                                    <Grid item>\n                                        <Box ml={2}>\n                                            <Tooltip\n                                                title={getDeployments(item.id)}\n                                                placement='bottom'\n                                            >\n                                                <Grid className={classes.active} />\n                                            </Tooltip>\n                                        </Box>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </MenuItem>\n                    ))}\n                    {allRevisions && isAPIProduct && allRevisions.map((item) => (\n                        <MenuItem value={item.id} component={Link} to={'/api-products/' + item.id + '/' + lastIndex}>\n                            <Grid\n                                container\n                                direction='row'\n                                alignItems='center'\n                            >\n                                <Grid item>\n                                    {item.displayName}\n                                </Grid>\n                                {allEnvRevision && allEnvRevision.find((env) => env.id === item.id) && (\n                                    <Grid item>\n                                        <Box ml={2}>\n                                            <Tooltip\n                                                title={getDeployments(item.id)}\n                                                placement='bottom'\n                                            >\n                                                <Grid className={classes.active} />\n                                            </Tooltip>\n                                        </Box>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </MenuItem>\n                    ))}\n                </TextField>\n            </div>\n\n            <VerticalDivider height={70} />\n            <GoTo api={api} isAPIProduct={isAPIProduct} />\n            {(isVisibleInStore || isAPIProduct) && <VerticalDivider height={70} />}\n            {(isVisibleInStore || isAPIProduct) && (\n                <a\n                    target='_blank'\n                    rel='noopener noreferrer'\n                    href={devportalUrl}\n                    className={classes.viewInStoreLauncher}\n                    style={{ minWidth: 90 }}\n                >\n                    <div>\n                        <LaunchIcon />\n                    </div>\n                    <Typography variant='caption'>\n                        <FormattedMessage\n                            id='Apis.Details.components.APIDetailsTopMenu.view.in.portal'\n                            defaultMessage='View in Dev Portal'\n                        />\n                    </Typography>\n                </a>\n            )}\n            {/* Page error banner */}\n            {/* end of Page error banner */}\n            {isAPIProduct || api.isRevision\n                ? null : <CreateNewVersionButton buttonClass={classes.viewInStoreLauncher} api={api} />}\n            {(isDownloadable) && <VerticalDivider height={70} />}\n            <div className={classes.downloadApi}>\n                {(isDownloadable) && (\n                    <a\n                        onClick={exportAPI}\n                        onKeyDown={null}\n                        className={classes.downloadApiFlex}\n                    >\n                        <div>\n                            <CloudDownloadRounded />\n                        </div>\n                        <Typography variant='caption' align='left'>\n                            <FormattedMessage\n                                id='Apis.Details.APIDetailsTopMenu.download.api'\n                                defaultMessage='Download API'\n                            />\n                        </Typography>\n                    </a>\n                )}\n            </div>\n            {api.isRevision || isRestricted(['apim:api_create'], api)\n                ? (<div className={classes.revisionWrapper} />)\n                : (<DeleteApiButton buttonClass={classes.viewInStoreLauncher} api={api} isAPIProduct={isAPIProduct} />)}\n        </div>\n    );\n};\n\nAPIDetailsTopMenu.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    theme: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({}).isRequired,\n    isAPIProduct: PropTypes.bool.isRequired,\n    imageUpdate: PropTypes.number.isRequired,\n};\n\n// export default withStyles(styles, { withTheme: true })(APIDetailsTopMenu);\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(APIDetailsTopMenu));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint object-shorthand: 0 */\n/* eslint jsx-a11y/click-events-have-key-events: 0 */\n\n/* eslint no-unused-expressions: 0 */\n\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport deburr from 'lodash/deburr';\nimport Downshift from 'downshift';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Icon from '@material-ui/core/Icon';\nimport { FormattedMessage } from 'react-intl';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport suggestions from './RouteMappings';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        height: 250,\n    },\n    container: {\n        flexGrow: 1,\n        position: 'relative',\n    },\n    paper: {\n        position: 'absolute',\n        zIndex: theme.zIndex.goToSearch,\n        marginTop: theme.spacing(1),\n        left: 0,\n        right: 0,\n    },\n    chip: {\n        margin: theme.spacing(0.5, 0.25),\n    },\n    inputRoot: {\n        flexWrap: 'wrap',\n    },\n    inputInput: {\n        width: 'auto',\n        flexGrow: 1,\n    },\n    divider: {\n        height: theme.spacing(2),\n    },\n    linkButton: {\n        display: 'flex',\n        alignItems: 'center',\n        flexDirection: 'column',\n        padding: 10,\n        cursor: 'pointer',\n        minWidth: 30,\n    },\n    goToWrapper: {\n        position: 'relative',\n    },\n    downshiftWrapper: {\n        position: 'absolute',\n        padding: theme.spacing(1),\n        right: 60,\n        top: 0,\n        width: 300,\n        background: theme.palette.background.paper,\n        border: 'solid 1px #ccc',\n        borderRadius: 5,\n    },\n}));\n\n/**\n * Method to render the input of the user\n * @param {*} inputProps inputProps\n * @returns {*} TextField\n */\nfunction renderInput(inputProps) {\n    const {\n        InputProps, classes, ref, ...other\n    } = inputProps;\n\n    return (\n        <TextField\n            autoFocus\n            InputProps={{\n                inputRef: ref,\n                classes: {\n                    root: classes.inputRoot,\n                    input: classes.inputInput,\n                },\n                ...InputProps,\n            }}\n            {...other}\n        />\n    );\n}\n\nrenderInput.propTypes = {\n    /**\n     * Override or extend the styles applied to the component.\n     */\n    classes: PropTypes.shape({}).isRequired,\n    InputProps: PropTypes.shape({}).isRequired,\n};\n\n/**\n * Method to render the suggestions\n * @param {*} suggestionProps suggestionProps\n * @returns {*} ListItem list of suggestions\n */\nfunction renderSuggestion(suggestionProps) {\n    const {\n        suggestion, index, itemProps, highlightedIndex, api, isAPIProduct, handleClickAway,\n    } = suggestionProps;\n    const isHighlighted = highlightedIndex === index;\n\n    const route = (isAPIProduct\n        ? (`/api-products/${api.id}/${suggestion.route}`)\n        : (`/apis/${api.id}/${suggestion.route}`));\n    return (\n        <Link\n            to={route}\n            onClick={handleClickAway}\n        >\n            <ListItem\n                key={suggestion.label}\n                {...itemProps}\n                selected={isHighlighted}\n                button\n                aria-haspopup='true'\n                aria-controls='lock-menu'\n                aria-label='when device is locked'\n            >\n                <ListItemText primary={suggestion.label} secondary={suggestion.route} />\n            </ListItem>\n        </Link>\n    );\n}\n\nrenderSuggestion.propTypes = {\n    highlightedIndex: PropTypes.oneOfType([PropTypes.oneOf([null]), PropTypes.number]).isRequired,\n    index: PropTypes.number.isRequired,\n    itemProps: PropTypes.shape({}).isRequired,\n    selectedItem: PropTypes.string.isRequired,\n    suggestion: PropTypes.shape({\n        label: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\n/**\n * Method to retrieve suggestions\n * @param {*} value Value of suggestion\n * @param {*} isAPIProduct Boolean to check if it is an APIProduct\n * @param {*} param2 showEmpty\n * @returns {*} filter\n */\nfunction getSuggestions(value, isAPIProduct, isGraphQL, { showEmpty = false } = {}) {\n    const inputValue = deburr(value.trim()).toLowerCase();\n    const inputLength = inputValue.length;\n    let count = 0;\n    const newSuggestions = [...suggestions.common];\n\n    if (isAPIProduct) {\n        newSuggestions.push(...suggestions.productOnly);\n    } else if (isGraphQL) {\n        newSuggestions.push(...suggestions.graphqlOnly);\n    } else {\n        newSuggestions.push(...suggestions.apiOnly);\n    }\n\n    return inputLength === 0 && !showEmpty\n        ? []\n        : newSuggestions.filter((suggestion) => {\n            const keep = count < 5 && suggestion.label.slice(0, inputLength).toLowerCase() === inputValue;\n\n            if (keep) {\n                count += 1;\n            }\n\n            return keep;\n        });\n}\n\n/**\n * Method to render the GoTo search feature\n * @param {*} props props param\n * @returns {*} Downshift element\n */\nfunction GoTo(props) {\n    const { isAPIProduct, api } = props;\n    const classes = useStyles();\n    const [showSearch, setShowSearch] = useState(false);\n    let isGraphQL = false;\n\n    if (api.type === 'GRAPHQL') {\n        isGraphQL = true;\n    }\n    const toggleSearch = () => {\n        setShowSearch(!showSearch);\n    };\n    const handleClickAway = () => {\n        setShowSearch(false);\n    };\n\n    return (\n        <ClickAwayListener onClickAway={handleClickAway}>\n            <div className={classes.goToWrapper}>\n                <a className={classes.linkButton} onClick={toggleSearch}>\n                    <Icon>find_in_page</Icon>\n                    <Typography variant='caption'>\n                        <FormattedMessage id='Apis.Details.GoTo.GoTo.btn' defaultMessage='Go To' />\n                    </Typography>\n                </a>\n                {showSearch && (\n                    <div className={classes.downshiftWrapper}>\n                        <Downshift id='downshift-simple'>\n                            {({\n                                getInputProps,\n                                getItemProps,\n                                getLabelProps,\n                                getMenuProps,\n                                highlightedIndex,\n                                inputValue,\n                                isOpen,\n                                selectedItem,\n                            }) => {\n                                const { onBlur, onFocus, ...inputProps } = getInputProps({\n                                    placeholder: 'Type what you want to do..',\n                                });\n\n                                return (\n                                    <div className={classes.container}>\n                                        {renderInput({\n                                            fullWidth: true,\n                                            classes,\n                                            label: 'Go to menu item',\n                                            InputLabelProps: getLabelProps({ shrink: true }),\n                                            InputProps: { onBlur, onFocus },\n                                            inputProps,\n                                        })}\n\n                                        <div {...getMenuProps()}>\n                                            {isOpen ? (\n                                                <Paper className={classes.paper} square>\n                                                    {getSuggestions(inputValue, isAPIProduct, isGraphQL)\n                                                        .map((suggestion, index) => renderSuggestion({\n                                                            suggestion,\n                                                            index,\n                                                            itemProps: getItemProps({ item: suggestion.label }),\n                                                            highlightedIndex,\n                                                            selectedItem,\n                                                            handleClickAway: handleClickAway,\n                                                            ...props,\n                                                        }))}\n                                                </Paper>\n                                            ) : null}\n                                        </div>\n                                    </div>\n                                );\n                            }}\n                        </Downshift>\n                    </div>\n                )}\n            </div>\n        </ClickAwayListener>\n    );\n}\n\nGoTo.propTypes = {\n    api: PropTypes.shape({}).isRequired,\n    isAPIProduct: PropTypes.bool.isRequired,\n};\n\nexport default GoTo;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nconst suggestions = {\n    common: [\n        {\n            label: 'Overview',\n            route: 'overview',\n        },\n        {\n            label: 'MetaData',\n            route: 'overview',\n        },\n        {\n            label: 'Runtime Configurations',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Transport Level Security',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Mutual SSL',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Design Configurations',\n            route: 'configuration',\n        },\n        {\n            label: 'Manage SSL Certificates',\n            route: 'configuration',\n        },\n        {\n            label: 'HTTP HTTPS enable disable',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Application Level Security',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Enable/Disable OAuth2',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Enable/Disable Basic Auth',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Enable/Disable Api Key',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Authorization Headers',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'CORS Configuration',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Backend Throughput',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Message Mediation',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Response',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Request',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Backend',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Access Control Allow Origins',\n            route: 'configuration',\n        },\n        {\n            label: 'Access Control Allow Headers',\n            route: 'configuration',\n        },\n        {\n            label: 'Access Control Allow Credentials',\n            route: 'configuration',\n        },\n        {\n            label: 'Response caching',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Publisher Access Control',\n            route: 'configuration',\n        },\n        {\n            label: 'Developer Portal Visibility',\n            route: 'configuration',\n        },\n        {\n            label: 'Tags',\n            route: 'configuration',\n        },\n        {\n            label: 'Default Version',\n            route: 'configuration',\n        },\n        {\n            label: 'Image',\n            route: 'configuration',\n        },\n        {\n            label: 'Description',\n            route: 'configuration',\n        },\n        {\n            label: 'Documents',\n            route: 'documents',\n        },\n        {\n            label: 'Add New Documents',\n            route: 'documents',\n        },\n        {\n            label: 'API Help',\n            route: 'documents',\n        },\n        {\n            label: 'Markdown Documents',\n            route: 'documents',\n        },\n        {\n            label: 'Business Information',\n            route: 'business info',\n        },\n        {\n            label: 'Business Owner',\n            route: 'business info',\n        },\n        {\n            label: 'Technical Owner',\n            route: 'business info',\n        },\n        {\n            label: 'Properties',\n            route: 'business info',\n        },\n        {\n            label: 'Subscriptions',\n            route: 'subscriptions',\n        },\n        {\n            label: 'Subscription Policies',\n            route: 'subscriptions',\n        },\n        {\n            label: 'Subscription Availability',\n            route: 'subscriptions',\n        },\n    ],\n    apiOnly: [\n        {\n            label: 'API Gateways',\n            route: 'deployments',\n        },\n        {\n            label: 'Environments',\n            route: 'deployments',\n        },\n        {\n            label: 'Deployments',\n            route: 'deployments',\n        },\n        {\n            label: 'Lifecycle',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Publish API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Block API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Depricate API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Change Lifecycle',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Deploy as a Prototype API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Requirements',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Mediation Policies',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Monetization',\n            route: 'monetization',\n        },\n        {\n            label: 'Monetization Properties',\n            route: 'monetization',\n        },\n        {\n            label: 'Commercial Policies',\n            route: 'monetization',\n        },\n        {\n            label: 'Create New Version',\n            route: 'new_version',\n        },\n        {\n            label: 'Prototyped API',\n            route: 'endpoints',\n        },\n        {\n            label: 'AWS Lambda Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'HTTP/HTTPS Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'HTTP/SOAP Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'Dynamic Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'Endpoint Security',\n            route: 'endpoints',\n        },\n        {\n            label: 'Certificates',\n            route: 'endpoints',\n        },\n        {\n            label: 'Production Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Sandbox Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Failover Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Load Balance Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'API Definition',\n            route: 'api definition',\n        },\n        {\n            label: 'Import API Definition',\n            route: 'api definition',\n        },\n        {\n            label: 'Download API Definition',\n            route: 'api definition',\n        },\n        {\n            label: 'Swagger',\n            route: 'api definition',\n        },\n        {\n            label: 'Import Swagger',\n            route: 'api definition',\n        },\n        {\n            label: 'Download Swagger',\n            route: 'api definition',\n        },\n        {\n            label: 'OAS',\n            route: 'api definition',\n        },\n        {\n            label: 'Import OAS',\n            route: 'api definition',\n        },\n        {\n            label: 'Download OAS',\n            route: 'api definition',\n        },\n        {\n            label: 'OpenAPI',\n            route: 'api definition',\n        },\n        {\n            label: 'Import OpenAPI',\n            route: 'api definition',\n        },\n        {\n            label: 'Download OpenAPI',\n            route: 'api definition',\n        },\n        {\n            label: 'Resources',\n            route: 'resources',\n        },\n        {\n            label: 'Resources Configuration',\n            route: 'resources',\n        },\n        {\n            label: 'Rate Limiting',\n            route: 'resources',\n        },\n        {\n            label: 'Operation Governance',\n            route: 'resources',\n        },\n        {\n            label: 'Scopes',\n            route: 'scopes',\n        },\n        {\n            label: 'Add New Scope',\n            route: 'scopes',\n        },\n        {\n            label: 'Schema validation',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Fault',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Endpoints',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Properties',\n            route: 'properties',\n        },\n    ],\n    productOnly: [\n        {\n            label: 'Product only feature',\n            route: 'configuration',\n        },\n        {\n            label: 'API Definition',\n            route: 'api definition',\n        },\n        {\n            label: 'Import API Definition',\n            route: 'api definition',\n        },\n        {\n            label: 'Download API Definition',\n            route: 'api definition',\n        },\n        {\n            label: 'Swagger',\n            route: 'api definition',\n        },\n        {\n            label: 'Import Swagger',\n            route: 'api definition',\n        },\n        {\n            label: 'Download Swagger',\n            route: 'api definition',\n        },\n        {\n            label: 'OAS',\n            route: 'api definition',\n        },\n        {\n            label: 'Import OAS',\n            route: 'api definition',\n        },\n        {\n            label: 'Download OAS',\n            route: 'api definition',\n        },\n        {\n            label: 'OpenAPI',\n            route: 'api definition',\n        },\n        {\n            label: 'Import OpenAPI',\n            route: 'api definition',\n        },\n        {\n            label: 'Download OpenAPI',\n            route: 'api definition',\n        },\n        {\n            label: 'Resources',\n            route: 'resources',\n        },\n        {\n            label: 'Resources Configuration',\n            route: 'resources',\n        },\n        {\n            label: 'Rate Limiting',\n            route: 'resources',\n        },\n        {\n            label: 'Operation Governance',\n            route: 'resources',\n        },\n        {\n            label: 'Schema validation',\n            route: 'runtime-configuration',\n        },\n    ],\n    graphqlOnly: [\n        {\n            label: 'Operations',\n            route: 'operations',\n        },\n        {\n            label: 'Operation Type',\n            route: 'operations',\n        },\n        {\n            label: 'Operations Configuration',\n            route: 'operations',\n        },\n        {\n            label: 'Rate Limiting',\n            route: 'operations',\n        },\n        {\n            label: 'Schema Definition',\n            route: 'schema definition',\n        },\n        {\n            label: 'Scopes',\n            route: 'scopes',\n        },\n        {\n            label: 'Add New Scope',\n            route: 'scopes',\n        },\n        {\n            label: 'Fault',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Endpoints',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Environments',\n            route: 'deployments',\n        },\n        {\n            label: 'Deployments',\n            route: 'deployments',\n        },\n        {\n            label: 'API Gateways',\n            route: 'deployments',\n        },\n        {\n            label: 'Lifecycle',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Publish API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Block API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Depricate API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Change Lifecycle',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Deploy as a Prototype API',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Requirements',\n            route: 'lifecycle',\n        },\n        {\n            label: 'Monetization',\n            route: 'monetization',\n        },\n        {\n            label: 'Monetization Properties',\n            route: 'monetization',\n        },\n        {\n            label: 'Commercial Policies',\n            route: 'monetization',\n        },\n        {\n            label: 'Create New Version',\n            route: 'new_version',\n        },\n        {\n            label: 'Prototyped API',\n            route: 'endpoints',\n        },\n        {\n            label: 'AWS Lambda Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'HTTP/HTTPS Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'HTTP/SOAP Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'Dynamic Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'Endpoint Security',\n            route: 'endpoints',\n        },\n        {\n            label: 'Certificates',\n            route: 'endpoints',\n        },\n        {\n            label: 'Production Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Sandbox Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Failover Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Load Balance Endpoint',\n            route: 'endpoints',\n        },\n        {\n            label: 'Endpoints',\n            route: 'endpoints',\n        },\n        {\n            label: 'Fault',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Endpoints',\n            route: 'runtime-configuration',\n        },\n        {\n            label: 'Properties',\n            route: 'properties',\n        },\n    ],\n};\nexport default suggestions;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\n\nimport LibraryAdd from '@material-ui/icons/LibraryAdd';\nimport PropTypes from 'prop-types';\nimport { Link, withRouter } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\n\nimport { resourceMethod, resourcePath, ScopeValidation } from 'AppData/ScopeValidation';\nimport VerticalDivider from 'AppComponents/Shared/VerticalDivider';\n\nconst styles = (theme) => ({\n    root: {\n        height: 70,\n        background: theme.palette.background.paper,\n        borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n        display: 'flex',\n        alignItems: 'center',\n    },\n    backLink: {\n        alignItems: 'center',\n        textDecoration: 'none',\n        display: 'flex',\n    },\n    backIcon: {\n        color: theme.palette.primary.main,\n        fontSize: 56,\n        cursor: 'pointer',\n    },\n    backText: {\n        color: theme.palette.primary.main,\n        cursor: 'pointer',\n        fontFamily: theme.typography.fontFamily,\n    },\n    createNewVersionWrapper: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    createNewVersion: {\n        display: 'flex',\n        flexDirection: 'column',\n        textAlign: 'center',\n        justifyContent: 'center',\n        cursor: 'pointer',\n        color: theme.custom.createNewVersionButtonColor || 'inherit',\n    },\n    linkText: {\n        fontSize: theme.typography.fontSize,\n    },\n});\n\n/**\n *\n * Function to create a 'CreateNewVersion' button\n *\n * @param {any} props props\n * @returns {*} React CreateNewVersion function component\n * @constructor\n */\nfunction CreateNewVersionButton(props) {\n    const { api, classes } = props;\n    return (\n        <>\n            {/* allowing create new version based on scopes */}\n            <ScopeValidation resourceMethod={resourceMethod.POST} resourcePath={resourcePath.API_COPY}>\n                <div className={classes.createNewVersionWrapper}>\n                    <VerticalDivider height={70} />\n                    <Link\n                        className={classes.createNewVersion}\n                        to={'/apis/' + api.id + '/new_version'}\n                        style={{ minWidth: 95 }}\n                    >\n\n                        <div>\n                            <LibraryAdd />\n                        </div>\n                        <Typography variant='caption'>\n                            <FormattedMessage\n                                id='Apis.Details.components.CreateNewVersionButton.create.new.version'\n                                defaultMessage='Create New Version'\n                            />\n                        </Typography>\n                    </Link>\n                </div>\n            </ScopeValidation>\n        </>\n    );\n}\n\nCreateNewVersionButton.propTypes = {\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    history: PropTypes.shape({ push: PropTypes.func }).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nexport default withRouter(withStyles(styles, { withTheme: true })(CreateNewVersionButton));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { FormattedMessage } from 'react-intl';\nimport API from 'AppData/api.js';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { isRestricted } from 'AppData/AuthManager';\nimport APIValidation from 'AppData/APIValidation';\n\nconst styles = (theme) => ({\n    FormControl: {\n        padding: 0,\n        width: '100%',\n        marginTop: 0,\n    },\n    FormControlOdd: {\n        padding: 0,\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n        marginTop: 0,\n    },\n    buttonWrapper: {\n        paddingTop: 20,\n    },\n    paperRoot: {\n        padding: 20,\n        marginTop: 20,\n    },\n});\n\n/**\n *\n *\n * @class BusinessInformation\n * @extends {React.Component}\n */\nclass BusinessInformation extends React.Component {\n    /**\n     *Creates an instance of BusinessInformation.\n     * @param {*} props\n     * @memberof BusinessInformation\n     */\n    constructor(props) {\n        super(props);\n        const {\n            businessOwner,\n            businessOwnerEmail,\n            technicalOwner,\n            technicalOwnerEmail,\n        } = this.props.api.businessInformation;\n        this.state = {\n            businessOwner,\n            businessOwnerEmail,\n            technicalOwner,\n            technicalOwnerEmail,\n        };\n        this.isFormUpdated = false;\n        this.isValidBusinessOwnerEmail = true;\n        this.isValidTechnicalOwnerEmail = true;\n    }\n\n    handleChange = (name) => (event) => {\n        let { value } = event.target;\n        const { checked } = event.target;\n        if (name === 'accessControlRoles' || name === 'visibleRoles') {\n            value = value.split(',');\n        } else if (name === 'isDefaultVersion') {\n            value = value === 'yes';\n        } else if (name === 'responseCaching') {\n            value = checked ? 'Enabled' : 'Disabled';\n        }\n        // Validate whether given email addresses are valid.\n        if (name === 'businessOwnerEmail') {\n            const emailStatus = APIValidation.email.validate(value).error;\n            this.isValidBusinessOwnerEmail = (emailStatus === null || value === '');\n        }\n        if (name === 'technicalOwnerEmail') {\n            const emailStatus = APIValidation.email.validate(value).error;\n            this.isValidTechnicalOwnerEmail = (emailStatus === null || value === '');\n        }\n        this.isFormUpdated = true;\n        this.setState({ [name]: value });\n    };\n\n    isValid = () => {\n        return (this.isValidBusinessOwnerEmail && this.isValidTechnicalOwnerEmail && this.isFormUpdated);\n    }\n\n    /**\n     *\n     *\n     * @param {*} oldAPI\n     * @param {*} updateAPI\n     * @memberof BusinessInformation\n     */\n    handleSubmit(updateAPI) {\n        const {\n            businessOwner, businessOwnerEmail, technicalOwner, technicalOwnerEmail,\n        } = this.state;\n        const businessInformation = {\n            businessOwner, businessOwnerEmail, technicalOwner, technicalOwnerEmail,\n        };\n        updateAPI({ businessInformation });\n    }\n\n    /**\n     *\n     * @inheritdoc\n     * @returns\n     * @memberof BusinessInformation\n     */\n    render() {\n        const { classes, api, updateAPI } = this.props;\n        const {\n            businessOwner, businessOwnerEmail, technicalOwner, technicalOwnerEmail,\n        } = this.state;\n\n        return (\n            <>\n                <Container maxWidth='md'>\n                    <Box mb={3}>\n                        <Typography id='itest-api-details-bushiness-info-head' variant='h4'>\n                            <FormattedMessage\n                                id='Apis.Details.BusinessInformation.BusinessInformation.business.info'\n                                defaultMessage='Business Information'\n                            />\n                        </Typography>\n                        {api.apiType === API.CONSTS.APIProduct\n                            ? (\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        id='Apis.Details.BusinessInformation.BusinessInformation.APIProduct.sub.heading'\n                                        defaultMessage='Business Information of the API Product'\n                                    />\n                                </Typography>\n                            )\n                            : (\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        id='Apis.Details.BusinessInformation.BusinessInformation.sub.heading'\n                                        defaultMessage='Business Information of the API'\n                                    />\n                                </Typography>\n                            )}\n                    </Box>\n                    <Paper elevation={0}>\n                        <Box px={8} py={5}>\n                            <form noValidate autoComplete='off'>\n                                <TextField\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    fullWidth\n                                    id='name'\n                                    label={(\n                                        <>\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation'\n                                                    + '.business.owner.name'\n                                                }\n                                                defaultMessage='Business Owner'\n                                            />\n                                        </>\n                                    )}\n                                    helperText={(\n                                        <FormattedMessage\n                                            id={\n                                                'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.business.owner.name.helper.text'\n                                            }\n                                            defaultMessage='Provide the name of the business owner'\n                                        />\n                                    )}\n                                    type='text'\n                                    name='name'\n                                    margin='normal'\n                                    variant='outlined'\n                                    value={businessOwner}\n                                    onChange={this.handleChange('businessOwner')}\n                                    autoFocus\n                                />\n                                <TextField\n                                    error={!this.isValidBusinessOwnerEmail}\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    fullWidth\n                                    id='name'\n                                    label={(\n                                        <>\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation.'\n                                                    + 'business.owner.email'\n                                                }\n                                                defaultMessage='Business Owner Email'\n                                            />\n                                        </>\n                                    )}\n                                    helperText={this.isValidBusinessOwnerEmail\n                                        ? (\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.business.owner.email.helper.text'\n                                                }\n                                                defaultMessage='Provide the email of the business owner'\n                                            />\n                                        )\n                                        : (\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.business.owner.email.helper.text'\n                                                + '.error'\n                                                }\n                                                defaultMessage='Please enter a valid email address'\n                                            />\n                                        )}\n                                    type='email'\n                                    name='name'\n                                    margin='normal'\n                                    value={businessOwnerEmail}\n                                    onChange={this.handleChange('businessOwnerEmail')}\n                                    variant='outlined'\n                                />\n                                <TextField\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    fullWidth\n                                    id='name'\n                                    label={(\n                                        <>\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation'\n                                                    + '.technical.owner.name'\n                                                }\n                                                defaultMessage='Technical Owner'\n                                            />\n                                        </>\n                                    )}\n                                    helperText={(\n                                        <FormattedMessage\n                                            id={\n                                                'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.technical.owner.name.helper.text'\n                                            }\n                                            defaultMessage='Provide the name of the technical owner'\n                                        />\n                                    )}\n                                    type='text'\n                                    name='name'\n                                    margin='normal'\n                                    value={technicalOwner}\n                                    onChange={this.handleChange('technicalOwner')}\n                                    variant='outlined'\n                                />\n                                <TextField\n                                    error={!this.isValidTechnicalOwnerEmail}\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                                    fullWidth\n                                    id='name'\n                                    label={(\n                                        <FormattedMessage\n                                            id={\n                                                'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.technical.owner.email'\n                                            }\n                                            defaultMessage='Technical Owner Email'\n                                        />\n                                    )}\n                                    helperText={this.isValidTechnicalOwnerEmail\n                                        ? (\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.technical.owner.email.helper.text'\n                                                }\n                                                defaultMessage='Provide the email of the technical owner'\n                                            />\n                                        )\n                                        : (\n                                            <FormattedMessage\n                                                id={\n                                                    'Apis.Details.BusinessInformation.BusinessInformation'\n                                                + '.technical.owner.email.helper.text'\n                                                + '.error'\n                                                }\n                                                defaultMessage='Please enter a valid email address'\n                                            />\n                                        )}\n                                    type='email'\n                                    name='name'\n                                    margin='normal'\n                                    value={technicalOwnerEmail}\n                                    onChange={this.handleChange('technicalOwnerEmail')}\n                                    variant='outlined'\n                                />\n                            </form>\n                            <div className={classes.buttonWrapper}>\n                                <Grid\n                                    container\n                                    direction='row'\n                                    alignItems='flex-start'\n                                    spacing={1}\n                                    className={classes.buttonSection}\n                                >\n                                    <Grid item>\n                                        <div>\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                onClick={() => this.handleSubmit(updateAPI)}\n                                                disabled={\n                                                    isRestricted(['apim:api_create', 'apim:api_publish'], api)\n                                                    || !this.isValid() || api.isRevision\n                                                }\n                                            >\n                                                <FormattedMessage id='save' defaultMessage='Save' />\n                                            </Button>\n                                        </div>\n                                    </Grid>\n                                    <Grid item>\n                                        <Link\n                                            to={\n                                                (api.apiType === API.CONSTS.APIProduct ? '/api-products/' : '/apis/')\n                                                + api.id\n                                                + '/overview'\n                                            }\n                                        >\n                                            <Button>\n                                                <FormattedMessage id='cancel' defaultMessage='Cancel' />\n                                            </Button>\n                                        </Link>\n                                    </Grid>\n                                </Grid>\n                            </div>\n                        </Box>\n                    </Paper>\n                </Container>\n            </>\n        );\n    }\n}\n\nBusinessInformation.propTypes = {\n    state: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n        businessInformation: PropTypes.shape({\n            businessOwner: PropTypes.string,\n            businessOwnerEmail: PropTypes.string,\n            technicalOwner: PropTypes.string,\n            technicalOwnerEmail: PropTypes.string,\n            apiType: PropTypes.oneOf([API.CONSTS.API, API.CONSTS.APIProduct]),\n        }).isRequired,\n    }).isRequired,\n    updateAPI: PropTypes.func.isRequired,\n};\n\nexport default withAPI(withStyles(styles)(BusinessInformation));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\n/* eslint-disable react/jsx-no-bind */\n\nimport React, { useState, useContext } from 'react';\nimport { Link, useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport cloneDeep from 'lodash.clonedeep';\nimport isEmpty from 'lodash.isempty';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport CustomSplitButton from 'AppComponents/Shared/CustomSplitButton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Box from '@material-ui/core/Box';\nimport APIContext, { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport API from 'AppData/api.js';\nimport { doRedirectToLogin } from 'AppComponents/Shared/RedirectToLogin';\nimport { isRestricted } from 'AppData/AuthManager';\nimport Alert from 'AppComponents/Shared/Alert';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport EditableRow from './EditableRow';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        paddingTop: 0,\n        paddingLeft: 0,\n        maxWidth: theme.custom.contentAreaWidth,\n    },\n    titleWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    FormControl: {\n        padding: 0,\n        width: '100%',\n        marginTop: 0,\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    FormControlOdd: {\n        padding: 0,\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n        marginTop: 0,\n    },\n    buttonWrapper: {\n        paddingTop: theme.spacing(3),\n    },\n    paperRoot: {\n        padding: theme.spacing(3),\n        marginTop: theme.spacing(3),\n    },\n    addNewHeader: {\n        padding: theme.spacing(2),\n        backgroundColor: theme.palette.grey['300'],\n        fontSize: theme.typography.h6.fontSize,\n        color: theme.typography.h6.color,\n        fontWeight: theme.typography.h6.fontWeight,\n    },\n    addNewOther: {\n        padding: theme.spacing(2),\n    },\n    addNewWrapper: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n        border: 'solid 1px ' + theme.palette.grey['300'],\n        borderRadius: theme.shape.borderRadius,\n        marginTop: theme.spacing(2),\n    },\n    addProperty: {\n        marginRight: theme.spacing(2),\n    },\n    buttonIcon: {\n        marginRight: theme.spacing(1),\n    },\n    link: {\n        cursor: 'pointer',\n    },\n    messageBox: {\n        marginTop: 20,\n    },\n    actions: {\n        padding: '20px 0',\n        '& button': {\n            marginLeft: 0,\n        },\n    },\n    head: {\n        fontWeight: 200,\n        marginBottom: 20,\n    },\n    marginRight: {\n        marginRight: theme.spacing(1),\n    },\n    helpText: {\n        paddingTop: theme.spacing(1),\n    },\n    checkBoxStyles: {\n        whiteSpace: 'nowrap',\n        marginLeft: 10,\n    },\n    tableHead: {\n        fontWeight: 600,\n    },\n    table: {\n        '& th': {\n            fontWeight: 600,\n        },\n    },\n}));\n\n/**\n *\n *\n * @class Properties\n * @extends {React.Component}\n */\nfunction Properties(props) {\n    /**\n     * @inheritdoc\n     * @param {*} props properties\n     */\n    const { intl } = props;\n    const classes = useStyles();\n    const history = useHistory();\n    const { api, updateAPI } = useContext(APIContext);\n    const additionalPropertiesTemp = cloneDeep(api.additionalProperties);\n\n    if (Object.prototype.hasOwnProperty.call(additionalPropertiesTemp, 'github_repo')) {\n        delete additionalPropertiesTemp.github_repo;\n    }\n    if (Object.prototype.hasOwnProperty.call(additionalPropertiesTemp, 'slack_url')) {\n        delete additionalPropertiesTemp.slack_url;\n    }\n\n    const [additionalProperties, setAdditionalProperties] = useState(additionalPropertiesTemp);\n    const [showAddProperty, setShowAddProperty] = useState(false);\n    const [propertyKey, setPropertyKey] = useState(null);\n    const [propertyValue, setPropertyValue] = useState(null);\n    const [isUpdating, setUpdating] = useState(false);\n    const [editing, setEditing] = useState(false);\n    const [isAdditionalPropertiesStale, setIsAdditionalPropertiesStale] = useState(false);\n    const [isVisibleInStore, setIsVisibleInStore] = useState(false);\n    const iff = (condition, then, otherwise) => (condition ? then : otherwise);\n\n    const keywords = ['provider', 'version', 'context', 'status', 'description',\n        'subcontext', 'doc', 'lcState', 'name', 'tags'];\n\n    const toggleAddProperty = () => {\n        setShowAddProperty(!showAddProperty);\n    };\n    const handleChange = (name) => (event) => {\n        const { value } = event.target;\n        if (name === 'propertyKey') {\n            setPropertyKey(value);\n        } else if (name === 'propertyValue') {\n            setPropertyValue(value);\n        }\n    };\n\n    /**\n     *\n     *\n     * @param {*} itemValue\n     * @returns\n     * @memberof Properties\n     */\n    const validateEmpty = function (itemValue) {\n        if (itemValue === null) {\n            return false;\n        } else if (!isVisibleInStore && itemValue === '') {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    const isKeyword = (itemValue) => {\n        return keywords.includes(itemValue);\n    };\n    /**\n     *\n     *\n     * @param {*} oldAPI\n     * @param {*} updateAPI\n     * @memberof Properties\n     */\n    const handleSave = () => {\n        setUpdating(true);\n        if (Object.prototype.hasOwnProperty.call(additionalPropertiesTemp, 'github_repo')) {\n            additionalProperties.github_repo = api.additionalProperties.github_repo;\n        }\n        if (Object.prototype.hasOwnProperty.call(additionalPropertiesTemp, 'slack_url')) {\n            additionalProperties.slack_url = api.additionalProperties.slack_url;\n        }\n        const updatePromise = updateAPI({ additionalProperties });\n        updatePromise\n            .then(() => {\n                setUpdating(false);\n            })\n            .catch((error) => {\n                setUpdating(false);\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 401) {\n                    doRedirectToLogin();\n                }\n            });\n    };\n\n\n    const handleSaveAndDeploy = () => {\n        setUpdating(true);\n        if (Object.prototype.hasOwnProperty.call(additionalPropertiesTemp, 'github_repo')) {\n            additionalProperties.github_repo = api.additionalProperties.github_repo;\n        }\n        if (Object.prototype.hasOwnProperty.call(additionalPropertiesTemp, 'slack_url')) {\n            additionalProperties.slack_url = api.additionalProperties.slack_url;\n        }\n        const updatePromise = updateAPI({ additionalProperties });\n        updatePromise\n            .then(() => {\n                setUpdating(false);\n            })\n            .catch((error) => {\n                setUpdating(false);\n                if (process.env.NODE_ENV !== 'production') console.log(error);\n                const { status } = error;\n                if (status === 401) {\n                    doRedirectToLogin();\n                }\n            })\n            .finally(() => history.push({\n                pathname: api.isAPIProduct() ? `/api-products/${api.id}/deployments`\n                    : `/apis/${api.id}/deployments`,\n                state: 'deploy',\n            }));\n    };\n\n    /**\n     *\n     *\n     * @param {*} apiAdditionalProperties\n     * @param {*} oldKey\n     * @memberof Properties\n     */\n    const handleDelete = (oldKey) => {\n        let additionalPropertiesCopy = cloneDeep(additionalProperties);\n        additionalPropertiesCopy = additionalPropertiesCopy.filter((property) => property.name !== oldKey);\n        setAdditionalProperties(additionalPropertiesCopy);\n\n        if (additionalPropertiesCopy !== additionalProperties) {\n            setIsAdditionalPropertiesStale(true);\n        }\n    };\n    const validateBeforeAdd = (fieldKey, fieldValue, additionalPropertiesCopy, action = 'add', oldKey) => {\n        if (additionalPropertiesCopy != null && action === 'add') {\n            let valid = true;\n            additionalPropertiesCopy.forEach((property) => {\n                if (property.name === fieldKey) {\n                    Alert.warning(intl.formatMessage({\n                        id: `Apis.Details.Properties.Properties.\n                            property.name.exists`,\n                        defaultMessage: 'Property name already exists',\n                    }));\n                    valid = false;\n                }\n            });\n            return valid;\n        } else if (additionalPropertiesCopy != null && action === 'update' && oldKey === fieldKey) {\n            let valid = true;\n            additionalPropertiesCopy.forEach((property) => {\n                if (property.name === fieldKey) {\n                    Alert.warning(intl.formatMessage({\n                        id: `Apis.Details.Properties.Properties.\n                                property.name.exists`,\n                        defaultMessage: 'Property name already exists',\n                    }));\n                    valid = false;\n                }\n            });\n            return valid;\n        } else if (validateEmpty(fieldKey) || validateEmpty(fieldValue)) {\n            Alert.warning(intl.formatMessage({\n                id: `Apis.Details.Properties.Properties.\n                    property.name.empty.error`,\n                defaultMessage: 'Property name/value can not be empty',\n            }));\n            return false;\n        } else if (isKeyword(fieldKey)) {\n            Alert.warning(intl.formatMessage({\n                id:\n                `Apis.Details.Properties.Properties.\n                    property.name.keyword.error`,\n                defaultMessage:\n                'Property name can not be a system reserved keyword',\n            }));\n            return false;\n        } else {\n            return true;\n        }\n    };\n    /**\n     *\n     *\n     * @param {*} apiAdditionalProperties\n     * @param {*} oldRow\n     * @param {*} newRow\n     * @memberof Properties\n     */\n    const handleUpdateList = (oldRow, newRow) => {\n        const additionalPropertiesCopy = cloneDeep(additionalProperties);\n\n        const { oldKey, oldValue, isDisplayInStore } = oldRow;\n        const { newKey, newValue, display } = newRow;\n        if (oldKey === newKey && oldValue === newValue && isDisplayInStore === display) {\n            Alert.warning(intl.formatMessage({\n                id: `Apis.Details.Properties.Properties.\n                    no.changes.to.save`,\n                defaultMessage: 'No changes to save',\n            }));\n            return false;\n        }\n        if (!validateBeforeAdd(newKey, newValue, additionalPropertiesCopy, 'update')) {\n            return false;\n        }\n\n        const newProperty = {\n            name: newKey,\n            value: newValue,\n            display,\n        };\n        let newPropertiesList = additionalPropertiesCopy.map((property) => {\n            if (property.name === newKey) {\n                return newProperty;\n            }\n            return property;\n        });\n        if (oldKey !== newKey) {\n            newPropertiesList = newPropertiesList.filter((property) => property.name !== oldKey);\n            newPropertiesList = [...newPropertiesList, newProperty];\n        }\n        setAdditionalProperties(newPropertiesList);\n        return true;\n    };\n    /**\n     *\n     *\n     * @param {*} apiAdditionalProperties\n     * @memberof Properties\n     */\n    const handleAddToList = () => {\n        const additionalPropertiesCopy = cloneDeep(additionalProperties);\n        if (validateBeforeAdd(propertyKey, propertyValue, additionalPropertiesCopy, 'add')) {\n            const newProperty = {\n                name: propertyKey,\n                value: propertyValue,\n                display: isVisibleInStore,\n            };\n            setAdditionalProperties([...additionalPropertiesCopy, newProperty]);\n            setPropertyKey(null);\n            setPropertyValue(null);\n        }\n    };\n\n    /**\n     *\n     *\n     * @memberof Properties\n     */\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            handleAddToList();\n        }\n    };\n\n    const handleChangeVisibleInStore = (event) => {\n        setIsVisibleInStore(event.target.checked);\n    };\n    /**\n     *\n     *\n     * @param {*} additionalProperties\n     * @param {*} apiAdditionalProperties\n     * @returns\n     * @memberof Properties\n     */\n    const renderAdditionalProperties = () => {\n        const items = additionalProperties.map((property) => {\n            return (\n                <EditableRow\n                    oldKey={property.name}\n                    oldValue={property.value}\n                    isDisplayInStore={property.display}\n                    handleUpdateList={handleUpdateList}\n                    handleDelete={handleDelete}\n                    apiAdditionalProperties={additionalProperties}\n                    {...props}\n                    setEditing={setEditing}\n                    isRestricted={isRestricted}\n                    api={api}\n                    validateEmpty={validateEmpty}\n                    isKeyword={isKeyword}\n                />\n            );\n        });\n        return items;\n    };\n    const getKeyValue = () => {\n        if (propertyKey === null) {\n            return '';\n        } else {\n            return propertyKey;\n        }\n    };\n    /**\n     *\n     *\n     * @returns\n     * @memberof Properties\n     */\n    return (\n        <>\n            <div className={classes.titleWrapper}>\n                {api.apiType === API.CONSTS.APIProduct\n                    ? (\n                        <Typography\n                            id='itest-api-details-api-products-properties-head'\n                            variant='h4'\n                            align='left'\n                            className={classes.mainTitle}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Properties.Properties.api.product.properties'\n                                defaultMessage='API Product Properties'\n                            />\n                        </Typography>\n                    )\n                    : (\n                        <Typography\n                            id='itest-api-details-api-properties-head'\n                            variant='h4'\n                            align='left'\n                            className={classes.mainTitle}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Properties.Properties.api.properties'\n                                defaultMessage='API Properties'\n                            />\n                        </Typography>\n                    )}\n\n                {(!isEmpty(additionalProperties) || showAddProperty) && (\n                    <Box ml={1}>\n                        <Button\n                            variant='outlined'\n                            color='primary'\n                            size='small'\n                            onClick={toggleAddProperty}\n                            disabled={showAddProperty\n                            || isRestricted(['apim:api_create', 'apim:api_publish'], api) || api.isRevision}\n                        >\n                            <AddCircle className={classes.buttonIcon} />\n                            <FormattedMessage\n                                id='Apis.Details.Properties.Properties.add.new.property'\n                                defaultMessage='Add New Property'\n                            />\n                        </Button>\n                    </Box>\n                )}\n            </div>\n            <Typography variant='caption' component='div' className={classes.helpText}>\n                <FormattedMessage\n                    id='Apis.Details.Properties.Properties.help.main'\n                    defaultMessage={`Usually, APIs have a pre-defined set of properties such as \n                        the name, version, context, etc. API Properties allows you to \n                         add specific custom properties to the API.`}\n                />\n            </Typography>\n            {isEmpty(additionalProperties) && !isAdditionalPropertiesStale && !showAddProperty && (\n                <div className={classes.messageBox}>\n                    <InlineMessage type='info' height={140}>\n                        <div className={classes.contentWrapper}>\n                            <Typography variant='h5' component='h3' className={classes.head}>\n                                <FormattedMessage\n                                    id='Apis.Details.Properties.Properties.add.new.property.message.title'\n                                    defaultMessage='Create Additional Properties'\n                                />\n                            </Typography>\n                            {api.apiType === API.CONSTS.APIProduct\n                                ? (\n                                    <Typography component='p' className={classes.content}>\n                                        <FormattedMessage\n                                            id='Apis.Details.Properties.Properties.APIProduct.\n                                            add.new.property.message.content'\n                                            defaultMessage={\n                                                'Add specific custom properties to your '\n                                        + 'API here.'\n                                            }\n                                        />\n                                    </Typography>\n                                )\n                                : (\n                                    <Typography component='p' className={classes.content}>\n                                        <FormattedMessage\n                                            id='Apis.Details.Properties.Properties.add.new.property.message.content'\n                                            defaultMessage={\n                                                'Add specific custom properties to your '\n                                        + 'API here.'\n                                            }\n                                        />\n                                    </Typography>\n                                )}\n                            <div className={classes.actions}>\n                                <Button\n                                    variant='outlined'\n                                    color='primary'\n                                    onClick={toggleAddProperty}\n                                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)\n                                        || api.isRevision}\n                                >\n                                    <FormattedMessage\n                                        id='Apis.Details.Properties.Properties.add.new.property'\n                                        defaultMessage='Add New Property'\n                                    />\n                                </Button>\n                            </div>\n                        </div>\n                    </InlineMessage>\n                </div>\n            )}\n            {(!isEmpty(additionalProperties) || showAddProperty || isAdditionalPropertiesStale) && (\n                <Grid container spacing={7}>\n                    <Grid item xs={12}>\n                        <Paper className={classes.paperRoot}>\n                            <Table className={classes.table}>\n                                <TableHead>\n                                    <TableRow>\n                                        <TableCell>\n                                            <FormattedMessage\n                                                id='Apis.Details.Properties.Properties.add.new.property.table'\n                                                defaultMessage='Property Name'\n                                            />\n                                        </TableCell>\n                                        <TableCell>\n                                            <FormattedMessage\n                                                id='Apis.Details.Properties.Properties.add.new.property.value'\n                                                defaultMessage='Property Value'\n                                            />\n                                        </TableCell>\n                                        <TableCell>\n                                            <FormattedMessage\n                                                id='Apis.Details.Properties.Properties.add.new.property.visibility'\n                                                defaultMessage='Visibility'\n                                            />\n                                        </TableCell>\n                                        <TableCell />\n                                    </TableRow>\n                                </TableHead>\n                                <TableBody>\n                                    {showAddProperty && (\n                                        <>\n                                            <TableRow>\n                                                <TableCell>\n                                                    <TextField\n                                                        fullWidth\n                                                        required\n                                                        id='outlined-required'\n                                                        label={intl.formatMessage({\n                                                            id: `Apis.Details.Properties.Properties.\n                                                                show.add.property.property.name`,\n                                                            defaultMessage: 'Name',\n                                                        })}\n                                                        margin='dense'\n                                                        variant='outlined'\n                                                        className={classes.addProperty}\n                                                        value={getKeyValue()}\n                                                        onChange={handleChange('propertyKey')}\n                                                        onKeyDown={handleKeyDown('propertyKey')}\n                                                        helperText={validateEmpty(propertyKey) ? ''\n                                                            : iff(isKeyword(propertyKey), intl.formatMessage({\n                                                                id: `Apis.Details.Properties.Properties.\n                                                                    show.add.property.invalid.error`,\n                                                                defaultMessage: 'Invalid property name',\n                                                            }), '')}\n                                                        error={validateEmpty(propertyKey) || isKeyword(propertyKey)}\n                                                        disabled={isRestricted(\n                                                            ['apim:api_create', 'apim:api_publish'],\n                                                            api,\n                                                        )}\n                                                    />\n                                                </TableCell>\n                                                <TableCell>\n                                                    <TextField\n                                                        fullWidth\n                                                        required\n                                                        id='outlined-required'\n                                                        label={intl.formatMessage({\n                                                            id: 'Apis.Details.Properties.Properties.property.value',\n                                                            defaultMessage: 'Value',\n                                                        })}\n                                                        margin='dense'\n                                                        variant='outlined'\n                                                        className={classes.addProperty}\n                                                        value={propertyValue === null ? '' : propertyValue}\n                                                        onChange={handleChange('propertyValue')}\n                                                        onKeyDown={handleKeyDown('propertyValue')}\n                                                        error={validateEmpty(propertyValue)}\n                                                        disabled={isRestricted(\n                                                            ['apim:api_create', 'apim:api_publish'],\n                                                            api,\n                                                        )}\n                                                    />\n                                                </TableCell>\n                                                <TableCell>\n                                                    <FormControlLabel\n                                                        control={(\n                                                            <Checkbox\n                                                                checked={isVisibleInStore}\n                                                                onChange={handleChangeVisibleInStore}\n                                                                name='checkedB'\n                                                                color='primary'\n                                                            />\n                                                        )}\n                                                        label={intl.formatMessage({\n                                                            id: `Apis.Details.Properties.\n                                                            Properties.editable.show.in.devporal`,\n                                                            defaultMessage: 'Show in devportal',\n                                                        })}\n                                                        className={classes.checkBoxStyles}\n                                                    />\n                                                </TableCell>\n                                                <TableCell align='right'>\n                                                    <Box display='flex'>\n                                                        <Button\n                                                            variant='contained'\n                                                            color='primary'\n                                                            disabled={\n                                                                !propertyValue\n                                                            || !propertyKey\n                                                            || isRestricted(\n                                                                ['apim:api_create', 'apim:api_publish'], api,\n                                                            )\n                                                            }\n                                                            onClick={handleAddToList}\n                                                            className={classes.marginRight}\n                                                        >\n                                                            <Typography variant='caption' component='div'>\n                                                                <FormattedMessage\n                                                                    id='Apis.Details.Properties.Properties.add'\n                                                                    defaultMessage='Add'\n                                                                />\n                                                            </Typography>\n                                                        </Button>\n\n                                                        <Button onClick={toggleAddProperty}>\n                                                            <Typography variant='caption' component='div'>\n                                                                <FormattedMessage\n                                                                    id='Apis.Details.Properties.Properties.cancel'\n                                                                    defaultMessage='Cancel'\n                                                                />\n                                                            </Typography>\n                                                        </Button>\n                                                    </Box>\n                                                </TableCell>\n                                            </TableRow>\n                                            <TableRow>\n                                                <TableCell colSpan={4}>\n                                                    <Typography variant='caption'>\n                                                        <FormattedMessage\n                                                            id='Apis.Details.Properties.Properties.help'\n                                                            defaultMessage={\n                                                                'Property name should be unique, should not contain '\n                                                                + 'spaces, cannot be more than 80 chars '\n                                                                + 'and cannot be any of the following '\n                                                                + 'reserved keywords : '\n                                                                + 'provider, version, context, status, description, '\n                                                                + 'subcontext, doc, lcState, name, tags.'\n                                                            }\n                                                        />\n                                                    </Typography>\n                                                </TableCell>\n                                            </TableRow>\n                                        </>\n                                    )}\n                                    {renderAdditionalProperties()}\n                                </TableBody>\n                            </Table>\n                        </Paper>\n                        <div className={classes.buttonWrapper}>\n                            <Grid\n                                container\n                                direction='row'\n                                alignItems='flex-start'\n                                spacing={1}\n                                className={classes.buttonSection}\n                            >\n                                <Grid item>\n                                    <div>\n                                        {editing || api.isRevision || (isEmpty(additionalProperties)\n                                            && !isAdditionalPropertiesStale)\n                                            || isRestricted(['apim:api_create', 'apim:api_publish'], api) ? (\n                                                <Button\n                                                    disabled\n                                                    type='submit'\n                                                    variant='contained'\n                                                    color='primary'\n                                                >\n                                                    <FormattedMessage\n                                                        id='Apis.Details.Configuration.Configuration.save'\n                                                        defaultMessage='Save'\n                                                    />\n                                                </Button>\n                                            ) : (\n                                                <CustomSplitButton\n                                                    handleSave={handleSave}\n                                                    handleSaveAndDeploy={handleSaveAndDeploy}\n                                                    isUpdating={isUpdating}\n                                                />\n                                            )}\n                                    </div>\n                                </Grid>\n                                <Grid item>\n                                    <Link to={'/apis/' + api.id + '/overview'}>\n                                        <Button>\n                                            <FormattedMessage\n                                                id='Apis.Details.Properties.Properties.cancel'\n                                                defaultMessage='Cancel'\n                                            />\n                                        </Button>\n                                    </Link>\n                                </Grid>\n                                {isRestricted(['apim:api_create', 'apim:api_publish'], api) && (\n                                    <Grid item xs={12}>\n                                        <Typography variant='body2' color='primary'>\n                                            <FormattedMessage\n                                                id='Apis.Details.Properties.Properties.update.not.allowed'\n                                                defaultMessage='*You are not authorized to update properties of\n                                                    the API due to insufficient permissions'\n                                            />\n                                        </Typography>\n                                    </Grid>\n                                )}\n                            </Grid>\n                        </div>\n                    </Grid>\n                </Grid>\n            )}\n        </>\n    );\n}\n\nProperties.propTypes = {\n    state: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\nexport default withAPI(injectIntl(Properties));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n/* eslint no-param-reassign: [\"error\", { \"props\": false }] */\n/* eslint-disable react/jsx-no-bind */\n\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport EditIcon from '@material-ui/icons/Edit';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { injectIntl, FormattedMessage } from 'react-intl';\nimport IconButton from '@material-ui/core/IconButton';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\n\nconst useStyles = makeStyles(() => ({\n    link: {\n        cursor: 'pointer',\n    },\n    checkBoxStyles: {\n        whiteSpace: 'nowrap',\n        marginLeft: 0,\n        paddingLeft: 0,\n    },\n    colorPrimary: {\n        marginLeft: 0,\n        paddingLeft: 0,\n    },\n    cancelButton: {\n        marginLeft: 4,\n    },\n}));\n\n/**\n *\n * @param {*} props properties\n */\nfunction EditableRow(props) {\n    const {\n        oldKey, oldValue, handleUpdateList, handleDelete, intl, setEditing, isRestricted, api,\n        isDisplayInStore, isKeyword, validateEmpty,\n    } = props;\n    const [newKey, setKey] = useState(oldKey);\n    const [newValue, setValue] = useState(oldValue);\n    const [editMode, setEditMode] = useState(false);\n    const [isVisibleInStore, setIsVisibleInStore] = useState(isDisplayInStore);\n    const iff = (condition, then, otherwise) => (condition ? then : otherwise);\n\n    const resetText = () => {\n        setIsVisibleInStore(isDisplayInStore);\n        setKey(oldKey);\n        setValue(oldValue);\n    };\n    useEffect(() => {\n        resetText();\n    }, [oldKey, oldValue]);\n\n    const updateEditMode = () => {\n        setEditMode(!editMode);\n        setEditing(true);\n        resetText();\n    };\n    const handleKeyChange = (event) => {\n        const { value } = event.target;\n        setKey(value);\n    };\n    const handleValueChange = (event) => {\n        const { value } = event.target;\n        setValue(value);\n    };\n    const saveRow = () => {\n        const oldRow = { oldKey, oldValue, isDisplayInStore };\n        const newRow = { newKey, newValue, display: isVisibleInStore };\n        if (handleUpdateList(oldRow, newRow)) {\n            setEditMode(false);\n            setEditing(false);\n        }\n    };\n    const deleteRow = () => {\n        handleDelete(oldKey);\n    };\n    const handleKeyDown = (e) => {\n        if (e.key === 'Enter') {\n            saveRow();\n        }\n    };\n    const handleChangeVisibleInStore = (event) => {\n        setIsVisibleInStore(event.target.checked);\n    };\n    const classes = useStyles();\n\n    return (\n        <TableRow>\n            {editMode ? (\n                <TableCell>\n                    <TextField\n                        fullWidth\n                        required\n                        id='outlined-required'\n                        label={intl.formatMessage({\n                            id: 'Apis.Details.Properties.Properties.editable.row.property.name',\n                            defaultMessage: 'Property Name',\n                        })}\n                        margin='dense'\n                        variant='outlined'\n                        className={classes.addProperty}\n                        value={newKey}\n                        onChange={handleKeyChange}\n                        onKeyDown={handleKeyDown}\n                        helperText={validateEmpty(newKey) ? ''\n                            : iff(isKeyword(newKey), intl.formatMessage({\n                                id: `Apis.Details.Properties.Properties.\n                                show.add.property.invalid.error`,\n                                defaultMessage: 'Invalid property name',\n                            }), '')}\n                        error={validateEmpty(newKey) || isKeyword(newKey)}\n                    />\n                </TableCell>\n            ) : (\n                <TableCell>\n                    {oldKey}\n                </TableCell>\n            )}\n            {editMode ? (\n                <>\n                    <TableCell>\n                        <TextField\n                            fullWidth\n                            required\n                            id='outlined-required'\n                            label={intl.formatMessage({\n                                id: 'Apis.Details.Properties.Properties.editable.row.edit.mode.property.value',\n                                defaultMessage: 'Property Value',\n                            })}\n                            margin='dense'\n                            variant='outlined'\n                            className={classes.addProperty}\n                            value={newValue}\n                            onChange={handleValueChange}\n                            onKeyDown={handleKeyDown}\n                            error={validateEmpty(newValue)}\n                        />\n                    </TableCell>\n                    <TableCell>\n                        <FormControlLabel\n                            control={(\n                                <Checkbox\n                                    checked={isVisibleInStore}\n                                    onChange={handleChangeVisibleInStore}\n                                    name='checkedB'\n                                    color='primary'\n                                />\n                            )}\n                            label={intl.formatMessage({\n                                id: 'Apis.Details.Properties.Properties.editable.show.in.devporal',\n                                defaultMessage: 'Show in devportal',\n                            })}\n                            classes={{ root: classes.checkBoxStyles, colorPrimary: classes.colorPrimary }}\n                        />\n                    </TableCell>\n                </>\n            ) : (\n                <>\n                    <TableCell>\n                        <Box display='inline-block' minWidth={150}>\n                            {oldValue}\n                        </Box>\n                    </TableCell>\n                    <TableCell>\n                        {isVisibleInStore && (\n                            <Box display='flex' alignItems='center'>\n                                <VisibilityIcon />\n                                <Box ml={1} display='inline-block'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Properties.Properties.editable.visible.in.store'\n                                        defaultMessage='Visible in devportal'\n                                    />\n                                </Box>\n                            </Box>\n                        )}\n                    </TableCell>\n                </>\n            )}\n            <TableCell align='right'>\n                {editMode ? (\n                    <>\n                        <Button\n                            color='primary'\n                            onClick={saveRow}\n                            onKeyDown={() => { }}\n                            variant='contained'\n                        >\n                            <Typography variant='caption' component='div'>\n                                <FormattedMessage\n                                    id='Apis.Details.Properties.Properties.editable.update'\n                                    defaultMessage='Update'\n                                />\n                            </Typography>\n                        </Button>\n                        <Button onClick={updateEditMode} className={classes.cancelButton}>\n                            <Typography variant='caption' component='div'>\n                                <FormattedMessage\n                                    id='Apis.Details.Properties.Properties.editable.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Typography>\n                        </Button>\n\n                    </>\n                ) : (\n                    <IconButton\n                        className={classes.link}\n                        aria-label='edit'\n                        onClick={updateEditMode}\n                        onKeyDown={() => { }}\n                        color='inherit'\n                        disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                    >\n                        <EditIcon className={classes.buttonIcon} />\n                    </IconButton>\n                )}\n                <IconButton\n                    className={classes.link}\n                    aria-label='remove'\n                    onClick={deleteRow}\n                    onKeyDown={() => { }}\n                    color='inherit'\n                    disabled={isRestricted(['apim:api_create', 'apim:api_publish'], api)}\n                >\n                    <DeleteForeverIcon className={classes.buttonIcon} />\n                </IconButton>\n            </TableCell>\n        </TableRow>\n    );\n}\nEditableRow.propTypes = {\n    oldKey: PropTypes.shape({}).isRequired,\n    oldValue: PropTypes.shape({}).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    handleUpdateList: PropTypes.shape({}).isRequired,\n    handleDelete: PropTypes.shape({}).isRequired,\n    apiAdditionalProperties: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    setEditing: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(EditableRow);\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport PropTypes from 'prop-types';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Grid, Paper, Typography } from '@material-ui/core';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { withRouter } from 'react-router';\nimport { Progress } from 'AppComponents/Shared';\nimport Alert from 'AppComponents/Shared/Alert';\nimport API from 'AppData/api';\nimport APIProduct from 'AppData/APIProduct';\nimport { isRestricted } from 'AppData/AuthManager';\n\nimport BusinessPlans from './BusinessPlans';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n    },\n    container: {\n        display: 'flex',\n        flexWrap: 'wrap',\n    },\n    margin: {\n        margin: theme.spacing(),\n    },\n    paper: {\n        padding: theme.spacing(2),\n        textAlign: 'left',\n        color: theme.palette.text.secondary,\n        paddingBottom: '10px',\n    },\n    grid: {\n        paddingLeft: '10px',\n        paddingRight: '10px',\n        paddingBottom: '10px',\n        minWidth: '50%',\n    },\n    button: {\n        margin: theme.spacing(),\n    },\n});\n\n/**\n *\n *\n * @class Monetization\n * @extends {Component}\n */\nclass Monetization extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            monetizationAttributes: [],\n            monStatus: null,\n            property: {},\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        this.getMonetizationData();\n    }\n\n    getMonetizationData() {\n        const { api } = this.props;\n        if (api.apiType === API.CONSTS.APIProduct) {\n            const apiProduct = new APIProduct(api.name, api.context, api.policies);\n            apiProduct.getSettings().then((settings) => {\n                if (settings.monetizationAttributes != null) {\n                    this.setState({ monetizationAttributes: settings.monetizationAttributes });\n                }\n            });\n            apiProduct.getMonetization(this.props.api.id).then((status) => {\n                this.setState({ monStatus: status.enabled });\n            });\n        } else {\n            api.getSettings().then((settings) => {\n                if (settings.monetizationAttributes != null) {\n                    this.setState({ monetizationAttributes: settings.monetizationAttributes });\n                }\n            });\n            api.getMonetization(this.props.api.id).then((status) => {\n                this.setState({ monStatus: status.enabled });\n            });\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({ monStatus: event.target.checked });\n    };\n\n    handleInputChange = (event) => {\n        const { name, value } = event.target;\n        this.setState((oldState) => {\n            const { property } = oldState;\n            property[name] = value;\n            return { property };\n        });\n    };\n\n    /**\n     * Handles the submit action for configuring monetization\n     */\n    handleSubmit() {\n        const { api, intl } = this.props;\n        if (api.apiType === API.CONSTS.APIProduct) {\n            const properties = this.state.property;\n            const enabled = this.state.monStatus;\n            const body = {\n                enabled,\n                properties,\n            };\n            const apiProduct = new APIProduct(api.name, api.context, api.policies);\n            const promisedMonetization = apiProduct.configureMonetizationToApiProduct(api.id, body);\n            promisedMonetization.then((response) => {\n                const status = JSON.parse(response.data);\n                if (status.enabled) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.Monetization.Index.monetization.configured.successfully',\n                        defaultMessage: 'Monetization Enabled Successfully',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.Monetization.Index.monetization.disabled.successfully',\n                        defaultMessage: 'Monetization Disabled Successfully',\n                    }));\n                }\n                this.setState((cState) => ({ monStatus: !cState.monStatus }));\n            }).catch((error) => {\n                console.error(error);\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Monetization.Index.something.went.wrong.while.configuring.monetization',\n                        defaultMessage: 'Something went wrong while configuring monetization',\n                    }));\n                }\n            });\n        } else {\n            const properties = this.state.property;\n            const enabled = this.state.monStatus;\n            const body = {\n                enabled,\n                properties,\n            };\n            const promisedMonetizationConf = api.configureMonetizationToApi(this.props.api.id, body);\n            promisedMonetizationConf.then((response) => {\n                const status = JSON.parse(response.data);\n                if (status.enabled) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.Monetization.Index.monetization.configured.successfully',\n                        defaultMessage: 'Monetization Enabled Successfully',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Apis.Details.Monetization.Index.monetization.disabled.successfully',\n                        defaultMessage: 'Monetization Disabled Successfully',\n                    }));\n                }\n                this.setState((cState) => ({ monStatus: !cState.monStatus }));\n            }).catch((error) => {\n                console.error(error);\n                if (error.response) {\n                    Alert.error(error.response.body.description);\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.Monetization.Index.something.went.wrong.while.configuring.monetization',\n                        defaultMessage: 'Something went wrong while configuring monetization',\n                    }));\n                }\n            });\n        }\n    }\n\n    render() {\n        const { api, classes } = this.props;\n        const { monetizationAttributes, monStatus } = this.state;\n        if (api && isRestricted(['apim:api_publish'], api)) {\n            return (\n                <Grid\n                    container\n                    direction='row'\n                    alignItems='center'\n                    spacing={4}\n                    style={{ marginTop: 20 }}\n                >\n                    <Grid item>\n                        <Typography variant='body2' color='primary'>\n                            <FormattedMessage\n                                id='Apis.Details.Monetization.Index.update.not.allowed'\n                                defaultMessage={'* You are not authorized to update API monetization'\n                                    + ' due to insufficient permissions'}\n                            />\n                        </Typography>\n                    </Grid>\n                </Grid>\n            );\n        }\n        if (!monetizationAttributes || monStatus === null) {\n            return <Progress />;\n        }\n        return (\n            <form method='post' onSubmit={this.handleSubmit}>\n                <Grid container xs={6} spacing={2}>\n                    <Grid item xs={12}>\n                        <Typography id='itest-api-details-api-monetization-head' variant='h4'>\n                            <FormattedMessage\n                                id='Apis.Details.Monetization.Index.monetization'\n                                defaultMessage='Monetization'\n                            />\n                        </Typography>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <FormControlLabel\n                            control={(\n                                <Checkbox\n                                    disabled={isRestricted(['apim:api_publish'], api)}\n                                    id='monStatus'\n                                    name='monStatus'\n                                    checked={monStatus}\n                                    onChange={this.handleChange}\n                                    value={monStatus}\n                                    color='primary'\n                                />\n                            )}\n                            label='Enable Monetization'\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Paper className={classes.root}>\n                            <Grid item xs={12} className={classes.grid}>\n                                <Typography className={classes.heading} variant='h6'>\n                                    <FormattedMessage\n                                        id='Apis.Details.Monetization.Index.monetization.properties'\n                                        defaultMessage='Monetization Properties'\n                                    />\n                                </Typography>\n                                {\n                                    (monetizationAttributes.length > 0) ? (\n                                        (monetizationAttributes.map((monetizationAttribute, i) => (\n                                            <TextField\n                                                disabled={!monStatus || isRestricted(['apim:api_publish'], api)}\n                                                fullWidth\n                                                id={'attribute' + i}\n                                                label={monetizationAttribute.displayName}\n                                                placeholder={monetizationAttribute.displayName}\n                                                name={monetizationAttribute.name}\n                                                type='text'\n                                                margin='normal'\n                                                variant='outlined'\n                                                required={monetizationAttribute.required}\n                                                onChange={this.handleInputChange}\n                                                autoFocus\n                                            />\n                                        )))\n                                    ) : (\n                                        <Typography>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Monetization.Index.there.are.no'\n                                                   + ' .monetization.properties.configured'}\n                                                defaultMessage='There are no monetization properties configured'\n                                            />\n                                        </Typography>\n                                    )\n                                }\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Paper className={classes.root}>\n                            <Grid item xs={12} className={classes.grid}>\n                                <BusinessPlans api={api} monStatus={monStatus} />\n                            </Grid>\n                        </Paper>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Button\n                            onClick={this.handleSubmit}\n                            color='primary'\n                            variant='contained'\n                            className={classes.button}\n                            disabled={api.isRevision}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.Monetization.Index.save'\n                                defaultMessage='Save'\n                            />\n                        </Button>\n                        <Link to={'/apis/' + api.id + '/overview'}>\n                            <Button>\n                                <FormattedMessage\n                                    id='Apis.Details.Monetization.Index.cancel'\n                                    defaultMessage='Cancel'\n                                />\n                            </Button>\n                        </Link>\n                    </Grid>\n                </Grid>\n            </form>\n        );\n    }\n}\n\nMonetization.propTypes = {\n    api: PropTypes.instanceOf(API).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nexport default injectIntl(withRouter(withStyles(styles)(Monetization)));\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\nimport { Grid, Typography } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport CheckIcon from '@material-ui/icons/Check';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Table from '@material-ui/core/Table';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport API from 'AppData/api';\nimport Banner from 'AppComponents/Shared/Banner';\nimport { Progress } from 'AppComponents/Shared';\n\nconst styles = (theme) => ({\n    root: {\n        flexGrow: 1,\n        paddingBottom: '10px',\n    },\n    margin: {\n        margin: theme.spacing(),\n    },\n    rightDataColumn: {\n        display: 'flex',\n        flex: 1,\n    },\n    grid: {\n        marginTop: '10px',\n        paddingRight: '10px',\n        paddingBottom: '10px',\n    },\n    box: {\n        display: 'block',\n    },\n    tableCel: {\n        width: 50,\n    },\n    table: {\n        width: '100%',\n        border: 'solid 1px #ccc',\n    },\n    tableHeadCell: {\n        color: 'black',\n        background: theme.palette.grey[200],\n    },\n    stateWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    tableHeadTitle: {\n        flex: 1,\n        fontWeight: 'bold',\n    },\n});\n\n/**\n *\n *\n * @class BusinessPlans\n * @extends {Component}\n */\nclass BusinessPlans extends Component {\n    /**\n     *Creates an instance of BusinessPlans.\n     * @param {Object} props\n     * @memberof BusinessPlans\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            policies: [],\n            monetizedPolices: null,\n        };\n        this.monetizationQuery = this.monetizationQuery.bind(this);\n    }\n\n    /**\n     *\n     * @inheritdoc\n     * @memberof BusinessPlans\n     */\n    componentDidMount() {\n        const { api } = this.props;\n        api.getSubscriptionPolicies(api.id).then((policies) => {\n            const filteredPolicies = policies.filter((policy) => policy.tierPlan === 'COMMERCIAL');\n            this.setState({ policies: filteredPolicies });\n        });\n        api.getMonetization(api.id).then((status) => {\n            this.setState({ monetizedPolices: status.properties });\n        });\n    }\n\n    monetizationQuery(policyName) {\n        const { monetizedPolices } = this.state;\n        return policyName in monetizedPolices;\n    }\n\n    /**\n     *\n     * @inheritdoc\n     * @returns {React.Component} Policies / Business plans list\n     * @memberof BusinessPlans\n     */\n    render() {\n        const { policies, monetizedPolices } = this.state;\n        const { classes } = this.props;\n        if (monetizedPolices === null) {\n            return <Progress />;\n        }\n        const policiesList = policies.map((policy) => (\n            <Grid item xs={12}>\n                <Table className={classes.table}>\n                    <TableRow>\n                        <TableCell variant='head' colSpan={2} className={classes.tableHeadCell}>\n                            <Box display='flex'>\n                                <Typography component='div' className={classes.tableHeadTitle} variant='subtitle1'>\n                                    {policy.name}\n                                </Typography>\n                                {\n                                    this.monetizationQuery(policy.name) ? (\n                                        <div className={classes.stateWrapper}>\n                                            <div><CheckIcon color='primary' /></div>\n                                            <Typography component='div'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Monetization.BusinessPlans.monetized'\n                                                    defaultMessage='Monetized'\n                                                />\n                                            </Typography>\n                                        </div>\n                                    ) : (\n                                        <div className={classes.stateWrapper}>\n                                            <div><CloseIcon color='error' /></div>\n                                            <Typography component='div'>\n                                                <FormattedMessage\n                                                    id='Apis.Details.Monetization.BusinessPlans.not.monetized'\n                                                    defaultMessage='Not Monetized'\n                                                />\n                                            </Typography>\n                                        </div>\n                                    )\n                                }\n                            </Box>\n                        </TableCell>\n                    </TableRow>\n                    {Object.keys(policy.monetizationAttributes).map((key) => {\n                        if (policy.monetizationAttributes[key] !== null) {\n                            return (\n                                <TableRow>\n                                    <TableCell className={classes.tableCel} align='left'>\n                                        <Typography component='p' variant='subtitle2'>\n                                            {key}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell align='left'>\n                                        {policy.monetizationAttributes[key]}\n                                    </TableCell>\n                                </TableRow>\n                            );\n                        } else {\n                            return false;\n                        }\n                    })}\n\n                </Table>\n            </Grid>\n        ));\n        return (\n            <Grid container spacing={1}>\n                <Grid item xs={12}>\n                    <Typography variant='h6'>\n                        <FormattedMessage\n                            id='Apis.Details.Monetization.BusinessPlans.commercial.policies'\n                            defaultMessage='Commercial Policies'\n                        />\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Grid container direction='row' spacing={3}>\n                        {policiesList}\n                    </Grid>\n                </Grid>\n                <Grid item xs={12}>\n                    {\n                        (policies.length > 0) ? (\n                            <Banner\n                                disableActions\n                                dense\n                                paperProps={{ elevation: 1 }}\n                                type='info'\n                                message='Click Save to monetize all unmonetized policies'\n                            />\n                        ) : (\n                            <Banner\n                                disableActions\n                                dense\n                                paperProps={{ elevation: 1 }}\n                                type='info'\n                                message='No commercial policies to monetize'\n                            />\n                        )\n                    }\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nBusinessPlans.propTypes = {\n    api: PropTypes.instanceOf(API).isRequired,\n    classes: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles)(BusinessPlans);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport { APIContext } from 'AppComponents/Apis/Details/components/ApiContext';\nimport { useAppContext } from 'AppComponents/Shared/AppContext';\nimport { isRestricted } from 'AppData/AuthManager';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\n\nimport 'react-tagsinput/react-tagsinput.css';\nimport { FormattedMessage, useIntl, defineMessages } from 'react-intl';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Link } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport API from '../../../../data/api';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        width: theme.custom.contentAreaWidth,\n        marginTop: theme.spacing(3),\n        overflowX: 'auto',\n    },\n    table: {\n        minWidth: 650,\n    },\n    viewInExStoreLink: {\n        color: theme.palette.common.black,\n        textDecoration: 'underline',\n    },\n}));\n\n/**\n * Renders an External Store list\n * @class ExternalStores\n * @extends {React.Component}\n */\nexport default function ExternalStores() {\n    const { api } = useContext(APIContext);\n    const { settings } = useAppContext();\n    const [allExternalStores, setAllExternalStores] = useState([]);\n    const [publishedExternalStores, setPublishedExternalStores] = useState([]);\n    const [isUpdating, setUpdating] = useState(false);\n    const classes = useStyles();\n    const intl = useIntl();\n    if (!settings.externalStoresEnabled) {\n        const resourceNotFoundMessageText = defineMessages({\n            titleMessage: {\n                id: 'Apis.Details.ExternalStores.ExternalStores.external.stores.not.found.title',\n                defaultMessage: 'External Developert Portals not found for the API : {apiUUID}',\n            },\n            bodyMessage: {\n                id: 'Apis.Details.ExternalStores.ExternalStores.external.stores.not.found.body',\n                defaultMessage: 'No External Developer Portals configured for the current tenant',\n            },\n        });\n        const resourceNotFountMessage = {\n            title: intl.formatMessage(resourceNotFoundMessageText.titleMessage, {\n                apiUUID: `${api.id}`,\n            }),\n            body: intl.formatMessage(resourceNotFoundMessageText.bodyMessage),\n        };\n        return <ResourceNotFound message={resourceNotFountMessage} />;\n    }\n\n    /**\n     * Gets published external stores\n     */\n    function getPublishedExternalStores() {\n        API.getPublishedExternalStores(api.id)\n            .then((response) => {\n                const publishedStoreIds = response.body.list.map((store) => store.id);\n                setPublishedExternalStores(publishedStoreIds);\n            })\n            .catch((error) => {\n                const response = error.response && error.response.obj;\n                const reason = response && ('[' + response.message + '] ' + response.description);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.ExternalStores.ExternalStores.error.getting.published.external.stores',\n                    defaultMessage: 'Error while getting published external developer portals!! {reason}',\n                }, { reason }));\n            });\n    }\n\n    useEffect(() => {\n        API.getAllExternalStores().then((response) => {\n            setAllExternalStores([...response.body.list]);\n        });\n        getPublishedExternalStores();\n    }, []);\n\n    /**\n     * Handle publish to external store button action\n     */\n    function updateStores() {\n        setUpdating(true);\n        API.publishAPIToExternalStores(api.id, publishedExternalStores)\n            .then((response) => {\n                const successfulStores = response.body.list.map((store) => store.id);\n                Alert.success(intl.formatMessage({\n                    id: 'Apis.Details.ExternalStores.ExternalStores.successfully.published.to.external.stores',\n                    defaultMessage: 'Successfully Published to external developer portals: {successfulStores}',\n                }, { successfulStores }));\n            })\n            .catch((error) => {\n                const response = error.response && error.response.obj;\n                const reason = response && ('[' + response.message + '] ' + response.description);\n                Alert.error(intl.formatMessage({\n                    id: 'Apis.Details.ExternalStores.ExternalStores.error.while.updating.external.stores',\n                    defaultMessage: 'Error while updating external developer portals!! {reason}',\n                }, { reason }));\n            })\n            .finally(() => {\n                setUpdating(false);\n                getPublishedExternalStores();\n            });\n    }\n\n    return (\n        <div>\n            <div>\n                <Typography variant='h4' align='left'>\n                    <FormattedMessage\n                        id='Apis.Details.ExternalStores.ExternalStores.external-stores'\n                        defaultMessage='External Developer Portals'\n                    />\n                </Typography>\n                <Paper className={classes.root}>\n                    <Table className={classes.table}>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell />\n                                <TableCell>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.ExternalStores.ExternalStores.name'\n                                            defaultMessage='Name'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.ExternalStores.ExternalStores.type'\n                                            defaultMessage='Type'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                                <TableCell>\n                                    <Typography>\n                                        <FormattedMessage\n                                            id='Apis.Details.ExternalStores.ExternalStores.endpoint'\n                                            defaultMessage='Endpoint'\n                                        />\n                                    </Typography>\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {allExternalStores.map((row) => (\n                                <TableRow key={row.id}>\n                                    <TableCell padding='checkbox'>\n                                        <Checkbox\n                                            checked={publishedExternalStores.includes(row.id)}\n                                            disabled={api.lifeCycleStatus !== 'PUBLISHED'\n                                                || isRestricted(['apim:api_publish'], api)}\n                                            onChange={\n                                                (event) => {\n                                                    const { checked, name } = event.target;\n                                                    if (checked) {\n                                                        if (!publishedExternalStores.includes(name)) {\n                                                            setPublishedExternalStores([\n                                                                ...publishedExternalStores, name]);\n                                                        }\n                                                    } else {\n                                                        setPublishedExternalStores(publishedExternalStores\n                                                            .filter((store) => store !== name));\n                                                    }\n                                                }\n                                            }\n                                            name={row.id}\n                                            color='primary'\n                                        />\n                                    </TableCell>\n                                    <TableCell component='th' scope='row'>\n                                        <Typography>\n                                            {' '}\n                                            {row.displayName}\n                                            {' '}\n                                        </Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        {' '}\n                                        <Typography>{row.type}</Typography>\n                                    </TableCell>\n                                    <TableCell>\n                                        <a\n                                            target='_blank'\n                                            rel='noopener noreferrer'\n                                            href={row.endpoint}\n                                            className={classes.viewInExStoreLink}\n                                        >\n                                            <Typography>\n                                                {row.endpoint}\n                                            </Typography>\n                                        </a>\n                                    </TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </Paper>\n                <Grid container>\n                    <Grid\n                        container\n                        direction='row'\n                        alignItems='center'\n                        spacing={4}\n                        style={{ marginTop: 20 }}\n                    >\n                        <Grid item>\n                            <Button\n                                type='submit'\n                                variant='contained'\n                                color='primary'\n                                disabled={isUpdating || api.lifeCycleStatus !== 'PUBLISHED'\n                                    || isRestricted(['apim:api_publish'], api)}\n                                onClick={updateStores}\n                            >\n                                <FormattedMessage\n                                    id='Apis.Details.ExternalStores.ExternalStores.save'\n                                    defaultMessage='Save'\n                                />\n                                {isUpdating && <CircularProgress size={20} />}\n                            </Button>\n                        </Grid>\n                        <Grid item>\n                            <Link to={'/apis/' + api.id + '/overview'}>\n                                <Button>\n                                    <FormattedMessage\n                                        id='Apis.Details.ExternalStores.ExternalStores.cancel'\n                                        defaultMessage='Cancel'\n                                    />\n                                </Button>\n                            </Link>\n                        </Grid>\n                        {(isRestricted(['apim:api_publish'], api))\n                            && (\n                                <Grid item>\n                                    <Typography variant='body2' color='primary'>\n                                        <FormattedMessage\n                                            id='Apis.Details.ExternalStores.ExternalStores.update.not.allowed'\n                                            defaultMessage={'* You are not authorized to publish the API'\n                                                + ' to external developer portals due to insufficient permissions'}\n                                        />\n                                    </Typography>\n                                </Grid>\n                            )}\n                    </Grid>\n                </Grid>\n            </div>\n        </div>\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport FormControl from '@material-ui/core/FormControl';\nimport ServiceCatalog from 'AppData/ServiceCatalog';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport HelpOutline from '@material-ui/icons/HelpOutline';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { withAPI } from 'AppComponents/Apis/Details/components/ApiContext';\n\nconst styles = (theme) => ({\n    FormControl: {\n        padding: 0,\n        width: '100%',\n        marginTop: 20,\n    },\n    FormControlOdd: {\n        padding: 0,\n        backgroundColor: theme.palette.background.paper,\n        width: '100%',\n        marginTop: 0,\n    },\n    FormLabel: {\n        transform: 'translate(0, 1.5px) scale(0.75)',\n        transformOrigin: 'top left',\n    },\n    buttonWrapper: {\n        paddingTop: 20,\n    },\n    root: {\n        padding: 20,\n        marginTop: 20,\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    helpButton: {\n        padding: 0,\n        minWidth: 20,\n    },\n    helpIcon: {\n        fontSize: 16,\n    },\n    htmlTooltip: {\n        backgroundColor: '#f5f5f9',\n        color: 'rgba(0, 0, 0, 0.87)',\n        maxWidth: 220,\n        fontSize: theme.typography.pxToRem(14),\n        border: '1px solid #dadde9',\n        '& b': {\n            fontWeight: theme.typography.fontWeightMedium,\n        },\n    },\n});\n\n/**\n * React component to create a new version of an API\n * @class CreateNewVersion\n * @extends {Component}\n */\nclass CreateNewVersion extends React.Component {\n    /**\n     * Creates an instance of CreateNewVersion.\n     * @param {any} props @inheritDoc\n     * @memberof CreateNewVersion\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            isDefaultVersion: 'no',\n            serviceVersion: null,\n            versionList: [],\n            valid: {\n                version: {\n                    empty: false,\n                    alreadyExists: false,\n                    hasSpecialChars: false,\n                    MaxLengthExceeds: false,\n                },\n            },\n        };\n    }\n\n    componentDidMount() {\n        const { api } = this.props;\n        if (api.serviceInfo !== null) {\n            const promisedServices = ServiceCatalog.getServiceByName(api.serviceInfo);\n            promisedServices.then((data) => {\n                const array = data.list.map((item) => item.version);\n                this.setState({ versionList: array });\n            }).catch((error) => {\n                console.error(error);\n                Alert.error('Error while loading services version');\n            });\n        }\n    }\n\n    handleDefaultVersionChange = () => (event) => {\n        const { value } = event.target;\n        this.setState({\n            isDefaultVersion: value,\n        });\n    };\n\n    handleServiceVersionChange = () => (event) => {\n        const { value } = event.target;\n        this.setState({\n            serviceVersion: value,\n        });\n    };\n\n    handleVersionChange = () => (event) => {\n        const { value } = event.target;\n        this.setState({\n            newVersion: value,\n            valid: {\n                version: {\n                    empty: !value,\n                    alreadyExists: false,\n                    hasSpecialChars: this.hasSpecialChars(value),\n                    MaxLengthExceeds: this.isMaxLengthExceeds(value),\n                },\n            },\n        });\n    };\n\n    /**\n     * Handles the submit action for new version creation\n     *\n     * @param {API} api current API\n     * @param {string} newVersion new version to create\n     * @param {string} isDefaultVersion specifies whether the new API should be marked as default version ('yes' | 'no')\n     */\n    handleSubmit(api, newVersion, isDefaultVersion, serviceVersion) {\n        if (!newVersion) {\n            this.setState({ valid: { version: { empty: true } } });\n            return;\n        }\n        const isDefaultVersionBool = isDefaultVersion === 'yes';\n        const { intl } = this.props;\n        api.createNewAPIVersion(newVersion, isDefaultVersionBool, serviceVersion)\n            .then((response) => {\n                this.setState({\n                    redirectToReferrer: true,\n                    apiId: response.obj.id,\n                });\n                Alert.info(intl.formatMessage({\n                    id: 'Apis.Details.NewVersion.NewVersion.success',\n                    defaultMessage: 'Successfully created new version ',\n                }) + newVersion);\n            })\n            .catch((error) => {\n                if (error.status === 409) {\n                    this.setState({ valid: { version: { alreadyExists: true } } });\n                } else {\n                    Alert.error(intl.formatMessage({\n                        id: 'Apis.Details.NewVersion.NewVersion.error',\n                        defaultMessage: 'Something went wrong while creating a new version!. Error: ',\n                    }) + error.status);\n                }\n            });\n    }\n\n    /**\n     *\n     * @param {String} value String to be checked for special characters\n     * @returns {Boolean} Has special character or not\n     */\n    hasSpecialChars(value) {\n        if (/^[^~!@#;:%^*()+={}|\\\\<>\"',&/$]+$/.test(value)) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    isMaxLengthExceeds(value) {\n        if (value.length > 30) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Renders the CreateNewVersion component.\n     * Once new version is created, redirects to the overview page of the new API.\n     * @returns {*} CreateNewVersion component\n     */\n    render() {\n        const { classes, api } = this.props;\n        const {\n            isDefaultVersion, newVersion, redirectToReferrer, apiId, valid, serviceVersion, versionList,\n        } = this.state;\n        if (redirectToReferrer) {\n            return <Redirect to={'/apis/' + apiId + '/overview'} />;\n        }\n\n        let helperText = '';\n        if (valid.version.empty) {\n            helperText = 'This field cannot be empty';\n        } else if (valid.version.alreadyExists) {\n            helperText = 'An API with version \"' + newVersion + '\" already exists.';\n        } else if (valid.version.hasSpecialChars) {\n            helperText = 'API Version should not contain special characters';\n        } else if (valid.version.MaxLengthExceeds) {\n            helperText = 'API version exceeds maximum length of 30 characters';\n        }\n\n        return (\n            <>\n                <Container maxWidth='md'>\n                    <div className={classes.titleWrapper}>\n                        <Typography variant='h4' align='left' className={classes.mainTitle}>\n                            <FormattedMessage\n                                id='Apis.Details.NewVersion.NewVersion.create.new.version'\n                                defaultMessage='Create New Version'\n                            />\n                        </Typography>\n                    </div>\n                    <Grid container spacing={7}>\n                        <Grid item xs={12}>\n                            <Paper className={classes.root} elevation={0}>\n                                <FormControl margin='normal' className={classes.FormControlOdd}>\n                                    <TextField\n                                        fullWidth\n                                        id='newVersion'\n                                        error={\n                                            valid.version.empty\n                                            || valid.version.alreadyExists\n                                            || valid.version.hasSpecialChars\n                                            || valid.version.MaxLengthExceeds\n                                        }\n                                        label={(\n                                            <FormattedMessage\n                                                id='Apis.Details.NewVersion.NewVersion.new.version'\n                                                defaultMessage='New Version'\n                                            />\n                                        )}\n                                        helperText={\n                                            helperText\n                                        }\n                                        type='text'\n                                        name='newVersion'\n                                        placeholder='Eg: 2.0.0'\n                                        value={newVersion}\n                                        variant='outlined'\n                                        onChange={this.handleVersionChange()}\n                                        margin='normal'\n                                        InputLabelProps={{\n                                            shrink: true,\n                                        }}\n                                        autoFocus\n                                    />\n                                </FormControl>\n                                {api.serviceInfo && (\n                                    <FormControl margin='normal' className={classes.FormControlOdd}>\n                                        <TextField\n                                            id='version-selector'\n                                            select\n                                            label={(\n                                                <FormattedMessage\n                                                    id='Apis.Details.NewVersion.NewVersion.service.version'\n                                                    defaultMessage='Service Version'\n                                                />\n                                            )}\n                                            name='selectVersion'\n                                            onChange={this.handleServiceVersionChange()}\n                                            margin='dense'\n                                            variant='outlined'\n                                        >\n                                            {versionList && versionList.map((item) => (\n                                                <MenuItem value={item}>\n                                                    {item}\n                                                </MenuItem>\n                                            ))}\n                                        </TextField>\n                                    </FormControl>\n                                )}\n                                <FormControl margin='normal' className={classes.FormControl}>\n                                    <FormLabel className={classes.FormLabel} component='legend'>\n                                        <FormattedMessage\n                                            id='Apis.Details.NewVersion.NewVersion.default'\n                                            defaultMessage='Make this the default version'\n                                        />\n                                        <Tooltip\n                                            placement='top'\n                                            classes={{\n                                                tooltip: classes.htmlTooltip,\n                                            }}\n                                            title={(\n                                                <>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.NewVersion.NewVersion.tooltip'\n                                                        defaultMessage={\n                                                            'Indicates if this is the default version of the API. '\n                                                            + 'If an API is invoked without specifying a version, '\n                                                            + 'the API Gateway will route the request to the default '\n                                                            + 'version of the API.'\n                                                        }\n                                                    />\n                                                </>\n                                            )}\n                                            interactive\n                                            aria-label='Default Version Selector'\n                                            tabIndex='-1'\n                                        >\n                                            <Button className={classes.helpButton}>\n                                                <HelpOutline className={classes.helpIcon} />\n                                            </Button>\n                                        </Tooltip>\n                                    </FormLabel>\n                                    <RadioGroup\n                                        name='isDefaultVersion'\n                                        id='isDefaultVersion'\n                                        className={classes.group}\n                                        value={isDefaultVersion}\n                                        onChange={this.handleDefaultVersionChange()}\n                                    >\n                                        <FormControlLabel value='yes' control={<Radio color='primary' />} label='Yes' />\n                                        <FormControlLabel value='no' control={<Radio color='primary' />} label='No' />\n                                    </RadioGroup>\n                                </FormControl>\n                                <div className={classes.buttonWrapper}>\n                                    <Grid\n                                        container\n                                        direction='row'\n                                        alignItems='flex-start'\n                                        spacing={1}\n                                        className={classes.buttonSection}\n                                    >\n                                        <Grid item>\n                                            <div>\n                                                <Button\n                                                    variant='contained'\n                                                    color='primary'\n                                                    id='createBtn'\n                                                    onClick={() => this.handleSubmit(api, newVersion, isDefaultVersion,\n                                                        serviceVersion)}\n                                                    disabled={\n                                                        valid.version.empty\n                                                        || valid.version.alreadyExists\n                                                        || valid.version.hasSpecialChars\n                                                        || valid.version.MaxLengthExceeds\n                                                        || api.isRevision\n                                                    }\n                                                >\n                                                    <FormattedMessage\n                                                        id='Apis.Details.NewVersion.NewVersion.create'\n                                                        defaultMessage='Create'\n                                                    />\n                                                </Button>\n                                            </div>\n                                        </Grid>\n                                        <Grid item>\n                                            <Link to={'/apis/' + api.id + '/overview'}>\n                                                <Button id='cancelBtn'>\n                                                    <FormattedMessage\n                                                        id='Apis.Details.NewVersion.NewVersion.cancel'\n                                                        defaultMessage='Cancel'\n                                                    />\n                                                </Button>\n                                            </Link>\n                                        </Grid>\n                                    </Grid>\n                                </div>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </>\n        );\n    }\n}\n\nCreateNewVersion.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    api: PropTypes.shape({\n        id: PropTypes.string,\n    }).isRequired,\n    intl: PropTypes.shape({\n        formatMessage: PropTypes.func,\n    }).isRequired,\n};\n\nexport default injectIntl(withAPI(withStyles(styles)(CreateNewVersion)));\n","/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, {\n    useState, useEffect, useCallback, useReducer, useMemo,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport 'swagger-ui-react/swagger-ui.css';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport cloneDeep from 'lodash.clonedeep';\nimport Api from 'AppData/api';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Paper from '@material-ui/core/Paper';\nimport { Link } from 'react-router-dom';\nimport LaunchIcon from '@material-ui/icons/Launch';\nimport TextField from '@material-ui/core/TextField';\nimport { useAPI } from 'AppComponents/Apis/Details/components/ApiContext';\nimport Utils from 'AppData/Utils';\nimport { usePublisherSettings } from 'AppComponents/Shared/AppContext';\nimport Alert from 'AppComponents/Shared/MuiAlert';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport CONSTS from 'AppData/Constants';\nimport SwaggerUI from './SwaggerUI';\n\ndayjs.extend(relativeTime);\n\nconst tasksReducer = (state, action) => {\n    const { name, status } = action;\n    // In the case of a key collision, the right-most (last) object's value wins out\n    return { ...state, [name]: { ...state[name], ...status } };\n};\n\n/**\n * @class TryOutConsole\n * @extends {React.Component}\n */\nconst TryOutConsole = () => {\n    const [api] = useAPI();\n    const [apiKey, setAPIKey] = useState('');\n    const [deployments, setDeployments] = useState([]);\n    const [selectedDeployment, setSelectedDeployment] = useState();\n    const [oasDefinition, setOasDefinition] = useState();\n    const publisherSettings = usePublisherSettings();\n\n    const [tasksStatus, tasksStatusDispatcher] = useReducer(tasksReducer, {\n        generateKey: { inProgress: false, completed: false, error: false },\n        getOAS: { inProgress: false, completed: false, error: false },\n        getDeployments: { inProgress: false, completed: false, error: false },\n    });\n\n    const generateInternalKey = useCallback(() => {\n        tasksStatusDispatcher({ name: 'generateKey', status: { inProgress: true } });\n        Api.generateInternalKey(api.id).then((keyResponse) => {\n            const { apikey } = keyResponse.body;\n            setAPIKey(apikey);\n            tasksStatusDispatcher({ name: 'generateKey', status: { inProgress: false, completed: true } });\n        }).catch((error) => tasksStatusDispatcher({ name: 'generateKey', status: { error, inProgress: false } }));\n    }, [api.id]);\n\n    useEffect(() => {\n        tasksStatusDispatcher({ name: 'getDeployments', status: { inProgress: true } });\n        api.getDeployedRevisions().then((deploymentsResponse) => {\n            tasksStatusDispatcher({ name: 'getDeployments', status: { inProgress: false, completed: true } });\n            const currentDeployments = deploymentsResponse.body;\n            const currentDeploymentsWithDisplayName = currentDeployments.map((deploy) => {\n                const gwEnvironment = publisherSettings.environment.find((e) => e.name === deploy.name);\n                const displayName = (gwEnvironment ? gwEnvironment.displayName : deploy.name);\n                return { ...deploy, displayName };\n            });\n            setDeployments(currentDeploymentsWithDisplayName);\n            if (currentDeploymentsWithDisplayName && currentDeploymentsWithDisplayName.length > 0) {\n                const [initialDeploymentSelection] = currentDeploymentsWithDisplayName;\n                setSelectedDeployment(initialDeploymentSelection);\n            }\n        }).catch((error) => tasksStatusDispatcher({ name: 'getDeployments', status: { inProgress: false, error } }));\n        api.getSwagger().then((swaggerResponse) => setOasDefinition(swaggerResponse.body));\n    }, []);\n\n    const updatedOasDefinition = useMemo(() => {\n        let oasCopy;\n        if (selectedDeployment && oasDefinition) {\n            const selectedGWEnvironment = publisherSettings.environment\n                .find((env) => env.name === selectedDeployment.name);\n            let selectedDeploymentVhost = selectedGWEnvironment.vhosts\n                .find((vhost) => vhost.host === selectedDeployment.vhost);\n            if (!selectedDeploymentVhost) {\n                selectedDeploymentVhost = { ...CONSTS.DEFAULT_VHOST, host: selectedDeployment.vhost };\n            }\n            let pathSeparator = '';\n            if (selectedDeploymentVhost.httpContext && !selectedDeploymentVhost.httpContext.startsWith('/')) {\n                pathSeparator = '/';\n            }\n            oasCopy = cloneDeep(oasDefinition); // If not we are directly mutating the state\n            if (oasDefinition.openapi) { // Assumed as OAS 3.x definition\n                const servers = api.transport.map((transport) => {\n                    const transportPort = selectedDeploymentVhost[`${transport}Port`];\n                    if (!transportPort) {\n                        console.error(`Can't find ${transport}Port `\n                    + `in selected deployment ( ${selectedDeploymentVhost.name} )`);\n                    }\n                    const baseURL = `${transport}://${selectedDeployment.vhost}:${transportPort}`;\n                    const url = `${baseURL}${pathSeparator}`\n                + `${selectedDeploymentVhost.httpContext}${api.context}/${api.version}`;\n                    return { url };\n                });\n                oasCopy.servers = servers.sort((a, b) => ((a.url > b.url) ? -1 : 1));\n            } else { // Assume the API definition is Swagger 2\n                let transportPort = selectedDeploymentVhost.httpsPort;\n                if (api.transport.length === 1 && !api.transport.includes('https')) {\n                    transportPort = selectedDeploymentVhost.httpPort;\n                } else if (api.transport.length > 1) {\n                    // TODO: fix When both HTTP and HTTPs transports are available can't switch the port between them\n                    // ~tmkb\n                    console.warn('HTTPS transport port will be used for all other transports');\n                }\n                const host = `${selectedDeploymentVhost.host}:${transportPort}`;\n                const basePath = `${pathSeparator}${selectedDeploymentVhost.httpContext}${api.context}/${api.version}`;\n                oasCopy.schemes = api.transport.slice().sort((a, b) => ((a > b) ? -1 : 1));\n                oasCopy.basePath = basePath;\n                oasCopy.host = host;\n            }\n        } else if (oasDefinition) {\n            // If no deployment just show the OAS definition\n            oasCopy = oasDefinition;\n        }\n        return oasCopy;\n    }, [selectedDeployment, oasDefinition]);\n\n    /**\n     *\n     * @param {React.SyntheticEventn} event\n     */\n    const deploymentSelectionHandler = (event) => {\n        const selectedGWEnvironment = event.target.value;\n        const currentSelection = deployments.find((deployment) => deployment.name === selectedGWEnvironment);\n        setSelectedDeployment(currentSelection);\n    };\n    const decodedJWT = useMemo(() => Utils.decodeJWT(apiKey), [apiKey]);\n    const isAPIRetired = api.lifeCycleStatus === 'RETIRED';\n    return (\n        <>\n            <Typography id='itest-api-details-try-out-head' variant='h4' component='h1'>\n                <FormattedMessage id='Apis.Details.ApiConsole.ApiConsole.title' defaultMessage='Try Out' />\n            </Typography>\n            <Paper elevation={0}>\n                <Box display='flex' justifyContent='center'>\n                    <Grid xs={11} md={6} item>\n                        <Typography variant='h5' color='textPrimary'>\n                            <FormattedMessage\n                                id='api.console.security.heading'\n                                defaultMessage='Security'\n                            />\n                        </Typography>\n                        <TextField\n                            fullWidth\n                            label={(\n                                <FormattedMessage\n                                    id='Apis.Details.TryOutConsole.token.label'\n                                    defaultMessage='Internal API Key'\n                                />\n                            )}\n                            type='password'\n                            value={apiKey}\n                            helperText={decodedJWT ? (\n                                <Box color='success.main'>\n                                    {`Expire ${dayjs.unix(decodedJWT.payload.exp).fromNow()}`}\n                                </Box>\n                            ) : 'Generate or provide an internal API Key'}\n                            margin='normal'\n                            variant='outlined'\n                            name='internal'\n                            multiline\n                            rows={4}\n                            onChange={(e) => setAPIKey(e.target.value)}\n                            disabled={isAPIRetired}\n                        />\n                        <Button\n                            onClick={generateInternalKey}\n                            variant='contained'\n                            color='primary'\n                            disabled={tasksStatus.generateKey.inProgress || isAPIRetired}\n                        >\n                            <FormattedMessage\n                                id='Apis.Details.ApiConsole.generate.test.key'\n                                defaultMessage='Generate Key'\n                            />\n                        </Button>\n                        {tasksStatus.generateKey.inProgress\n                            && (\n                                <Box\n                                    display='inline'\n                                    position='absolute'\n                                    mt={1}\n                                    ml={-8}\n                                >\n                                    <CircularProgress size={24} />\n                                </Box>\n                            )}\n                    </Grid>\n                </Box>\n                <Box my={3} display='flex' justifyContent='center'>\n                    <Grid xs={11} md={6} item>\n                        {(tasksStatus.getDeployments.completed && !deployments.length && !isAPIRetired) && (\n                            <Alert variant='outlined' severity='error'>\n                                <FormattedMessage\n                                    id='Apis.Details.ApiConsole.deployments.no'\n                                    defaultMessage={'{artifactType} is not deployed yet! Please deploy '\n                                    + 'the {artifactType} before trying out'}\n                                    values={{ artifactType: api.isRevision ? 'Revision' : 'API' }}\n                                />\n                                <Link to={'/apis/' + api.id + '/deployments'}>\n                                    <LaunchIcon\n                                        color='primary'\n                                        fontSize='small'\n                                    />\n                                </Link>\n                            </Alert>\n                        )}\n                        {isAPIRetired && (\n                            <Alert variant='outlined' severity='error'>\n                                <FormattedMessage\n                                    id='Apis.Details.ApiConsole.deployments.isAPIRetired'\n                                    defaultMessage='Can not Try Out retired APIs!'\n                                />\n                            </Alert>\n                        )}\n                        {((deployments && deployments.length > 0))\n                            && (\n                                <>\n                                    <Typography\n                                        variant='h5'\n                                        color='textPrimary'\n                                    >\n                                        <FormattedMessage\n                                            id='Apis.Details.ApiConsole.deployments.api.gateways'\n                                            defaultMessage='API Gateways'\n                                        />\n                                    </Typography>\n                                    <TextField\n                                        fullWidth\n                                        select\n                                        label={(\n                                            <FormattedMessage\n                                                defaultMessage='Environment'\n                                                id='Apis.Details.ApiConsole.environment'\n                                            />\n                                        )}\n                                        value={(selectedDeployment && selectedDeployment.name) || ''}\n                                        name='selectedEnvironment'\n                                        onChange={deploymentSelectionHandler}\n                                        margin='normal'\n                                        variant='outlined'\n                                        SelectProps={{\n                                            MenuProps: {\n                                                anchorOrigin: {\n                                                    vertical: 'bottom',\n                                                    horizontal: 'left',\n                                                },\n                                                getContentAnchorEl: null,\n                                            },\n                                        }}\n                                    >\n                                        {deployments.map((deployment) => (\n                                            <MenuItem\n                                                value={deployment.name}\n                                                key={deployment.name}\n                                            >\n                                                {deployment.displayName}\n                                            </MenuItem>\n                                        ))}\n                                    </TextField>\n                                </>\n                            )}\n                    </Grid>\n                </Box>\n                {updatedOasDefinition ? (\n                    <SwaggerUI\n                        api={api}\n                        accessTokenProvider={() => apiKey}\n                        spec={updatedOasDefinition}\n                        authorizationHeader='Internal-Key'\n                    />\n                ) : <CircularProgress />}\n            </Paper>\n        </>\n    );\n};\nTryOutConsole.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        titleSub: PropTypes.string.isRequired,\n        grid: PropTypes.string.isRequired,\n        userNotificationPaper: PropTypes.string.isRequired,\n        buttonIcon: PropTypes.string.isRequired,\n        lcState: PropTypes.shape({}).isRequired,\n        theme: PropTypes.shape({}).isRequired,\n        intl: PropTypes.shape({\n            formatMessage: PropTypes.func,\n        }).isRequired,\n    }).isRequired,\n};\n\nexport default TryOutConsole;\n","/*\n * Copyright (c), WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport 'swagger-ui-react/swagger-ui.css';\nimport './swagger-ui-overrides.css';\nimport SwaggerUILib from 'swagger-ui-react';\n\nconst disableAuthorizeAndInfoPlugin = function () {\n    return {\n        wrapComponents: {\n            info: () => () => null,\n            authorizeBtn: () => () => null,\n        },\n    };\n};\n/**\n *\n * @class SwaggerUI\n * @extends {Component}\n */\nconst SwaggerUI = (props) => {\n    const {\n        spec, accessTokenProvider, authorizationHeader, api,\n    } = props;\n    const componentProps = {\n        spec,\n        validatorUrl: null,\n        defaultModelsExpandDepth: -1,\n        docExpansion: 'list',\n        requestInterceptor: (req) => {\n            const { url } = req;\n            const { context } = api;\n            const patternToCheck = `${context}/*`;\n            const accessToken = accessTokenProvider();\n            if (accessToken) {\n                req.headers[authorizationHeader] = accessToken;\n            }\n            if (url.endsWith(patternToCheck)) {\n                req.url = url.substring(0, url.length - 2);\n            } else if (url.includes(patternToCheck + '?')) { // Check for query parameters.\n                const splitTokens = url.split('/*?');\n                req.url = splitTokens.length > 1 ? splitTokens[0] + '?' + splitTokens[1] : splitTokens[0];\n            }\n            return req;\n        },\n        defaultModelExpandDepth: -1,\n        plugins: [disableAuthorizeAndInfoPlugin],\n    };\n    return <SwaggerUILib {...componentProps} />;\n};\n\nSwaggerUI.propTypes = {\n    accessTokenProvider: PropTypes.func.isRequired,\n    authorizationHeader: PropTypes.string.isRequired,\n    api: PropTypes.shape({\n        context: PropTypes.string.isRequired,\n    }).isRequired,\n    spec: PropTypes.string.isRequired,\n};\nexport default SwaggerUI;\n","import api from \"!../../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../../../node_modules/css-loader/dist/cjs.js!./swagger-ui-overrides.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".swagger-ui {\\n    width: 80vw\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./source/src/app/components/Apis/Details/TryOut/swagger-ui-overrides.css\"],\"names\":[],\"mappings\":\"AAAA;IACI;AACJ\",\"sourcesContent\":[\".swagger-ui {\\n    width: 80vw\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Icon from '@material-ui/core/Icon';\nimport { amber } from '@material-ui/core/colors';\nimport VerticalDivider from './VerticalDivider';\n\nconst styles = (theme) => ({\n    root: {\n        display: 'flex',\n        alignItems: 'center',\n        paddingLeft: theme.spacing(2),\n        borderRadius: theme.shape.borderRadius,\n        border: 'solid 1px ' + theme.palette.primary.main,\n        '& span.material-icons.info': {\n            fontSize: 80,\n            color: theme.palette.primary.main,\n        },\n        '& span.material-icons.warning': {\n            fontSize: 80,\n            color: amber[700],\n        },\n    },\n    button: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n    },\n    content: {\n        paddingTop: theme.spacing(1),\n        paddingBottom: theme.spacing(1),\n        paddingRight: theme.spacing(1),\n    },\n});\n\n/**\n *\n *\n * @class InlineMessage\n * @extends {React.Component}\n */\nclass InlineMessage extends React.Component {\n    handleExpandClick = () => {\n        this.setState((state) => ({ expanded: !state.expanded }));\n    };\n\n    /**\n     *\n     *\n     * @returns\n     * @memberof InlineMessage\n     * @inheritdoc\n     */\n    render() {\n        const {\n            classes, height, type, children,\n        } = this.props;\n        return (\n            <Paper className={classes.root} {...this.props}>\n                <Icon className={type}>{type}</Icon>\n                <VerticalDivider height={height} />\n                <div className={classes.content}>{children}</div>\n            </Paper>\n        );\n    }\n}\n\nInlineMessage.propTypes = {\n    classes: PropTypes.shape({\n        root: PropTypes.string,\n        iconItem: PropTypes.string,\n        content: PropTypes.string,\n    }).isRequired,\n    height: PropTypes.number,\n    type: PropTypes.string,\n    children: PropTypes.shape({}).isRequired,\n};\nInlineMessage.defaultProps = {\n    height: 100,\n    type: 'info',\n};\nexport default withStyles(styles)(InlineMessage);\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\n\nconst options = ['Save and deploy', 'Save'];\n\n/**\n *\n * @returns\n */\nexport default function CustomSplitButton(props) {\n    const [open, setOpen] = React.useState(false);\n    const { handleSave, handleSaveAndDeploy, isUpdating } = props;\n    const anchorRef = React.useRef(null);\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\n\n    const handleClick = (event, index) => {\n        setSelectedIndex(index);\n        setOpen(false);\n        if (`${options[index]}` === 'Save') {\n            handleSave();\n        } else {\n            handleSaveAndDeploy();\n        }\n    };\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen);\n    };\n\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    return (\n        <Grid container direction='column' alignItems='center'>\n            <Grid item xs={12}>\n                <ButtonGroup\n                    variant='contained'\n                    color='primary'\n                    ref={anchorRef}\n                    aria-label='split button'\n                    disabled={isUpdating}\n                    style={{ width: '200px' }}\n                >\n                    <Button\n                        onClick={(event) => handleClick(event, selectedIndex)}\n                        disabled={isUpdating}\n                        style={{ width: '200px' }}\n                    >\n                        {options[selectedIndex]}\n                        {isUpdating && <CircularProgress size={24} />}\n                    </Button>\n                    <Button\n                        color='primary'\n                        size='small'\n                        aria-controls={open ? 'split-button-menu' : undefined}\n                        aria-expanded={open ? 'true' : undefined}\n                        aria-label='select merge strategy'\n                        aria-haspopup='menu'\n                        onClick={handleToggle}\n                    >\n                        <ArrowDropDownIcon />\n                    </Button>\n                </ButtonGroup>\n                <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n                    {({ TransitionProps, placement }) => (\n                        <Grow\n                            {...TransitionProps}\n                            style={{\n                                transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\n                            }}\n                        >\n                            <Paper>\n                                <ClickAwayListener onClickAway={handleClose}>\n                                    <MenuList id='split-button-menu'>\n                                        {options.map((option, index) => (\n                                            <MenuItem\n                                                key={option}\n                                                selected={index === selectedIndex}\n                                                onClick={(event) => handleClick(event, index)}\n                                            >\n                                                {option}\n                                            </MenuItem>\n                                        ))}\n                                    </MenuList>\n                                </ClickAwayListener>\n                            </Paper>\n                        </Grow>\n                    )}\n                </Popper>\n            </Grid>\n        </Grid>\n    );\n}\n\nCustomSplitButton.propTypes = {\n    handleSave: PropTypes.shape({}).isRequired,\n    handleSaveAndDeploy: PropTypes.shape({}).isRequired,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nconst VERSIONS = {\n    V3: ['3.0.0', '3.0.1', '3.0.2'],\n    V2: ['2.0'],\n};\n/**\n *\n *\n * @param {*} apiProduct\n */\nfunction getAPIProductTaggedOperations(apiProduct, openAPI) {\n    const taggedOperations = { Default: [] };\n    apiProduct.apis.map((apiOperations) => {\n        return apiOperations.operations.map((operation) => {\n            const { target, verb } = operation;\n            // TODO: WARN! `toLowerCase` could cause a case sensitive issues\n            // in `verb` if definition has mixed case verbs\n            const openAPIOperation = openAPI.paths[target] && openAPI.paths[target][verb.toLowerCase()];\n            if (!openAPIOperation) {\n                console.warn(`Could not find target = ${target} `\n                        + `verb (lower cased) = ${verb.toLowerCase()} operation in OpenAPI definition`);\n                // Skipping not found operations\n                return null;\n            }\n            const operationInfo = { spec: openAPIOperation, ...operation };\n\n            if (!taggedOperations[apiOperations.name]) {\n                taggedOperations[apiOperations.name] = [];\n            }\n            taggedOperations[apiOperations.name].push(operationInfo);\n            return operationInfo;\n        });\n    });\n    return taggedOperations;\n}\n\n/**\n *\n *\n */\nfunction getTaggedOperations(api, openAPI) {\n    const taggedOperations = { Default: [] };\n    if (api.isAPIProduct()) {\n        return getAPIProductTaggedOperations(api, openAPI);\n    } else {\n        api.operations.map((apiOperation) => {\n            const { target, verb } = apiOperation;\n            // TODO: WARN! `toLowerCase` could cause a case sensitive\n            // issues in `verb` if definition has mixed case verbs\n            const openAPIOperation = openAPI.paths[target] && openAPI.paths[target][verb.toLowerCase()];\n            if (!openAPIOperation) {\n                console.warn(`Could not find target = ${target} `\n                        + `verb (lower cased) = ${verb.toLowerCase()} operation in OpenAPI definition`);\n                // Skipping not found operations\n                return null;\n            }\n            const operationInfo = { spec: openAPIOperation, ...apiOperation };\n            if (openAPIOperation.tags) {\n                openAPIOperation.tags.map((tag) => {\n                    if (!taggedOperations[tag]) {\n                        taggedOperations[tag] = [];\n                    }\n                    taggedOperations[tag].push(operationInfo);\n                    return operationInfo; // Just to satisfy an es-lint rule or could use `for ... of ...`\n                });\n            } else {\n                taggedOperations.Default.push(operationInfo);\n            }\n            return operationInfo; // Just to satisfy an es-lint rule or could use `for ... of ...`\n        });\n        return taggedOperations;\n    }\n}\n\n/**\n * Return the definition version given the parsed spec object\n *\n * @param {SwaggerObject} spec\n * @returns {String} version\n */\nfunction getVersion(spec) {\n    return spec.openapi || spec.swagger;\n}\n/**\n *Extract the path parameters from URI template. User has to give the Open API spec version as well\n * https://github.com/OAI/OpenAPI-Specification/tree/master/versions\n * @param {String} target URI template\n * @param {String} openAPIVersion Should be a valid Open API specification version (i:e \"2.0\", \"3.0.0\")\n * @returns {Array} List of parameter objects according to the given spec version\n */\nfunction extractPathParameters(target, spec) {\n    const regEx = /[^{}]+(?=})/g;\n    const params = target.match(regEx) || [];\n    let parameters = [];\n    const openAPIVersion = getVersion(spec);\n    if (VERSIONS.V3.includes(openAPIVersion)) {\n        parameters = params.map((para) => {\n            const paraObj = {};\n            paraObj.name = para;\n            paraObj.in = 'path';\n            paraObj.required = true;\n            paraObj.schema = {\n                type: 'string',\n                format: 'string',\n            };\n            return paraObj;\n        });\n    } else if (VERSIONS.V2.includes(openAPIVersion)) {\n        parameters = params.map((para) => {\n            const paraObj = {};\n            paraObj.name = para;\n            paraObj.in = 'path';\n            paraObj.required = true;\n            paraObj.type = 'string';\n            paraObj.format = 'string';\n            return paraObj;\n        });\n    }\n\n    return parameters;\n}\n\n/**\n * Extract AsyncAPI path parameters from the channel name.\n * @param {*} target\n */\nfunction extractAsyncAPIPathParameters(target) {\n    const regEx = /[^{}]+(?=})/g;\n    const params = target.match(regEx) || [];\n    const parameters = { };\n    params.forEach((param) => {\n        parameters[param] = {\n            description: '',\n            schema: {\n                type: 'string',\n            },\n        };\n    });\n    return parameters;\n}\n\n/**\n *\n * Return the WSO2 specific scopes array (currently only use the first element of the array)\n * @param {*} operation\n * @param {*} openAPIVersion\n * @returns {Array} Scopes of the `default` security scheme\n */\nfunction getOperationScopes(operation, spec) {\n    const openAPIVersion = getVersion(spec);\n    let scopes = [];\n    if (VERSIONS.V3.includes(openAPIVersion)) {\n        if (Array.isArray(operation.security) && operation.security.find((item) => item.default)) {\n            scopes = operation.security.find((item) => item.default).default;\n        } else if (operation['x-scope']) {\n            scopes = [operation['x-scope']];\n        }\n    } else if (VERSIONS.V2.includes(openAPIVersion)) {\n        if (Array.isArray(operation.security) && operation.security.find((item) => item.default)) {\n            scopes = operation.security.find((item) => item.default).default;\n        } else if (operation['x-scope']) {\n            scopes = [operation['x-scope']];\n        }\n    }\n    return scopes;\n}\n\n/**\n * Return AsyncAPI operation scopes array.\n * @param {*} operation\n * @param {*} spec\n */\nfunction getAsyncAPIOperationScopes(operation) {\n    const scopes = [];\n    if (operation['x-scopes']) {\n        // eslint-disable-next-line no-unused-vars\n        Object.entries(operation['x-scopes']).forEach(([k, v]) => {\n            scopes.push(v);\n        });\n    }\n    return scopes;\n}\n\n/**\n * Map the api.operations array to swagger paths like object\n * @param {Array} operations Operations in API DTO\n * @returns {Object} Mapped operations object\n */\nfunction mapAPIOperations(operations) {\n    const temp = {};\n    for (const operation of operations) {\n        const { target, verb, ...rest } = operation;\n        if (!temp[target]) {\n            temp[target] = {\n                [verb]: rest,\n            };\n        } else {\n            temp[target][verb] = rest;\n        }\n    }\n    return temp;\n}\n\n/**\n *\n *\n * @param {*} selectedOperations\n * @param {*} operations\n * @returns\n */\nfunction isSelectAll(selectedOperations, operations) {\n    for (const path in operations) {\n        if (Object.prototype.hasOwnProperty.call(operations, path)) {\n            const verbs = operations[path];\n            if (\n                !selectedOperations[path]\n                || Object.keys(selectedOperations[path]).length !== Object.keys(verbs).length\n            ) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\n/**\n * Check whether the provided object is a Ref object.\n *\n * @param {object} content : The object that needs to be checked.\n * @return {boolean} true if Ref, false otherwise.\n * */\nfunction isRef(content) {\n    let isReference = false;\n    if (typeof content === 'object') {\n        Object.keys(content).map((name) => {\n            isReference = name === '$ref';\n            return name;\n        });\n    }\n    return isReference;\n}\n\nexport {\n    mapAPIOperations,\n    getTaggedOperations,\n    getAPIProductTaggedOperations,\n    extractPathParameters,\n    extractAsyncAPIPathParameters,\n    getOperationScopes,\n    getAsyncAPIOperationScopes,\n    isSelectAll,\n    getVersion,\n    VERSIONS,\n    isRef,\n};\n","/*\n * Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState } from 'react';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport { updateUserLocalStorage, getUserLocalStorage } from 'AppData/UserStateUtils';\n\nconst WrappedExpansionPanel = (props) => {\n    const { id } = props;\n    const [expanded, setExpanded] = useState(getUserLocalStorage(`${id}-expanded`));\n    const setExpandState = (event, expandedState) => {\n        updateUserLocalStorage(`${id}-expanded`, expandedState);\n        setExpanded(expandedState);\n    };\n    return (<ExpansionPanel expanded={expanded} {...props} onChange={setExpandState} />);\n};\nWrappedExpansionPanel.muiName = 'ExpansionPanel';\n\nexport default WrappedExpansionPanel;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// Check this file for more info  <CARBON_APIMGT>/components/apimgt/org.wso2.carbon.apimgt.impl\n// /src/main/java/org/wso2/carbon/apimgt/impl/APIConstants.java\n\nconst DEFAULT_API_SECURITY_OAUTH2 = 'oauth2';\nconst API_SECURITY_BASIC_AUTH = 'basic_auth';\nconst API_SECURITY_API_KEY = 'api_key';\nconst API_SECURITY_MUTUAL_SSL = 'mutualssl';\nconst API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY = 'oauth_basic_auth_api_key_mandatory';\nconst API_SECURITY_MUTUAL_SSL_MANDATORY = 'mutualssl_mandatory';\n\nexport {\n    DEFAULT_API_SECURITY_OAUTH2,\n    API_SECURITY_BASIC_AUTH,\n    API_SECURITY_API_KEY,\n    API_SECURITY_MUTUAL_SSL,\n    API_SECURITY_OAUTH_BASIC_AUTH_API_KEY_MANDATORY,\n    API_SECURITY_MUTUAL_SSL_MANDATORY,\n};\n"],"sourceRoot":""}