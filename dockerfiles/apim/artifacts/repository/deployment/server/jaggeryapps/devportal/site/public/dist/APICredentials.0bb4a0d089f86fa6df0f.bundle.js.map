{"version":3,"sources":["webpack:///./source/src/app/components/Shared/ScopeValidation.jsx","webpack:///./source/src/app/data/Validation.jsx","webpack:///./source/src/app/data/Subscription.jsx","webpack:///./node_modules/@material-ui/icons/PlayForWork.js","webpack:///./source/src/app/components/Shared/AppsAndKeys/ImportExternalApp.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/AppConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/KeyConfiguration.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewCurl.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/ViewKeys.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/WaitingForApproval.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenManagerSummary.jsx","webpack:///./source/src/app/components/Shared/AppsAndKeys/TokenManager.jsx","webpack:///./source/src/app/components/Shared/GenericDisplayDialog.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/SubscriptionTableRow.jsx","webpack:///./source/src/app/components/Apis/Details/Credentials/Credentials.jsx"],"names":["resourcePaths","APIS","SINGLE_API","API_SWAGGER","API_WSDL","API_GW_CONFIG","API_THUMBNAIL","API_COPY","API_LC_HISTORY","API_CHANGE_LC","API_LC","API_LC_PENDING_TASK","API_DEF","API_VALIDATE_DEF","API_DOCS","API_DOC","API_DOC_CONTENT","APPLICATIONS","SINGLE_APPLICATION","APPLICATION_GENERATE_KEYS","APPLICATION_GENERATE_KEY_TYPE","EXPORT_APIS","IMPORT_APIS","SUBSCRIPTION","SINGLE_SUBSCRIPTION","SUBSCRIPTIONS","BLOCK_SUBSCRIPTION","UNBLOCK_SUBSCRIPTION","POLICIES","POLICY","ENDPOINTS","ENDPOINT","LABLES","WORKFLOW","SERVICE_DISCOVERY","resourceMethods","POST","PUT","GET","DELETE","ScopeValidation","React","Component","constructor","props","super","this","state","componentDidMount","resourcePath","resourceMethod","hasScope","AuthManager","hasScopes","then","haveScope","setState","render","children","propTypes","PropTypes","node","isRequired","string","definition","number","Joi","integer","url","uri","allow","ipAddress","ip","version","cidr","Subscription","Resource","client","APIClientFactory","getAPIClient","Utils","getEnvironment","label","getSubscriptions","apiId","applicationId","limit","apis","get_subscriptions","getSubscription","subscriptionUUID","get_subscriptions__subscriptionId_","subscriptionId","getMonetizationInvoice","get_subscriptions__subscriptionId__usage","deleteSubscription","delete_subscriptions__subscriptionId_","updateSubscription","throttlingPolicy","status","requestedThrottlingPolicy","subscriptionData","payload","Subscriptions","put_subscriptions__subscriptionId_","requestBody","_interopRequireDefault","Object","defineProperty","exports","value","default","_react","_default","createElement","d","ImportExternalApp","consumerKey","consumerSecret","onChange","isUserOwner","key","provideOAuthKeySecret","importDisabled","intl","useIntl","open","setOpen","useState","handleClose","handleChange","event","Button","variant","color","startIcon","onClick","disabled","defaultMessage","id","Dialog","onClose","aria-labelledby","DialogTitle","DialogContent","Grid","container","spacing","direction","item","xs","TextField","name","formatMessage","e","margin","fullWidth","FormControl","FormHelperText","DialogActions","Typography","shape","func","bool","defaultProps","AppConfiguration","classes","config","previousValue","selectedValue","setSelectedValue","handleAppRequestChange","target","currentTarget","useEffect","TableRow","TableCell","component","scope","className","leftCol","Box","maxWidth","type","multiple","root","removeHelperPadding","select","helperText","tooltip","values","map","MenuItem","Array","isArray","formControl","InputLabel","Select","labelId","displayEmpty","input","Input","renderValue","selected","chips","Chip","chip","Checkbox","checked","indexOf","ListItemText","primary","notFound","instanceOf","any","injectIntl","withStyles","theme","paddingTop","paddingBottom","paddingLeft","width","FormControlOdd","padding","button","marginLeft","quotaHelp","position","checkboxWrapper","display","checkboxWrapperColumn","flexDirection","group","KeyConfiguration","urlCopied","setUrlCopied","callbackHelper","setCallbackHelper","keyManagerConfig","updateKeyRequest","keyRequest","updateHasError","callbackError","selectedGrantTypes","callbackUrl","applicationConfiguration","availableGrantTypes","description","additionalProperties","enableMapOAuthConsumerApps","enableOAuthAppCreation","enableTokenEncryption","enableTokenGeneration","revokeEndpoint","tokenEndpoint","userInfoEndpoint","field","newRequest","cloneDeep","newGrantTypes","keyManager","includes","Validation","validate","error","filter","clonedAdditionalProperties","onCopy","setTimeout","getPreviousValue","isPreviousValueSet","defaultValue","ResourceNotFound","grantTypeDisplayListMap","grantTypes","grantTypeDisplayNameMap","modifiedGrantTypes","forEach","grantType","getGrantTypeDisplayList","Settings","alignItems","Table","table","TableBody","Tooltip","title","placement","iconStyle","text","IconButton","aria-label","iconButton","Icon","keys","FormControlLabel","control","placeholder","length","validating","array","isKeysAvailable","setGenerateEnabled","flexWrap","whiteSpace","cursor","fontSize","titleColumn","fontWeight","keyInfoTable","marginBottom","borderCollapse","borderBottom","useStyles","makeStyles","code","background","palette","grey","flex","command","encodeVisible","textDecoration","contentWrapper","ViewCurl","keyType","bas64Encoded","window","btoa","showReal","setShowReal","tokenCopied","setTokenCopied","applyReal","Fragment","ViewKeys","accessTokenRequest","that","elementName","data","preventDefault","showToken","keyMappingId","selectedTab","applicationPromise","application","regenerateSecret","response","console","log","showSecretGen","secretGenResponse","catch","showCurl","isKeyJWT","isUpdating","generateToken","timeout","scopesSelected","tokenResponse","token","accessToken","tokenScopes","tokenValidityTime","validityTime","Alert1","body","Alert","message","selectedApp","hashEnabled","keyCopied","secretCopied","showCS","copyWrapper","InputProps","readOnly","endAdornment","InputAdornment","handleSecretRegenerate","handleShowHidden","onMouseDown","handleMouseDownGeneric","appId","Application","get","subscriptionScopes","getKeys","componentDidUpdate","prevProps","fullScreen","tokenType","summary","initialToken","initialValidityTime","initialScopes","Loading","csCkKeys","size","accessTokenScopes","validityPeriod","tokenDetails","dialogHead","viewKeyAndSecret","inputWrapper","dialogWrapper","DialogContentText","Tokens","updateAccessTokenRequest","ViewToken","isOauth","ViewSecret","secret","CircularProgress","generateAccessToken","autoFocus","tokenSection","find","a","handleClickOpen","handleClickOpenCurl","gutterBottom","getContrastText","paper","marginTop","marginRight","keyState","states","REJECTED","noKeysRoot","backgroundImage","app","context","custom","overviewPage","keysBackground","height","backgroundPosition","backgroundRepeat","backgroundSize","minHeight","TokenManagerSummary","keyStates","emptyBox","CREATED","WaitingForApproval","keyGrantTypes","supportedGrantTypes","TabPanel","index","other","role","hidden","p","StyledTabs","indicator","justifyContent","backgroundColor","transition","flexContainer","borderLeft","Tabs","TabIndicatorProps","StyledTab","textTransform","typography","fontWeightRegular","pxToRem","opacity","borderRight","Tab","disableRipple","TokenManager","newSelectedTab","keyManagers","selectedKM","x","getDefaultAdditionalProperties","promisedKeyManagers","API","getKeyManagers","promisedGetKeys","Promise","all","responseKeyManagerList","list","enabled","push","selectdKM","mode","selectdKMGrants","validatingState","hasError","str","replace","txt","charAt","toUpperCase","substr","toLowerCase","isLoading","scopes","providedConsumerKey","providedConsumerSecret","COMPLETED","APPROVED","bind","generateKeys","updateKeys","cleanUpKeys","handleOnChangeProvidedOAuth","loadApplication","nextProps","nextKeyType","prevKeyType","confItem","updateSubscriptionData","getKeyManagerIdentifier","newKeys","Map","set","info","finally","applicationKey","provideKeys","getKeyManagerDescription","selectedKMObject","mb","keyTitle","toTitleCase","InlineMessage","dialogContainer","username","getUser","owner","Progress","cleanUpInfoText","cleanUpButton","indicatorColor","textColor","handleTabChange","keymanager","displayName","tabPanel","heading","subTitle","ml","m","enableTokenHashing","setValidating","generateWrapper","warningIcon","kmName","main","keyConfigWrapper","muiFormGroupRoot","appContent","genericDisplayDialog","handleClick","caption","buttonText","subscriptionTableRow","loadInfo","handleSubscriptionDelete","selectedAppId","selectedKeyType","applicationOwner","td","policy","actionColumn","to","CustomIcon","strokeColor","icon","classNames","activeLink","colSpan","selectedWrapper","textAlign","A200","withTheme","Credentials","api","applicationsAvailable","subscriptionRequest","newSubscriptionRequest","throttlingPolicyList","tiers","tierName","expanded","apiType","Api","isSubscribing","subscribe","updateData","history","result","subscribedApplications","user","isOnlyMutualSSL","securityScheme","isOnlyBasicAuth","isPrototypedAPI","lifeCycleStatus","isSetAllorResidentKeyManagers","md","lg","handleExpandClick","titleSub","style","isSubscriptionAvailable","pointerEvents","addLinkWrapper","Paper","elevation","descWrapper","GenericDisplayDialog","goToWizard","generateCredentialWrapper","credentialBoxWrapper","credentialBox","buttonElm","SubscribeToApi","updateSubscriptionRequest","renderSmall","handleSubscribe","subsListTitle","subsListDesc","tableMain","th","SubscriptionTableRow","renderCredentialInfo","contextType","ApiContext","contentAreaWidth","listView","tableBodyEvenBackgrund","tableBodyOddBackgrund","tableHeadBackground","borderTop","expansion","boxShadow","subscribeRoot","A100","appBar","toolbar","subscribeTitle","border","borderRadius"],"mappings":"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","file":"APICredentials.0bb4a0d089f86fa6df0f.bundle.js","sourcesContent":["/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport AuthManager from '../../data/AuthManager';\n\nconst resourcePaths = {\n    APIS: '/apis',\n    SINGLE_API: '/apis/{apiId}',\n    API_SWAGGER: '/apis/{apiId}/swagger',\n    API_WSDL: '/apis/{apiId}/wsdl',\n    API_GW_CONFIG: '/apis/{apiId}/gateway-config',\n    API_THUMBNAIL: '/apis/{apiId}/thumbnail',\n    API_COPY: '/apis/copy-api',\n    API_LC_HISTORY: '/apis/{apiId}/lifecycle-history',\n    API_CHANGE_LC: '/apis/change-lifecycle',\n    API_LC: '/apis/{apiId}/lifecycle',\n    API_LC_PENDING_TASK: '/apis/{apiId}/lifecycle/lifecycle-pending-task',\n    API_DEF: '/apis/import-definition',\n    API_VALIDATE_DEF: '/apis/validate-definition',\n    API_DOCS: '/apis/{apiId}/documents',\n    API_DOC: \"'/apis/{apiId}/documents/{documentId}'\",\n    API_DOC_CONTENT: \"'/apis/{apiId}/documents/{documentId}/content'\",\n    APPLICATIONS: '/applications',\n    SINGLE_APPLICATION: '/applications/{applicationId}',\n    APPLICATION_GENERATE_KEYS: '/applications/{applicationId}/generate-keys',\n    APPLICATION_GENERATE_KEY_TYPE: '/applications/{applicationId}/keys/{keyType}',\n    EXPORT_APIS: '/export/apis',\n    IMPORT_APIS: '/import/apis',\n    SUBSCRIPTION: '/subscriptions',\n    SINGLE_SUBSCRIPTION: '/subscriptions/{subscriptionId}',\n    SUBSCRIPTIONS: '/subscriptions',\n    BLOCK_SUBSCRIPTION: '/subscriptions/block-subscription:',\n    UNBLOCK_SUBSCRIPTION: '/subscriptions/unblock-subscription',\n    POLICIES: \"'/policies/{tierLevel}'\",\n    POLICY: \"'/policies/{tierLevel}/{tierName}'\",\n    ENDPOINTS: '/endpoints',\n    ENDPOINT: '/endpoints/{endpointId}',\n    LABLES: '/labels',\n    WORKFLOW: '/workflows/{workflowReferenceId}',\n    SERVICE_DISCOVERY: '/external-resources/services',\n};\n\nconst resourceMethods = {\n    POST: 'post',\n    PUT: 'put',\n    GET: 'get',\n    DELETE: 'delete',\n};\n\n/**\n * Show element iff user has proper scope for the view/action\n * @class ScopeValidation\n * @extends {React.Component}\n */\nclass ScopeValidation extends React.Component {\n    /**\n     * Creates an instance of ScopeValidation.\n     * @param {any} props @inheritDoc\n     * @memberof ScopeValidation\n     */\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    /**\n     * @inheritDoc\n     * @memberof ScopeValidation\n     */\n    componentDidMount() {\n        const { resourcePath, resourceMethod } = this.props;\n        const hasScope = AuthManager.hasScopes(resourcePath, resourceMethod);\n        if (hasScope) {\n            hasScope.then((haveScope) => {\n                this.setState({ haveScope });\n            });\n        }\n    }\n\n    /**\n     * @inheritDoc\n     * @returns {React.Component} Return react component\n     * @memberof ScopeValidation\n     */\n    render() {\n        const { children } = this.props;\n        if (this.state.haveScope) {\n            return children || null;\n        }\n        return null;\n    }\n}\n\nScopeValidation.propTypes = {\n    children: PropTypes.node.isRequired,\n    resourcePath: PropTypes.string.isRequired,\n    resourceMethod: PropTypes.string.isRequired,\n};\n\nexport {\n    ScopeValidation,\n    resourceMethods,\n    resourcePaths,\n};\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport Joi from '@hapi/joi';\n\nconst definition = {\n    number: Joi.number().integer(),\n    url: Joi.string().uri().allow(''),\n    ipAddress: Joi.string().ip({\n      version: [\n        'ipv4',\n        'ipv6'\n      ],\n      cidr: 'optional'\n    }),\n};\n\nexport default definition;\n","/**\n * Copyright (c) 2018, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\"use strict\";\nimport APIClientFactory from \"./APIClientFactory\";\nimport Resource from \"./Resource\";\nimport Utils from \"./Utils\";\n\n/***\n * Class to expose Subscription {Resource} related operations\n */\n\nexport default class Subscription extends Resource {\n\n    constructor() {\n        super();\n        this.client = new APIClientFactory().getAPIClient(Utils.getEnvironment().label).client;\n    }\n\n    /**\n     * Get all Subscriptions\n     * @param apiId id of the API\n     * @param applicationId id of the application \n     * @param limit subscription count to return\n     * @returns {promise} With all subscription for given applicationId or apiId.\n     */\n    getSubscriptions(apiId, applicationId, limit = 25) {\n        var promise_get = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions(\n                { apiId: apiId, applicationId: applicationId, limit });\n        }\n        );\n        return promise_get;\n    }\n\n    /**\n     * Get a single subscription\n     * @param subscriptionUUID subscription UUID\n     */\n    getSubscription(subscriptionUUID) {\n        var promised_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].get_subscriptions__subscriptionId_(\n                { subscriptionId: subscriptionUUID });\n        }\n        );\n        return promised_subscription;\n    }\n\n    /**\n    * Get pending invoice if available * @param {*} subscriptionUUID\n    */\n    getMonetizationInvoice(subscriptionUUID) {\n        const promiseInvoice = this.client.then(client => {\n            return client.apis['API Monetization'].get_subscriptions__subscriptionId__usage( \n                {\n                    subscriptionId: subscriptionUUID \n                }\n            );\n        });\n        return promiseInvoice;\n    }\n\n    /**\n    * Delete subscription\n    * @param subscriptionId id of the subscription\n    * @returns {promise} With 200 OK.\n    */\n    deleteSubscription(subscriptionId) {\n        const promised_delete_subscription = this.client.then((client) => {\n            return client.apis[\"Subscriptions\"].delete_subscriptions__subscriptionId_(\n                {\n                    subscriptionId: subscriptionId,\n                }\n            );\n        });\n        return promised_delete_subscription;\n    }\n\n   /**\n    * Update subscription\n    * @param subscriptionId id of the subscription\n    * @param throttlingPolicy throttling tier\n    * @returns {promise} With 200 OK.\n    */\n    updateSubscription(applicationId, apiId, subscriptionId, throttlingPolicy, status, requestedThrottlingPolicy) {\n        const promised_update_subscription = this.client.then((client) => {\n        let subscriptionData = null;\n\n            subscriptionData = {\n                applicationId, apiId, subscriptionId, throttlingPolicy: throttlingPolicy, status, requestedThrottlingPolicy\n            };\n\n            const payload = { \n                subscriptionId: subscriptionId,\n            };\n            return client.apis.Subscriptions.put_subscriptions__subscriptionId_(\n                payload,\n                { requestBody: subscriptionData },\n                { 'Content-Type': 'application/json' });\n        });\n        return promised_update_subscription;\n    }\n}\n\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M11 5v5.59H7.5l4.5 4.5 4.5-4.5H13V5h-2zm-5 9c0 3.31 2.69 6 6 6s6-2.69 6-6h-2c0 2.21-1.79 4-4 4s-4-1.79-4-4H6z\"\n}), 'PlayForWork');\n\nexports.default = _default;","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport Typography from '@material-ui/core/Typography';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport PlayForWorkIcon from '@material-ui/icons/PlayForWork';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nfunction ImportExternalApp(props) {\n    const {\n        consumerKey, consumerSecret, onChange, isUserOwner, key, provideOAuthKeySecret, importDisabled,\n    } = props;\n    const intl = useIntl();\n\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n    /**\n     * Handle onChange of provided consumer key and secret\n     *\n     * @param event\n     */\n    function handleChange(event) {\n        if (onChange) {\n            onChange(event);\n        }\n    }\n    return (\n        <>\n            <Button\n                variant=\"outlined\"\n                color=\"secondary\"\n                startIcon={<PlayForWorkIcon />}\n                onClick={handleClickOpen}\n                disabled={importDisabled}\n            >\n                <FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                />\n            </Button>\n            <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\"><FormattedMessage\n                    defaultMessage='Provide Existing OAuth Keys'\n                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth'\n                /></DialogTitle>\n                <DialogContent>\n\n                    <Grid container spacing={3} direction='column'>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-key'\n                                name='providedConsumerKey'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Key',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.key',\n                                })}\n                                value={consumerKey}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl>\n                                <FormHelperText id='consumer-key-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.key.title'\n                                        defaultMessage='Consumer Key of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                            <TextField\n                                id='provided-consumer-secret'\n                                name='providedConsumerSecret'\n                                label={intl.formatMessage({\n                                    defaultMessage: 'Consumer Secret',\n                                    id: 'Shared.AppsAndKeys.ImportExternalApp.consumer.secret',\n                                })}\n                                value={consumerSecret}\n                                onChange={e => handleChange(e)}\n                                margin='normal'\n                                fullWidth\n                                disabled={!isUserOwner}\n                                variant='outlined'\n                            />\n                            <FormControl>\n                                <FormHelperText id='consumer-secret-helper-text'>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ImportExternalApp.consumer.secret.of.application'\n                                        defaultMessage='Consumer Secret of the OAuth application'\n                                    />\n                                </FormHelperText>\n                            </FormControl>\n                        </Grid>\n                    </Grid>\n\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        <FormattedMessage\n                            defaultMessage='Cancel'\n                            id='Shared.AppsAndKeys.ImportExternalApp.cancel'\n                        />\n                    </Button>\n                    <ScopeValidation\n                        resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                        resourceMethod={resourceMethods.POST}\n                    >\n                        {!isUserOwner ? (\n                            <>\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                    disabled={!isUserOwner}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.\n                                                    oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                                <Typography variant='caption'>\n                                    <FormattedMessage\n                                        defaultMessage='Only owner can provide keys'\n                                        id='Shared.AppsAndKeys.ImportExternalApp.key.provide.user.owner'\n                                    />\n                                </Typography>\n                            </>\n                        ) : (\n                                <Button\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => provideOAuthKeySecret()}\n                                >\n                                    {\n                                        key\n                                            ? (\n                                                <FormattedMessage\n                                                    defaultMessage='Update'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.update'\n                                                />\n                                            )\n                                            : (\n                                                <FormattedMessage\n                                                    defaultMessage='Provide'\n                                                    id='Shared.AppsAndKeys.ImportExternalApp.provide.oauth.button.provide'\n                                                />\n                                            )\n                                    }\n                                </Button>\n                            )}\n                    </ScopeValidation>\n                </DialogActions>\n            </Dialog>\n        </>\n    );\n}\nImportExternalApp.propTypes = {\n    intl: PropTypes.shape({}).isRequired,\n    onChange: PropTypes.func.isRequired,\n    consumerKey: PropTypes.string,\n    consumerSecret: PropTypes.string,\n    isUserOwner: PropTypes.string,\n    key: PropTypes.shape({}).isRequired,\n    provideOAuthKeySecret: PropTypes.func.isRequired,\n    importDisabled: PropTypes.bool,\n};\n\nImportExternalApp.defaultProps = {\n    consumerKey: '',\n    consumerSecret: '',\n    isUserOwner: false,\n    importDisabled: false,\n};\n\nexport default ImportExternalApp;\n\n\n\n\n","/*\n * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React, { useState, useEffect } from 'react';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Chip from '@material-ui/core/Chip';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport Box from '@material-ui/core/Box';\n\n\nconst styles = theme => ({\n    FormControl: {\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n    FormControlOdd: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    quotaHelp: {\n        position: 'relative',\n    },\n    checkboxWrapper: {\n        display: 'flex',\n    },\n    checkboxWrapperColumn: {\n        display: 'flex',\n        flexDirection: 'row',\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    removeHelperPadding: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n});\n\n/**\n *\n *\n * @class AppConfiguration\n * @extends {React.Component}\n */\nconst AppConfiguration = (props) => {\n\n    const {\n        classes, config, isUserOwner, previousValue, handleChange,\n    } = props;\n\n    const [selectedValue, setSelectedValue] = useState(previousValue);\n\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleAppRequestChange = (event) => {\n        const { target: currentTarget } = event;\n        setSelectedValue(currentTarget.value);\n        handleChange('additionalProperties', event);\n    }\n    /**\n     * Update the state when new props are available\n     */\n    useEffect(() => {\n        setSelectedValue(previousValue);\n    }, [previousValue])\n    return (\n        <>\n            <TableRow>\n                <TableCell component='th' scope='row' className={classes.leftCol}>\n                    {config.label}\n                </TableCell>\n                <TableCell>\n                    <Box maxWidth={600}>\n                    {config.type === 'select' && config.multiple === false ? (\n                        <TextField\n                            classes={{\n                                root: classes.removeHelperPadding,\n                            }}\n                            fullWidth\n                            id={config.name}\n                            select\n                            label={config.label}\n                            value={selectedValue}\n                            name={config.name}\n                            onChange={e => handleAppRequestChange(e)}\n                            helperText={\n                                <Typography variant='caption'>\n                                    {config.tooltip}\n                                </Typography>\n                            }\n                            margin='dense'\n                            variant='outlined'\n                            disabled={!isUserOwner}\n                        >\n                            {config.values.map(key => (\n                                <MenuItem key={key} value={key}>\n                                    {key}\n                                </MenuItem>\n                            ))}\n                        </TextField>\n                    ) : (config.type === 'select' && config.multiple === true && Array.isArray(selectedValue)) ? (\n                        <>\n                            <FormControl variant=\"outlined\" className={classes.formControl} fullWidth>\n                                <InputLabel id=\"multi-select-label\">{config.label}</InputLabel>\n                                <Select\n                                    labelId=\"multi-select-label\"\n                                    id=\"multi-select-outlined\"\n                                    margin='dense'\n                                    displayEmpty\n                                    name={config.name}\n                                    multiple\n                                    value={selectedValue}\n                                    onChange={e => handleAppRequestChange(e)}\n                                    input={<Input id='multi-select-outlined' />}\n                                    renderValue={selected => (\n                                        <div className={classes.chips}>\n                                            {selected.map(value => (\n                                                <Chip key={value} label={value} className={classes.chip} />\n                                            ))}\n                                        </div>\n                                    )}\n                                    helperText={\n                                        <Typography variant='caption'>\n                                            {config.tooltip}\n                                        </Typography>\n                                    }\n                                    label={config.label}\n                                >\n                                    {config.values.map(key => (\n                                        <MenuItem key={key} value={key}>\n                                            <Checkbox checked={selectedValue.indexOf(key) > -1} />\n                                            <ListItemText primary={key} />\n                                        </MenuItem>\n                                    ))}\n                                </Select>\n                            </FormControl>\n\n\n                            <Typography variant='caption'>\n                                {config.tooltip}\n                            </Typography>\n                        </>\n                    ) : (config.type === 'input') ? (\n                        <TextField\n                            classes={{\n                                root: classes.removeHelperPadding,\n                            }}\n                            fullWidth\n                            id={config.name}\n                            label={config.label}\n                            value={selectedValue}\n                            name={config.name}\n                            onChange={e => handleAppRequestChange(e)}\n                            helperText={\n                                <Typography variant='caption'>\n                                    {config.tooltip}\n                                </Typography>\n                            }\n                            margin='dense'\n                            variant='outlined'\n                            disabled={!isUserOwner}\n                        />\n                    ) : (\n                                    <TextField\n                                        classes={{\n                                            root: classes.removeHelperPadding,\n                                        }}\n                                        fullWidth\n                                        id={config.name}\n                                        label={config.label}\n                                        value={selectedValue}\n                                        name={config.name}\n                                        onChange={e => handleAppRequestChange(e)}\n                                        helperText={\n                                            <Typography variant='caption'>\n                                                {config.tooltip}\n                                            </Typography>\n                                        }\n                                        margin='dense'\n                                        variant='outlined'\n                                        disabled={!isUserOwner}\n                                    />\n                                )}\n                            </Box>\n                </TableCell>\n            </TableRow>\n        </>\n    );\n};\n\nAppConfiguration.defaultProps = {\n    notFound: false,\n};\n\nAppConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    previousValue: PropTypes.any.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    config: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n};\n\nexport default injectIntl(withStyles(styles)(AppConfiguration));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState } from 'react';\nimport Box from '@material-ui/core/Box';\nimport cloneDeep from 'lodash.clonedeep';\nimport { withStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport IconButton from '@material-ui/core/IconButton';\nimport Icon from '@material-ui/core/Icon';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport Settings from 'Settings';\nimport PropTypes from 'prop-types';\nimport ResourceNotFound from 'AppComponents/Base/Errors/ResourceNotFound';\nimport Validation from 'AppData/Validation';\nimport AppConfiguration from './AppConfiguration';\n\nconst styles = (theme) => ({\n    FormControl: {\n        paddingTop: 0,\n        paddingBottom: theme.spacing(2),\n        paddingLeft: 0,\n        width: '100%',\n    },\n    FormControlOdd: {\n        padding: theme.spacing(2),\n        width: '100%',\n    },\n    button: {\n        marginLeft: theme.spacing(1),\n    },\n    quotaHelp: {\n        position: 'relative',\n    },\n    checkboxWrapper: {\n        display: 'flex',\n    },\n    checkboxWrapperColumn: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        flexDirection: 'row',\n        whiteSpace: 'nowrap',\n    },\n    group: {\n        flexDirection: 'row',\n    },\n    removeHelperPadding: {\n        '& p': {\n            margin: '8px 0px',\n        },\n    },\n    iconStyle: {\n        cursor: 'pointer',\n        padding: '0 0 0 10px',\n    },\n    iconButton: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n    titleColumn: {\n        width: 150,\n        fontWeight: 500,\n    },\n    keyInfoTable: {\n        marginBottom: 20,\n        borderCollapse: 'collapse',\n        '& td': {\n            paddingBottom: 5,\n            borderBottom: 'solid 1px #cccc',\n        },\n    },\n    leftCol: {\n        width: 180,\n    },\n});\n/**\n *\n *\n * @class KeyConfiguration\n * @extends {React.Component}\n */\nconst KeyConfiguration = (props) => {\n    const [urlCopied, setUrlCopied] = useState(false);\n    const [callbackHelper, setCallbackHelper] = useState(false);\n    const intl = useIntl();\n    const {\n        classes, notFound, isUserOwner, keyManagerConfig, updateKeyRequest, keyRequest, updateHasError, callbackError,\n    } = props;\n    const {\n        selectedGrantTypes, callbackUrl,\n    } = keyRequest;\n    const {\n        applicationConfiguration, availableGrantTypes, description, additionalProperties,\n        enableMapOAuthConsumerApps, enableOAuthAppCreation, enableTokenEncryption, enableTokenGeneration,\n        id, name, revokeEndpoint, tokenEndpoint, type, userInfoEndpoint,\n    } = keyManagerConfig;\n\n    /**\n     * Get the display names for the supported grant types\n     * @param grantTypes\n     * @param grantTypeDisplayNameMap\n     */\n    const getGrantTypeDisplayList = (grantTypes, grantTypeDisplayNameMap) => {\n        const modifiedGrantTypes = {};\n        grantTypes.forEach((grantType) => {\n            modifiedGrantTypes[grantType] = grantTypeDisplayNameMap[grantType];\n            if (!grantTypeDisplayNameMap[grantType]) {\n                modifiedGrantTypes[grantType] = grantType;\n            }\n        });\n        return modifiedGrantTypes;\n    };\n    const callBackHasErrors = () => {\n        if (callbackUrl === '') {\n            updateHasError(true);\n            setCallbackHelper(intl.formatMessage({\n                defaultMessage: 'Call back URL can not be empty when Implicit or Authorization Code grants are selected.',\n                id: 'Shared.AppsAndKeys.KeyConfCiguration.Invalid.callback.empty.error.text',\n            }));\n        } else if (Validation.url.validate(callbackUrl).error) {\n            updateHasError(true);\n            setCallbackHelper(intl.formatMessage({\n                defaultMessage: 'Invalid URL. Please enter a valid URL.',\n                id: 'Shared.AppsAndKeys.KeyConfCiguration.Invalid.callback.url.error.text',\n            }));\n        } else {\n            setCallbackHelper(false);\n            updateHasError(false);\n        }\n    };\n    /**\n     * This method is used to handle the updating of key generation\n     * request object.\n     * @param {*} field field that should be updated in key request\n     * @param {*} event event fired\n     */\n    const handleChange = (field, event) => {\n        const newRequest = cloneDeep(keyRequest);\n        const { target: currentTarget } = event;\n        let newGrantTypes = [...newRequest.selectedGrantTypes];\n        newRequest.keyManager = name;\n\n        switch (field) {\n            case 'callbackUrl':\n                if (newGrantTypes.includes('implicit') || newGrantTypes.includes('authorization_code')) {\n                    callBackHasErrors();\n                }\n                newRequest.callbackUrl = currentTarget.value;\n                break;\n            case 'grantType':\n                if (currentTarget.checked) {\n                    newGrantTypes = [...newGrantTypes, currentTarget.id];\n                } else {\n                    newGrantTypes = newRequest.selectedGrantTypes.filter((item) => item !== currentTarget.id);\n                    if (currentTarget.id === 'implicit' || currentTarget.id === 'authorization_code') {\n                        newRequest.callbackUrl = '';\n                        setCallbackHelper(false);\n                        updateHasError(false);\n                    }\n                }\n                newRequest.selectedGrantTypes = newGrantTypes;\n                break;\n            case 'additionalProperties':\n                const clonedAdditionalProperties = newRequest.additionalProperties;\n                clonedAdditionalProperties[currentTarget.name] = currentTarget.value;\n                newRequest.additionalProperties = clonedAdditionalProperties;\n                break;\n            default:\n                break;\n        }\n        updateKeyRequest(newRequest);\n    };\n\n    const onCopy = () => {\n        setUrlCopied(true);\n\n        const caller = function () {\n            setUrlCopied(false);\n        };\n        setTimeout(caller, 2000);\n    };\n\n    const getPreviousValue = (config) => {\n        const { additionalProperties } = keyRequest;\n        let isPreviousValueSet;\n        if (config.type == 'input' && !config.multiple) {\n            isPreviousValueSet = !!(additionalProperties && (additionalProperties[config.name]\n                || additionalProperties[config.name] === ''));\n        } else {\n            isPreviousValueSet = !!(additionalProperties && (additionalProperties[config.name]));\n        }\n        let defaultValue = config.default;\n        if (config.multiple && typeof defaultValue === 'string' && defaultValue === '') {\n            defaultValue = [];\n        }\n        return isPreviousValueSet ? additionalProperties[config.name] : defaultValue;\n    };\n    /**\n     *\n     *\n     * @returns {Component}\n     * @memberof KeyConfiguration\n     */\n\n    if (notFound) {\n        return <ResourceNotFound />;\n    }\n    const grantTypeDisplayListMap = getGrantTypeDisplayList(\n        availableGrantTypes,\n        Settings.grantTypes,\n    );\n\n    // Check for additional properties for token endpoint and revoke endpoints.\n    return (\n        <>\n            <Box display='flex' alignItems='center'>\n                <Table className={classes.table}>\n                    <TableBody>\n                        {(tokenEndpoint && tokenEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='Token Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.token.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {tokenEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={tokenEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {(revokeEndpoint && revokeEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='Revoke Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.revoke.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {revokeEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={revokeEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        {(userInfoEndpoint && userInfoEndpoint !== '') && (\n                            <TableRow>\n                                <TableCell component='th' scope='row' className={classes.leftCol}>\n                                    <FormattedMessage\n                                        defaultMessage='User Info Endpoint'\n                                        id='Shared.AppsAndKeys.KeyConfiguration.userinfo.endpoint.label'\n                                    />\n                                </TableCell>\n                                <TableCell>\n                                    {userInfoEndpoint}\n                                    <Tooltip\n                                        title={\n                                            urlCopied\n                                                ? intl.formatMessage({\n                                                    defaultMessage: 'Copied',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copied',\n                                                })\n                                                : intl.formatMessage({\n                                                    defaultMessage: 'Copy to clipboard',\n                                                    id: 'Shared.AppsAndKeys.KeyConfiguration.copy.to.clipboard',\n                                                })\n                                        }\n                                        placement='right'\n                                        className={classes.iconStyle}\n                                    >\n                                        <CopyToClipboard\n                                            text={userInfoEndpoint}\n                                            onCopy={onCopy}\n                                        >\n                                            <IconButton\n                                                aria-label='Copy to clipboard'\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <Icon color='secondary'>file_copy</Icon>\n                                            </IconButton>\n                                        </CopyToClipboard>\n                                    </Tooltip>\n                                </TableCell>\n                            </TableRow>\n                        )}\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.KeyConfiguration.grant.types'\n                                    defaultMessage='Grant Types'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <div className={classes.checkboxWrapperColumn}>\n                                    {Object.keys(grantTypeDisplayListMap).map((key) => {\n                                        const value = grantTypeDisplayListMap[key];\n                                        return (\n                                            <FormControlLabel\n                                                control={(\n                                                    <Checkbox\n                                                        id={key}\n                                                        checked={!!(selectedGrantTypes\n                                                                && selectedGrantTypes.includes(key))}\n                                                        onChange={(e) => handleChange('grantType', e)}\n                                                        value={value}\n                                                        disabled={!isUserOwner}\n                                                        color='primary'\n                                                    />\n                                                )}\n                                                label={value}\n                                                key={key}\n                                            />\n                                        );\n                                    })}\n                                </div>\n                                <FormHelperText>\n                                    <FormattedMessage\n                                        defaultMessage={`The application can use the following grant types to generate \n                            Access Tokens. Based on the application requirement,you can enable or disable \n                            grant types for this application.`}\n                                        id='Shared.AppsAndKeys.KeyConfiguration.the.application.can'\n                                    />\n                                </FormHelperText>\n\n                            </TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell component='th' scope='row' className={classes.leftCol}>\n                                <FormattedMessage\n                                    defaultMessage='Callback URL'\n                                    id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                />\n\n                            </TableCell>\n                            <TableCell>\n                                <Box maxWidth={600}>\n                                    <TextField\n                                        margin='dense'\n                                        id='callbackURL'\n                                        label={(\n                                            <FormattedMessage\n                                                defaultMessage='Callback URL'\n                                                id='Shared.AppsAndKeys.KeyConfiguration.callback.url.label'\n                                            />\n                                        )}\n                                        value={callbackUrl}\n                                        name='callbackURL'\n                                        onChange={(e) => handleChange('callbackUrl', e)}\n                                        helperText={callbackHelper || (\n                                            <FormattedMessage\n                                                defaultMessage={`Callback URL is a redirection URI in the client\n                            application which is used by the authorization server to send the\n                            client's user-agent (usually web browser) back after granting access.`}\n                                                id='Shared.AppsAndKeys.KeyConfCiguration.callback.url.helper.text'\n                                            />\n                                        )}\n                                        variant='outlined'\n                                        disabled={!isUserOwner\n                                            || (selectedGrantTypes && !selectedGrantTypes.includes('authorization_code')\n                                                && !selectedGrantTypes.includes('implicit'))}\n                                        error={callbackError}\n                                        placeholder={intl.formatMessage({\n                                            defaultMessage: 'http://url-to-webapp',\n                                            id: 'Shared.AppsAndKeys.KeyConfiguration.url.to.webapp',\n                                        })}\n                                        fullWidth\n                                    />\n                                </Box>\n                            </TableCell>\n                        </TableRow>\n                        {applicationConfiguration.length > 0 && applicationConfiguration.map((config) => (\n                            <AppConfiguration\n                                config={config}\n                                previousValue={getPreviousValue(config)}\n                                isUserOwner={isUserOwner}\n                                handleChange={handleChange}\n                            />\n                        ))}\n                    </TableBody>\n                </Table>\n            </Box>\n        </>\n    );\n};\nKeyConfiguration.defaultProps = {\n    notFound: false,\n    validating: false,\n};\nKeyConfiguration.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    keyRequest: PropTypes.shape({\n        callbackUrl: PropTypes.string,\n        selectedGrantTypes: PropTypes.array,\n    }).isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    isKeysAvailable: PropTypes.bool.isRequired,\n    keyManagerConfig: PropTypes.any.isRequired,\n    notFound: PropTypes.bool,\n    setGenerateEnabled: PropTypes.func.isRequired,\n    updateKeyRequest: PropTypes.func.isRequired,\n    validating: PropTypes.bool,\n};\n\n\nexport default withStyles(styles)(KeyConfiguration);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React, { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport FileCopy from '@material-ui/icons/FileCopy';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nconst useStyles = makeStyles(theme => ({\n    code: {\n        padding: theme.spacing(1),\n        marginBottom: theme.spacing(2),\n        background: theme.palette.grey[200],\n        color: '#da2316',\n        flex: 1,\n    },\n    command: {\n        color: '#2b62b0',\n    },\n    encodeVisible: {\n        cursor: 'pointer',\n        textDecoration: 'underline',\n    },\n    contentWrapper: {\n        display: 'flex',\n    },\n}));\n\n/**\n *\n * @param {*} props\n */\nfunction ViewCurl(props) {\n    const classes = useStyles();\n\n    const {\n        keys: { consumerKey, consumerSecret },\n        intl,\n        keyType,\n        keyManagerConfig,\n    } = props;\n    const bas64Encoded = window.btoa(consumerKey + ':' + consumerSecret);\n    const [showReal, setShowReal] = useState(false);\n    const [tokenCopied, setTokenCopied] = useState(false);\n    const onCopy = () => {\n        setTokenCopied(true);\n        const caller = function () {\n            setTokenCopied(false);\n        };\n        setTimeout(caller, 4000);\n    };\n\n    const applyReal = () => {\n        setShowReal(!showReal);\n    };\n    // Check for additional properties for token endpoint and revoke endpoints.\n    let { tokenEndpoint } = keyManagerConfig;\n    return (\n        <React.Fragment>\n            <Typography>\n                <FormattedMessage\n                    id='Shared.AppsAndKeys.ViewCurl.help'\n                    defaultMessage='The following cURL command shows how to generate an access token using\n                            the Password Grant type.'\n                />\n            </Typography>\n\n            <div className={classes.contentWrapper}>\n                <div className={classes.code}>\n                    <div>\n                        <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                        <span className={classes.command}> -d </span>{' '}\n                        {'\"grant_type=password&username=Username&password=Password\"'}\n                    </div>\n                    <div>\n                        <span className={classes.command}> -H </span>\n                        {'\"Authorization: Basic'}\n                        <a onClick={applyReal} className={classes.encodeVisible}>\n                            {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                        </a>\n                        {'\"'}\n                    </div>\n                </div>\n                <div>\n                    <Tooltip\n                        title={\n                            tokenCopied\n                                ? intl.formatMessage({\n                                    defaultMessage: 'Copied',\n                                    id: 'Shared.AppsAndKeys.ViewCurl.copied',\n                                })\n                                : intl.formatMessage({\n                                    defaultMessage: 'Copy to clipboard',\n                                    id: 'Shared.AppsAndKeys.ViewCurl.copy.to.clipboard',\n                                })\n                        }\n                        placement='right'\n                    >\n                        <CopyToClipboard\n                            text={`curl -k -X POST ${tokenEndpoint} -d ` +\n                                '\"grant_type=password&username=Username&password=Password\" -H ' +\n                                `\"Authorization: Basic ${bas64Encoded}\"`}\n                            onCopy={onCopy}\n                        >\n                            <FileCopy color='secondary' />\n                        </CopyToClipboard>\n                    </Tooltip>\n                </div>\n            </div>\n            <Typography>\n                <FormattedMessage\n                    id='Shared.AppsAndKeys.ViewCurl.help.in.a.similar'\n                    defaultMessage={`In a similar manner, you can generate an access token using the\n                    Client Credentials grant type with the following cURL command.`}\n                />\n            </Typography>\n            <div className={classes.contentWrapper}>\n                <div className={classes.code}>\n                    <div>\n                        <span className={classes.command}>curl -k -X POST </span> {tokenEndpoint}\n                        <span className={classes.command}> -d </span>{' '}\n                        {'\"grant_type=client_credentials\"'}\n                    </div>\n                    <div>\n                        <span className={classes.command}> -H </span>\n                        {'\"Authorization: Basic'}\n                        <a onClick={applyReal} className={classes.encodeVisible}>\n                            {showReal ? ' ' + bas64Encoded : ' Base64(consumer-key:consumer-secret)'}\n                        </a>\n                        {'\"'}\n                    </div>\n                </div>\n                <div>\n                    <Tooltip title={tokenCopied ? 'Copied' : 'Copy to clipboard'} placement='right'>\n                        <CopyToClipboard\n                            text={`curl -k -X POST ${tokenEndpoint} -d ` +\n                                '\"grant_type=client_credentials\" -H' +\n                                `\"Authorization: Basic ${bas64Encoded}\"`}\n                            onCopy={onCopy}\n                        >\n                            <FileCopy color='secondary' />\n                        </CopyToClipboard>\n                    </Tooltip>\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n\nViewCurl.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    keys: PropTypes.shape({}).isRequired,\n    apis: PropTypes.shape({}).isRequired,\n};\n\nexport default injectIntl(ViewCurl);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport Button from '@material-ui/core/Button';\nimport Alert1 from 'AppComponents/Shared/Alert';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport FormControl from '@material-ui/core/FormControl';\nimport Icon from '@material-ui/core/Icon';\nimport Grid from '@material-ui/core/Grid';\nimport CopyToClipboard from 'react-copy-to-clipboard';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Alert from 'AppComponents/Shared/Alert';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport ResourceNotFound from '../../Base/Errors/ResourceNotFound';\nimport Loading from '../../Base/Loading/Loading';\nimport Application from '../../../data/Application';\nimport Tokens from './Tokens';\nimport ViewToken from './ViewToken';\nimport ViewSecret from './ViewSecret';\nimport ViewCurl from './ViewCurl';\n\nconst styles = (theme) => ({\n    button: {\n        margin: theme.spacing(3),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '11px',\n        cursor: 'pointer',\n        '& span': {\n            paddingLeft: 6,\n            display: 'inline-block',\n        },\n    },\n    inputWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        '& span, & h5, & label, & td, & li, & div, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    copyWrapper: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n    },\n    tokenSection: {\n        marginTop: 0,\n        marginBottom: theme.spacing(0.5),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    dialogWrapper: {\n        '& label,& h5, & label, & td, & li, & input, & h2, & p.MuiTypography-root,& p.MuiFormHelperText-root': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    iconButton: {\n        padding: '0 0 0 10px',\n        '& .material-icons': {\n            fontSize: 16,\n        },\n    },\n});\n\n/**\n * Class used to displays in key generation UI\n */\nclass ViewKeys extends React.Component {\n    /**\n     * @param {*} props properties\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp } = this.props;\n        let appId;\n        if (selectedApp) {\n            appId = selectedApp.appId || selectedApp.value;\n        }\n        this.applicationPromise = Application.get(appId);\n        this.state = {\n            showCS: false,\n            open: false,\n            showToken: false,\n            showCurl: false,\n            showSecretGen: false,\n            accessTokenRequest: {\n                timeout: 3600,\n                scopesSelected: [],\n                keyType: '',\n            },\n            subscriptionScopes: [],\n            isUpdating: false,\n        };\n    }\n\n    /**\n     * Fetch Application object by ID coming from URL path params and fetch related keys to display\n     */\n    componentDidMount() {\n        const { accessTokenRequest } = this.state;\n        const { keyType } = this.props;\n        this.applicationPromise\n            .then((application) => {\n                application.getKeys().then(() => {\n                    const newRequest = { ...accessTokenRequest, keyType };\n                    const subscriptionScopes = application.subscriptionScopes\n                        .map((scope) => { return scope.key; });\n                    this.setState({ accessTokenRequest: newRequest, subscriptionScopes });\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     * Adding this here becasue it is not possible to add in the render method becasue isKeyJWT in state is used\n     * to close the dialog box and render method will casue this to be always true and cannot close the box.\n     * Rule is ignored becasue according to react docs its ok to setstate as long as we are checking a condition\n     * This is an ani pattern to be fixed later.\n     *  wso2/product-apim#5293\n     * https://reactjs.org/docs/react-component.html#componentdidupdate\n     * @param {*} prevProps previous props\n     * @memberof ViewKeys\n     */\n    componentDidUpdate(prevProps) {\n        const { isKeyJWT } = this.props;\n        if (isKeyJWT && !prevProps.isKeyJWT) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({ isKeyJWT: true });\n        }\n    }\n\n    /**\n     * Set accesstoken request in state\n     * @param {*} accessTokenRequest access token request object\n     * @memberof ViewKeys\n     */\n    updateAccessTokenRequest = (accessTokenRequest) => {\n        this.setState({ accessTokenRequest });\n    }\n\n    /**\n     * Handle onClick of the copy icon\n     * @param {*} name name of what is copied\n     * */\n    onCopy = (name) => {\n        this.setState({\n            [name]: true,\n        });\n        const that = this;\n        const elementName = name;\n        const caller = () => {\n            that.setState({\n                [elementName]: false,\n            });\n        };\n        setTimeout(caller, 4000);\n    };\n\n    /**\n     * Handle onClick of the show consumer secret icon\n     * @param data\n     * */\n    handleShowHidden = (data) => {\n        this.setState({ [data]: !this.state[data] });\n    };\n\n    /**\n     * Avoid conflict with `onClick`\n     * @param event\n     */\n    handleMouseDownGeneric = (event) => {\n        event.preventDefault();\n    };\n\n    /**\n     * Handle onCLick of generate access token\n     * */\n    handleClickOpen = () => {\n        this.setState({ open: true, showToken: false });\n    };\n\n    /**\n     * Handle onCLick of regenerate consumer secret\n     * */\n    handleSecretRegenerate = (consumerKey, keyType, keyMappingId, selectedTab) => {\n        this.applicationPromise\n            .then((application) => application.regenerateSecret(consumerKey, keyType, keyMappingId, selectedTab))\n            .then((response) => {\n                console.log('consumer secret regenerated successfully ' + response);\n                this.setState({\n                    open: true,\n                    showSecretGen: true,\n                    secretGenResponse: response,\n                });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    };\n\n    /**\n     * Handle onClick of get curl\n     * */\n    handleClickOpenCurl = () => {\n        this.setState({ open: true, showCurl: true });\n    };\n\n    /**\n     * Handle on close of dialog for generating access token and get curl\n     * */\n    handleClose = () => {\n        this.setState({\n            open: false, showCurl: false, isKeyJWT: false, showSecretGen: false,\n        });\n    };\n\n    /**\n     * Generate access token\n     * */\n    generateAccessToken = () => {\n        const { accessTokenRequest, isUpdating } = this.state;\n        const { selectedTab, intl } = this.props;\n        this.setState({ isUpdating: true });\n        this.applicationPromise\n            .then((application) => application.generateToken(\n                selectedTab,\n                accessTokenRequest.keyType,\n                accessTokenRequest.timeout,\n                accessTokenRequest.scopesSelected,\n            ))\n            .then((response) => {\n                console.log('token generated successfully ' + response);\n                this.setState({\n                    showToken: true,\n                    tokenResponse: response,\n                    token: response.accessToken,\n                    tokenScopes: response.tokenScopes,\n                    tokenValidityTime: response.validityTime,\n                });\n                this.setState({ isUpdating: false });\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 400) {\n                    Alert1.error(error.description\n                         || intl.formatMessage({\n                             id: 'Shared.AppsAndKeys.TokenManager.key.generate.bad.request.error',\n                             defaultMessage: 'Error occurred when generating Access Token',\n                         }));\n                }\n                this.setState({ isUpdating: false });\n                const { response } = error;\n                if (response && response.body) {\n                    Alert.error(response.body.message);\n                }\n            });\n    };\n\n    viewKeyAndSecret = (consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner) => {\n        const {\n            classes, intl, selectedApp: { hashEnabled }, keyType,\n        } = this.props;\n        const { keyCopied, secretCopied, showCS } = this.state;\n        return (\n            <>\n                <Grid item xs={6}>\n                    <div className={classes.copyWrapper}>\n                        <TextField\n                            id='consumer-key'\n                            value={consumerKey}\n                            margin='dense'\n                            label={(\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.key'\n                                    defaultMessage='Consumer Key'\n                                />\n                            )}\n                            fullWidth\n                            variant='outlined'\n                            InputProps={{\n                                readOnly: true,\n                                endAdornment: (\n                                    <InputAdornment position='end'>\n                                        <Tooltip\n                                            title={\n                                                keyCopied\n                                                    ? intl.formatMessage({\n                                                        defaultMessage: 'Copied',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copied',\n                                                    })\n                                                    : intl.formatMessage({\n                                                        defaultMessage: 'Copy to clipboard',\n                                                        id: 'Shared.AppsAndKeys.ViewKeys.copy.to',\n                                                    })\n                                            }\n                                            placement='right'\n                                        >\n                                            <CopyToClipboard\n                                                text={consumerKey}\n                                                onCopy={() => this.onCopy('keyCopied')}\n                                                classes={{ root: classes.iconButton }}\n                                            >\n                                                <IconButton aria-label='Copy to clipboard' classes={{ root: classes.iconButton }}>\n                                                    <Icon color='secondary'>\n                                                        file_copy\n                                                    </Icon>\n                                                </IconButton>\n                                            </CopyToClipboard>\n                                        </Tooltip>\n                                    </InputAdornment>\n                                ),\n                            }}\n                        />\n                    </div>\n                    <FormControl>\n                        <FormHelperText id='consumer-key-helper-text'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.ViewKeys.consumer.key.title'\n                                defaultMessage='Consumer Key of the application'\n                            />\n                        </FormHelperText>\n                    </FormControl>\n                </Grid>\n                <Grid item xs={6}>\n                    <div className={classes.copyWrapper}>\n                        {!hashEnabled ? (\n                            <TextField\n                                id='consumer-secret'\n                                label={(\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.secret'\n                                        defaultMessage='Consumer Secret'\n                                    />\n                                )}\n                                type={showCS || !consumerSecret ? 'text' : 'password'}\n                                value={consumerSecret}\n                                margin='dense'\n                                fullWidth\n                                variant='outlined'\n                                InputProps={{\n                                    readOnly: true,\n                                    endAdornment: (\n                                        <InputAdornment position='end'>\n                                            <IconButton\n                                                classes={{ root: classes.iconButton }}\n                                                onClick={() => this.handleShowHidden('showCS')}\n                                                onMouseDown={this.handleMouseDownGeneric}\n                                            >\n                                                {showCS ? <Icon>visibility_off</Icon> : <Icon>visibility</Icon>}\n                                            </IconButton>\n                                            <Tooltip\n                                                title={secretCopied ? 'Copied' : 'Copy to clipboard'}\n                                                placement='right'\n                                            >\n                                                <CopyToClipboard\n                                                    text={consumerSecret}\n                                                    onCopy={() => this.onCopy('secretCopied')}\n                                                    classes={{ root: classes.iconButton }}\n                                                >\n                                                    <IconButton aria-label='Copy to clipboard' classes={{ root: classes.iconButton }}>\n                                                        <Icon color='secondary'>file_copy</Icon>\n                                                    </IconButton>\n                                                </CopyToClipboard>\n                                            </Tooltip>\n                                        </InputAdornment>\n                                    ),\n                                }}\n                            />\n                        ) : (\n                            <Button\n                                variant='contained'\n                                color='primary'\n                                className={classes.button}\n                                onClick={() => this.handleSecretRegenerate(consumerKey, keyType, keyMappingId, selectedTab)}\n                                disabled={!isUserOwner}\n                            >\n                                <FormattedMessage\n                                    defaultMessage='Regenerate Consumer Secret'\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.button.regenerate'\n                                />\n                            </Button>\n                        )}\n                    </div>\n                    {!hashEnabled && (\n                        <FormControl>\n                            <FormHelperText id='consumer-secret-helper-text'>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.consumer.secret.of.application'\n                                    defaultMessage='Consumer Secret of the application'\n                                />\n                            </FormHelperText>\n                        </FormControl>\n                    )}\n                </Grid>\n            </>\n        );\n    }\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const {\n            notFound, showToken, showCurl, showSecretGen, tokenCopied, open,\n            token, tokenScopes, tokenValidityTime, accessTokenRequest, subscriptionScopes,\n            isKeyJWT, tokenResponse, secretGenResponse, isUpdating,\n        } = this.state;\n        const {\n            intl, keyType, classes, fullScreen, keys, selectedApp: { tokenType }, selectedGrantTypes, isUserOwner, summary,\n            selectedTab, hashEnabled, keyManagerConfig, initialToken, initialValidityTime, initialScopes,\n        } = this.props;\n\n        if (notFound) {\n            return <ResourceNotFound />;\n        }\n        if (!keys) {\n            return <Loading />;\n        }\n\n        const csCkKeys = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        const consumerKey = csCkKeys && csCkKeys.consumerKey;\n        const consumerSecret = csCkKeys && csCkKeys.consumerSecret;\n        const keyMappingId = csCkKeys && csCkKeys.keyMappingId;\n\n        let accessToken;\n        let accessTokenScopes;\n        let validityPeriod;\n        let tokenDetails;\n\n        if (token) {\n            accessToken = token;\n            accessTokenScopes = tokenScopes;\n            validityPeriod = tokenValidityTime;\n        } else if (keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType && keys.get(selectedTab).token) {\n            ({ accessToken } = keys.get(selectedTab).token);\n            accessTokenScopes = keys.get(selectedTab).token.tokenScopes;\n            validityPeriod = keys.get(selectedTab).token.validityTime;\n            tokenDetails = keys.get(selectedTab).token;\n            if (tokenDetails && !tokenDetails.accessToken) {\n                tokenDetails.accessToken = initialToken;\n                tokenDetails.validityTime = initialValidityTime;\n                tokenDetails.tokenScopes = initialScopes;\n            }\n        }\n\n        let dialogHead = 'Undefined';\n        if (showCurl) {\n            dialogHead = 'Get CURL to Generate Access Token';\n        } else if (showSecretGen) {\n            dialogHead = 'Generate Consumer Secret';\n        } else {\n            dialogHead = 'Generate Access Token';\n        }\n        if (!consumerKey) {\n            return (\n                <Typography variant='caption' gutterBottom>\n                    {keyType === 'PRODUCTION' ? 'Production ' : 'Sandbox '}\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.ViewKeys.key.secret.title'\n                        defaultMessage='Key and Secret is not generated for this application'\n                    />\n                </Typography>\n            );\n        }\n        if (summary) {\n            return (\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner)}\n                </Grid>\n            );\n        }\n        return consumerKey && (\n            <div className={classes.inputWrapper}>\n                <Grid container spacing={3}>\n                    {this.viewKeyAndSecret(consumerKey, consumerSecret, keyMappingId, selectedTab, isUserOwner)}\n                    <Grid item xs={12}>\n                        <Dialog\n                            fullScreen={fullScreen}\n                            open={(open || isKeyJWT) && selectedGrantTypes.includes('client_credentials')}\n                            onClose={this.handleClose}\n                            aria-labelledby='responsive-dialog-title'\n                            className={classes.dialogWrapper}\n                        >\n                            <DialogTitle id='responsive-dialog-title'>\n                                {dialogHead}\n                            </DialogTitle>\n                            <DialogContent>\n                                {!showCurl && !isKeyJWT && !showSecretGen && (\n                                    <DialogContentText>\n                                        {!showToken && (\n                                            <Tokens\n                                                updateAccessTokenRequest={this.updateAccessTokenRequest}\n                                                accessTokenRequest={accessTokenRequest}\n                                                subscriptionScopes={subscriptionScopes}\n                                            />\n                                        )}\n                                        {showToken && <ViewToken token={{ ...tokenResponse, isOauth: true }} />}\n                                    </DialogContentText>\n                                )}\n                                {showCurl && (\n                                    <DialogContentText>\n                                        <ViewCurl\n                                            keys={{ consumerKey, consumerSecret }}\n                                            keyType={keyType}\n                                            keyManagerConfig={keyManagerConfig}\n                                        />\n                                    </DialogContentText>\n                                )}\n                                {showSecretGen && (\n                                    <DialogContentText>\n                                        <ViewSecret secret={{ ...secretGenResponse }} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} consumerSecret={consumerSecret} />\n                                    </DialogContentText>\n                                )}\n                                {(isKeyJWT && tokenDetails && !hashEnabled) && (\n                                    <DialogContentText>\n                                        <ViewToken token={{ ...tokenDetails, isOauth: true }} />\n                                    </DialogContentText>\n                                )}\n                            </DialogContent>\n                            <DialogActions>\n                                {isUpdating && <CircularProgress size={24} />}\n                                {!showToken && !showCurl && !isKeyJWT && !showSecretGen && (\n                                    <Button onClick={this.generateAccessToken} color='primary' disabled={isUpdating}>\n                                        <FormattedMessage\n                                            id='Shared.AppsAndKeys.ViewKeys.consumer.generate.btn'\n                                            defaultMessage='Generate'\n                                        />\n                                    </Button>\n                                )}\n                                <Button onClick={this.handleClose} color='primary' autoFocus>\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.consumer.close.btn'\n                                        defaultMessage='Close'\n                                    />\n                                </Button>\n                            </DialogActions>\n                        </Dialog>\n                        {!hashEnabled && (\n                            <div className={classes.tokenSection}>\n                                {keyManagerConfig.enableTokenGeneration\n                                    && selectedGrantTypes.find((a) => a.includes('client_credentials'))\n                                    && (\n                                        <Button\n                                            variant='outlined'\n                                            size='small'\n                                            color='primary'\n                                            className={classes.margin}\n                                            onClick={this.handleClickOpen}\n                                            disabled={!selectedGrantTypes.includes('client_credentials')}\n                                        >\n                                            <FormattedMessage\n                                                id='Shared.AppsAndKeys.ViewKeys.generate.access.token'\n                                                defaultMessage='Generate Access Token'\n                                            />\n                                        </Button>\n                                    )}\n                                <Button\n                                    variant='outlined'\n                                    size='small'\n                                    color='primary'\n                                    className={classes.margin}\n                                    onClick={this.handleClickOpenCurl}\n                                >\n                                    <FormattedMessage\n                                        id='Shared.AppsAndKeys.ViewKeys.curl.to.generate'\n                                        defaultMessage='CURL to Generate Access Token'\n                                    />\n                                </Button>\n                            </div>\n                        )}\n                        {!selectedGrantTypes.includes('client_credentials') && !hashEnabled && (\n                            <Typography variant='caption' gutterBottom>\n                                <FormattedMessage\n                                    id='Shared.AppsAndKeys.ViewKeys.client.enable.client.credentials'\n                                    defaultMessage={'Enable Client Credentials grant '\n                                        + 'type to generate test access tokens'}\n                                />\n                            </Typography>\n                        )}\n                    </Grid>\n                </Grid>\n            </div>\n        );\n    }\n}\nViewKeys.defaultProps = {\n    fullScreen: false,\n    summary: false,\n};\nViewKeys.propTypes = {\n    classes: PropTypes.shape({}).isRequired,\n    fullScreen: PropTypes.bool,\n    isKeyJWT: PropTypes.bool.isRequired,\n    isUserOwner: PropTypes.bool.isRequired,\n    summary: PropTypes.bool,\n};\n\nexport default injectIntl(withStyles(styles)(ViewKeys));\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport { injectIntl } from 'react-intl';\n\nconst styles = theme => ({\n    root: {\n        padding: theme.spacing(3),\n    },\n});\n\nconst waitingForApproval = (props) => {\n    const {\n        classes, keyState, states, intl,\n    } = props;\n    let message = intl.formatMessage({\n        defaultMessage: 'A request to register this application has been sent and is pending approval.',\n        id: 'Shared.AppsAndKeys.WaitingForApproval.msg.ok',\n    });\n    if (keyState === states.REJECTED) {\n        message = intl.formatMessage({\n            defaultMessage: 'This application has been rejected from generating keys',\n            id: 'Shared.AppsAndKeys.WaitingForApproval.msg.reject',\n        });\n    }\n    return <div className={classes.root}>{message}</div>;\n};\n\nexport default injectIntl(withStyles(styles)(waitingForApproval));\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { app } from 'Settings';\nimport WaitingForApproval from './WaitingForApproval';\nimport ViewKeys from './ViewKeys';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        padding: theme.spacing(3, 2),\n    },\n    noKeysRoot: {\n        backgroundImage: `url(${app.context + theme.custom.overviewPage.keysBackground})`,\n        height: '100%',\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        minHeight: 192,\n        display: 'flex',\n        alignItems: 'center',\n    },\n}));\n\n/**\n * Render a compressed view of the key gneration view.\n * @param {JSON} props Input params.\n * @returns {JSX} Rendered output.\n */\nexport default function TokenManagerSummary(props) {\n    const classes = useStyles();\n    const { keys, keyStates, key, selectedApp, keyType, isKeyJWT, isUserOwner, selectedTab } = props;\n    if (keys.size > 0 && key && key.keyState === 'APPROVED' && !key.consumerKey) {\n        return (\n            <div className={classes.emptyBox}>\n                <Typography variant=\"h5\" component=\"h3\">\n                    Error\n                </Typography>\n                <Typography variant='body2'>\n                    <FormattedMessage\n                        id='Shared.AppsAndKeys.TokenManagerSummary'\n                        defaultMessage='Error! You have partially-created keys. Use `Clean Up` option.'\n                    />\n                </Typography>\n            </div>\n        );\n    }\n    if (key && (key.keyState === keyStates.CREATED || key.keyState === keyStates.REJECTED)) {\n        return (\n            <div className={classes.emptyBox}>\n                <Typography variant='body2'>\n                    <WaitingForApproval keyState={key.keyState} states={keyStates} />\n                </Typography>\n            </div>\n        );\n    }\n    const keyGrantTypes = key ? key.supportedGrantTypes : [];\n\n    return (\n        <ViewKeys\n            selectedApp={selectedApp}\n            selectedTab={selectedTab}\n            keyType={keyType}\n            keys={keys}\n            isKeyJWT={isKeyJWT}\n            selectedGrantTypes={keyGrantTypes}\n            isUserOwner={isUserOwner}\n            summary\n        />\n    );\n}\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Loading from 'AppComponents/Base/Loading/Loading';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Alert from 'AppComponents/Shared/Alert';\nimport ImportExternalApp from 'AppComponents/Shared/AppsAndKeys/ImportExternalApp';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport API from 'AppData/api';\nimport Validation from 'AppData/Validation';\nimport KeyConfiguration from './KeyConfiguration';\nimport ViewKeys from './ViewKeys';\nimport WaitingForApproval from './WaitingForApproval';\nimport { ScopeValidation, resourceMethods, resourcePaths } from '../ScopeValidation';\nimport TokenMangerSummary from './TokenManagerSummary';\nimport Progress from '../Progress';\n\nconst styles = (theme) => ({\n    root: {\n        padding: theme.spacing(3),\n        '& span, & h6, & label, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n        '& .Mui-disabled span': {\n            color: theme.palette.grey[500],\n        },\n        '& input:disabled': {\n            backgroundColor: theme.palette.grey[100],\n            color: theme.palette.grey[500],\n        },\n        position: 'relative',\n    },\n    button: {\n        marginLeft: 0,\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n    },\n    cleanUpButton: {\n        marginLeft: 15,\n    },\n    cleanUpInfoText: {\n        padding: '10px 0px 10px 15px',\n    },\n    tokenSection: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    margin: {\n        marginRight: theme.spacing(2),\n    },\n    keyConfigWrapper: {\n        flexDirection: 'column',\n        marginBottom: 0,\n    },\n    generateWrapper: {\n        padding: '10px 0px',\n        marginLeft: theme.spacing(1.25),\n    },\n    paper: {\n        background: 'none',\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    muiFormGroupRoot: {\n        flexDirection: 'row',\n    },\n    formControl: {\n    },\n    subTitle: {\n        fontWeight: 400,\n    },\n    tabPanel: {\n        paddingLeft: theme.spacing(2),\n        '& .MuiBox-root': {\n            padding: 0,\n        },\n    },\n    warningIcon: {\n        color: '#ff9a00',\n        fontSize: 20,\n        marginRight: 10,\n    },\n});\n\nfunction TabPanel(props) {\n    const {\n        children, value, index, ...other\n    } = props;\n\n    return (\n        <div\n            role='tabpanel'\n            hidden={value !== index}\n            id={`nav-tabpanel-${index}`}\n            aria-labelledby={`nav-tab-${index}`}\n            {...other}\n        >\n            {value === index && (\n                <Box p={3}>\n                    {children}\n                </Box>\n            )}\n        </div>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired,\n};\n\nconst StyledTabs = withStyles({\n    indicator: {\n        display: 'flex',\n        justifyContent: 'center',\n        backgroundColor: 'transparent',\n        '& > span': {\n            width: '98%',\n            backgroundColor: '#ffffff',\n        },\n        transition: 'none',\n    },\n    flexContainer: {\n        borderBottom: 'solid 1px #666',\n        backgroundColor: '#efefef',\n        '& button:first-child': {\n            borderLeft: 'none',\n        },\n    },\n})((props) => <Tabs {...props} TabIndicatorProps={{ children: <span /> }} />);\n\n\nconst StyledTab = withStyles((theme) => ({\n    root: {\n        textTransform: 'none',\n        color: '#666',\n        fontWeight: theme.typography.fontWeightRegular,\n        fontSize: theme.typography.pxToRem(15),\n        marginRight: theme.spacing(1),\n        '&:focus': {\n            opacity: 1,\n        },\n    },\n    selected: {\n        backgroundColor: '#fff',\n        borderLeft: 'solid 1px #666',\n        borderRight: 'solid 1px #666',\n    },\n}))((props) => <Tab disableRipple {...props} />);\n\n/**\n *  @param {event} event event\n *  @param {String} value description\n */\nclass TokenManager extends React.Component {\n    static contextType = Settings;\n\n    /**\n     *\n     * @param {*} props props\n     */\n    constructor(props) {\n        super(props);\n        const { selectedApp, keyType } = this.props;\n        this.state = {\n            isLoading: false,\n            keys: null,\n            isKeyJWT: false,\n            hasError: false,\n            initialToken: '',\n            initialValidityTime: 0,\n            initialScopes: [],\n            keyRequest: {\n                keyType,\n                selectedGrantTypes: null,\n                callbackUrl: '',\n                additionalProperties: {},\n                keyManager: '',\n                validityTime: 3600,\n                scopes: ['default'],\n            },\n            keyManagers: null,\n            selectedTab: null,\n            providedConsumerKey: '',\n            providedConsumerSecret: '',\n            validating: false,\n            importDisabled: false,\n        };\n        this.keyStates = {\n            COMPLETED: 'COMPLETED',\n            APPROVED: 'APPROVED',\n            CREATED: 'CREATED',\n            REJECTED: 'REJECTED',\n        };\n        if (selectedApp) {\n            this.appId = selectedApp.appId || selectedApp.value;\n            this.application = Application.get(this.appId);\n        }\n        this.updateKeyRequest = this.updateKeyRequest.bind(this);\n        this.generateKeys = this.generateKeys.bind(this);\n        this.updateKeys = this.updateKeys.bind(this);\n        this.cleanUpKeys = this.cleanUpKeys.bind(this);\n        this.handleOnChangeProvidedOAuth = this.handleOnChangeProvidedOAuth.bind(this);\n        this.provideOAuthKeySecret = this.provideOAuthKeySecret.bind(this);\n    }\n\n    /**\n     *\n     *\n     * @memberof TokenManager\n     */\n    componentDidMount() {\n        this.loadApplication();\n    }\n\n    componentDidUpdate(nextProps) {\n        const { keyType: nextKeyType } = nextProps;\n        const { keyType: prevKeyType } = this.props;\n        if (nextKeyType !== prevKeyType) {\n            this.loadApplication();\n        }\n    }\n\n    getDefaultAdditionalProperties(selectedKM) {\n        const { availableGrantTypes, applicationConfiguration } = selectedKM;\n        // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n        const additionalProperties = {};\n\n        applicationConfiguration.forEach((confItem) => {\n            additionalProperties[confItem.name] = confItem.default || '';\n        });\n        return additionalProperties;\n    }\n\n    handleTabChange = (event, newSelectedTab) => {\n        const { keys, keyManagers, keyRequest } = this.state;\n        const { keyType } = this.props;\n        const selectedKM = keyManagers.find((x) => x.name === newSelectedTab);\n        const { availableGrantTypes } = selectedKM;\n\n        if (keys.size > 0 && keys.get(newSelectedTab) && keys.get(newSelectedTab).keyType === keyType) {\n            const { callbackUrl, supportedGrantTypes, additionalProperties } = keys.get(newSelectedTab);\n            const newRequest = {\n                ...keyRequest,\n                callbackUrl,\n                selectedGrantTypes: supportedGrantTypes\n                || availableGrantTypes.filter((type) => (type !== 'authorization_code' && type !== 'implicit')),\n                additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectedKM),\n            };\n            this.setState({ keyRequest: newRequest, selectedTab: newSelectedTab });\n        } else {\n            // Fill the keyRequest.additionalProperties from the selectedKM.applicationConfiguration defaultValues.\n            this.setState({\n                keyRequest: {\n                    ...keyRequest,\n                    selectedGrantTypes: availableGrantTypes.filter((type) => (type !== 'authorization_code' && type !== 'implicit')),\n                    additionalProperties: this.getDefaultAdditionalProperties(selectedKM),\n                },\n                selectedTab: newSelectedTab,\n            });\n        }\n    };\n\n    /**\n     * load application key generation ui\n     */\n    loadApplication = () => {\n        const { keyType } = this.props;\n        if (this.appId) {\n            const api = new API();\n            const promisedKeyManagers = api.getKeyManagers();\n            const promisedGetKeys = this.application\n                .then((application) => application.getKeys(keyType));\n            Promise.all([promisedKeyManagers, promisedGetKeys])\n                .then((response) => {\n                    // processing promisedKeyManagers response\n                    const responseKeyManagerList = [];\n                    response[0].body.list.map((item) => {\n                        if (item.enabled) responseKeyManagerList.push(item);\n                    });\n\n                    if (responseKeyManagerList.length === 0) {\n                        this.setState({ keyManagers: [] });\n                        return;\n                    }\n                    // Selecting a key manager from the list of key managers.\n                    let { selectedTab } = this.state;\n                    if (!selectedTab && responseKeyManagerList.length > 0) {\n                        selectedTab = responseKeyManagerList.find((x) => x.name === 'Resident Key Manager') ? 'Resident Key Manager'\n                            : responseKeyManagerList[0].name;\n                    }\n                    const selectdKM = responseKeyManagerList.find((x) => x.name === selectedTab);\n                    // processing promisedGetKeys response\n                    const keys = response[1];\n                    const { keyRequest } = this.state;\n\n                    if (keys.size > 0 && keys.get(selectedTab) && keys.get(selectedTab).keyType === keyType) {\n                        const { callbackUrl, supportedGrantTypes, additionalProperties, mode } = keys.get(selectedTab);\n                        const newRequest = {\n                            ...keyRequest,\n                            callbackUrl: callbackUrl || '',\n                            selectedGrantTypes: supportedGrantTypes || [],\n                            additionalProperties: additionalProperties || this.getDefaultAdditionalProperties(selectdKM),\n                        };\n                        this.setState({\n                            keys, keyRequest: newRequest, keyManagers: responseKeyManagerList, selectedTab,\n                            importDisabled: mode === 'MAPPED',\n                        });\n                    } else {\n                        const selectdKMGrants = selectdKM.availableGrantTypes || [];\n\n                        this.setState({\n                            keys,\n                            keyRequest: {\n                                ...keyRequest,\n                                selectedGrantTypes: selectdKMGrants.filter((type) => (type !== 'authorization_code' && type !== 'implicit')),\n                                additionalProperties: this.getDefaultAdditionalProperties(selectdKM),\n                            },\n                            keyManagers: responseKeyManagerList,\n                            selectedTab,\n                        });\n                    }\n                })\n                .catch((error) => {\n                    if (process.env.NODE_ENV !== 'production') {\n                        console.error(error);\n                    }\n                    if (error.status === 404) {\n                        this.setState({ notFound: true });\n                    }\n                });\n        }\n    }\n\n    /**\n     * Update keyRequest state\n     * @param {Object} keyRequest parameters requried for key generation request\n     */\n    updateKeyRequest(keyRequest) {\n        this.setState({ keyRequest });\n    }\n\n    /**\n     * Generate keys for application,\n     *\n     * @memberof KeyConfiguration\n     */\n    generateKeys() {\n        const { keyRequest, keys, selectedTab } = this.state;\n        const {\n            keyType, updateSubscriptionData, selectedApp: { tokenType, hashEnabled }, intl,\n        } = this.props;\n\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code'))) {\n            if (keyRequest.callbackUrl === '') {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                    defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n                }));\n                return;\n            } else if (Validation.url.validate(keyRequest.callbackUrl).error) {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.text',\n                    defaultMessage: 'Invalid URL. Please enter a valid URL.',\n                }));\n                return;\n            }\n        }\n        this.setState({ isLoading: true });\n\n        this.application\n            .then((application) => {\n                return application.generateKeys(\n                    keyType, keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    keyRequest.additionalProperties, this.getKeyManagerIdentifier(),\n                );\n            })\n            .then((response) => {\n                if (updateSubscriptionData) {\n                    updateSubscriptionData();\n                }\n                const newKeys = new Map([...keys]);\n                // in case token hashing is enabled, isKeyJWT is set to true even if the token type is JWT.\n                // This is to mimic the behavior of JWT tokens (by showing the token in a dialog)\n                const isKeyJWT = (tokenType === 'JWT') || hashEnabled;\n                newKeys.set(selectedTab, response);\n                const initialToken = response.token ? response.token.accessToken : '';\n                const initialValidityTime = response.token ? response.token.validityTime : 0;\n                const initialScopes = response.token ? response.token.tokenScopes : [];\n                this.setState({ keys: newKeys, isKeyJWT, initialToken, initialValidityTime, initialScopes });\n                if (response.keyState === this.keyStates.CREATED || response.keyState === this.keyStates.REJECTED) {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success.blocked',\n                        defaultMessage: 'Application keys generate request is currently pending approval by the site administrator.',\n                    }));\n                } else {\n                    Alert.info(intl.formatMessage({\n                        id: 'Shared.AppsAndKeys.TokenManager.key.generate.success',\n                        defaultMessage: 'Application keys generated successfully',\n                    }));\n                    this.loadApplication();\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error',\n                    defaultMessage: 'Error occurred when generating application keys',\n                }));\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     *\n     * @memberof KeyConfiguration\n     */\n    updateKeys() {\n        const { keys, keyRequest, selectedTab } = this.state;\n        const { keyType, intl } = this.props;\n        const applicationKey = (keys.get(selectedTab).keyType === keyType) && keys.get(selectedTab);\n        if ((keyRequest.selectedGrantTypes.includes('implicit')\n            || keyRequest.selectedGrantTypes.includes('authorization_code'))) {\n            if (keyRequest.callbackUrl === '') {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.callbackempty',\n                    defaultMessage: 'Callback URL can not be empty when the Implicit or Application Code grant types selected',\n                }));\n                return;\n            } else if (Validation.url.validate(keyRequest.callbackUrl).error) {\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.generate.error.text',\n                    defaultMessage: 'Invalid URL. Please enter a valid URL.',\n                }));\n                return;\n            }\n        }\n        this.setState({ isLoading: true });\n        this.application\n            .then((application) => {\n                return application.updateKeys(\n                    applicationKey.tokenType,\n                    keyType,\n                    keyRequest.selectedGrantTypes,\n                    keyRequest.callbackUrl,\n                    applicationKey.consumerKey,\n                    applicationKey.consumerSecret,\n                    keyRequest.additionalProperties,\n                    selectedTab,\n                    applicationKey.keyMappingId,\n                );\n            })\n            .then((response) => {\n                const newKeys = new Map([...keys]);\n                newKeys.set(selectedTab, response);\n                this.setState({ keys: newKeys });\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.update.success',\n                    defaultMessage: 'Application keys updated successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                } else if (status === 500) {\n                    this.loadApplication();\n                }\n                const { response } = error;\n                if (response && response.body) {\n                    Alert.error(response.body.message);\n                }\n            }).finally(() => this.setState({ isLoading: false }));\n    }\n\n    /**\n     * Cleanup application keys\n     */\n    cleanUpKeys(selectedTab, keyMappingId) {\n        const { keyType, intl } = this.props;\n        this.application\n            .then((application) => {\n                return application.cleanUpKeys(keyType, selectedTab, keyMappingId);\n            })\n            .then(() => {\n                this.loadApplication();\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.success',\n                    defaultMessage: 'Application keys cleaned successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.cleanup.error',\n                    defaultMessage: 'Error occurred while cleaning up application keys',\n                }));\n            });\n    }\n\n    /**\n     * Handle on change of provided consumer key and consumer secret\n     *\n     * @param event onChange event\n     */\n    handleOnChangeProvidedOAuth(event) {\n        this.setState({ [event.target.name]: event.target.value });\n    }\n\n    /**\n     * Provide consumer key and secret of an existing OAuth app to an application\n     */\n    provideOAuthKeySecret() {\n        const { keyType, intl } = this.props;\n        const { providedConsumerKey, providedConsumerSecret, selectedTab } = this.state;\n\n        this.application\n            .then((application) => {\n                return application.provideKeys(keyType, providedConsumerKey, providedConsumerSecret, selectedTab);\n            })\n            .then(() => {\n                this.setState({ providedConsumerKey: '', providedConsumerSecret: '' });\n                Alert.info(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.provide.success',\n                    defaultMessage: 'Application keys provided successfully',\n                }));\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n                Alert.error(intl.formatMessage({\n                    id: 'Shared.AppsAndKeys.TokenManager.key.provide.error',\n                    defaultMessage: 'Error occurred when providing application keys',\n                }));\n            });\n    }\n\n    getKeyManagerDescription() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter((item) => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].description;\n        }\n        return '';\n    }\n\n    getKeyManagerIdentifier() {\n        const { keyManagers, selectedTab } = this.state;\n        const selectedKMObject = keyManagers.filter((item) => item.name === selectedTab);\n        if (selectedKMObject && selectedKMObject.length === 1) {\n            return selectedKMObject[0].id;\n        }\n        return selectedTab;\n    }\n\n    setValidating = (validatingState) => {\n        this.setState({ validating: validatingState });\n    }\n\n    updateHasError = (state) => {\n        this.setState({ hasError: state });\n    }\n\n    toTitleCase = (str) => {\n        return str.replace(\n            /\\w\\S*/g,\n            (txt) => {\n                return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n            },\n        );\n    };\n\n    /**\n     *  @returns {Component}\n     * @memberof Tokenemanager\n     */\n    render() {\n        const {\n            classes, selectedApp, keyType, summary, selectedApp: { hashEnabled },\n        } = this.props;\n        const {\n            keys, keyRequest, isLoading, isKeyJWT, providedConsumerKey,\n            providedConsumerSecret, selectedTab, keyManagers, validating, hasError, initialToken,\n            initialValidityTime, initialScopes, importDisabled,\n        } = this.state;\n        if (keyManagers && keyManagers.length === 0) {\n            return (\n                <div className={classes.root}>\n                    <Box mb={1}>\n                        <Typography variant='h5' className={classes.keyTitle}>\n                            {this.toTitleCase(keyType)}\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.oauth2.keys.main.title'\n                                defaultMessage=' OAuth2 Keys'\n                            />\n                        </Typography>\n                    </Box>\n                    <InlineMessage type='info' className={classes.dialogContainer}>\n                        <Typography variant='h5' component='h3'>\n                            <FormattedMessage id='Shared.AppsAndKeys.TokenManager.no.km' defaultMessage='No Key Managers' />\n                        </Typography>\n                        <Typography component='p'>\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.no.km.content'\n                                defaultMessage='No Key Managers active to generate keys.'\n                            />\n                        </Typography>\n                    </InlineMessage>\n                </div>\n            );\n        }\n        if (!keys || !selectedTab || !keyRequest.selectedGrantTypes) {\n            return <Loading />;\n        }\n        const username = AuthManager.getUser().name;\n        let isUserOwner = false;\n\n        if (selectedApp.owner && username.toLowerCase() === selectedApp.owner.toLowerCase()) {\n            isUserOwner = true;\n        }\n        const key = keys.size > 0 && keys.get(selectedTab) && (keys.get(selectedTab).keyType === keyType) ? keys.get(selectedTab) : null;\n\n        if (summary) {\n            if (keys) {\n                return (\n                    <TokenMangerSummary\n                        keys={keys}\n                        key={key}\n                        keyStates={this.keyStates}\n                        selectedApp={selectedApp}\n                        selectedTab={selectedTab}\n                        keyType={keyType}\n                        isKeyJWT={isKeyJWT}\n                        isUserOwner={isUserOwner}\n                    />\n                );\n            } else {\n                return (<Progress />);\n            }\n        }\n        if (key && key.keyState === 'APPROVED' && !key.consumerKey) {\n            return (\n                <>\n                    <Typography className={classes.cleanUpInfoText} variant='subtitle1'>\n                        <FormattedMessage\n                            id='Shared.AppsAndKeys.TokenManager.cleanup.text'\n                            defaultMessage='Error! You have partially-created keys.\n                            Please click `Clean Up` button and try again.'\n                        />\n                    </Typography>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.cleanUpButton}\n                        onClick={() => this.cleanUpKeys(selectedTab, keys.get(selectedTab).keyMappingId)}\n                    >\n                        <FormattedMessage\n                            defaultMessage='Clean up'\n                            id='Shared.AppsAndKeys.TokenManager.cleanup'\n                        />\n                    </Button>\n                </>\n            );\n        }\n        if (key && (key.keyState === this.keyStates.CREATED || key.keyState === this.keyStates.REJECTED)) {\n            return <WaitingForApproval keyState={key.keyState} states={this.keyStates} />;\n        }\n        return (\n            <>\n                {(keyManagers && keyManagers.length > 1) && (\n                    <StyledTabs\n                        value={selectedTab}\n                        indicatorColor='primary'\n                        textColor='primary'\n                        onChange={this.handleTabChange}\n                        aria-label='key manager tabs'\n                    >\n                        {keyManagers.map((keymanager) => (\n                            <StyledTab\n                                label={keymanager.displayName || keymanager.name}\n                                value={keymanager.name}\n                                disabled={!keymanager.enabled}\n                            />\n                        ))}\n                    </StyledTabs>\n                )}\n                <div className={classes.root}>\n                    <Box mb={1}>\n                        <Typography variant='h5' className={classes.keyTitle}>\n                            {this.toTitleCase(keyType)}\n                            <FormattedMessage\n                                id='Shared.AppsAndKeys.TokenManager.oauth2.keys.main.title'\n                                defaultMessage=' OAuth2 Keys'\n                            />\n                        </Typography>\n                    </Box>\n                    {(keyManagers && keyManagers.length > 0) && keyManagers.map((keymanager) => (\n                        <TabPanel value={selectedTab} index={keymanager.name} className={classes.tabPanel}>\n                            <Box display='flex' flexDirection='row'>\n                                <Typography className={classes.heading} variant='h6' component='h6' className={classes.subTitle}>\n                                    <FormattedMessage\n                                        defaultMessage='Key and Secret'\n                                        id='Shared.AppsAndKeys.TokenManager.key.and.secret'\n                                    />\n                                </Typography>\n                                {\n                                    keymanager.enableMapOAuthConsumerApps && (\n                                        <Box ml={2}>\n                                            <ImportExternalApp\n                                                onChange={this.handleOnChangeProvidedOAuth}\n                                                consumerKey={providedConsumerKey}\n                                                consumerSecret={providedConsumerSecret}\n                                                isUserOwner={isUserOwner}\n                                                key={key}\n                                                provideOAuthKeySecret={this.provideOAuthKeySecret}\n                                                importDisabled={importDisabled}\n                                            />\n                                        </Box>\n                                    )\n                                }\n                            </Box>\n                            <Box m={2}>\n                                <ViewKeys\n                                    initialToken={initialToken}\n                                    initialValidityTime={initialValidityTime}\n                                    initialScopes={initialScopes}\n                                    selectedApp={selectedApp}\n                                    selectedTab={selectedTab}\n                                    keyType={keyType}\n                                    keys={keys}\n                                    isKeyJWT={isKeyJWT}\n                                    selectedGrantTypes={keyRequest.selectedGrantTypes}\n                                    isUserOwner={isUserOwner}\n                                    hashEnabled={keymanager.enableTokenHashing || hashEnabled}\n                                    keyManagerConfig={keymanager}\n                                />\n                            </Box>\n                            <Typography className={classes.heading} variant='h6' component='h6' className={classes.subTitle}>\n                                {\n                                    key\n                                        ? (\n                                            <FormattedMessage\n                                                defaultMessage='Key Configurations'\n                                                id='Shared.AppsAndKeys.TokenManager.update.configuration'\n                                            />\n                                        )\n                                        : (\n                                            <FormattedMessage\n                                                defaultMessage='Key Configuration'\n                                                id='Shared.AppsAndKeys.TokenManager.key.configuration'\n                                            />\n                                        )\n                                }\n                            </Typography>\n                            <Box m={2}>\n                                <KeyConfiguration\n                                    keys={keys}\n                                    key={key}\n                                    selectedApp={selectedApp}\n                                    selectedTab={selectedTab}\n                                    keyType={keyType}\n                                    updateKeyRequest={this.updateKeyRequest}\n                                    keyRequest={keyRequest}\n                                    isUserOwner={isUserOwner}\n                                    isKeysAvailable={key}\n                                    keyManagerConfig={keymanager}\n                                    validating={validating}\n                                    updateHasError={this.updateHasError}\n                                    callbackError={hasError}\n                                    setValidating={this.setValidating}\n                                />\n                                <div className={classes.generateWrapper}>\n                                    <ScopeValidation\n                                        resourcePath={resourcePaths.APPLICATION_GENERATE_KEYS}\n                                        resourceMethod={resourceMethods.POST}\n                                    >\n                                        {!isUserOwner ? (\n                                            <>\n                                                <Button\n                                                    variant='contained'\n                                                    color='primary'\n                                                    className={classes.button}\n                                                    onClick={\n                                                        key ? this.updateKeys : this.generateKeys\n                                                    }\n                                                    disabled={!isUserOwner || isLoading || !keymanager.enableOAuthAppCreation}\n                                                >\n                                                    {key ? 'Update keys' : 'Generate Keys'}\n                                                    {isLoading && <CircularProgress size={20} />}\n                                                </Button>\n                                                <Typography variant='caption'>\n                                                    <FormattedMessage\n                                                        defaultMessage='Only owner can generate or update keys'\n                                                        id='Shared.AppsAndKeys.TokenManager.key.and.user.owner'\n                                                    />\n                                                </Typography>\n                                            </>\n                                        ) : (\n                                            <Box display='flex'>\n                                                <Button\n                                                    variant='contained'\n                                                    color='primary'\n                                                    className={classes.button}\n                                                    onClick={key ? this.updateKeys : this.generateKeys}\n                                                    disabled={hasError || (isLoading || !keymanager.enableOAuthAppCreation) || importDisabled}\n                                                >\n                                                    {key ? 'Update' : 'Generate Keys'}\n                                                    {isLoading && <CircularProgress size={20} />}\n                                                </Button>\n                                                {!keymanager.enableOAuthAppCreation && (\n                                                    <Box m={2} display='flex'>\n                                                        <WarningIcon className={classes.warningIcon} />\n                                                        <Typography variant='body1'>\n                                                            <FormattedMessage\n                                                                defaultMessage='Oauth app creation disabled for {kmName} key manager'\n                                                                id='Shared.AppsAndKeys.TokenManager.app.creation.disable.warn'\n                                                                values={{ kmName: keymanager.displayName || keymanager.name }}\n                                                            />\n                                                        </Typography>\n                                                    </Box>\n                                                )}\n                                            </Box>\n                                        )}\n                                    </ScopeValidation>\n                                </div>\n\n                            </Box>\n                        </TabPanel>\n                    ))}\n                </div>\n            </>\n        );\n    }\n}\nTokenManager.defaultProps = {\n    updateSubscriptionData: () => { },\n    summary: false,\n};\nTokenManager.propTypes = {\n    classes: PropTypes.instanceOf(Object).isRequired,\n    selectedApp: PropTypes.shape({\n        tokenType: PropTypes.string.isRequired,\n        appId: PropTypes.string,\n        value: PropTypes.string,\n        owner: PropTypes.string,\n        hashEnabled: PropTypes.bool,\n    }).isRequired,\n    keyType: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func,\n    intl: PropTypes.shape({ formatMessage: PropTypes.func }).isRequired,\n    summary: PropTypes.bool,\n};\n\nexport default injectIntl(withStyles(styles)(TokenManager));\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { Typography } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\n\nconst useStyles = makeStyles((theme) => ({\n    appContent: {\n        margin: theme.spacing(2),\n    },\n    button: {\n        color: theme.palette.getContrastText(theme.palette.primary.main),\n    },\n  }));\n\nconst genericDisplayDialog = (props) => {\n    const {\n        handleClick, heading, caption, buttonText,\n    } = props;\n    const classes = useStyles();\n    return (\n        <div className={classes.appContent}>\n            <InlineMessage type='info' className={classes.dialogContainer}>\n                <Typography variant='h5' component='h2'>\n                    {heading}\n                </Typography>\n                <Typography variant=\"body2\" gutterBottom>\n                    {caption}\n                </Typography>\n                <ScopeValidation resourcePath={resourcePaths.APPLICATIONS} resourceMethod={resourceMethods.POST}>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className={classes.button}\n                        onClick={handleClick}\n                    >\n                        {buttonText}\n                    </Button>\n                </ScopeValidation>\n            </InlineMessage>\n        </div>\n    );\n};\n\nexport default genericDisplayDialog;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\nimport classNames from 'classnames';\nimport CustomIcon from 'AppComponents/Shared/CustomIcon';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport TokenManager from 'AppComponents/Shared/AppsAndKeys/TokenManager';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\n/**\n * @inheritdoc\n * @param {*} theme theme object\n */\nconst styles = (theme) => ({\n    button: {\n        padding: theme.spacing(1),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        display: 'flex',\n        alignItems: 'center',\n        fontSize: '11px',\n        cursor: 'pointer',\n        '& span': {\n            paddingLeft: 6,\n            display: 'inline-block',\n        },\n    },\n    actionColumn: {\n        display: 'flex',\n        textAlign: 'right',\n        direction: 'rtl',\n    },\n    td: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n        borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n        fontSize: '11px',\n        paddingLeft: theme.spacing(1),\n        height: 35,\n    },\n    selectedWrapper: {\n        borderLeft: 'solid 2px ' + theme.palette.primary.main,\n    },\n});\n\nconst subscriptionTableRow = (props) => {\n    const {\n        classes, loadInfo, handleSubscriptionDelete,\n        theme, selectedAppId, updateSubscriptionData, selectedKeyType, app, applicationOwner, hashEnabled,\n    } = props;\n    return (\n        <>\n            <tr>\n                <td className={classes.td}>{app.label}</td>\n                <td className={classes.td}>{app.policy}</td>\n                <td className={classes.td}>{app.status}</td>\n                <td className={classes.td}>\n                    <div className={classes.actionColumn}>\n                        <Link\n                            className={classes.button}\n                            to={'/applications/' + app.value}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.manage.app'\n                                    defaultMessage='MANAGE APP'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='applications'\n                            />\n                        </Link>\n                        <ScopeValidation\n                            resourcePath={resourcePaths.SINGLE_SUBSCRIPTION}\n                            resourceMethod={resourceMethods.DELETE}\n                        >\n                            <Link\n                                className={classes.button}\n                                onClick={() => handleSubscriptionDelete(\n                                    app.subscriptionId,\n                                    updateSubscriptionData,\n                                )}\n                            >\n                                <span>\n                                    <FormattedMessage\n                                        id='Apis.Details.Credentials.SubscriptionTableRow.unsubscribe'\n                                        defaultMessage='UNSUBSCRIBE'\n                                    />\n                                </span>\n                                <CustomIcon\n                                    width={16}\n                                    height={16}\n                                    strokeColor={theme.palette.primary.main}\n                                    icon='subscriptions'\n                                />\n                            </Link>\n                        </ScopeValidation>\n                        <Link\n                            className={classNames(classes.button, {\n                                [classes.activeLink]: selectedAppId\n                                            && selectedKeyType === 'PRODUCTION'\n                                            && app.value === selectedAppId,\n                            })}\n                            onClick={() => loadInfo('PRODUCTION', app.value)}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.prod.keys'\n                                    defaultMessage='PROD KEYS'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='productionkeys'\n                            />\n                        </Link>\n                        <Link\n                            className={classNames(classes.button, {\n                                [classes.activeLink]: selectedAppId\n                                            && selectedKeyType === 'SANDBOX'\n                                            && app.value === selectedAppId,\n                            })}\n                            onClick={() => loadInfo('SANDBOX', app.value)}\n                        >\n                            <span>\n                                <FormattedMessage\n                                    id='Apis.Details.Credentials.SubscriptionTableRow.sandbox.keys'\n                                    defaultMessage='SANDBOX KEYS'\n                                />\n                            </span>\n                            <CustomIcon\n                                width={16}\n                                height={16}\n                                strokeColor={theme.palette.primary.main}\n                                icon='productionkeys'\n                            />\n                        </Link>\n                    </div>\n                </td>\n            </tr>\n            {app.value === selectedAppId && (selectedKeyType === 'PRODUCTION' || selectedKeyType === 'SANDBOX') && (\n                <tr>\n                    <td colSpan='4'>\n                        <div className={classes.selectedWrapper}>\n                            <TokenManager\n                                keyType={selectedKeyType}\n                                selectedApp={{\n                                    appId: app.value,\n                                    label: app.label,\n                                    owner: applicationOwner,\n                                    hashEnabled,\n                                }}\n                                updateSubscriptionData={updateSubscriptionData}\n                            />\n                        </div>\n                    </td>\n                </tr>\n            )}\n        </>\n    );\n};\nsubscriptionTableRow.propTypes = {\n    classes: PropTypes.shape({\n        td: PropTypes.shape({}),\n        actionColumn: PropTypes.shape({}),\n        button: PropTypes.shape({}),\n        activeLink: PropTypes.shape({}),\n        selectedWrapper: PropTypes.shape({}),\n    }).isRequired,\n    theme: PropTypes.shape({\n\n    }).isRequired,\n    handleSubscriptionDelete: PropTypes.func.isRequired,\n    loadInfo: PropTypes.func.isRequired,\n    selectedAppId: PropTypes.string.isRequired,\n    updateSubscriptionData: PropTypes.func.isRequired,\n    selectedKeyType: PropTypes.string.isRequired,\n    applicationOwner: PropTypes.string.isRequired,\n    app: PropTypes.shape({\n        label: PropTypes.string,\n        policy: PropTypes.string,\n        status: PropTypes.string,\n        value: PropTypes.string,\n        subscriptionId: PropTypes.string,\n    }).isRequired,\n};\nexport default withStyles(styles, { withTheme: true })(subscriptionTableRow);\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Typography } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\nimport Subscription from 'AppData/Subscription';\nimport GenericDisplayDialog from 'AppComponents/Shared/GenericDisplayDialog';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Api from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Icon from '@material-ui/core/Icon';\nimport InlineMessage from 'AppComponents/Shared/InlineMessage';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport Application from 'AppData/Application';\nimport AuthManager from 'AppData/AuthManager';\nimport SubscribeToApi from 'AppComponents/Shared/AppsAndKeys/SubscribeToApi';\nimport { ScopeValidation, resourceMethods, resourcePaths } from 'AppComponents/Shared/ScopeValidation';\nimport { ApiContext } from '../ApiContext';\nimport SubscriptionTableRow from './SubscriptionTableRow';\n\n/**\n * @inheritdoc\n * @param {*} theme theme object\n */\nconst styles = (theme) => ({\n    contentWrapper: {\n        maxWidth: theme.custom.contentAreaWidth,\n        paddingLeft: theme.spacing(3),\n        paddingTop: theme.spacing(3),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(3),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    generateCredentialWrapper: {\n        marginLeft: 0,\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        '& span, & h5, & label, & td, & li, & div': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        },\n    },\n    tableMain: {\n        '& > table': {\n            width: '100%',\n            borderCollapse: 'collapse',\n            marginTop: theme.spacing(3),\n            marginLeft: theme.spacing(2),\n            marginRight: theme.spacing(1),\n        },\n        '& table > tr td': {\n            paddingLeft: theme.spacing(1),\n        },\n        '&  table > tr:nth-child(even)': {\n            backgroundColor: theme.custom.listView.tableBodyEvenBackgrund,\n            '& td, & a, & .material-icons': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyEvenBackgrund),\n            },\n        },\n        '&  table > tr:nth-child(odd)': {\n            backgroundColor: theme.custom.listView.tableBodyOddBackgrund,\n            '& td, & a, & .material-icons': {\n                color: theme.palette.getContrastText(theme.custom.listView.tableBodyOddBackgrund),\n            },\n        },\n        '&  table > tr > th': {\n            backgroundColor: theme.custom.listView.tableHeadBackground,\n            color: theme.palette.getContrastText(theme.custom.listView.tableHeadBackground),\n            paddingLeft: theme.spacing(1),\n            borderBottom: 'solid 1px ' + theme.palette.grey.A200,\n            borderTop: 'solid 1px ' + theme.palette.grey.A200,\n            textAlign: 'left',\n            fontSize: '11px',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n        },\n        '& table > tr > th:last-child': {\n            textAlign: 'right',\n        },\n\n    },\n    expansion: {\n        background: 'transparent',\n        boxShadow: 'none',\n    },\n    summary: {\n        alignItems: 'center',\n    },\n    subscribeRoot: {\n        paddingLeft: theme.spacing(2),\n    },\n    activeLink: {\n        background: theme.palette.grey.A100,\n    },\n    appBar: {\n        background: theme.palette.background.paper,\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    toolbar: {\n        marginLeft: theme.spacing(2),\n    },\n    subscribeTitle: {\n        flex: 1,\n    },\n    paper: {\n        marginLeft: theme.spacing(3),\n        padding: theme.spacing(2),\n    },\n    descWrapper: {\n        marginBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    credentialBoxWrapper: {\n        paddingLeft: theme.spacing(2),\n    },\n    credentialBox: {\n        padding: theme.spacing(1),\n        border: 'solid 1px #ccc',\n        borderRadius: 5,\n        marginBottom: theme.spacing(2),\n        marginTop: theme.spacing(2),\n    },\n    addLinkWrapper: {\n        marginLeft: theme.spacing(2),\n    },\n    subsListTitle: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    subsListDesc: {\n        color: theme.palette.getContrastText(theme.palette.background.paper),\n    },\n    buttonElm: {\n        '& span': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n    },\n});\n\n/**\n * @class Credentials\n * @extends {React.Component}\n */\nclass Credentials extends React.Component {\n    /**\n     *Creates an instance of Credentials.\n     * @param JSON props\n     * @memberof Credentials\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: true,\n            selectedAppId: false,\n            selectedKeyType: false,\n            subscriptionRequest: {\n                applicationId: '',\n                apiId: '',\n                throttlingPolicy: '',\n            },\n            throttlingPolicyList: [],\n            applicationOwner: '',\n            hashEnabled: false,\n            isSubscribing: false,\n        };\n        this.api = new Api();\n    }\n\n\n    /**\n     *  Set the initial values for subscription request\n     */\n    componentDidMount() {\n        const { api, updateSubscriptionData } = this.context;\n        if (api) {\n            this.updateData();\n        } else {\n            updateSubscriptionData(this.updateData);\n        }\n    }\n\n    updateData = () => {\n        const { api, applicationsAvailable } = this.context;\n        const { subscriptionRequest } = this.state;\n        const newSubscriptionRequest = { ...subscriptionRequest, apiId: api.id };\n        const throttlingPolicyList = api.tiers;\n        if (throttlingPolicyList && throttlingPolicyList[0]) {\n            newSubscriptionRequest.throttlingPolicy = throttlingPolicyList[0].tierName;\n        }\n        if (applicationsAvailable && applicationsAvailable[0]) {\n            newSubscriptionRequest.applicationId = applicationsAvailable[0].value;\n        }\n        this.setState({ subscriptionRequest: newSubscriptionRequest, throttlingPolicyList });\n    };\n\n    /**\n     * @memberof Credentials\n     */\n    handleExpandClick = () => {\n        this.setState((state) => ({ expanded: !state.expanded }));\n    };\n\n    /**\n     * @param {*} updateSubscriptionData method to update global subscription data\n     * @memberof Credentials\n     */\n    handleSubscribe = () => {\n        const { updateSubscriptionData, apiType } = this.context;\n        const { subscriptionRequest } = this.state;\n        const { intl } = this.props;\n        const api = new Api();\n        this.setState({ isSubscribing: true });\n        api.subscribe(\n            subscriptionRequest.apiId,\n            subscriptionRequest.applicationId,\n            subscriptionRequest.throttlingPolicy,\n            apiType,\n        )\n            .then((response) => {\n                if (response.body.status === 'ON_HOLD') {\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Your subscription request has been submitted and is now awaiting approval.',\n                        id: 'subscription.pending',\n                    }));\n                } else {\n                    console.log('Subscription created successfully with ID : ' + response.body.subscriptionId);\n                    Alert.info(intl.formatMessage({\n                        defaultMessage: 'Subscribed successfully',\n                        id: 'Apis.Details.Credentials.Credentials.subscribed.successfully',\n                    }));\n                }\n                if (updateSubscriptionData) updateSubscriptionData(this.updateData);\n                this.setState({ isSubscribing: false });\n            })\n            .catch((error) => {\n                Alert.error(intl.formatMessage({\n                    id: 'Applications.Details.Subscriptions.error.occurred.during.subscription.not.201',\n                    defaultMessage: 'Error occurred during subscription',\n                }));\n                console.log('Error while creating the subscription.');\n                console.error(error);\n                this.setState({ isSubscribing: false });\n            });\n    };\n\n    /**\n     * @inheritdoc\n     * @memberof Credentials\n     */\n    goToWizard = () => {\n        const { history } = this.props;\n        history.push('credentials/wizard');\n    };\n\n    /**\n     * used to load the token manager component when\n     * key type is selected in the applicaiton list\n     * @param {*} selectedKeyType key type\n     * @param {*} selectedAppId  application id\n     * @memberof Credentials\n     */\n    loadInfo = (selectedKeyType, selectedAppId) => {\n        this.setState({ selectedKeyType, selectedAppId });\n\n        Application.get(selectedAppId)\n            .then((result) => {\n                this.setState({ applicationOwner: result.owner, hashEnabled: result.hashEnabled });\n            });\n    };\n\n    /**\n     * Update subscription Request state\n     * @param {Object} subscriptionRequest parameters requried for subscription\n     */\n    updateSubscriptionRequest = (subscriptionRequest) => {\n        this.setState({ subscriptionRequest });\n    };\n\n    /**\n     *\n     * @param {*} subscriptionId subscription id\n     * @param {*} updateSubscriptionData method to update global subscription data\n     * @memberof Subscriptions\n     */\n    handleSubscriptionDelete = (subscriptionId, updateSubscriptionData) => {\n        const { intl } = this.props;\n        const client = new Subscription();\n        const promisedDelete = client.deleteSubscription(subscriptionId);\n        promisedDelete.then((response) => {\n            if (response.status !== 200) {\n                console.log(response);\n                Alert.info(intl.formatMessage({\n                    defaultMessage: 'Something went wrong while deleting the Subscription!',\n                    id: 'Apis.Details.Credentials.Credentials.something.went.wrong.with.subscription',\n                }));\n                return;\n            }\n            Alert.info(intl.formatMessage({\n                defaultMessage: 'Subscription deleted successfully!',\n                id: 'Apis.Details.Credentials.Credentials.subscription.deleted.successfully',\n            }));\n            if (updateSubscriptionData) updateSubscriptionData(this.updateData);\n        });\n    };\n\n    /**\n     * @inheritdoc\n     */\n    render() {\n        const { classes, intl } = this.props;\n        const {\n            api, updateSubscriptionData, applicationsAvailable, subscribedApplications,\n        } = this.context;\n        const {\n            selectedKeyType,\n            selectedAppId,\n            subscriptionRequest,\n            throttlingPolicyList,\n            applicationOwner,\n            hashEnabled,\n            isSubscribing,\n        } = this.state;\n        const user = AuthManager.getUser();\n        const isOnlyMutualSSL = api.securityScheme.includes('mutualssl') && !api.securityScheme.includes('oauth2')\n        && !api.securityScheme.includes('api_key') && !api.securityScheme.includes('basic_auth');\n        const isOnlyBasicAuth = api.securityScheme.includes('basic_auth') && !api.securityScheme.includes('oauth2')\n         && !api.securityScheme.includes('api_key');\n        const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n        const isSetAllorResidentKeyManagers = (api.keyManagers && api.keyManagers.includes('all'))\n            || (api.keyManagers && api.keyManagers.includes('Resident Key Manager'));\n        const renderCredentialInfo = () => {\n            if (isPrototypedAPI) {\n                return (\n                    <>\n                        <InlineMessage type='info' className={classes.dialogContainer}>\n                            <Typography component='p'>\n                                <FormattedMessage\n                                    id={'Apis.Details.Credentials.Credentials.you.do.not.need'\n                                        + '.credentials.to.access.prototyped.api'}\n                                    defaultMessage='You do not need credentials to access Prototyped APIs'\n                                />\n                            </Typography>\n                        </InlineMessage>\n                    </>\n                );\n            } else if (isOnlyMutualSSL || isOnlyBasicAuth) {\n                return (\n                    <InlineMessage type='info' className={classes.dialogContainer}>\n                        <Typography component='p'>\n                            <FormattedMessage\n                                id='Apis.Details.Creadentials.credetials.mutualssl'\n                                defaultMessage={'Subscription is not required for Mutual SSL APIs'\n                                        + ' or APIs with only Basic Authentication.'}\n                            />\n                        </Typography>\n                    </InlineMessage>\n                );\n            } else if (applicationsAvailable.length === 0 && subscribedApplications.length === 0) {\n                return (\n                    <GenericDisplayDialog\n                        classes={classes}\n                        handleClick={this.goToWizard}\n                        heading={user ? intl.formatMessage({\n                            defaultMessage: 'Subscribe',\n                            id: 'Apis.Details.Credentials.Credentials.subscribe.to.application',\n                        })\n                            : intl.formatMessage({\n                                defaultMessage: 'Sign In to Subscribe',\n                                id: 'Apis.Details.Credentials.Credentials.subscribe.to.application.sign.in',\n                            })}\n                        caption={intl.formatMessage({\n                            defaultMessage: 'You need to subscribe to an application to access this API',\n                            id:\n                            'Apis.Details.Credentials.Credentials.subscribe.to.application.msg',\n                        })}\n                        buttonText={intl.formatMessage({\n                            defaultMessage: 'Subscribe',\n                            id: 'Apis.Details.Credentials.Credentials.generate',\n                        })}\n                    />\n                );\n            } else {\n                return (\n                    <>\n                        <div className={classes.generateCredentialWrapper}>\n                            <ScopeValidation\n                                resourcePath={resourcePaths.SUBSCRIPTIONS}\n                                resourceMethod={resourceMethods.POST}\n                            >\n                                <Typography variant='h5' component='h2'>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'subscribe.to.application'}\n                                        defaultMessage='Subscribe'\n                                    />\n                                </Typography>\n                                <div className={classes.credentialBoxWrapper}>\n                                    {applicationsAvailable.length === 0 && (\n                                        <div className={classes.credentialBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.with.wizard.message'}\n                                                    defaultMessage={\n                                                        'Use the Subscription and Key Generation Wizard. '\n                                                        + 'Create a new application -> '\n                                                        + 'Subscribe -> Generate keys and '\n                                                        + 'Access Token to invoke this API.'\n                                                    }\n                                                />\n                                            </Typography>\n                                            <Link\n                                                to={(isOnlyMutualSSL || isOnlyBasicAuth\n                                                    || !isSetAllorResidentKeyManagers) ? null\n                                                    : `/apis/${api.id}/credentials/wizard`}\n                                                style={!api.isSubscriptionAvailable\n                                                    ? { pointerEvents: 'none' } : null}\n                                            >\n                                                <Button\n                                                    variant='contained'\n                                                    color='primary'\n                                                    className={classes.buttonElm}\n                                                    disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL\n                                                        || isOnlyBasicAuth || !isSetAllorResidentKeyManagers}\n                                                >\n                                                    <FormattedMessage\n                                                        id={'Apis.Details.Credentials.'\n                                                        + 'SubscibeButtonPanel.subscribe.wizard.with.new.app'}\n                                                        defaultMessage='Subscription &amp; Key Generation Wizard'\n                                                    />\n                                                </Button>\n                                            </Link>\n                                        </div>\n                                    ) }\n                                    {applicationsAvailable.length > 0 && (\n                                        <div className={classes.credentialBox}>\n                                            <Typography variant='body2'>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials'\n                                                    + '.api.credentials.with.subscribe.message'}\n                                                    defaultMessage={'Subscribe to an application'\n                                                    + ' and generate credentials'}\n                                                />\n                                            </Typography>\n                                            <SubscribeToApi\n                                                applicationsAvailable={applicationsAvailable}\n                                                subscriptionRequest={subscriptionRequest}\n                                                throttlingPolicyList={throttlingPolicyList}\n                                                updateSubscriptionRequest={\n                                                    this.updateSubscriptionRequest\n                                                }\n                                                renderSmall\n                                            />\n                                            <Button\n                                                variant='contained'\n                                                color='primary'\n                                                className={classes.buttonElm}\n                                                onClick={() => this.handleSubscribe()}\n                                                disabled={!api.isSubscriptionAvailable || isSubscribing}\n                                            >\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.'\n                                                    + 'SubscibeButtonPanel.subscribe.btn'}\n                                                    defaultMessage='Subscribe'\n                                                />\n                                                {isSubscribing && <CircularProgress size={24} />}\n                                            </Button>\n                                        </div>\n                                    )}\n                                </div>\n                            </ScopeValidation>\n                        </div>\n                        {/*\n                                    ****************************\n                                    Subscription List\n                                    ***************************\n                                    */}\n                        {subscribedApplications && subscribedApplications.length > 0 && (\n                            <>\n                                <Typography variant='h5' component='h2' className={classes.subsListTitle}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'api.credentials.subscribed.apps.title'}\n                                        defaultMessage='Subscriptions'\n                                    />\n                                </Typography>\n                                <Typography variant='body2' className={classes.subsListDesc}>\n                                    <FormattedMessage\n                                        id={'Apis.Details.Credentials.Credentials.'\n                                        + 'api.credentials.subscribed.apps.description'}\n                                        defaultMessage='( Applications Subscribed to this Api )'\n                                    />\n                                </Typography>\n                                <div className={classes.tableMain}>\n                                    <table>\n                                        <tr>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.name'}\n                                                    defaultMessage='Application Name'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.api.'\n                                                    + 'credentials.subscribed.apps.tier'}\n                                                    defaultMessage='Throttling Tier'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.status'}\n                                                    defaultMessage='Application Status'\n                                                />\n                                            </th>\n                                            <th className={classes.th}>\n                                                <FormattedMessage\n                                                    id={'Apis.Details.Credentials.Credentials.'\n                                                    + 'api.credentials.subscribed.apps.action'}\n                                                    defaultMessage='Actions'\n                                                />\n                                            </th>\n                                        </tr>\n                                        {subscribedApplications.map((app, index) => (\n                                            <SubscriptionTableRow\n                                                key={app.id}\n                                                loadInfo={this.loadInfo}\n                                                handleSubscriptionDelete={this.handleSubscriptionDelete}\n                                                selectedAppId={selectedAppId}\n                                                updateSubscriptionData={updateSubscriptionData}\n                                                selectedKeyType={selectedKeyType}\n                                                app={app}\n                                                index={index}\n                                                applicationOwner={applicationOwner}\n                                                hashEnabled={hashEnabled}\n                                            />\n                                        ))}\n                                    </table>\n                                </div>\n                            </>\n                        )}\n                    </>\n                );\n            }\n        };\n        return (\n            <Grid container>\n                <Grid item md={12} lg={11}>\n                    <Grid container spacing={2}>\n                        <Grid item md={12}>\n                            <Typography onClick={this.handleExpandClick} variant='h4' component='div' className={classes.titleSub}>\n                                {applicationsAvailable.length > 0 && (\n                                    <Link\n                                        to={(isOnlyMutualSSL || isOnlyBasicAuth || isPrototypedAPI\n                                            || !isSetAllorResidentKeyManagers) ? null\n                                            : `/apis/${api.id}/credentials/wizard`}\n                                        style={!api.isSubscriptionAvailable\n                                            ? { pointerEvents: 'none' } : null}\n                                        className={classes.addLinkWrapper}\n                                    >\n                                        <Button\n                                            color='secondary'\n                                            disabled={!api.isSubscriptionAvailable || isOnlyMutualSSL\n                                                 || isOnlyBasicAuth || isPrototypedAPI\n                                                 || !isSetAllorResidentKeyManagers}\n                                            size='small'\n                                        >\n                                            <Icon>add_circle_outline</Icon>\n                                            <FormattedMessage\n                                                id={'Apis.Details.Credentials.'\n                                                + 'SubscibeButtonPanel.subscribe.wizard.with.new.app'}\n                                                defaultMessage='Subscription &amp; Key Generation Wizard'\n                                            />\n                                        </Button>\n                                    </Link>\n                                )}\n                            </Typography>\n                            <Paper elevation={0} className={classes.paper}>\n                                <Typography variant='body2' className={classes.descWrapper}>\n                                    <FormattedMessage\n                                        id='Apis.Details.Credentials.Credentials.'\n                                        defaultMessage={`An application \n                                        is primarily used to decouple the consumer from the APIs. It allows you to \n                                        generate and use a single key for multiple APIs and subscribe multiple times to \n                                        a single API with different SLA levels.`}\n                                    />\n                                </Typography>\n                                {renderCredentialInfo()}\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        );\n    }\n}\n\nCredentials.propTypes = {\n    classes: PropTypes.shape({\n        contentWrapper: PropTypes.string,\n        titleSub: PropTypes.string,\n        tableMain: PropTypes.string,\n        th: PropTypes.string,\n        paper: PropTypes.string,\n        descWrapper: PropTypes.string,\n        generateCredentialWrapper: PropTypes.string,\n        credentialBoxWrapper: PropTypes.string,\n        credentialBox: PropTypes.string,\n        buttonElm: PropTypes.string,\n        dialogContainer: PropTypes.string,\n    }).isRequired,\n    history: PropTypes.shape({}).isRequired,\n    intl: PropTypes.shape({}).isRequired,\n};\nCredentials.contextType = ApiContext;\n\nexport default injectIntl(withStyles(styles, { withTheme: true })(Credentials));\n"],"sourceRoot":""}