{"version":3,"sources":["webpack:///./source/src/app/components/Settings/ChangePassword/ChangePasswordBase.jsx","webpack:///./source/src/app/components/Settings/ChangePassword/ChangePassword.jsx"],"names":["useStyles","makeStyles","theme","createTitle","color","palette","getContrastText","background","default","formContent","paper","ChangePasswordBase","props","title","children","classes","Box","width","mt","Grid","justify","container","spacing","item","sm","md","className","Paper","elevation","propTypes","PropTypes","element","isRequired","mandatoryStarText","passwordChangeForm","primary","main","reducer","state","field","value","ChangePassword","settings","IsPasswordChangeEnabled","userStorePasswordPattern","passwordPolicyPattern","passwordPolicyMinLength","passwordPolicyMaxLength","useSettingsContext","username","AuthManager","getUser","name","initialState","currentPassword","undefined","newPassword","repeatedNewPassword","dispatch","useReducer","passwordChangeGuideEnabled","Settings","passwordChange","guidelinesEnabled","passwordChangeGuide","policyList","validatePasswordChange","legthCheckSchema","Joi","string","empty","min","max","LengthValidationError","validate","error","errorType","details","type","id","defaultMessage","userStoreValidationError","pattern","RegExp","passwordPolicyValidationError","validateRepeatedPassword","handleChange","target","handleSave","API","changePassword","then","res","Alert","success","window","history","back","catch","response","body","code","Typography","variant","component","length","style","marginTop","marginBottom","map","rule","Progress","py","display","justifyContent","xs","m","direction","alignItems","TextField","root","required","autoFocus","margin","onChange","label","fullWidth","helperText","my","flexDirection","mr","Button","onClick","mx","PageNotFound"],"mappings":"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","file":"32.d7d45bfaabce8b993e4f.bundle.js","sourcesContent":["/*\n *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React from 'react';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\n\nconst useStyles = makeStyles((theme) => ({\n    createTitle: {\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    formContent: {\n        '& span, & div, & p, & input': {\n            color: theme.palette.getContrastText(theme.palette.background.paper),\n        }\n    }\n}));\n\n/**\n * Base component for Password change form\n *\n * @param {Object} props title and children components are expected\n * @returns {React.Component} Base element\n */\nfunction ChangePasswordBase(props) {\n    const { title, children } = props;\n    const classes = useStyles();\n    return (\n        <Box width={1} mt={5}>\n            <Grid justify='center' container spacing={3}>\n                <Grid item sm={6} md={4}>\n                    <Grid container spacing={4}>\n                        <Grid item md={12} className={classes.createTitle}>\n                            {title}\n                        </Grid>\n                        <Grid item md={12} className={classes.formContent}>\n                            <Paper elevation={0}>{children}</Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Box>\n    );\n}\nChangePasswordBase.propTypes = {\n    title: PropTypes.element.isRequired,\n    children: PropTypes.element.isRequired,\n};\nexport default ChangePasswordBase;\n","/*\n *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n *  WSO2 Inc. licenses this file to you under the Apache License,\n *  Version 2.0 (the \"License\"); you may not use this file except\n *  in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing,\n *  software distributed under the License is distributed on an\n *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n *  KIND, either express or implied. See the License for the\n *  specific language governing permissions and limitations\n *  under the License.\n */\n\nimport React, { useReducer } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport AuthManager from 'AppData/AuthManager';\nimport Settings from 'Settings';\nimport Joi from '@hapi/joi';\nimport { Box, Grid } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport ChangePasswordBase from './ChangePasswordBase';\nimport PageNotFound from 'AppComponents/Base/Errors/PageNotFound'\nimport API from 'AppData/api';\nimport Alert from 'AppComponents/Shared/Alert';\nimport Progress from 'AppComponents/Shared/Progress';\nimport { useSettingsContext } from 'AppComponents/Shared/SettingsContext';\n\nconst useStyles = makeStyles((theme) => ({\n    mandatoryStarText: {\n        '& label>span:nth-child(1)': {\n            color: 'red',\n        },\n    },\n    passwordChangeForm: {\n        '& > span, & div, & p, & input': {\n            color: theme.palette.getContrastText(theme.palette.primary.main),\n        },\n    },\n}));\n\n/**\n * Reducer\n * @param {JSON} state State\n * @returns {Promise}.\n */\nfunction reducer(state, { field, value }) {\n    return {\n        ...state,\n        [field]: value,\n    };\n}\n\nconst ChangePassword = () => {\n    const {\n        settings: {\n            IsPasswordChangeEnabled,\n            userStorePasswordPattern,\n            passwordPolicyPattern,\n            passwordPolicyMinLength,\n            passwordPolicyMaxLength,\n        }\n    } = useSettingsContext();\n    const classes = useStyles();\n    const username = AuthManager.getUser().name;\n    const initialState = {\n        currentPassword: undefined,\n        newPassword: undefined,\n        repeatedNewPassword: undefined,\n    };\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const { currentPassword, newPassword, repeatedNewPassword } = state;\n    const passwordChangeGuideEnabled = false || Settings.passwordChange.guidelinesEnabled;\n    let passwordChangeGuide = [];\n    if (passwordChangeGuideEnabled) {\n        passwordChangeGuide = Settings.passwordChange.policyList;\n    }\n\n    const validateCurrentPasswordChange = () => {\n        if (currentPassword === '') {\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    const validatePasswordChange = () => {\n        // Validate against min, max legths if available.\n        // also check whether empty.\n        let legthCheckSchema = Joi.string().empty();\n        if (passwordPolicyMinLength && passwordPolicyMinLength !== -1) {\n            legthCheckSchema = legthCheckSchema.min(passwordPolicyMinLength);\n        }\n        if (passwordPolicyMaxLength && passwordPolicyMaxLength !== -1) {\n            legthCheckSchema = legthCheckSchema.max(passwordPolicyMaxLength);\n        }\n        const LengthValidationError = legthCheckSchema.validate(newPassword).error;\n        if (LengthValidationError) {\n            const errorType = LengthValidationError.details[0].type;\n            if (errorType === 'string.empty') {\n                return (\n                    <FormattedMessage\n                        id='Change.Password.password.empty'\n                        defaultMessage='Password is empty'\n                    />\n                );\n            } else if (errorType === 'string.min') {\n                return (\n                    <FormattedMessage\n                        id='Change.Password.password.length.short'\n                        defaultMessage='Password is too short!'\n                    />\n                );\n            } else if (errorType === 'string.max') {\n                return (\n                    <FormattedMessage\n                        id='Change.Password.password.length.long'\n                        defaultMessage='Password is too long!'\n                    />\n                );\n            }\n        }\n\n        // Validate against user store password pattern regex, if available.\n        if (userStorePasswordPattern) {\n            const userStoreSchema = Joi.string().pattern(new RegExp(userStorePasswordPattern));\n            const userStoreValidationError = userStoreSchema.validate(newPassword).error;\n            if (userStoreValidationError) {\n                const errorType = userStoreValidationError.details[0].type;\n                if (errorType === 'string.pattern.base') {\n                    return (\n                        <FormattedMessage\n                            id='Change.Password.password.pattern.invalid'\n                            defaultMessage='Invalid password pattern'\n                        />\n                    );\n                }\n            }\n        }\n\n        // Validate against password policy pattern regex, if available.\n        if (passwordPolicyPattern) {\n            const passwordPolicySchema = Joi.string().pattern(new RegExp(passwordPolicyPattern));\n            const passwordPolicyValidationError = passwordPolicySchema.validate(newPassword).error;\n            if (passwordPolicyValidationError) {\n                const errorType = passwordPolicyValidationError.details[0].type;\n                if (errorType === 'string.pattern.base') {\n                    return (\n                        <FormattedMessage\n                            id='Change.Password.password.pattern.invalid'\n                            defaultMessage='Invalid password pattern'\n                        />\n                    );\n                }\n            }\n        }\n\n        return false;\n    };\n\n    const validateRepeatedPassword = () => {\n        if (repeatedNewPassword && newPassword !== repeatedNewPassword) {\n            return (\n                <FormattedMessage\n                    id='Change.Password.password.mismatch'\n                    defaultMessage={'Password doesn\\'t match'}\n                />\n            );\n        }\n    };\n\n    const handleChange = ({ target: { name: field, value } }) => {\n        dispatch({ field, value });\n    };\n\n    const handleSave = () => {\n        if (repeatedNewPassword && newPassword !== repeatedNewPassword) {\n            Alert.error(\n                <FormattedMessage\n                    id='Change.Password.password.mismatch'\n                    defaultMessage={'Password doesn\\'t match'}\n                />\n            );\n        } else {\n            const restApi = new API();\n            return restApi\n                .changePassword(currentPassword, newPassword)\n                .then((res) => {\n                    Alert.success(\n                        <FormattedMessage\n                            id='Change.Password.password.changed.success'\n                            defaultMessage='User password changed successfully. Please use the new password on next sign in'\n                        />\n                    );\n                    window.history.back();\n                })\n                .catch((error) => {\n                    const errorCode = error.response.body.code;\n                    switch (errorCode) {\n                        case 901450:\n                            Alert.error(\n                                <FormattedMessage\n                                    id='Change.Password.password.change.disabled'\n                                    defaultMessage='Password change disabled'\n                                />\n                            );\n                            break;\n                        case 901451:\n                            Alert.error(\n                                <FormattedMessage\n                                    id='Change.Password.current.password.incorrect'\n                                    defaultMessage='Current password is incorrect'\n                                />\n                            );\n                            break;\n                        case 901452:\n                            Alert.error(\n                                <FormattedMessage\n                                    id='Change.Password.password.pattern.invalid'\n                                    defaultMessage='Invalid password pattern'\n                                />\n                            );\n                            break;\n                    }\n                });\n        }\n    };\n\n    const title = (\n        <>\n            <Typography variant='h5' component='h1'>\n                <FormattedMessage\n                    id='Change.Password.title'\n                    defaultMessage='Change Password'\n                />\n                {': '\n                    + username}\n            </Typography>\n            <Typography variant='caption'>\n                <FormattedMessage\n                    id='Change.Password.description'\n                    defaultMessage={'Change your own password.'\n                        + ' Required fields are marked with an asterisk ( * )'}\n                />\n            </Typography>\n            {passwordChangeGuideEnabled && passwordChangeGuide.length > 0\n                ? (\n                    <Typography variant='body2'>\n                        <FormattedMessage\n                            id='Change.Password.password.policy'\n                            defaultMessage='Password policy:'\n                        />\n                        <ul style={{ marginTop: '-4px', marginBottom: '-8px' }}>\n                            {passwordChangeGuide.map((rule) => {\n                                return (\n                                    <li>\n                                        {rule}\n                                    </li>\n                                );\n                            })}\n                        </ul>\n                    </Typography>\n                )\n                : null}\n        </>\n    );\n\n    if (IsPasswordChangeEnabled === undefined) {\n        return <Progress />;\n    }\n\n    // If the user is eligible to change the password, display password change form.\n    // otherwise, display page not found.\n    if (IsPasswordChangeEnabled) {\n        return (\n            <ChangePasswordBase title={title}>\n                <Box py={2} display='flex' justifyContent='center'>\n                    <Grid item xs={10} md={9}>\n                        <Box component='div' m={2}>\n                            <Grid\n                                container\n                                mt={2}\n                                spacing={2}\n                                direction='column'\n                                justify='center'\n                                alignItems='flex-start'\n                            >\n                                <TextField\n                                    classes={{\n                                        root: classes.mandatoryStarText,\n                                    }}\n                                    required\n                                    id='current-password'\n                                    autoFocus\n                                    margin='dense'\n                                    name='currentPassword'\n                                    value={currentPassword}\n                                    onChange={handleChange}\n                                    label={<FormattedMessage id='Settings.ChangePasswordForm.current.password' defaultMessage='Current Password' />}\n                                    fullWidth\n                                    error={validateCurrentPasswordChange()}\n                                    helperText={<FormattedMessage id='Settings.ChangePasswordForm.enter.current.password' defaultMessage='Enter Current Password' />}\n                                    variant='outlined'\n                                    type='password'\n                                />\n                                <TextField\n                                    classes={{\n                                        root: classes.mandatoryStarText,\n                                    }}\n                                    margin='dense'\n                                    id='new-password'\n                                    name='newPassword'\n                                    value={newPassword}\n                                    onChange={handleChange}\n                                    label={\n                                        <FormattedMessage id='Settings.ChangePasswordForm.new.password' defaultMessage='New Password' />\n                                    }\n                                    required\n                                    fullWidth\n                                    error={validatePasswordChange()}\n                                    helperText={validatePasswordChange()\n                                        || <FormattedMessage id='Settings.ChangePasswordForm.enter.new.password' defaultMessage='Enter a New Password' />}\n                                    variant='outlined'\n                                    type='password'\n                                />\n                                <TextField\n                                    classes={{\n                                        root: classes.mandatoryStarText,\n                                    }}\n                                    margin='dense'\n                                    id='repeated-new-password'\n                                    name='repeatedNewPassword'\n                                    value={repeatedNewPassword}\n                                    onChange={handleChange}\n                                    label={\n                                        <FormattedMessage id='Settings.ChangePasswordForm.confirm.new.password' defaultMessage='Confirm new Password' />\n                                    }\n                                    required\n                                    fullWidth\n                                    error={validateRepeatedPassword()}\n                                    helperText={validateRepeatedPassword()\n                                        || <FormattedMessage id='Settings.ChangePasswordForm.confirmationOf.new.password' defaultMessage='Confirmation of new Password' />}\n                                    variant='outlined'\n                                    type='password'\n                                />\n\n                                <Box my={2} display='flex' flexDirection='row'>\n                                    <Box mr={1}>\n                                        <Button\n                                            color='primary'\n                                            variant='contained'\n                                            onClick={handleSave}\n                                            className={classes.passwordChangeForm}\n                                        >\n                                            <FormattedMessage\n                                                id='Settings.ChangePasswordForm.Save.Button.text'\n                                                defaultMessage='Save'\n                                            />\n                                        </Button>\n                                    </Box>\n                                    <Box mx={1}>\n                                        <Button\n                                            onClick={() => window.history.back()}\n                                        >\n                                            <FormattedMessage\n                                                id='Settings.ChangePasswordForm.Cancel.Button.text'\n                                                defaultMessage='Cancel'\n                                            />\n                                        </Button>\n                                    </Box>\n                                </Box>\n                            </Grid>\n                        </Box>\n                    </Grid>\n                </Box>\n            </ChangePasswordBase>\n        );\n    } else {\n        return <PageNotFound />;\n    }\n\n};\n\nexport default ChangePassword;\n"],"sourceRoot":""}