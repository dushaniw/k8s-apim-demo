{"version":3,"sources":["webpack:///./source/src/app/components/Apis/Details/ApiConsole/SwaggerUI.jsx","webpack:///./source/src/app/components/Apis/Details/ApiConsole/ApiConsole.jsx"],"names":["disableAuthorizeAndInfoPlugin","wrapComponents","info","authorizeBtn","SwaggerUI","props","spec","accessTokenProvider","authorizationHeader","api","securitySchemeType","componentProps","validatorUrl","defaultModelsExpandDepth","docExpansion","requestInterceptor","req","url","context","patternToCheck","headers","endsWith","substring","length","includes","splitTokens","split","defaultModelExpandDepth","plugins","propTypes","PropTypes","func","isRequired","string","shape","ApiConsole","React","Component","constructor","super","this","state","username","password","scopes","selectedKeyType","keys","productionApiKey","sandboxApiKey","selectedKeyManager","bind","updateSwagger","setSecurityScheme","setSelectedEnvironment","setProductionAccessToken","setSandboxAccessToken","setUsername","setPassword","setSelectedKeyType","setSectedKeyManager","setSelectedKeyManager","setKeys","updateAccessToken","setProductionApiKey","setSandboxApiKey","converttopostman","convertToPostman","componentDidMount","apiID","id","user","AuthManager","getUser","apiData","environments","selectedEnvironment","swagger","apiClient","Api","getAPIById","then","apiResponse","obj","endpointURLs","map","endpoint","name","environmentName","displayName","environmentDisplayName","scopeList","scope","key","setState","getSwaggerByAPIIdAndEnvironment","getSwaggerByAPIId","swaggerResponse","defaultSecurityScheme","securityScheme","productionAccessToken","sandboxAccessToken","getSubscriptions","catch","error","status","notFound","isUpdateToken","selectedApplication","fr","openapiToPostman","convert","type","data","err","conversionResult","result","fileDownload","JSON","stringify","output","collection","swaggerToPostman","console","log","accessToken","get","keyType","token","Application","application","getKeys","appKeys","btoa","environment","promiseSwagger","find","e","render","classes","downloadSwagger","downloadLink","encodeURIComponent","Progress","isApiKeyEnabled","isPrototypedAPI","lifeCycleStatus","toLowerCase","Paper","className","paper","Grid","container","grid","item","md","userNotificationPaper","Typography","variant","component","Icon","defaultMessage","TryOutController","xs","Button","size","onClick","icon","postmanIcon","width","height","buttonIcon","href","download","openapiinitiativeIcon","swaggerUIPaper","titleSub","iconify","contextType","ApiContext","withStyles","theme","marginRight","font","margin","spacing","padding","marginTop","marginBottom","paddingRight","justifyContent","marginLeft","paddingTop","paddingBottom","color","palette","getContrastText","background","default","backgroundColor","custom","apiDetailPages","swaggerUIBackground"],"mappings":"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","file":"APIConsole.4f96b011dbb999acd69d.bundle.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport 'swagger-ui-react/swagger-ui.css';\nimport SwaggerUILib from 'swagger-ui-react';\n\nconst disableAuthorizeAndInfoPlugin = function () {\n    return {\n        wrapComponents: {\n            info: () => () => null,\n            authorizeBtn: () => () => null,\n        },\n    };\n};\n/**\n *\n * @class SwaggerUI\n * @extends {Component}\n */\nconst SwaggerUI = (props) => {\n    const {\n        spec, accessTokenProvider, authorizationHeader, api, securitySchemeType,\n    } = props;\n\n    const componentProps = {\n        spec,\n        validatorUrl: null,\n        defaultModelsExpandDepth: -1,\n        docExpansion: 'list',\n        requestInterceptor: (req) => {\n            const { url } = req;\n            const { context } = api;\n            const patternToCheck = `${context}/*`;\n            if (authorizationHeader === 'apikey') {\n                req.headers[authorizationHeader] = accessTokenProvider();\n            } else if (securitySchemeType === 'BASIC') {\n                req.headers[authorizationHeader] = 'Basic ' + accessTokenProvider();\n            } else if (securitySchemeType === 'TEST') {\n                req.headers[authorizationHeader] = accessTokenProvider();\n            } else {\n                req.headers[authorizationHeader] = 'Bearer ' + accessTokenProvider();\n            }\n            if (url.endsWith(patternToCheck)) {\n                req.url = url.substring(0, url.length - 2);\n            } else if (url.includes(patternToCheck + '?')) { // Check for query parameters.\n                const splitTokens = url.split('/*?');\n                req.url = splitTokens.length > 1 ? splitTokens[0] + '?' + splitTokens[1] : splitTokens[0];\n            }\n            return req;\n        },\n        defaultModelExpandDepth: -1,\n        plugins: [disableAuthorizeAndInfoPlugin],\n    };\n    return <SwaggerUILib {...componentProps} />;\n};\n\nSwaggerUI.propTypes = {\n    accessTokenProvider: PropTypes.func.isRequired,\n    authorizationHeader: PropTypes.string.isRequired,\n    api: PropTypes.shape({\n        context: PropTypes.string.isRequired,\n    }).isRequired,\n    spec: PropTypes.string.isRequired,\n};\nexport default SwaggerUI;\n","/*\n * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n *\n * WSO2 Inc. licenses this file to you under the Apache License,\n * Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied. See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Icon from '@material-ui/core/Icon';\nimport AuthManager from 'AppData/AuthManager';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport postmanIcon from '@iconify/icons-simple-icons/postman';\nimport openapiinitiativeIcon from '@iconify/icons-simple-icons/openapiinitiative';\nimport { Icon as Icons } from '@iconify/react';\nimport fileDownload from 'js-file-download';\nimport openapiToPostman from 'openapi-to-postmanv2';\nimport swaggerToPostman from 'swagger2-postman2-converter';\nimport { ApiContext } from '../ApiContext';\nimport Progress from '../../../Shared/Progress';\nimport Api from '../../../../data/api';\nimport SwaggerUI from './SwaggerUI';\nimport TryOutController from './TryOutController';\nimport Application from '../../../../data/Application';\n\n\n/**\n * @inheritdoc\n * @param {*} theme theme\n */\nconst styles = (theme) => ({\n    iconify: {\n        marginRight: 10,\n        font: 24,\n    },\n    buttonIcon: {\n        marginRight: 10,\n    },\n    paper: {\n        margin: theme.spacing(1),\n        padding: theme.spacing(1),\n    },\n    grid: {\n        marginTop: theme.spacing(4),\n        marginBottom: theme.spacing(4),\n        paddingRight: theme.spacing(2),\n        justifyContent: 'center',\n    },\n    userNotificationPaper: {\n        padding: theme.spacing(2),\n    },\n    titleSub: {\n        marginLeft: theme.spacing(2),\n        paddingTop: theme.spacing(2),\n        paddingBottom: theme.spacing(2),\n        color: theme.palette.getContrastText(theme.palette.background.default),\n    },\n    swaggerUIPaper: {\n        backgroundColor: theme.custom.apiDetailPages.swaggerUIBackground,\n    },\n});\n\n/**\n *\n *\n * @class ApiConsole\n * @extends {React.Component}\n */\nclass ApiConsole extends React.Component {\n    /**\n     *Creates an instance of ApiConsole.\n     * @param {*} props properties\n     * @memberof ApiConsole\n     */\n    constructor(props) {\n        super(props);\n        this.state = {\n            securitySchemeType: 'OAUTH',\n            username: '',\n            password: '',\n            scopes: [],\n            selectedKeyType: 'PRODUCTION',\n            keys: [],\n            productionApiKey: '',\n            sandboxApiKey: '',\n            selectedKeyManager: 'Resident Key Manager',\n        };\n        this.accessTokenProvider = this.accessTokenProvider.bind(this);\n        this.updateSwagger = this.updateSwagger.bind(this);\n        this.setSecurityScheme = this.setSecurityScheme.bind(this);\n        this.setSelectedEnvironment = this.setSelectedEnvironment.bind(this);\n        this.setProductionAccessToken = this.setProductionAccessToken.bind(this);\n        this.setSandboxAccessToken = this.setSandboxAccessToken.bind(this);\n        this.setUsername = this.setUsername.bind(this);\n        this.setPassword = this.setPassword.bind(this);\n        this.setSelectedKeyType = this.setSelectedKeyType.bind(this);\n        this.setSectedKeyManager = this.setSelectedKeyManager.bind(this);\n        this.setKeys = this.setKeys.bind(this);\n        this.updateAccessToken = this.updateAccessToken.bind(this);\n        this.setProductionApiKey = this.setProductionApiKey.bind(this);\n        this.setSandboxApiKey = this.setSandboxApiKey.bind(this);\n        this.converttopostman = this.convertToPostman.bind(this);\n    }\n\n    /**\n     * @memberof ApiConsole\n     */\n    componentDidMount() {\n        const { api } = this.context;\n        const apiID = api.id;\n        const user = AuthManager.getUser();\n        let apiData;\n        let environments;\n        let selectedEnvironment;\n        let swagger;\n        let productionAccessToken;\n        let sandboxAccessToken;\n\n        this.apiClient = new Api();\n        const promiseAPI = this.apiClient.getAPIById(apiID);\n\n        promiseAPI\n            .then((apiResponse) => {\n                apiData = apiResponse.obj;\n                if (apiData.endpointURLs) {\n                    environments = apiData.endpointURLs.map((endpoint) => {\n                        return { name: endpoint.environmentName, displayName: endpoint.environmentDisplayName };\n                    });\n                }\n                if (apiData.scopes) {\n                    const scopeList = apiData.scopes.map((scope) => { return scope.key; });\n                    this.setState({ scopes: scopeList });\n                }\n                if (environments && environments.length > 0) {\n                    selectedEnvironment = environments[0].name;\n                    return this.apiClient.getSwaggerByAPIIdAndEnvironment(apiID, selectedEnvironment);\n                } else {\n                    return this.apiClient.getSwaggerByAPIId(apiID);\n                }\n            })\n            .then((swaggerResponse) => {\n                swagger = swaggerResponse.obj;\n\n                let defaultSecurityScheme = 'OAUTH';\n                if (!apiData.securityScheme.includes('oauth2')) {\n                    defaultSecurityScheme = apiData.securityScheme.includes('api_key') ? 'API-KEY' : 'BASIC';\n                }\n\n                this.setState({\n                    api: apiData,\n                    swagger,\n                    environments,\n                    productionAccessToken,\n                    sandboxAccessToken,\n                    selectedEnvironment,\n                    securitySchemeType: defaultSecurityScheme,\n                });\n                if (user != null) {\n                    return this.apiClient.getSubscriptions(apiID);\n                } else {\n                    return null;\n                }\n            })\n            .catch((error) => {\n                if (process.env.NODE_ENV !== 'production') {\n                    console.error(error);\n                }\n                const { status } = error;\n                if (status === 404) {\n                    this.setState({ notFound: true });\n                }\n            });\n    }\n\n    /**\n     * Set SecurityScheme value\n     * @memberof ApiConsole\n     */\n    setSecurityScheme(securityScheme) {\n        this.setState({ securitySchemeType: securityScheme });\n    }\n\n    /**\n     * Set Selected Environment\n     * @memberof ApiConsole\n     */\n    setSelectedEnvironment(selectedEnvironment) {\n        this.setState({ selectedEnvironment });\n    }\n\n    /**\n     * Set Production Access Token\n     * @memberof ApiConsole\n     */\n    setProductionAccessToken(productionAccessToken) {\n        this.setState({ productionAccessToken });\n    }\n\n    /**\n     * Set Sandbox Access Token\n     * @memberof ApiConsole\n     */\n    setSandboxAccessToken(sandboxAccessToken) {\n        this.setState({ sandboxAccessToken });\n    }\n\n    /**\n     * Set Production API Key\n     * @memberof ApiConsole\n     */\n    setProductionApiKey(productionApiKey) {\n        this.setState({ productionApiKey });\n    }\n\n    /**\n     * Set Sandbox API Key\n     * @memberof ApiConsole\n     */\n    setSandboxApiKey(sandboxApiKey) {\n        this.setState({ sandboxApiKey });\n    }\n\n    /**\n     * Set Username\n     * @memberof ApiConsole\n     */\n    setUsername(username) {\n        this.setState({ username });\n    }\n\n    /**\n     * Set Password\n     * @memberof ApiConsole\n     */\n    setPassword(password) {\n        this.setState({ password });\n    }\n\n    /**\n     * Set Password\n     * @memberof ApiConsole\n     */\n    setSelectedKeyType(selectedKeyType, isUpdateToken, selectedApplication) {\n        if (isUpdateToken) {\n            this.setState({ selectedKeyType }, this.updateAccessToken(selectedApplication));\n        } else {\n            this.setState({ selectedKeyType });\n        }\n    }\n\n    /**\n     * Set Password\n     * @memberof ApiConsole\n     */\n    setSelectedKeyManager(selectedKeyManager, isUpdateToken, selectedApplication) {\n        if (isUpdateToken) {\n            this.setState({ selectedKeyManager }, this.updateAccessToken(selectedApplication));\n        } else {\n            this.setState({ selectedKeyManager });\n        }\n    }\n\n    setKeys(keys) {\n        this.setState({ keys });\n    }\n    /**\n     * Converting an OpenAPI file to a postman collection\n     * @memberof ApiConsole\n   */\n\n    convertToPostman(fr) {\n        openapiToPostman.convert({ type: 'string', data: fr },\n            {}, (err, conversionResult) => {\n                if (!conversionResult.result) {\n                    const collection = swaggerToPostman.convert(fr);\n                    if (!collection) {\n                        console.log('Could not convert');\n                    } else {\n                        fileDownload(\n                            JSON.stringify(collection),\n                            'postman collection',\n                        );\n                    }\n                } else {\n                    fileDownload(\n                        JSON.stringify(conversionResult.output[0].data),\n                        'postman collection',\n                    );\n                }\n            });\n    }\n\n    /**\n     * Load the access token for given key type\n     * @memberof TryOutController\n     */\n    updateAccessToken(selectedApplication) {\n        const {\n            selectedKeyType, selectedKeyManager, keys,\n        } = this.state;\n        let accessToken;\n        if (keys.get(selectedKeyManager) && keys.get(selectedKeyManager).keyType === selectedKeyType) {\n            ({ accessToken } = keys.get(selectedKeyManager).token);\n            if (selectedKeyType === 'PRODUCTION') {\n                this.setProductionAccessToken(accessToken);\n            } else {\n                this.setSandboxAccessToken(accessToken);\n            }\n        } else {\n            Application.get(selectedApplication)\n                .then((application) => {\n                    return application.getKeys(selectedKeyType);\n                })\n                .then((appKeys) => {\n                    if (appKeys.get(selectedKeyManager)\n                    && appKeys.get(selectedKeyManager).keyType === selectedKeyType) {\n                        ({ accessToken } = appKeys.get(selectedKeyManager).token);\n                    }\n                    if (appKeys.get(selectedKeyManager).keyType === 'PRODUCTION') {\n                        this.setProductionAccessToken(accessToken);\n                    } else {\n                        this.setSandboxAccessToken(accessToken);\n                    }\n                    this.setKeys(appKeys);\n                });\n        }\n    }\n\n    /**\n     *\n     * Provids the access token to the Swagger UI\n     * @returns {*} access token\n     * @memberof ApiConsole\n     */\n    accessTokenProvider() {\n        const {\n            securitySchemeType, username, password, productionAccessToken,\n            sandboxAccessToken, selectedKeyType, productionApiKey, sandboxApiKey,\n        } = this.state;\n        if (securitySchemeType === 'BASIC') {\n            const credentials = username + ':' + password;\n            return btoa(credentials);\n        }\n        if (securitySchemeType === 'API-KEY') {\n            if (selectedKeyType === 'PRODUCTION') {\n                return productionApiKey;\n            } else {\n                return sandboxApiKey;\n            }\n        } else if (selectedKeyType === 'PRODUCTION') {\n            return productionAccessToken;\n        } else {\n            return sandboxAccessToken;\n        }\n    }\n\n    /**\n     * Load the swagger file of the given environment\n     * @memberof ApiConsole\n     */\n    updateSwagger(environment) {\n        const {\n            api, environments,\n        } = this.state;\n        let promiseSwagger;\n\n        if (environment && environments.find((e) => e.name === environment)) {\n            promiseSwagger = this.apiClient.getSwaggerByAPIIdAndEnvironment(api.id, environment);\n        } else {\n            promiseSwagger = this.apiClient.getSwaggerByAPIId(api.id);\n        }\n        promiseSwagger.then((swaggerResponse) => {\n            this.setState({ swagger: swaggerResponse.obj });\n        });\n    }\n\n    /**\n     * @inheritdoc\n     * @memberof ApiConsole\n     */\n    render() {\n        const { classes } = this.props;\n        const {\n            api, notFound, swagger, securitySchemeType, selectedEnvironment, environments, scopes,\n            username, password, productionAccessToken, sandboxAccessToken, selectedKeyType,\n            sandboxApiKey, productionApiKey, selectedKeyManager,\n        } = this.state;\n        const user = AuthManager.getUser();\n        const downloadSwagger = JSON.stringify({ ...swagger });\n        const downloadLink = 'data:text/json;charset=utf-8, ' + encodeURIComponent(downloadSwagger);\n        const fileName = 'swagger.json';\n\n        if (api == null || swagger == null) {\n            return <Progress />;\n        }\n        if (notFound) {\n            return 'API Not found !';\n        }\n        let isApiKeyEnabled = false;\n        let authorizationHeader = api.authorizationHeader ? api.authorizationHeader : 'Authorization';\n        if (api && api.securityScheme) {\n            isApiKeyEnabled = api.securityScheme.includes('api_key');\n            if (isApiKeyEnabled && securitySchemeType === 'API-KEY') {\n                authorizationHeader = 'apikey';\n            }\n        }\n        const isPrototypedAPI = api.lifeCycleStatus && api.lifeCycleStatus.toLowerCase() === 'prototyped';\n        return (\n            <>\n                <Paper className={classes.paper}>\n                    <Grid container className={classes.grid}>\n                        {!isPrototypedAPI && !user && (\n                            <Grid item md={6}>\n                                <Paper className={classes.userNotificationPaper}>\n                                    <Typography variant='h5' component='h3'>\n                                        <Icon>warning</Icon>\n                                        {' '}\n                                        <FormattedMessage id='notice' defaultMessage='Notice' />\n                                    </Typography>\n                                    <Typography component='p'>\n                                        <FormattedMessage\n                                            id='api.console.require.access.token'\n                                            defaultMessage={'You need an access token to try the API. Please log '\n                                            + 'in and subscribe to the API to generate an access token. If you already '\n                                            + 'have an access token, please provide it below.'}\n                                        />\n                                    </Typography>\n                                </Paper>\n                            </Grid>\n                        )}\n                    </Grid>\n\n                    <TryOutController\n                        setSecurityScheme={this.setSecurityScheme}\n                        securitySchemeType={securitySchemeType}\n                        setSelectedEnvironment={this.setSelectedEnvironment}\n                        selectedEnvironment={selectedEnvironment}\n                        productionAccessToken={productionAccessToken}\n                        setProductionAccessToken={this.setProductionAccessToken}\n                        sandboxAccessToken={sandboxAccessToken}\n                        setSandboxAccessToken={this.setSandboxAccessToken}\n                        swagger={swagger}\n                        environments={environments}\n                        scopes={scopes}\n                        setUsername={this.setUsername}\n                        setPassword={this.setPassword}\n                        username={username}\n                        password={password}\n                        setSelectedKeyType={this.setSelectedKeyType}\n                        selectedKeyType={selectedKeyType}\n                        setSelectedKeyManager={this.setSelectedKeyManager}\n                        selectedKeyManager={selectedKeyManager}\n                        updateSwagger={this.updateSwagger}\n                        setKeys={this.setKeys}\n                        setProductionApiKey={this.setProductionApiKey}\n                        setSandboxApiKey={this.setSandboxApiKey}\n                        productionApiKey={productionApiKey}\n                        sandboxApiKey={sandboxApiKey}\n                        api={this.state.api}\n                    />\n\n                    {api.type !== 'SOAP' && (\n                        <Grid container>\n                            <Grid xs={8} item />\n                            <Grid xs={2} item>\n                                <Button size='small' onClick={() => this.convertToPostman(downloadSwagger)}>\n                                    <Icons icon={postmanIcon} width={30} height={30} className={classes.buttonIcon} />\n                                    <FormattedMessage\n                                        id='Apis.Details.APIConsole.APIConsole.download.postman'\n                                        defaultMessage='Postman collection'\n                                    />\n                                </Button>\n\n                            </Grid>\n                            <Grid xs={2} item>\n                                <a href={downloadLink} download={fileName}>\n                                    <Button size='small'>\n                                        <Icons icon={openapiinitiativeIcon} width={30} height={30} className={classes.buttonIcon} />\n                                        <FormattedMessage\n                                            id='Apis.Details.APIConsole.APIConsole.download.swagger'\n                                            defaultMessage='OpenAPI'\n                                        />\n                                    </Button>\n                                </a>\n                            </Grid>\n                        </Grid>\n                    )}\n                </Paper>\n                <Paper className={classes.swaggerUIPaper}>\n                    <SwaggerUI\n                        api={this.state.api}\n                        accessTokenProvider={this.accessTokenProvider}\n                        spec={swagger}\n                        authorizationHeader={authorizationHeader}\n                        securitySchemeType={securitySchemeType}\n                    />\n                </Paper>\n            </>\n        );\n    }\n}\n\nApiConsole.propTypes = {\n    classes: PropTypes.shape({\n        paper: PropTypes.string.isRequired,\n        titleSub: PropTypes.string.isRequired,\n        grid: PropTypes.string.isRequired,\n        userNotificationPaper: PropTypes.string.isRequired,\n        buttonIcon: PropTypes.string.isRequired,\n        iconify: PropTypes.string.isRequired,\n    }).isRequired,\n};\n\nApiConsole.contextType = ApiContext;\n\nexport default withStyles(styles)(ApiConsole);\n"],"sourceRoot":""}